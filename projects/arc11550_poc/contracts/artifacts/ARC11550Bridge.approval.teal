#pragma version 10
intcblock 0 1 8 6 80 4 32 72
bytecblock 0x 0x617361 0x617070 0x64617461417070 0x636f6c6c656374696f6e 0x0000000000000000 0x151f7c75 0xc14e68d9

// This TEAL was generated by TEALScript v0.106.3
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 3 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(uint64)void
*abi_route_createApplication:
	// dataApp: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64)void
	callsub createApplication
	intc 1 // 1
	return

// createApplication(dataApp: AppID): void
createApplication:
	proto 1 0

	// contracts/ARC11550Bridge.algo.ts:30
	// this.dataApp.value = dataApp
	bytec 3 //  "dataApp"
	frame_dig -1 // dataApp: AppID
	app_global_put

	// contracts/ARC11550Bridge.algo.ts:31
	// this.collection.value = sendMethodCall<typeof ARC11550Data.prototype.arc11550_newCollection>({
	//       applicationID: dataApp,
	//       methodArgs: [this.app.address, btoi(hex('0xFFFFFFFFFFFFFFFF'))],
	//     })
	bytec 4 //  "collection"
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0xc69571f8 // method "arc11550_newCollection(address,uint64)uint64"
	itxn_field ApplicationArgs

	// contracts/ARC11550Bridge.algo.ts:32
	// applicationID: dataApp
	frame_dig -1 // dataApp: AppID
	itxn_field ApplicationID

	// contracts/ARC11550Bridge.algo.ts:33
	// methodArgs: [this.app.address, btoi(hex('0xFFFFFFFFFFFFFFFF'))]
	global CurrentApplicationAddress
	itxn_field ApplicationArgs
	pushbytes 0xffffffffffffffff
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	btoi
	app_global_put
	retsub

// optInToAsa(uint64)void
*abi_route_optInToAsa:
	// asa: uint64
	txna ApplicationArgs 1
	btoi

	// execute optInToAsa(uint64)void
	callsub optInToAsa
	intc 1 // 1
	return

// optInToAsa(asa: AssetID): void
optInToAsa:
	proto 1 0

	// contracts/ARC11550Bridge.algo.ts:38
	// sendAssetTransfer({
	//       xferAsset: asa,
	//       assetAmount: 0,
	//       assetReceiver: this.app.address,
	//     })
	itxn_begin
	intc 5 //  axfer
	itxn_field TypeEnum

	// contracts/ARC11550Bridge.algo.ts:39
	// xferAsset: asa
	frame_dig -1 // asa: AssetID
	itxn_field XferAsset

	// contracts/ARC11550Bridge.algo.ts:40
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// contracts/ARC11550Bridge.algo.ts:41
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// asaToArc11550(axfer,address)(uint64,uint64)
*abi_route_asaToArc11550:
	// The ABI return prefix
	bytec 6 // 0x151f7c75

	// receiver: address
	txna ApplicationArgs 1
	dup
	len
	intc 6 // 32
	==

	// argument 0 (receiver) for asaToArc11550 must be a address
	assert

	// axfer: axfer
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 5 //  axfer
	==

	// argument 1 (axfer) for asaToArc11550 must be a axfer transaction
	assert

	// execute asaToArc11550(axfer,address)(uint64,uint64)
	callsub asaToArc11550
	concat
	log
	intc 1 // 1
	return

// asaToArc11550(axfer: AssetTransferTxn, receiver: Address): Arc11550Id
asaToArc11550:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 4

	// contracts/ARC11550Bridge.algo.ts:46
	// verifyAssetTransferTxn(axfer, {
	//       assetReceiver: this.app.address,
	//     })
	// verify assetReceiver
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"axfer","field":"assetReceiver","expected":"this.app.address"}
	assert

	// contracts/ARC11550Bridge.algo.ts:50
	// asa = axfer.xferAsset
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns XferAsset
	frame_bury 0 // asa: uint64

	// *if0_condition
	// contracts/ARC11550Bridge.algo.ts:53
	// !this.asaToArc11550Map(axfer.xferAsset).exists
	bytec 1 //  "asa"
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	box_len
	swap
	pop
	!
	bz *if0_end

	// *if0_consequent
	// contracts/ARC11550Bridge.algo.ts:54
	// id = sendMethodCall<typeof ARC11550Data.prototype.arc11550_mint>({
	//         applicationID: this.dataApp.value,
	//         methodArgs: [
	//           this.collection.value,
	//           {
	//             total: asa.total,
	//             decimals: asa.decimals,
	//             manager: this.app.address,
	//             name: asa.name as bytes<32>,
	//             symbol: asa.unitName as bytes<8>,
	//             transferHookApp: AppID.zeroIndex,
	//           },
	//         ],
	//       })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0xbf8003d5 // method "arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64"
	itxn_field ApplicationArgs

	// contracts/ARC11550Bridge.algo.ts:55
	// applicationID: this.dataApp.value
	bytec 3 //  "dataApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/ARC11550Bridge.algo.ts:56
	// methodArgs: [
	//           this.collection.value,
	//           {
	//             total: asa.total,
	//             decimals: asa.decimals,
	//             manager: this.app.address,
	//             name: asa.name as bytes<32>,
	//             symbol: asa.unitName as bytes<8>,
	//             transferHookApp: AppID.zeroIndex,
	//           },
	//         ]
	bytec 4 //  "collection"
	app_global_get
	itob
	itxn_field ApplicationArgs
	frame_dig 0 // asa: uint64
	asset_params_get AssetName
	pop
	pushbytes 0x0000000000000000000000000000000000000000000000000000000000000000
	concat
	dup
	extract 32 0
	bytec 0 // 0x
	b==
	assert
	extract 0 32
	frame_dig 0 // asa: uint64
	asset_params_get AssetUnitName
	pop
	bytec 5 // 0x0000000000000000
	concat
	dup
	extract 8 0
	bytec 0 // 0x
	b==
	assert
	extract 0 8
	concat
	frame_dig 0 // asa: uint64
	asset_params_get AssetTotal
	pop
	itob
	concat
	frame_dig 0 // asa: uint64
	asset_params_get AssetDecimals
	pop
	itob
	concat
	global CurrentApplicationAddress
	concat
	bytec 5 // 0x0000000000000000
	concat
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	btoi
	frame_bury 1 // id: uint64

	// contracts/ARC11550Bridge.algo.ts:69
	// appAndId: Arc11550Id = { dataApp: this.dataApp.value, id: id }
	frame_dig 1 // id: uint64
	itob
	bytec 3 //  "dataApp"
	app_global_get
	itob
	concat
	frame_bury 2 // appAndId: Arc11550Id

	// contracts/ARC11550Bridge.algo.ts:70
	// this.asaToArc11550Map(asa).value = appAndId
	bytec 1 //  "asa"
	frame_dig 0 // asa: uint64
	itob
	concat
	frame_dig 2 // appAndId: Arc11550Id
	box_put

	// contracts/ARC11550Bridge.algo.ts:71
	// this.arc11550ToAsaMap(appAndId).value = asa
	bytec 2 //  "app"
	frame_dig 2 // appAndId: Arc11550Id
	concat
	frame_dig 0 // asa: uint64
	itob
	box_put

*if0_end:
	// contracts/ARC11550Bridge.algo.ts:74
	// arc11550 = this.asaToArc11550Map(asa).value
	bytec 1 //  "asa"
	frame_dig 0 // asa: uint64
	itob
	concat
	frame_bury 3 // storage key//arc11550

	// contracts/ARC11550Bridge.algo.ts:76
	// xferApp = sendMethodCall<typeof ARC11550Data.prototype.arc11550_transferApp>({
	//       applicationID: arc11550.dataApp,
	//     })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	bytec 7 //  method "arc11550_transferApp()uint64"
	itxn_field ApplicationArgs

	// contracts/ARC11550Bridge.algo.ts:77
	// applicationID: arc11550.dataApp
	intc 2 //  headOffset
	intc 2 // 8
	bytec 1 //  "asa"
	frame_dig 0 // asa: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	itxn_field ApplicationID

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	btoi
	frame_bury 4 // xferApp: uint64

	// contracts/ARC11550Bridge.algo.ts:81
	// sendMethodCall<typeof ARC11550Transfer.prototype.arc11550_transfer>({
	//       applicationID: xferApp,
	//       methodArgs: [
	//         arc11550.dataApp,
	//         [{ tokenId: arc11550.id, amount: axfer.assetAmount, from: this.app.address, to: receiver }],
	//       ],
	//     })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x61bacfc8 // method "arc11550_transfer(uint64,(uint64,address,address,uint64)[])void"
	itxn_field ApplicationArgs

	// contracts/ARC11550Bridge.algo.ts:82
	// applicationID: xferApp
	frame_dig 4 // xferApp: uint64
	itxn_field ApplicationID

	// contracts/ARC11550Bridge.algo.ts:83
	// methodArgs: [
	//         arc11550.dataApp,
	//         [{ tokenId: arc11550.id, amount: axfer.assetAmount, from: this.app.address, to: receiver }],
	//       ]
	intc 2 //  headOffset
	intc 2 // 8
	bytec 1 //  "asa"
	frame_dig 0 // asa: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	itxn_field ApplicationArgs
	intc 0 // 0
	intc 2 // 8
	bytec 1 //  "asa"
	frame_dig 0 // asa: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	global CurrentApplicationAddress
	concat
	frame_dig -2 // receiver: Address
	concat
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns AssetAmount
	itob
	concat
	dup
	len
	intc 4 // 80
	/
	itob
	extract 6 2
	swap
	concat
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/ARC11550Bridge.algo.ts:89
	// return arc11550;
	frame_dig 3 // storage key//arc11550
	box_get

	// box value does not exist: this.asaToArc11550Map(asa).value
	assert

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 4
	retsub

// arc11550ToAsa(appl,uint64,address)uint64
*abi_route_arc11550ToAsa:
	// The ABI return prefix
	bytec 6 // 0x151f7c75

	// receiver: address
	txna ApplicationArgs 2
	dup
	len
	intc 6 // 32
	==

	// argument 0 (receiver) for arc11550ToAsa must be a address
	assert

	// xferIndex: uint64
	txna ApplicationArgs 1
	btoi

	// xferCall: appl
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 3 //  appl
	==

	// argument 2 (xferCall) for arc11550ToAsa must be a appl transaction
	assert

	// execute arc11550ToAsa(appl,uint64,address)uint64
	callsub arc11550ToAsa
	itob
	concat
	log
	intc 1 // 1
	return

// arc11550ToAsa(xferCall: AppCallTxn, xferIndex: uint64, receiver: Address): AssetID
arc11550ToAsa:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 7

	// contracts/ARC11550Bridge.algo.ts:93
	// xfers: Transfer[] = castBytes<Transfer[]>(extract3(xferCall.applicationArgs[2], 2, 0))
	frame_dig -1 // xferCall: AppCallTxn
	gtxns ApplicationArgs 2
	extract 2 0
	frame_bury 0 // xfers: Transfer[]
	frame_dig -2 // xferIndex: uint64
	frame_bury 1 // accessor: accessor//0//xfer

	// contracts/ARC11550Bridge.algo.ts:95
	// assert(xfer.to === this.app.address)
	frame_dig 0 // xfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//xfer
	intc 4 // 80
	* // acc * typeLength
	+
	pushint 40 // headOffset
	+
	load 255 // full array
	swap
	intc 6 // 32
	extract3
	global CurrentApplicationAddress
	==
	assert

	// contracts/ARC11550Bridge.algo.ts:97
	// dataApp = AppID.fromUint64(btoi(xferCall.applicationArgs[1]))
	frame_dig -1 // xferCall: AppCallTxn
	gtxns ApplicationArgs 1
	btoi
	frame_bury 2 // dataApp: uint64

	// contracts/ARC11550Bridge.algo.ts:100
	// assert(
	//       xferCall.applicationID ==
	//         sendMethodCall<typeof ARC11550Data.prototype.arc11550_transferApp>({ applicationID: dataApp })
	//     )
	frame_dig -1 // xferCall: AppCallTxn
	gtxns ApplicationID
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	bytec 7 //  method "arc11550_transferApp()uint64"
	itxn_field ApplicationArgs

	// contracts/ARC11550Bridge.algo.ts:102
	// applicationID: dataApp
	frame_dig 2 // dataApp: uint64
	itxn_field ApplicationID

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	btoi
	==
	assert

	// contracts/ARC11550Bridge.algo.ts:105
	// arc11550: Arc11550Id = { dataApp: dataApp, id: xfer.tokenId }
	frame_dig 0 // xfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//xfer
	intc 4 // 80
	* // acc * typeLength
	+
	intc 0 //  headOffset
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itob
	frame_dig 2 // dataApp: uint64
	itob
	concat
	frame_bury 3 // arc11550: Arc11550Id

	// *if1_condition
	// contracts/ARC11550Bridge.algo.ts:107
	// !this.arc11550ToAsaMap(arc11550).exists
	bytec 2 //  "app"
	frame_dig 3 // arc11550: Arc11550Id
	concat
	box_len
	swap
	pop
	!
	bz *if1_end

	// *if1_consequent
	// contracts/ARC11550Bridge.algo.ts:108
	// params = sendMethodCall<typeof ARC11550Data.prototype.arc11550_params>({
	//         applicationID: arc11550.dataApp,
	//         methodArgs: [xfer.tokenId],
	//       })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0xa0ac943c // method "arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)"
	itxn_field ApplicationArgs

	// contracts/ARC11550Bridge.algo.ts:109
	// applicationID: arc11550.dataApp
	frame_dig 3 // arc11550: Arc11550Id
	extract 8 8
	btoi
	itxn_field ApplicationID

	// contracts/ARC11550Bridge.algo.ts:110
	// methodArgs: [xfer.tokenId]
	frame_dig 0 // xfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//xfer
	intc 4 // 80
	* // acc * typeLength
	+
	intc 0 //  headOffset
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 4 // params: (byte[32],byte[8],uint64,uint64,address,uint64)

	// contracts/ARC11550Bridge.algo.ts:113
	// sendAssetCreation({
	//         configAssetTotal: params.total as uint64,
	//         configAssetDecimals: params.decimals as uint64,
	//         configAssetName: params.name as bytes,
	//         configAssetUnitName: params.symbol as bytes,
	//         configAssetReserve: this.app.address,
	//       })
	itxn_begin
	pushint 3 // acfg
	itxn_field TypeEnum

	// contracts/ARC11550Bridge.algo.ts:114
	// configAssetTotal: params.total as uint64
	frame_dig 4 // params: (byte[32],byte[8],uint64,uint64,address,uint64)
	extract 40 8
	btoi
	itxn_field ConfigAssetTotal

	// contracts/ARC11550Bridge.algo.ts:115
	// configAssetDecimals: params.decimals as uint64
	frame_dig 4 // params: (byte[32],byte[8],uint64,uint64,address,uint64)
	extract 48 8
	btoi
	itxn_field ConfigAssetDecimals

	// contracts/ARC11550Bridge.algo.ts:116
	// configAssetName: params.name as bytes
	frame_dig 4 // params: (byte[32],byte[8],uint64,uint64,address,uint64)
	extract 0 32
	itxn_field ConfigAssetName

	// contracts/ARC11550Bridge.algo.ts:117
	// configAssetUnitName: params.symbol as bytes
	frame_dig 4 // params: (byte[32],byte[8],uint64,uint64,address,uint64)
	extract 32 8
	itxn_field ConfigAssetUnitName

	// contracts/ARC11550Bridge.algo.ts:118
	// configAssetReserve: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetReserve

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID

	// contracts/ARC11550Bridge.algo.ts:121
	// asa = this.itxn.createdAssetID
	itxn CreatedAssetID
	frame_bury 5 // asa: uint64

	// contracts/ARC11550Bridge.algo.ts:122
	// this.arc11550ToAsaMap(arc11550).value = asa
	bytec 2 //  "app"
	frame_dig 3 // arc11550: Arc11550Id
	concat
	frame_dig 5 // asa: uint64
	itob
	box_put

	// contracts/ARC11550Bridge.algo.ts:123
	// this.asaToArc11550Map(asa).value = arc11550
	bytec 1 //  "asa"
	frame_dig 5 // asa: uint64
	itob
	concat
	frame_dig 3 // arc11550: Arc11550Id
	box_put

*if1_end:
	// contracts/ARC11550Bridge.algo.ts:126
	// asa = this.arc11550ToAsaMap(arc11550).value
	bytec 2 //  "app"
	frame_dig 3 // arc11550: Arc11550Id
	concat
	box_get

	// box value does not exist: this.arc11550ToAsaMap(arc11550).value
	assert
	btoi
	frame_bury 6 // asa: uint64

	// *if2_condition
	// contracts/ARC11550Bridge.algo.ts:128
	// !receiver.isOptedInToAsset(asa)
	frame_dig -3 // receiver: Address
	frame_dig 6 // asa: uint64
	asset_holding_get AssetBalance
	swap
	pop
	!
	bz *if2_else

	// *if2_consequent
	// contracts/ARC11550Bridge.algo.ts:129
	// key: AsaAndAddr = { asa: asa, address: receiver }
	frame_dig 6 // asa: uint64
	itob
	frame_dig -3 // receiver: Address
	concat
	frame_bury 7 // key: AsaAndAddr

	// *if3_condition
	// contracts/ARC11550Bridge.algo.ts:130
	// !this.withdrawAmounts(key).exists
	frame_dig 7 // key: AsaAndAddr
	box_len
	swap
	pop
	!
	bz *if3_end

	// *if3_consequent
	// contracts/ARC11550Bridge.algo.ts:130
	// this.withdrawAmounts(key).create()
	frame_dig 7 // key: AsaAndAddr
	intc 2 // 8
	box_create
	pop

*if3_end:
	// contracts/ARC11550Bridge.algo.ts:132
	// this.withdrawAmounts(key).value += xfer.amount
	frame_dig 7 // key: AsaAndAddr
	box_get

	// box value does not exist: this.withdrawAmounts(key).value
	assert
	btoi
	frame_dig 0 // xfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//xfer
	intc 4 // 80
	* // acc * typeLength
	+
	intc 7 //  headOffset
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	+
	frame_dig 7 // key: AsaAndAddr
	swap
	itob
	box_put
	b *if2_end

*if2_else:
	// contracts/ARC11550Bridge.algo.ts:134
	// sendAssetTransfer({ xferAsset: asa, assetReceiver: receiver, assetAmount: xfer.amount })
	itxn_begin
	intc 5 //  axfer
	itxn_field TypeEnum

	// contracts/ARC11550Bridge.algo.ts:134
	// xferAsset: asa
	frame_dig 6 // asa: uint64
	itxn_field XferAsset

	// contracts/ARC11550Bridge.algo.ts:134
	// assetReceiver: receiver
	frame_dig -3 // receiver: Address
	itxn_field AssetReceiver

	// contracts/ARC11550Bridge.algo.ts:134
	// assetAmount: xfer.amount
	frame_dig 0 // xfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//xfer
	intc 4 // 80
	* // acc * typeLength
	+
	intc 7 //  headOffset
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if2_end:
	// contracts/ARC11550Bridge.algo.ts:137
	// return asa;
	frame_dig 6 // asa: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 7
	retsub

// withdrawAsa(uint64,address)void
*abi_route_withdrawAsa:
	// withdrawalFor: address
	txna ApplicationArgs 2
	dup
	len
	intc 6 // 32
	==

	// argument 0 (withdrawalFor) for withdrawAsa must be a address
	assert

	// asa: uint64
	txna ApplicationArgs 1
	btoi

	// execute withdrawAsa(uint64,address)void
	callsub withdrawAsa
	intc 1 // 1
	return

// withdrawAsa(asa: AssetID, withdrawalFor: Address): void
withdrawAsa:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts/ARC11550Bridge.algo.ts:141
	// key: AsaAndAddr = { asa: asa, address: withdrawalFor }
	frame_dig -1 // asa: AssetID
	itob
	frame_dig -2 // withdrawalFor: Address
	concat
	frame_bury 0 // key: AsaAndAddr

	// contracts/ARC11550Bridge.algo.ts:142
	// sendAssetTransfer({ xferAsset: asa, assetReceiver: withdrawalFor, assetAmount: this.withdrawAmounts(key).value })
	itxn_begin
	intc 5 //  axfer
	itxn_field TypeEnum

	// contracts/ARC11550Bridge.algo.ts:142
	// xferAsset: asa
	frame_dig -1 // asa: AssetID
	itxn_field XferAsset

	// contracts/ARC11550Bridge.algo.ts:142
	// assetReceiver: withdrawalFor
	frame_dig -2 // withdrawalFor: Address
	itxn_field AssetReceiver

	// contracts/ARC11550Bridge.algo.ts:142
	// assetAmount: this.withdrawAmounts(key).value
	frame_dig 0 // key: AsaAndAddr
	box_get

	// box value does not exist: this.withdrawAmounts(key).value
	assert
	btoi
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/ARC11550Bridge.algo.ts:143
	// this.withdrawAmounts(key).delete()
	frame_dig 0 // key: AsaAndAddr
	box_del
	retsub

*create_NoOp:
	pushbytes 0x973b616f // method "createApplication(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xb281a56d // method "optInToAsa(uint64)void"
	pushbytes 0x035ed87e // method "asaToArc11550(axfer,address)(uint64,uint64)"
	pushbytes 0x4c2e9145 // method "arc11550ToAsa(appl,uint64,address)uint64"
	pushbytes 0xf4a413e3 // method "withdrawAsa(uint64,address)void"
	txna ApplicationArgs 0
	match *abi_route_optInToAsa *abi_route_asaToArc11550 *abi_route_arc11550ToAsa *abi_route_withdrawAsa

	// this contract does not implement the given ABI method for call NoOp
	err
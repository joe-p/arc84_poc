/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ARC11550Transfer","desc":"","methods":[{"name":"arc11550_transfer","args":[{"name":"dataApp","type":"uint64"},{"name":"transfers","type":"(uint64,address,address,uint64)[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":0,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/ARC11550Transfer.algo.ts:4","pc":[0]},{"teal":2,"source":"contracts/ARC11550Transfer.algo.ts:4","pc":[1,2,3,4,5,6]},{"teal":3,"source":"contracts/ARC11550Transfer.algo.ts:4","pc":[7,8,9]},{"teal":15,"source":"contracts/ARC11550Transfer.algo.ts:4","pc":[10,11]},{"teal":16,"source":"contracts/ARC11550Transfer.algo.ts:4","pc":[12]},{"teal":17,"source":"contracts/ARC11550Transfer.algo.ts:4","pc":[13]},{"teal":18,"source":"contracts/ARC11550Transfer.algo.ts:4","pc":[14]},{"teal":19,"source":"contracts/ARC11550Transfer.algo.ts:4","pc":[15,16]},{"teal":20,"source":"contracts/ARC11550Transfer.algo.ts:4","pc":[17]},{"teal":21,"source":"contracts/ARC11550Transfer.algo.ts:4","pc":[18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43]},{"teal":25,"source":"contracts/ARC11550Transfer.algo.ts:4","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[44]},{"teal":30,"source":"contracts/ARC11550Transfer.algo.ts:5","pc":[45,46,47]},{"teal":31,"source":"contracts/ARC11550Transfer.algo.ts:5","pc":[48,49,50]},{"teal":34,"source":"contracts/ARC11550Transfer.algo.ts:5","pc":[51,52,53]},{"teal":35,"source":"contracts/ARC11550Transfer.algo.ts:5","pc":[54]},{"teal":38,"source":"contracts/ARC11550Transfer.algo.ts:5","pc":[55,56,57]},{"teal":39,"source":"contracts/ARC11550Transfer.algo.ts:5","pc":[58]},{"teal":40,"source":"contracts/ARC11550Transfer.algo.ts:5","pc":[59]},{"teal":44,"source":"contracts/ARC11550Transfer.algo.ts:5","pc":[60,61,62]},{"teal":47,"source":"contracts/ARC11550Transfer.algo.ts:5","pc":[63]},{"teal":48,"source":"contracts/ARC11550Transfer.algo.ts:5","pc":[64]},{"teal":52,"source":"contracts/ARC11550Transfer.algo.ts:6","pc":[65]},{"teal":53,"source":"contracts/ARC11550Transfer.algo.ts:6","pc":[66,67]},{"teal":58,"source":"contracts/ARC11550Transfer.algo.ts:6","pc":[68,69]},{"teal":59,"source":"contracts/ARC11550Transfer.algo.ts:6","pc":[70,71]},{"teal":60,"source":"contracts/ARC11550Transfer.algo.ts:6","pc":[72]},{"teal":61,"source":"contracts/ARC11550Transfer.algo.ts:6","pc":[73]},{"teal":62,"source":"contracts/ARC11550Transfer.algo.ts:6","pc":[74]},{"teal":63,"source":"contracts/ARC11550Transfer.algo.ts:6","pc":[75]},{"teal":64,"source":"contracts/ARC11550Transfer.algo.ts:6","pc":[76,77,78]},{"teal":71,"source":"contracts/ARC11550Transfer.algo.ts:7","pc":[79]},{"teal":72,"source":"contracts/ARC11550Transfer.algo.ts:7","pc":[80]},{"teal":73,"source":"contracts/ARC11550Transfer.algo.ts:7","pc":[81,82]},{"teal":74,"source":"contracts/ARC11550Transfer.algo.ts:7","pc":[83,84,85,86,87,88]},{"teal":75,"source":"contracts/ARC11550Transfer.algo.ts:7","pc":[89,90]},{"teal":79,"source":"contracts/ARC11550Transfer.algo.ts:8","pc":[91,92]},{"teal":80,"source":"contracts/ARC11550Transfer.algo.ts:8","pc":[93,94]},{"teal":81,"source":"contracts/ARC11550Transfer.algo.ts:8","pc":[95]},{"teal":82,"source":"contracts/ARC11550Transfer.algo.ts:8","pc":[96,97]},{"teal":83,"source":"contracts/ARC11550Transfer.algo.ts:8","pc":[98]},{"teal":84,"source":"contracts/ARC11550Transfer.algo.ts:8","pc":[99]},{"teal":85,"source":"contracts/ARC11550Transfer.algo.ts:8","pc":[100]},{"teal":86,"source":"contracts/ARC11550Transfer.algo.ts:8","pc":[101]},{"teal":87,"source":"contracts/ARC11550Transfer.algo.ts:8","pc":[102]},{"teal":88,"source":"contracts/ARC11550Transfer.algo.ts:8","pc":[103,104]},{"teal":89,"source":"contracts/ARC11550Transfer.algo.ts:8","pc":[105]},{"teal":90,"source":"contracts/ARC11550Transfer.algo.ts:8","pc":[106,107]},{"teal":91,"source":"contracts/ARC11550Transfer.algo.ts:8","pc":[108]},{"teal":92,"source":"contracts/ARC11550Transfer.algo.ts:8","pc":[109]},{"teal":93,"source":"contracts/ARC11550Transfer.algo.ts:8","pc":[110]},{"teal":94,"source":"contracts/ARC11550Transfer.algo.ts:8","pc":[111,112]},{"teal":98,"source":"contracts/ARC11550Transfer.algo.ts:9","pc":[113,114]},{"teal":99,"source":"contracts/ARC11550Transfer.algo.ts:9","pc":[115,116]},{"teal":102,"source":"contracts/ARC11550Transfer.algo.ts:7","pc":[117]},{"teal":103,"source":"contracts/ARC11550Transfer.algo.ts:7","pc":[118,119]},{"teal":106,"source":"contracts/ARC11550Transfer.algo.ts:7","pc":[120]},{"teal":107,"source":"contracts/ARC11550Transfer.algo.ts:7","pc":[121,122]},{"teal":108,"source":"contracts/ARC11550Transfer.algo.ts:7","pc":[123]},{"teal":109,"source":"contracts/ARC11550Transfer.algo.ts:7","pc":[124]},{"teal":110,"source":"contracts/ARC11550Transfer.algo.ts:7","pc":[125,126]},{"teal":111,"source":"contracts/ARC11550Transfer.algo.ts:7","pc":[127,128,129]},{"teal":112,"source":"contracts/ARC11550Transfer.algo.ts:7","pc":[130]},{"teal":113,"source":"contracts/ARC11550Transfer.algo.ts:7","pc":[131,132]},{"teal":118,"source":"contracts/ARC11550Transfer.algo.ts:13","pc":[133,134]},{"teal":119,"source":"contracts/ARC11550Transfer.algo.ts:13","pc":[135,136,137]},{"teal":129,"source":"contracts/ARC11550Transfer.algo.ts:15","pc":[138]},{"teal":130,"source":"contracts/ARC11550Transfer.algo.ts:15","pc":[139]},{"teal":131,"source":"contracts/ARC11550Transfer.algo.ts:15","pc":[140,141]},{"teal":132,"source":"contracts/ARC11550Transfer.algo.ts:15","pc":[142,143,144,145,146,147]},{"teal":133,"source":"contracts/ARC11550Transfer.algo.ts:15","pc":[148,149]},{"teal":137,"source":"contracts/ARC11550Transfer.algo.ts:16","pc":[150,151]},{"teal":138,"source":"contracts/ARC11550Transfer.algo.ts:16","pc":[152,153]},{"teal":142,"source":"contracts/ARC11550Transfer.algo.ts:17","pc":[154,155]},{"teal":143,"source":"contracts/ARC11550Transfer.algo.ts:17","pc":[156,157]},{"teal":144,"source":"contracts/ARC11550Transfer.algo.ts:17","pc":[158,159]},{"teal":145,"source":"contracts/ARC11550Transfer.algo.ts:17","pc":[160]},{"teal":146,"source":"contracts/ARC11550Transfer.algo.ts:17","pc":[161]},{"teal":147,"source":"contracts/ARC11550Transfer.algo.ts:17","pc":[162]},{"teal":148,"source":"contracts/ARC11550Transfer.algo.ts:17","pc":[163]},{"teal":149,"source":"contracts/ARC11550Transfer.algo.ts:17","pc":[164]},{"teal":150,"source":"contracts/ARC11550Transfer.algo.ts:17","pc":[165,166,167]},{"teal":151,"source":"contracts/ARC11550Transfer.algo.ts:17","pc":[168]},{"teal":152,"source":"contracts/ARC11550Transfer.algo.ts:17","pc":[169]},{"teal":153,"source":"contracts/ARC11550Transfer.algo.ts:17","pc":[170,171]},{"teal":154,"source":"contracts/ARC11550Transfer.algo.ts:17","pc":[172,173]},{"teal":155,"source":"contracts/ARC11550Transfer.algo.ts:17","pc":[174]},{"teal":156,"source":"contracts/ARC11550Transfer.algo.ts:17","pc":[175,176]},{"teal":159,"source":"contracts/ARC11550Transfer.algo.ts:15","pc":[177]},{"teal":160,"source":"contracts/ARC11550Transfer.algo.ts:15","pc":[178,179]},{"teal":163,"source":"contracts/ARC11550Transfer.algo.ts:15","pc":[180]},{"teal":164,"source":"contracts/ARC11550Transfer.algo.ts:15","pc":[181,182]},{"teal":165,"source":"contracts/ARC11550Transfer.algo.ts:15","pc":[183]},{"teal":166,"source":"contracts/ARC11550Transfer.algo.ts:15","pc":[184]},{"teal":167,"source":"contracts/ARC11550Transfer.algo.ts:15","pc":[185,186]},{"teal":168,"source":"contracts/ARC11550Transfer.algo.ts:15","pc":[187,188,189]},{"teal":169,"source":"contracts/ARC11550Transfer.algo.ts:15","pc":[190]},{"teal":170,"source":"contracts/ARC11550Transfer.algo.ts:15","pc":[191]},{"teal":171,"source":"contracts/ARC11550Transfer.algo.ts:14","pc":[192]},{"teal":178,"source":"contracts/ARC11550Transfer.algo.ts:6","pc":[193,194]},{"teal":179,"source":"contracts/ARC11550Transfer.algo.ts:6","pc":[195]},{"teal":180,"source":"contracts/ARC11550Transfer.algo.ts:6","pc":[196]},{"teal":181,"source":"contracts/ARC11550Transfer.algo.ts:6","pc":[197,198]},{"teal":182,"source":"contracts/ARC11550Transfer.algo.ts:6","pc":[199,200,201]},{"teal":190,"source":"contracts/ARC11550Transfer.algo.ts:23","pc":[202]},{"teal":191,"source":"contracts/ARC11550Transfer.algo.ts:23","pc":[203]},{"teal":192,"source":"contracts/ARC11550Transfer.algo.ts:23","pc":[204,205]},{"teal":193,"source":"contracts/ARC11550Transfer.algo.ts:23","pc":[206,207,208,209,210,211]},{"teal":194,"source":"contracts/ARC11550Transfer.algo.ts:23","pc":[212,213]},{"teal":198,"source":"contracts/ARC11550Transfer.algo.ts:24","pc":[214,215]},{"teal":199,"source":"contracts/ARC11550Transfer.algo.ts:24","pc":[216,217]},{"teal":203,"source":"contracts/ARC11550Transfer.algo.ts:25","pc":[218,219]},{"teal":204,"source":"contracts/ARC11550Transfer.algo.ts:25","pc":[220,221]},{"teal":205,"source":"contracts/ARC11550Transfer.algo.ts:25","pc":[222,223]},{"teal":206,"source":"contracts/ARC11550Transfer.algo.ts:25","pc":[224]},{"teal":207,"source":"contracts/ARC11550Transfer.algo.ts:25","pc":[225]},{"teal":208,"source":"contracts/ARC11550Transfer.algo.ts:25","pc":[226]},{"teal":209,"source":"contracts/ARC11550Transfer.algo.ts:25","pc":[227]},{"teal":210,"source":"contracts/ARC11550Transfer.algo.ts:25","pc":[228]},{"teal":211,"source":"contracts/ARC11550Transfer.algo.ts:25","pc":[229,230,231]},{"teal":212,"source":"contracts/ARC11550Transfer.algo.ts:25","pc":[232]},{"teal":213,"source":"contracts/ARC11550Transfer.algo.ts:25","pc":[233]},{"teal":214,"source":"contracts/ARC11550Transfer.algo.ts:25","pc":[234,235]},{"teal":217,"source":"contracts/ARC11550Transfer.algo.ts:23","pc":[236]},{"teal":218,"source":"contracts/ARC11550Transfer.algo.ts:23","pc":[237,238]},{"teal":221,"source":"contracts/ARC11550Transfer.algo.ts:23","pc":[239]},{"teal":222,"source":"contracts/ARC11550Transfer.algo.ts:5","pc":[240]},{"teal":225,"source":"contracts/ARC11550Transfer.algo.ts:4","pc":[241]},{"teal":226,"source":"contracts/ARC11550Transfer.algo.ts:4","pc":[242]},{"teal":229,"source":"contracts/ARC11550Transfer.algo.ts:4","pc":[243,244,245,246,247,248]},{"teal":230,"source":"contracts/ARC11550Transfer.algo.ts:4","pc":[249,250,251]},{"teal":231,"source":"contracts/ARC11550Transfer.algo.ts:4","pc":[252,253,254,255]},{"teal":234,"source":"contracts/ARC11550Transfer.algo.ts:4","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[256]},{"teal":237,"source":"contracts/ARC11550Transfer.algo.ts:4","pc":[257,258,259,260,261,262]},{"teal":238,"source":"contracts/ARC11550Transfer.algo.ts:4","pc":[263,264,265]},{"teal":239,"source":"contracts/ARC11550Transfer.algo.ts:4","pc":[266,267,268,269]},{"teal":242,"source":"contracts/ARC11550Transfer.algo.ts:4","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[270]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAwIDEgNiA4MApieXRlY2Jsb2NrIDB4CgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjEwNi4zCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGdvcmFuZGZvdW5kYXRpb24vVEVBTFNjcmlwdAoKLy8gVGhpcyBjb250cmFjdCBpcyBjb21wbGlhbnQgd2l0aCBhbmQvb3IgaW1wbGVtZW50cyB0aGUgZm9sbG93aW5nIEFSQ3M6IFsgQVJDNCBdCgovLyBUaGUgZm9sbG93aW5nIHRlbiBsaW5lcyBvZiBURUFMIGhhbmRsZSBpbml0aWFsIHByb2dyYW0gZmxvdwovLyBUaGlzIHBhdHRlcm4gaXMgdXNlZCB0byBtYWtlIGl0IGVhc3kgZm9yIGFueW9uZSB0byBwYXJzZSB0aGUgc3RhcnQgb2YgdGhlIHByb2dyYW0gYW5kIGRldGVybWluZSBpZiBhIHNwZWNpZmljIGFjdGlvbiBpcyBhbGxvd2VkCi8vIEhlcmUsIGFjdGlvbiByZWZlcnMgdG8gdGhlIE9uQ29tcGxldGUgaW4gY29tYmluYXRpb24gd2l0aCB3aGV0aGVyIHRoZSBhcHAgaXMgYmVpbmcgY3JlYXRlZCBvciBjYWxsZWQKLy8gRXZlcnkgcG9zc2libGUgYWN0aW9uIGZvciB0aGlzIGNvbnRyYWN0IGlzIHJlcHJlc2VudGVkIGluIHRoZSBzd2l0Y2ggc3RhdGVtZW50Ci8vIElmIHRoZSBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlc3BlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIipOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQppbnRjIDIgLy8gNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggKmNhbGxfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKmNyZWF0ZV9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRAoKKk5PVF9JTVBMRU1FTlRFRDoKCS8vIFRoZSByZXF1ZXN0ZWQgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGlzIGNvbnRyYWN0LiBBcmUgeW91IHVzaW5nIHRoZSBjb3JyZWN0IE9uQ29tcGxldGU/IERpZCB5b3Ugc2V0IHlvdXIgYXBwIElEPwoJZXJyCgovLyBhcmMxMTU1MF90cmFuc2Zlcih1aW50NjQsKHVpbnQ2NCxhZGRyZXNzLGFkZHJlc3MsdWludDY0KVtdKXZvaWQKKmFiaV9yb3V0ZV9hcmMxMTU1MF90cmFuc2ZlcjoKCS8vIHRyYW5zZmVyczogKHVpbnQ2NCxhZGRyZXNzLGFkZHJlc3MsdWludDY0KVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIGRhdGFBcHA6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgYXJjMTE1NTBfdHJhbnNmZXIodWludDY0LCh1aW50NjQsYWRkcmVzcyxhZGRyZXNzLHVpbnQ2NClbXSl2b2lkCgljYWxsc3ViIGFyYzExNTUwX3RyYW5zZmVyCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBhcmMxMTU1MF90cmFuc2ZlcihkYXRhQXBwOiBBcHBJRCwgdHJhbnNmZXJzOiBUcmFuc2ZlcltdKTogdm9pZAphcmMxMTU1MF90cmFuc2ZlcjoKCXByb3RvIDIgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CglkdXAKCgkvLyBjb250cmFjdHMvQVJDMTE1NTBUcmFuc2Zlci5hbGdvLnRzOjYKCS8vIGZvciAobGV0IGkgPSAwOyBpIDwgdHJhbnNmZXJzLmxlbmd0aDsgaSArPSAxKQoJaW50YyAwIC8vIDAKCWZyYW1lX2J1cnkgMCAvLyBpOiB1aW50NjQKCipmb3JfMDoKCS8vIGNvbnRyYWN0cy9BUkMxMTU1MFRyYW5zZmVyLmFsZ28udHM6NgoJLy8gaSA8IHRyYW5zZmVycy5sZW5ndGgKCWZyYW1lX2RpZyAwIC8vIGk6IHVpbnQ2NAoJZnJhbWVfZGlnIC0yIC8vIHRyYW5zZmVyczogVHJhbnNmZXJbXQoJbGVuCglpbnRjIDMgLy8gODAKCS8KCTwKCWJ6ICpmb3JfMF9lbmQKCgkvLyBjb250cmFjdHMvQVJDMTE1NTBUcmFuc2Zlci5hbGdvLnRzOjcKCS8vIHRyYW5zZmVySG9va0FwcCA9IHNlbmRNZXRob2RDYWxsPHR5cGVvZiBBUkMxMTU1MERhdGEucHJvdG90eXBlLmFyYzExNTUwX3RyYW5zZmVySG9va0FwcD4oewoJLy8gICAgICAgICBtZXRob2RBcmdzOiBbdHJhbnNmZXJzW2ldLnRva2VuSWRdLAoJLy8gICAgICAgICBhcHBsaWNhdGlvbklEOiBkYXRhQXBwLAoJLy8gICAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMiAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJcHVzaGJ5dGVzIDB4NDU2OWU3ZjggLy8gbWV0aG9kICJhcmMxMTU1MF90cmFuc2Zlckhvb2tBcHAodWludDY0KXVpbnQ2NCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzL0FSQzExNTUwVHJhbnNmZXIuYWxnby50czo4CgkvLyBtZXRob2RBcmdzOiBbdHJhbnNmZXJzW2ldLnRva2VuSWRdCglmcmFtZV9kaWcgLTIgLy8gdHJhbnNmZXJzOiBUcmFuc2ZlcltdCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyAwIC8vICBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIDAgLy8gaTogdWludDY0CglpbnRjIDMgLy8gODAKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJaW50YyAwIC8vICBoZWFkT2Zmc2V0CgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglwdXNoaW50IDgKCWV4dHJhY3QzCglidG9pCglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIGNvbnRyYWN0cy9BUkMxMTU1MFRyYW5zZmVyLmFsZ28udHM6OQoJLy8gYXBwbGljYXRpb25JRDogZGF0YUFwcAoJZnJhbWVfZGlnIC0xIC8vIGRhdGFBcHA6IEFwcElECglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglpdHhuIE51bUxvZ3MKCWludGMgMSAvLyAxCgktCglpdHhuYXMgTG9ncwoJZXh0cmFjdCA0IDAKCWJ0b2kKCWZyYW1lX2J1cnkgMSAvLyB0cmFuc2Zlckhvb2tBcHA6IHVpbnQ2NAoKCS8vICppZjBfY29uZGl0aW9uCgkvLyBjb250cmFjdHMvQVJDMTE1NTBUcmFuc2Zlci5hbGdvLnRzOjEzCgkvLyB0cmFuc2Zlckhvb2tBcHAKCWZyYW1lX2RpZyAxIC8vIHRyYW5zZmVySG9va0FwcDogdWludDY0CglieiAqaWYwX2VuZAoKCS8vICppZjBfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL0FSQzExNTUwVHJhbnNmZXIuYWxnby50czoxNAoJLy8gYXNzZXJ0KAoJLy8gICAgICAgICAgIHNlbmRNZXRob2RDYWxsPHR5cGVvZiBBUkMxMTU1MFRyYW5zZmVySG9vay5wcm90b3R5cGUuYXBwcm92ZWQ+KHsKCS8vICAgICAgICAgICAgIGFwcGxpY2F0aW9uSUQ6IHRyYW5zZmVySG9va0FwcCwKCS8vICAgICAgICAgICAgIG1ldGhvZEFyZ3M6IFt0aGlzLnR4bi5zZW5kZXIsIHRyYW5zZmVycywgaV0sCgkvLyAgICAgICAgICAgfSkKCS8vICAgICAgICAgKQoJaXR4bl9iZWdpbgoJaW50YyAyIC8vICBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCglwdXNoYnl0ZXMgMHg2NGI5YmQ0NSAvLyBtZXRob2QgImFwcHJvdmVkKGFkZHJlc3MsKHVpbnQ2NCxhZGRyZXNzLGFkZHJlc3MsdWludDY0KVtdLHVpbnQ2NClib29sIgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBjb250cmFjdHMvQVJDMTE1NTBUcmFuc2Zlci5hbGdvLnRzOjE2CgkvLyBhcHBsaWNhdGlvbklEOiB0cmFuc2Zlckhvb2tBcHAKCWZyYW1lX2RpZyAxIC8vIHRyYW5zZmVySG9va0FwcDogdWludDY0CglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBjb250cmFjdHMvQVJDMTE1NTBUcmFuc2Zlci5hbGdvLnRzOjE3CgkvLyBtZXRob2RBcmdzOiBbdGhpcy50eG4uc2VuZGVyLCB0cmFuc2ZlcnMsIGldCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJZnJhbWVfZGlnIC0yIC8vIHRyYW5zZmVyczogVHJhbnNmZXJbXQoJZHVwCglsZW4KCWludGMgMyAvLyA4MAoJLwoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWZyYW1lX2RpZyAwIC8vIGk6IHVpbnQ2NAoJaXRvYgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglpdHhuIE51bUxvZ3MKCWludGMgMSAvLyAxCgktCglpdHhuYXMgTG9ncwoJZXh0cmFjdCA0IDAKCWludGMgMCAvLyAwCglnZXRiaXQKCWFzc2VydAoKKmlmMF9lbmQ6CgoqZm9yXzBfY29udGludWU6CgkvLyBjb250cmFjdHMvQVJDMTE1NTBUcmFuc2Zlci5hbGdvLnRzOjYKCS8vIGkgKz0gMQoJZnJhbWVfZGlnIDAgLy8gaTogdWludDY0CglpbnRjIDEgLy8gMQoJKwoJZnJhbWVfYnVyeSAwIC8vIGk6IHVpbnQ2NAoJYiAqZm9yXzAKCipmb3JfMF9lbmQ6CgkvLyBjb250cmFjdHMvQVJDMTE1NTBUcmFuc2Zlci5hbGdvLnRzOjIzCgkvLyBzZW5kTWV0aG9kQ2FsbDx0eXBlb2YgQVJDMTE1NTBEYXRhLnByb3RvdHlwZS5kb1RyYW5zZmVycz4oewoJLy8gICAgICAgYXBwbGljYXRpb25JRDogZGF0YUFwcCwKCS8vICAgICAgIG1ldGhvZEFyZ3M6IFt0aGlzLnR4bi5zZW5kZXIsIHRyYW5zZmVyc10sCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMiAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJcHVzaGJ5dGVzIDB4MjFhODVlMWIgLy8gbWV0aG9kICJkb1RyYW5zZmVycyhhZGRyZXNzLCh1aW50NjQsYWRkcmVzcyxhZGRyZXNzLHVpbnQ2NClbXSl2b2lkIgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBjb250cmFjdHMvQVJDMTE1NTBUcmFuc2Zlci5hbGdvLnRzOjI0CgkvLyBhcHBsaWNhdGlvbklEOiBkYXRhQXBwCglmcmFtZV9kaWcgLTEgLy8gZGF0YUFwcDogQXBwSUQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIGNvbnRyYWN0cy9BUkMxMTU1MFRyYW5zZmVyLmFsZ28udHM6MjUKCS8vIG1ldGhvZEFyZ3M6IFt0aGlzLnR4bi5zZW5kZXIsIHRyYW5zZmVyc10KCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCglmcmFtZV9kaWcgLTIgLy8gdHJhbnNmZXJzOiBUcmFuc2ZlcltdCglkdXAKCWxlbgoJaW50YyAzIC8vIDgwCgkvCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCWludGMgMSAvLyAxCglyZXR1cm4KCipjcmVhdGVfTm9PcDoKCXB1c2hieXRlcyAweGI4NDQ3YjM2IC8vIG1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNyZWF0ZSBOb09wCgllcnIKCipjYWxsX05vT3A6CglwdXNoYnl0ZXMgMHg2MWJhY2ZjOCAvLyBtZXRob2QgImFyYzExNTUwX3RyYW5zZmVyKHVpbnQ2NCwodWludDY0LGFkZHJlc3MsYWRkcmVzcyx1aW50NjQpW10pdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfYXJjMTE1NTBfdHJhbnNmZXIKCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY2FsbCBOb09wCgllcnI=","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAEAAEGUCYBADEYFCQLMRkIjQwA1QAAAAAAAAAAAAAAxwAAAAAAAAAAAAAANhoCVwIANhoBF4gAAiNDigIAKEkijACLAIv+FSUKDEEAe7EkshCABEVp5/iyGov+Nf8iiwAlCwgiCDT/TIEIWBcWshqL/7IYIrIBs7Q7IwnFOlcEABeMAYsBQQA3sSSyEIAEZLm9RbIaiwGyGDEAshqL/kkVJQoWVwYCTFCyGosAFrIaIrIBs7Q7IwnFOlcEACJTRIsAIwiMAEL/erEkshCABCGoXhuyGov/shgxALIai/5JFSUKFlcGAkxQshoisgGziSNDgAS4RHs2NhoAjgH/8QCABGG6z8g2GgCOAf8fAA==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Arc11550Transfer contract
 */
export type Arc11550TransferArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'arc11550_transfer(uint64,(uint64,address,address,uint64)[])void': {
      dataApp: bigint | number
      transfers: [bigint | number, string, string, bigint | number][]
    }
    'createApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'arc11550_transfer(uint64,(uint64,address,address,uint64)[])void': [dataApp: bigint | number, transfers: [bigint | number, string, string, bigint | number][]]
    'createApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type Arc11550TransferReturns = {
  'arc11550_transfer(uint64,(uint64,address,address,uint64)[])void': void
  'createApplication()void': void
}

/**
 * Defines the types of available calls and state of the Arc11550Transfer smart contract.
 */
export type Arc11550TransferTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'arc11550_transfer(uint64,(uint64,address,address,uint64)[])void' | 'arc11550_transfer', {
      argsObj: Arc11550TransferArgs['obj']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void']
      argsTuple: Arc11550TransferArgs['tuple']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void']
      returns: Arc11550TransferReturns['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void']
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: Arc11550TransferArgs['obj']['createApplication()void']
      argsTuple: Arc11550TransferArgs['tuple']['createApplication()void']
      returns: Arc11550TransferReturns['createApplication()void']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type Arc11550TransferSignatures = keyof Arc11550TransferTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Arc11550TransferNonVoidMethodSignatures = keyof Arc11550TransferTypes['methods'] extends infer T ? T extends keyof Arc11550TransferTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Arc11550Transfer smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Arc11550TransferSignatures> = Arc11550TransferTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc11550Transfer smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc11550TransferSignatures> = Arc11550TransferTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type Arc11550TransferCreateCallParams =
  | Expand<CallParams<Arc11550TransferArgs['obj']['createApplication()void'] | Arc11550TransferArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<Arc11550TransferArgs['obj']['createApplication()void'] | Arc11550TransferArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Arc11550TransferDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Arc11550TransferCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc11550Transfer smart contract
 */
export abstract class Arc11550TransferParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends Arc11550TransferCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return Arc11550TransferParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ARC11550Transfer smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<Arc11550TransferArgs['obj']['createApplication()void'] | Arc11550TransferArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the arc11550_transfer(uint64,(uint64,address,address,uint64)[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Transfer(params: CallParams<Arc11550TransferArgs['obj']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void'] | Arc11550TransferArgs['tuple']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_transfer(uint64,(uint64,address,address,uint64)[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.dataApp, params.args.transfers],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ARC11550Transfer smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Arc11550TransferFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Arc11550TransferFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Arc11550TransferClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Arc11550TransferClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ARC11550Transfer smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Arc11550TransferDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? Arc11550TransferParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (Arc11550TransferCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new Arc11550TransferClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Transfer smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<Arc11550TransferArgs['obj']['createApplication()void'] | Arc11550TransferArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(Arc11550TransferParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Transfer smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<Arc11550TransferArgs['obj']['createApplication()void'] | Arc11550TransferArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(Arc11550TransferParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Transfer smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<Arc11550TransferArgs['obj']['createApplication()void'] | Arc11550TransferArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(Arc11550TransferParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | Arc11550TransferReturns['createApplication()void']) }, appClient: new Arc11550TransferClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ARC11550Transfer smart contract
 */
export class Arc11550TransferClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Arc11550TransferClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Arc11550Transfer app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Arc11550TransferClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Arc11550TransferNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Arc11550TransferClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Arc11550TransferClient> {
    return new Arc11550TransferClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Arc11550TransferClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Arc11550TransferClient> {
    return new Arc11550TransferClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Transfer smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Transfer smart contract using the `arc11550_transfer(uint64,(uint64,address,address,uint64)[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Transfer: (params: CallParams<Arc11550TransferArgs['obj']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void'] | Arc11550TransferArgs['tuple']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550TransferParamsFactory.arc11550Transfer(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Transfer smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Transfer smart contract using the `arc11550_transfer(uint64,(uint64,address,address,uint64)[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Transfer: (params: CallParams<Arc11550TransferArgs['obj']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void'] | Arc11550TransferArgs['tuple']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550TransferParamsFactory.arc11550Transfer(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Transfer smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Transfer smart contract using the `arc11550_transfer(uint64,(uint64,address,address,uint64)[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Transfer: async (params: CallParams<Arc11550TransferArgs['obj']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void'] | Arc11550TransferArgs['tuple']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550TransferParamsFactory.arc11550Transfer(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550TransferReturns['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Arc11550TransferClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ARC11550Transfer app
   */
  state = {
  }

  public newGroup(): Arc11550TransferComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a arc11550_transfer(uint64,(uint64,address,address,uint64)[])void method call against the ARC11550Transfer contract
       */
      arc11550Transfer(params: CallParams<Arc11550TransferArgs['obj']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void'] | Arc11550TransferArgs['tuple']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Transfer(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the ARC11550Transfer contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Arc11550TransferComposer
  }
}
export type Arc11550TransferComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc11550_transfer(uint64,(uint64,address,address,uint64)[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Transfer(params?: CallParams<Arc11550TransferArgs['obj']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void'] | Arc11550TransferArgs['tuple']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void']>): Arc11550TransferComposer<[...TReturns, Arc11550TransferReturns['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ARC11550Transfer smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Arc11550TransferComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc11550TransferComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc11550TransferComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Arc11550TransferComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Arc11550TransferComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Arc11550TransferComposerResults<TReturns>>
}
export type Arc11550TransferComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


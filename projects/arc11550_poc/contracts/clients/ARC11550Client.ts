/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ARC11550","desc":"","methods":[{"name":"createApplication","args":[{"name":"hookApp","type":"uint64"},{"name":"mintCap","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"arc11550_mint","args":[{"name":"params","type":"(byte[32],byte[8],uint64,uint64,address)","struct":"Params"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_multiMint","args":[{"name":"params","type":"(byte[32],byte[8],uint64,uint64,address)[]"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_minted","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_metadata","args":[{"name":"key","type":"(uint64,string)","struct":"MetadataKey"}],"returns":{"type":"(bool,byte[])","struct":"Metadata"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_setMetadata","args":[{"name":"key","type":"(uint64,string)","struct":"MetadataKey"},{"name":"data","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_balanceOf","args":[{"name":"id","type":"uint64"},{"name":"account","type":"address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_balancesOf","args":[{"name":"idAndAddrs","type":"(uint64,address)[]"}],"returns":{"type":"uint64[]"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_params","args":[{"name":"id","type":"uint64"}],"returns":{"type":"(byte[32],byte[8],uint64,uint64,address)","struct":"Params"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_mulitpleParams","args":[{"name":"ids","type":"uint64[]"}],"returns":{"type":"(byte[32],byte[8],uint64,uint64,address)[]"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_approve","args":[{"name":"allowanceKey","type":"(address,address,uint64)","struct":"AllowanceKey"},{"name":"allowance","type":"(uint64,uint64)","struct":"Allowance"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_setApprovals","args":[{"name":"allowances","type":"((address,address,uint64),(uint64,uint64))[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_transfer","args":[{"name":"transfers","type":"(uint64,address,address,uint64)[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"Params":[{"name":"name","type":"byte[32]"},{"name":"symbol","type":"byte[8]"},{"name":"total","type":"uint64"},{"name":"decimals","type":"uint64"},{"name":"manager","type":"address"}],"IdAndAddress":[{"name":"id","type":"uint64"},{"name":"address","type":"address"}],"Metadata":[{"name":"mutable","type":"bool"},{"name":"data","type":"byte[]"}],"MetadataKey":[{"name":"id","type":"uint64"},{"name":"key","type":"string"}],"Allowance":[{"name":"amount","type":"uint64"},{"name":"untilTimestamp","type":"uint64"}],"AllowanceKey":[{"name":"holder","type":"address"},{"name":"sender","type":"address"},{"name":"id","type":"uint64"}]},"state":{"schema":{"global":{"bytes":1,"ints":3},"local":{"bytes":0,"ints":0}},"keys":{"global":{"minted":{"key":"bWludGVk","keyType":"AVMBytes","valueType":"uint64"},"transferHookApp":{"key":"dHJhbnNmZXJIb29rQXBw","keyType":"AVMBytes","valueType":"uint64"},"mintCap":{"key":"bWludENhcA==","keyType":"AVMBytes","valueType":"uint64"},"minter":{"key":"bWludGVy","keyType":"AVMBytes","valueType":"address"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"params":{"keyType":"uint64","valueType":"Params","prefix":"cA=="},"balances":{"keyType":"IdAndAddress","valueType":"uint64","prefix":"Yg=="},"metadata":{"keyType":"MetadataKey","valueType":"Metadata","prefix":"bQ=="},"allowances":{"keyType":"AllowanceKey","valueType":"Allowance","prefix":"YQ=="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/ARC11550.algo.ts:46","pc":[0]},{"teal":2,"source":"contracts/ARC11550.algo.ts:46","pc":[1,2,3,4,5,6,7,8,9,10,11,12,13]},{"teal":3,"source":"contracts/ARC11550.algo.ts:46","pc":[14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]},{"teal":15,"source":"contracts/ARC11550.algo.ts:46","pc":[61,62]},{"teal":16,"source":"contracts/ARC11550.algo.ts:46","pc":[63]},{"teal":17,"source":"contracts/ARC11550.algo.ts:46","pc":[64,65]},{"teal":18,"source":"contracts/ARC11550.algo.ts:46","pc":[66]},{"teal":19,"source":"contracts/ARC11550.algo.ts:46","pc":[67,68]},{"teal":20,"source":"contracts/ARC11550.algo.ts:46","pc":[69]},{"teal":21,"source":"contracts/ARC11550.algo.ts:46","pc":[70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95]},{"teal":25,"source":"contracts/ARC11550.algo.ts:46","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[96]},{"teal":30,"source":"contracts/ARC11550.algo.ts:71","pc":[97,98,99]},{"teal":31,"source":"contracts/ARC11550.algo.ts:71","pc":[100]},{"teal":34,"source":"contracts/ARC11550.algo.ts:71","pc":[101,102,103]},{"teal":35,"source":"contracts/ARC11550.algo.ts:71","pc":[104]},{"teal":38,"source":"contracts/ARC11550.algo.ts:71","pc":[105,106,107]},{"teal":39,"source":"contracts/ARC11550.algo.ts:71","pc":[108]},{"teal":40,"source":"contracts/ARC11550.algo.ts:71","pc":[109]},{"teal":44,"source":"contracts/ARC11550.algo.ts:71","pc":[110,111,112]},{"teal":49,"source":"contracts/ARC11550.algo.ts:72","pc":[113,114]},{"teal":50,"source":"contracts/ARC11550.algo.ts:72","pc":[115,116,117]},{"teal":55,"source":"contracts/ARC11550.algo.ts:73","pc":[118,119]},{"teal":56,"source":"contracts/ARC11550.algo.ts:73","pc":[120,121]},{"teal":57,"source":"contracts/ARC11550.algo.ts:73","pc":[122]},{"teal":62,"source":"contracts/ARC11550.algo.ts:76","pc":[123]},{"teal":63,"source":"contracts/ARC11550.algo.ts:76","pc":[124]},{"teal":64,"source":"contracts/ARC11550.algo.ts:76","pc":[125]},{"teal":68,"source":"contracts/ARC11550.algo.ts:77","pc":[126,127]},{"teal":69,"source":"contracts/ARC11550.algo.ts:77","pc":[128,129]},{"teal":70,"source":"contracts/ARC11550.algo.ts:77","pc":[130]},{"teal":71,"source":"contracts/ARC11550.algo.ts:71","pc":[131]},{"teal":76,"source":"contracts/ARC11550.algo.ts:80","pc":[132]},{"teal":79,"source":"contracts/ARC11550.algo.ts:80","pc":[133,134,135]},{"teal":80,"source":"contracts/ARC11550.algo.ts:80","pc":[136]},{"teal":81,"source":"contracts/ARC11550.algo.ts:80","pc":[137]},{"teal":82,"source":"contracts/ARC11550.algo.ts:80","pc":[138,139]},{"teal":83,"source":"contracts/ARC11550.algo.ts:80","pc":[140]},{"teal":86,"source":"contracts/ARC11550.algo.ts:80","errorMessage":"argument 0 (params) for arc11550_mint must be a (byte[32],byte[8],uint64,uint64,address)","pc":[141]},{"teal":89,"source":"contracts/ARC11550.algo.ts:80","pc":[142,143,144]},{"teal":90,"source":"contracts/ARC11550.algo.ts:80","pc":[145]},{"teal":91,"source":"contracts/ARC11550.algo.ts:80","pc":[146]},{"teal":92,"source":"contracts/ARC11550.algo.ts:80","pc":[147]},{"teal":93,"source":"contracts/ARC11550.algo.ts:80","pc":[148]},{"teal":94,"source":"contracts/ARC11550.algo.ts:80","pc":[149]},{"teal":98,"source":"contracts/ARC11550.algo.ts:80","pc":[150,151,152]},{"teal":101,"source":"contracts/ARC11550.algo.ts:80","pc":[153]},{"teal":105,"source":"contracts/ARC11550.algo.ts:81","pc":[154]},{"teal":106,"source":"contracts/ARC11550.algo.ts:81","pc":[155]},{"teal":107,"source":"contracts/ARC11550.algo.ts:81","pc":[156,157]},{"teal":111,"source":"contracts/ARC11550.algo.ts:82","pc":[158,159]},{"teal":112,"source":"contracts/ARC11550.algo.ts:82","pc":[160,161]},{"teal":113,"source":"contracts/ARC11550.algo.ts:82","pc":[162]},{"teal":114,"source":"contracts/ARC11550.algo.ts:82","pc":[163]},{"teal":115,"source":"contracts/ARC11550.algo.ts:82","pc":[164]},{"teal":119,"source":"contracts/ARC11550.algo.ts:84","pc":[165,166]},{"teal":120,"source":"contracts/ARC11550.algo.ts:84","pc":[167,168,169,170,171,172,173,174]},{"teal":121,"source":"contracts/ARC11550.algo.ts:84","pc":[175]},{"teal":122,"source":"contracts/ARC11550.algo.ts:84","pc":[176]},{"teal":123,"source":"contracts/ARC11550.algo.ts:84","pc":[177]},{"teal":127,"source":"contracts/ARC11550.algo.ts:85","pc":[178,179]},{"teal":128,"source":"contracts/ARC11550.algo.ts:85","pc":[180,181]},{"teal":129,"source":"contracts/ARC11550.algo.ts:85","pc":[182]},{"teal":130,"source":"contracts/ARC11550.algo.ts:85","pc":[183]},{"teal":131,"source":"contracts/ARC11550.algo.ts:85","pc":[184,185]},{"teal":132,"source":"contracts/ARC11550.algo.ts:85","pc":[186]},{"teal":136,"source":"contracts/ARC11550.algo.ts:87","pc":[187]},{"teal":137,"source":"contracts/ARC11550.algo.ts:87","pc":[188]},{"teal":138,"source":"contracts/ARC11550.algo.ts:87","pc":[189]},{"teal":139,"source":"contracts/ARC11550.algo.ts:87","pc":[190]},{"teal":140,"source":"contracts/ARC11550.algo.ts:87","pc":[191]},{"teal":141,"source":"contracts/ARC11550.algo.ts:87","pc":[192]},{"teal":142,"source":"contracts/ARC11550.algo.ts:87","pc":[193]},{"teal":146,"source":"contracts/ARC11550.algo.ts:88","pc":[194,195]},{"teal":149,"source":"contracts/ARC11550.algo.ts:80","pc":[196,197]},{"teal":150,"source":"contracts/ARC11550.algo.ts:80","pc":[198]},{"teal":155,"source":"contracts/ARC11550.algo.ts:91","pc":[199]},{"teal":158,"source":"contracts/ARC11550.algo.ts:91","pc":[200,201,202]},{"teal":159,"source":"contracts/ARC11550.algo.ts:91","pc":[203,204,205]},{"teal":162,"source":"contracts/ARC11550.algo.ts:91","pc":[206,207,208]},{"teal":163,"source":"contracts/ARC11550.algo.ts:91","pc":[209]},{"teal":164,"source":"contracts/ARC11550.algo.ts:91","pc":[210]},{"teal":165,"source":"contracts/ARC11550.algo.ts:91","pc":[211]},{"teal":166,"source":"contracts/ARC11550.algo.ts:91","pc":[212]},{"teal":167,"source":"contracts/ARC11550.algo.ts:91","pc":[213]},{"teal":171,"source":"contracts/ARC11550.algo.ts:91","pc":[214,215,216]},{"teal":174,"source":"contracts/ARC11550.algo.ts:91","pc":[217]},{"teal":175,"source":"contracts/ARC11550.algo.ts:91","pc":[218]},{"teal":179,"source":"contracts/ARC11550.algo.ts:92","pc":[219]},{"teal":180,"source":"contracts/ARC11550.algo.ts:92","pc":[220]},{"teal":181,"source":"contracts/ARC11550.algo.ts:92","pc":[221,222]},{"teal":185,"source":"contracts/ARC11550.algo.ts:93","pc":[223]},{"teal":186,"source":"contracts/ARC11550.algo.ts:93","pc":[224,225]},{"teal":191,"source":"contracts/ARC11550.algo.ts:93","pc":[226,227]},{"teal":192,"source":"contracts/ARC11550.algo.ts:93","pc":[228,229]},{"teal":193,"source":"contracts/ARC11550.algo.ts:93","pc":[230]},{"teal":194,"source":"contracts/ARC11550.algo.ts:93","pc":[231,232]},{"teal":195,"source":"contracts/ARC11550.algo.ts:93","pc":[233]},{"teal":196,"source":"contracts/ARC11550.algo.ts:93","pc":[234]},{"teal":197,"source":"contracts/ARC11550.algo.ts:93","pc":[235,236,237]},{"teal":201,"source":"contracts/ARC11550.algo.ts:94","pc":[238,239]},{"teal":202,"source":"contracts/ARC11550.algo.ts:94","pc":[240,241]},{"teal":203,"source":"contracts/ARC11550.algo.ts:94","pc":[242]},{"teal":204,"source":"contracts/ARC11550.algo.ts:94","pc":[243,244]},{"teal":205,"source":"contracts/ARC11550.algo.ts:94","pc":[245,246]},{"teal":206,"source":"contracts/ARC11550.algo.ts:94","pc":[247]},{"teal":207,"source":"contracts/ARC11550.algo.ts:94","pc":[248]},{"teal":208,"source":"contracts/ARC11550.algo.ts:94","pc":[249,250]},{"teal":209,"source":"contracts/ARC11550.algo.ts:94","pc":[251]},{"teal":210,"source":"contracts/ARC11550.algo.ts:94","pc":[252,253]},{"teal":211,"source":"contracts/ARC11550.algo.ts:94","pc":[254]},{"teal":212,"source":"contracts/ARC11550.algo.ts:94","pc":[255,256,257]},{"teal":217,"source":"contracts/ARC11550.algo.ts:93","pc":[258,259]},{"teal":218,"source":"contracts/ARC11550.algo.ts:93","pc":[260]},{"teal":219,"source":"contracts/ARC11550.algo.ts:93","pc":[261]},{"teal":220,"source":"contracts/ARC11550.algo.ts:93","pc":[262,263]},{"teal":221,"source":"contracts/ARC11550.algo.ts:93","pc":[264,265,266]},{"teal":226,"source":"contracts/ARC11550.algo.ts:97","pc":[267,268]},{"teal":229,"source":"contracts/ARC11550.algo.ts:91","pc":[269,270]},{"teal":232,"source":"contracts/ARC11550.algo.ts:91","pc":[271,272]},{"teal":233,"source":"contracts/ARC11550.algo.ts:91","pc":[273]},{"teal":238,"source":"contracts/ARC11550.algo.ts:100","pc":[274]},{"teal":241,"source":"contracts/ARC11550.algo.ts:100","pc":[275,276,277]},{"teal":242,"source":"contracts/ARC11550.algo.ts:100","pc":[278]},{"teal":243,"source":"contracts/ARC11550.algo.ts:100","pc":[279]},{"teal":244,"source":"contracts/ARC11550.algo.ts:100","pc":[280]},{"teal":245,"source":"contracts/ARC11550.algo.ts:100","pc":[281]},{"teal":246,"source":"contracts/ARC11550.algo.ts:100","pc":[282]},{"teal":250,"source":"contracts/ARC11550.algo.ts:100","pc":[283,284,285]},{"teal":254,"source":"contracts/ARC11550.algo.ts:101","pc":[286]},{"teal":255,"source":"contracts/ARC11550.algo.ts:101","pc":[287]},{"teal":256,"source":"contracts/ARC11550.algo.ts:100","pc":[288]},{"teal":261,"source":"contracts/ARC11550.algo.ts:104","pc":[289]},{"teal":264,"source":"contracts/ARC11550.algo.ts:104","pc":[290,291,292]},{"teal":267,"source":"contracts/ARC11550.algo.ts:104","pc":[293,294,295]},{"teal":268,"source":"contracts/ARC11550.algo.ts:104","pc":[296]},{"teal":269,"source":"contracts/ARC11550.algo.ts:104","pc":[297]},{"teal":270,"source":"contracts/ARC11550.algo.ts:104","pc":[298]},{"teal":271,"source":"contracts/ARC11550.algo.ts:104","pc":[299]},{"teal":275,"source":"contracts/ARC11550.algo.ts:104","pc":[300,301,302]},{"teal":279,"source":"contracts/ARC11550.algo.ts:105","pc":[303,304]},{"teal":280,"source":"contracts/ARC11550.algo.ts:105","pc":[305,306]},{"teal":281,"source":"contracts/ARC11550.algo.ts:105","pc":[307]},{"teal":282,"source":"contracts/ARC11550.algo.ts:105","pc":[308]},{"teal":285,"source":"contracts/ARC11550.algo.ts:105","errorMessage":"box value does not exist: this.metadata(key).value","pc":[309]},{"teal":286,"source":"contracts/ARC11550.algo.ts:104","pc":[310]},{"teal":291,"source":"contracts/ARC11550.algo.ts:119","pc":[311,312,313]},{"teal":292,"source":"contracts/ARC11550.algo.ts:119","pc":[314,315,316]},{"teal":295,"source":"contracts/ARC11550.algo.ts:119","pc":[317,318,319]},{"teal":298,"source":"contracts/ARC11550.algo.ts:119","pc":[320,321,322]},{"teal":299,"source":"contracts/ARC11550.algo.ts:119","pc":[323]},{"teal":300,"source":"contracts/ARC11550.algo.ts:119","pc":[324]},{"teal":304,"source":"contracts/ARC11550.algo.ts:119","pc":[325,326,327]},{"teal":308,"source":"contracts/ARC11550.algo.ts:120","pc":[328,329]},{"teal":309,"source":"contracts/ARC11550.algo.ts:120","pc":[330,331]},{"teal":310,"source":"contracts/ARC11550.algo.ts:120","pc":[332,333]},{"teal":311,"source":"contracts/ARC11550.algo.ts:120","pc":[334,335]},{"teal":312,"source":"contracts/ARC11550.algo.ts:120","pc":[336,337]},{"teal":313,"source":"contracts/ARC11550.algo.ts:120","pc":[338,339]},{"teal":314,"source":"contracts/ARC11550.algo.ts:120","pc":[340,341]},{"teal":315,"source":"contracts/ARC11550.algo.ts:120","pc":[342,343,344]},{"teal":316,"source":"contracts/ARC11550.algo.ts:120","pc":[345]},{"teal":317,"source":"contracts/ARC11550.algo.ts:120","pc":[346]},{"teal":318,"source":"contracts/ARC11550.algo.ts:120","pc":[347]},{"teal":319,"source":"contracts/ARC11550.algo.ts:120","pc":[348,349]},{"teal":320,"source":"contracts/ARC11550.algo.ts:120","pc":[350]},{"teal":321,"source":"contracts/ARC11550.algo.ts:120","pc":[351]},{"teal":322,"source":"contracts/ARC11550.algo.ts:120","pc":[352]},{"teal":327,"source":"contracts/ARC11550.algo.ts:122","pc":[353,354]},{"teal":328,"source":"contracts/ARC11550.algo.ts:122","pc":[355,356]},{"teal":329,"source":"contracts/ARC11550.algo.ts:122","pc":[357]},{"teal":330,"source":"contracts/ARC11550.algo.ts:122","pc":[358]},{"teal":331,"source":"contracts/ARC11550.algo.ts:122","pc":[359]},{"teal":332,"source":"contracts/ARC11550.algo.ts:122","pc":[360]},{"teal":333,"source":"contracts/ARC11550.algo.ts:122","pc":[361,362,363]},{"teal":338,"source":"contracts/ARC11550.algo.ts:123","pc":[364,365]},{"teal":339,"source":"contracts/ARC11550.algo.ts:123","pc":[366,367]},{"teal":340,"source":"contracts/ARC11550.algo.ts:123","pc":[368]},{"teal":341,"source":"contracts/ARC11550.algo.ts:123","pc":[369]},{"teal":344,"source":"contracts/ARC11550.algo.ts:123","errorMessage":"box value does not exist: this.metadata(key).value","pc":[370]},{"teal":345,"source":"contracts/ARC11550.algo.ts:123","pc":[371,372]},{"teal":346,"source":"contracts/ARC11550.algo.ts:123","pc":[373,374]},{"teal":347,"source":"contracts/ARC11550.algo.ts:123","pc":[375]},{"teal":348,"source":"contracts/ARC11550.algo.ts:123","pc":[376]},{"teal":349,"source":"contracts/ARC11550.algo.ts:123","pc":[377]},{"teal":354,"source":"contracts/ARC11550.algo.ts:126","pc":[378,379]},{"teal":355,"source":"contracts/ARC11550.algo.ts:126","pc":[380,381]},{"teal":356,"source":"contracts/ARC11550.algo.ts:126","pc":[382]},{"teal":357,"source":"contracts/ARC11550.algo.ts:126","pc":[383]},{"teal":360,"source":"contracts/ARC11550.algo.ts:126","errorMessage":"box value does not exist: this.metadata(key).value","pc":[384]},{"teal":361,"source":"contracts/ARC11550.algo.ts:126","pc":[385,386]},{"teal":362,"source":"contracts/ARC11550.algo.ts:126","pc":[387]},{"teal":363,"source":"contracts/ARC11550.algo.ts:126","pc":[388]},{"teal":364,"source":"contracts/ARC11550.algo.ts:126","pc":[389,390]},{"teal":365,"source":"contracts/ARC11550.algo.ts:126","pc":[391,392]},{"teal":366,"source":"contracts/ARC11550.algo.ts:126","pc":[393,394]},{"teal":367,"source":"contracts/ARC11550.algo.ts:126","pc":[395,396]},{"teal":368,"source":"contracts/ARC11550.algo.ts:126","pc":[397]},{"teal":369,"source":"contracts/ARC11550.algo.ts:126","pc":[398]},{"teal":370,"source":"contracts/ARC11550.algo.ts:126","pc":[399,400]},{"teal":371,"source":"contracts/ARC11550.algo.ts:126","pc":[401]},{"teal":372,"source":"contracts/ARC11550.algo.ts:126","pc":[402,403]},{"teal":373,"source":"contracts/ARC11550.algo.ts:126","pc":[404]},{"teal":374,"source":"contracts/ARC11550.algo.ts:126","pc":[405]},{"teal":375,"source":"contracts/ARC11550.algo.ts:126","pc":[406]},{"teal":376,"source":"contracts/ARC11550.algo.ts:126","pc":[407]},{"teal":377,"source":"contracts/ARC11550.algo.ts:126","pc":[408,409]},{"teal":378,"source":"contracts/ARC11550.algo.ts:126","pc":[410]},{"teal":379,"source":"contracts/ARC11550.algo.ts:126","pc":[411,412]},{"teal":380,"source":"contracts/ARC11550.algo.ts:126","pc":[413,414]},{"teal":381,"source":"contracts/ARC11550.algo.ts:126","pc":[415]},{"teal":382,"source":"contracts/ARC11550.algo.ts:126","pc":[416,417]},{"teal":383,"source":"contracts/ARC11550.algo.ts:126","pc":[418]},{"teal":384,"source":"contracts/ARC11550.algo.ts:126","pc":[419,420]},{"teal":385,"source":"contracts/ARC11550.algo.ts:126","pc":[421]},{"teal":386,"source":"contracts/ARC11550.algo.ts:126","pc":[422]},{"teal":387,"source":"contracts/ARC11550.algo.ts:126","pc":[423]},{"teal":388,"source":"contracts/ARC11550.algo.ts:126","pc":[424,425,426]},{"teal":389,"source":"contracts/ARC11550.algo.ts:126","pc":[427]},{"teal":390,"source":"contracts/ARC11550.algo.ts:126","pc":[428]},{"teal":391,"source":"contracts/ARC11550.algo.ts:126","pc":[429]},{"teal":392,"source":"contracts/ARC11550.algo.ts:126","pc":[430,431]},{"teal":393,"source":"contracts/ARC11550.algo.ts:126","pc":[432,433]},{"teal":394,"source":"contracts/ARC11550.algo.ts:126","pc":[434,435]},{"teal":395,"source":"contracts/ARC11550.algo.ts:126","pc":[436,437]},{"teal":396,"source":"contracts/ARC11550.algo.ts:126","pc":[438]},{"teal":397,"source":"contracts/ARC11550.algo.ts:126","pc":[439,440]},{"teal":398,"source":"contracts/ARC11550.algo.ts:126","pc":[441]},{"teal":399,"source":"contracts/ARC11550.algo.ts:126","pc":[442]},{"teal":400,"source":"contracts/ARC11550.algo.ts:126","pc":[443]},{"teal":401,"source":"contracts/ARC11550.algo.ts:126","pc":[444]},{"teal":402,"source":"contracts/ARC11550.algo.ts:126","pc":[445,446]},{"teal":403,"source":"contracts/ARC11550.algo.ts:126","pc":[447,448,449]},{"teal":404,"source":"contracts/ARC11550.algo.ts:126","pc":[450,451]},{"teal":405,"source":"contracts/ARC11550.algo.ts:126","pc":[452,453]},{"teal":406,"source":"contracts/ARC11550.algo.ts:126","pc":[454,455]},{"teal":407,"source":"contracts/ARC11550.algo.ts:126","pc":[456]},{"teal":408,"source":"contracts/ARC11550.algo.ts:126","pc":[457]},{"teal":409,"source":"contracts/ARC11550.algo.ts:126","pc":[458]},{"teal":410,"source":"contracts/ARC11550.algo.ts:126","pc":[459]},{"teal":411,"source":"contracts/ARC11550.algo.ts:126","pc":[460]},{"teal":412,"source":"contracts/ARC11550.algo.ts:126","pc":[461]},{"teal":413,"source":"contracts/ARC11550.algo.ts:119","pc":[462]},{"teal":418,"source":"contracts/ARC11550.algo.ts:136","pc":[463]},{"teal":421,"source":"contracts/ARC11550.algo.ts:136","pc":[464,465,466]},{"teal":422,"source":"contracts/ARC11550.algo.ts:136","pc":[467]},{"teal":423,"source":"contracts/ARC11550.algo.ts:136","pc":[468]},{"teal":424,"source":"contracts/ARC11550.algo.ts:136","pc":[469,470]},{"teal":425,"source":"contracts/ARC11550.algo.ts:136","pc":[471]},{"teal":428,"source":"contracts/ARC11550.algo.ts:136","errorMessage":"argument 0 (account) for arc11550_balanceOf must be a address","pc":[472]},{"teal":431,"source":"contracts/ARC11550.algo.ts:136","pc":[473,474,475]},{"teal":432,"source":"contracts/ARC11550.algo.ts:136","pc":[476]},{"teal":435,"source":"contracts/ARC11550.algo.ts:136","pc":[477,478,479]},{"teal":436,"source":"contracts/ARC11550.algo.ts:136","pc":[480]},{"teal":437,"source":"contracts/ARC11550.algo.ts:136","pc":[481]},{"teal":438,"source":"contracts/ARC11550.algo.ts:136","pc":[482]},{"teal":439,"source":"contracts/ARC11550.algo.ts:136","pc":[483]},{"teal":440,"source":"contracts/ARC11550.algo.ts:136","pc":[484]},{"teal":444,"source":"contracts/ARC11550.algo.ts:136","pc":[485,486,487]},{"teal":448,"source":"contracts/ARC11550.algo.ts:137","pc":[488]},{"teal":449,"source":"contracts/ARC11550.algo.ts:137","pc":[489,490]},{"teal":450,"source":"contracts/ARC11550.algo.ts:137","pc":[491]},{"teal":451,"source":"contracts/ARC11550.algo.ts:137","pc":[492,493]},{"teal":452,"source":"contracts/ARC11550.algo.ts:137","pc":[494]},{"teal":453,"source":"contracts/ARC11550.algo.ts:137","pc":[495]},{"teal":454,"source":"contracts/ARC11550.algo.ts:137","pc":[496]},{"teal":457,"source":"contracts/ARC11550.algo.ts:137","errorMessage":"box value does not exist: this.balances({ id: id, address: account }).value","pc":[497]},{"teal":458,"source":"contracts/ARC11550.algo.ts:137","pc":[498]},{"teal":459,"source":"contracts/ARC11550.algo.ts:136","pc":[499]},{"teal":464,"source":"contracts/ARC11550.algo.ts:140","pc":[500]},{"teal":467,"source":"contracts/ARC11550.algo.ts:140","pc":[501,502,503]},{"teal":468,"source":"contracts/ARC11550.algo.ts:140","pc":[504,505,506]},{"teal":471,"source":"contracts/ARC11550.algo.ts:140","pc":[507,508,509]},{"teal":472,"source":"contracts/ARC11550.algo.ts:140","pc":[510]},{"teal":473,"source":"contracts/ARC11550.algo.ts:140","pc":[511]},{"teal":474,"source":"contracts/ARC11550.algo.ts:140","pc":[512]},{"teal":475,"source":"contracts/ARC11550.algo.ts:140","pc":[513]},{"teal":476,"source":"contracts/ARC11550.algo.ts:140","pc":[514]},{"teal":477,"source":"contracts/ARC11550.algo.ts:140","pc":[515,516,517]},{"teal":478,"source":"contracts/ARC11550.algo.ts:140","pc":[518]},{"teal":479,"source":"contracts/ARC11550.algo.ts:140","pc":[519]},{"teal":480,"source":"contracts/ARC11550.algo.ts:140","pc":[520]},{"teal":481,"source":"contracts/ARC11550.algo.ts:140","pc":[521]},{"teal":482,"source":"contracts/ARC11550.algo.ts:140","pc":[522]},{"teal":483,"source":"contracts/ARC11550.algo.ts:140","pc":[523]},{"teal":487,"source":"contracts/ARC11550.algo.ts:140","pc":[524,525,526]},{"teal":490,"source":"contracts/ARC11550.algo.ts:140","pc":[527]},{"teal":491,"source":"contracts/ARC11550.algo.ts:140","pc":[528,529]},{"teal":495,"source":"contracts/ARC11550.algo.ts:141","pc":[530]},{"teal":496,"source":"contracts/ARC11550.algo.ts:141","pc":[531,532]},{"teal":500,"source":"contracts/ARC11550.algo.ts:142","pc":[533]},{"teal":501,"source":"contracts/ARC11550.algo.ts:142","pc":[534,535]},{"teal":506,"source":"contracts/ARC11550.algo.ts:142","pc":[536,537]},{"teal":507,"source":"contracts/ARC11550.algo.ts:142","pc":[538,539]},{"teal":508,"source":"contracts/ARC11550.algo.ts:142","pc":[540]},{"teal":509,"source":"contracts/ARC11550.algo.ts:142","pc":[541,542]},{"teal":510,"source":"contracts/ARC11550.algo.ts:142","pc":[543]},{"teal":511,"source":"contracts/ARC11550.algo.ts:142","pc":[544]},{"teal":512,"source":"contracts/ARC11550.algo.ts:142","pc":[545,546,547]},{"teal":516,"source":"contracts/ARC11550.algo.ts:143","pc":[548,549]},{"teal":517,"source":"contracts/ARC11550.algo.ts:143","pc":[550,551]},{"teal":518,"source":"contracts/ARC11550.algo.ts:143","pc":[552]},{"teal":519,"source":"contracts/ARC11550.algo.ts:143","pc":[553,554]},{"teal":520,"source":"contracts/ARC11550.algo.ts:143","pc":[555,556]},{"teal":521,"source":"contracts/ARC11550.algo.ts:143","pc":[557]},{"teal":522,"source":"contracts/ARC11550.algo.ts:143","pc":[558]},{"teal":523,"source":"contracts/ARC11550.algo.ts:143","pc":[559]},{"teal":524,"source":"contracts/ARC11550.algo.ts:143","pc":[560]},{"teal":525,"source":"contracts/ARC11550.algo.ts:143","pc":[561,562]},{"teal":526,"source":"contracts/ARC11550.algo.ts:143","pc":[563]},{"teal":527,"source":"contracts/ARC11550.algo.ts:143","pc":[564]},{"teal":528,"source":"contracts/ARC11550.algo.ts:143","pc":[565]},{"teal":529,"source":"contracts/ARC11550.algo.ts:143","pc":[566]},{"teal":530,"source":"contracts/ARC11550.algo.ts:143","pc":[567,568]},{"teal":534,"source":"contracts/ARC11550.algo.ts:144","pc":[569,570]},{"teal":535,"source":"contracts/ARC11550.algo.ts:144","pc":[571,572]},{"teal":536,"source":"contracts/ARC11550.algo.ts:144","pc":[573]},{"teal":537,"source":"contracts/ARC11550.algo.ts:144","pc":[574,575]},{"teal":538,"source":"contracts/ARC11550.algo.ts:144","pc":[576,577]},{"teal":539,"source":"contracts/ARC11550.algo.ts:144","pc":[578]},{"teal":540,"source":"contracts/ARC11550.algo.ts:144","pc":[579]},{"teal":541,"source":"contracts/ARC11550.algo.ts:144","pc":[580]},{"teal":542,"source":"contracts/ARC11550.algo.ts:144","pc":[581]},{"teal":543,"source":"contracts/ARC11550.algo.ts:144","pc":[582,583]},{"teal":544,"source":"contracts/ARC11550.algo.ts:144","pc":[584]},{"teal":545,"source":"contracts/ARC11550.algo.ts:144","pc":[585,586]},{"teal":546,"source":"contracts/ARC11550.algo.ts:144","pc":[587]},{"teal":547,"source":"contracts/ARC11550.algo.ts:144","pc":[588,589]},{"teal":551,"source":"contracts/ARC11550.algo.ts:145","pc":[590,591]},{"teal":552,"source":"contracts/ARC11550.algo.ts:145","pc":[592]},{"teal":553,"source":"contracts/ARC11550.algo.ts:145","pc":[593,594]},{"teal":554,"source":"contracts/ARC11550.algo.ts:145","pc":[595]},{"teal":555,"source":"contracts/ARC11550.algo.ts:145","pc":[596,597]},{"teal":556,"source":"contracts/ARC11550.algo.ts:145","pc":[598]},{"teal":557,"source":"contracts/ARC11550.algo.ts:145","pc":[599]},{"teal":558,"source":"contracts/ARC11550.algo.ts:145","pc":[600]},{"teal":561,"source":"contracts/ARC11550.algo.ts:145","errorMessage":"box value does not exist: this.balances({ id: id, address: addr }).value","pc":[601]},{"teal":562,"source":"contracts/ARC11550.algo.ts:145","pc":[602]},{"teal":563,"source":"contracts/ARC11550.algo.ts:145","pc":[603]},{"teal":564,"source":"contracts/ARC11550.algo.ts:145","pc":[604]},{"teal":565,"source":"contracts/ARC11550.algo.ts:145","pc":[605,606]},{"teal":570,"source":"contracts/ARC11550.algo.ts:142","pc":[607,608]},{"teal":571,"source":"contracts/ARC11550.algo.ts:142","pc":[609]},{"teal":572,"source":"contracts/ARC11550.algo.ts:142","pc":[610]},{"teal":573,"source":"contracts/ARC11550.algo.ts:142","pc":[611,612]},{"teal":574,"source":"contracts/ARC11550.algo.ts:142","pc":[613,614,615]},{"teal":579,"source":"contracts/ARC11550.algo.ts:148","pc":[616,617]},{"teal":582,"source":"contracts/ARC11550.algo.ts:140","pc":[618,619]},{"teal":585,"source":"contracts/ARC11550.algo.ts:140","pc":[620,621]},{"teal":586,"source":"contracts/ARC11550.algo.ts:140","pc":[622]},{"teal":591,"source":"contracts/ARC11550.algo.ts:151","pc":[623]},{"teal":594,"source":"contracts/ARC11550.algo.ts:151","pc":[624,625,626]},{"teal":595,"source":"contracts/ARC11550.algo.ts:151","pc":[627]},{"teal":598,"source":"contracts/ARC11550.algo.ts:151","pc":[628,629,630]},{"teal":599,"source":"contracts/ARC11550.algo.ts:151","pc":[631]},{"teal":600,"source":"contracts/ARC11550.algo.ts:151","pc":[632]},{"teal":601,"source":"contracts/ARC11550.algo.ts:151","pc":[633]},{"teal":602,"source":"contracts/ARC11550.algo.ts:151","pc":[634]},{"teal":606,"source":"contracts/ARC11550.algo.ts:151","pc":[635,636,637]},{"teal":610,"source":"contracts/ARC11550.algo.ts:152","pc":[638,639]},{"teal":611,"source":"contracts/ARC11550.algo.ts:152","pc":[640,641]},{"teal":612,"source":"contracts/ARC11550.algo.ts:152","pc":[642]},{"teal":613,"source":"contracts/ARC11550.algo.ts:152","pc":[643]},{"teal":614,"source":"contracts/ARC11550.algo.ts:152","pc":[644]},{"teal":617,"source":"contracts/ARC11550.algo.ts:152","errorMessage":"box value does not exist: this.params(id).value","pc":[645]},{"teal":618,"source":"contracts/ARC11550.algo.ts:151","pc":[646]},{"teal":623,"source":"contracts/ARC11550.algo.ts:155","pc":[647]},{"teal":626,"source":"contracts/ARC11550.algo.ts:155","pc":[648,649,650]},{"teal":627,"source":"contracts/ARC11550.algo.ts:155","pc":[651,652,653]},{"teal":630,"source":"contracts/ARC11550.algo.ts:155","pc":[654,655,656]},{"teal":631,"source":"contracts/ARC11550.algo.ts:155","pc":[657]},{"teal":632,"source":"contracts/ARC11550.algo.ts:155","pc":[658]},{"teal":633,"source":"contracts/ARC11550.algo.ts:155","pc":[659,660]},{"teal":634,"source":"contracts/ARC11550.algo.ts:155","pc":[661]},{"teal":635,"source":"contracts/ARC11550.algo.ts:155","pc":[662]},{"teal":636,"source":"contracts/ARC11550.algo.ts:155","pc":[663,664,665]},{"teal":637,"source":"contracts/ARC11550.algo.ts:155","pc":[666]},{"teal":638,"source":"contracts/ARC11550.algo.ts:155","pc":[667]},{"teal":639,"source":"contracts/ARC11550.algo.ts:155","pc":[668]},{"teal":640,"source":"contracts/ARC11550.algo.ts:155","pc":[669]},{"teal":641,"source":"contracts/ARC11550.algo.ts:155","pc":[670]},{"teal":642,"source":"contracts/ARC11550.algo.ts:155","pc":[671]},{"teal":646,"source":"contracts/ARC11550.algo.ts:155","pc":[672,673,674]},{"teal":649,"source":"contracts/ARC11550.algo.ts:155","pc":[675]},{"teal":650,"source":"contracts/ARC11550.algo.ts:155","pc":[676,677]},{"teal":654,"source":"contracts/ARC11550.algo.ts:156","pc":[678]},{"teal":655,"source":"contracts/ARC11550.algo.ts:156","pc":[679,680]},{"teal":659,"source":"contracts/ARC11550.algo.ts:157","pc":[681]},{"teal":660,"source":"contracts/ARC11550.algo.ts:157","pc":[682,683]},{"teal":665,"source":"contracts/ARC11550.algo.ts:157","pc":[684,685]},{"teal":666,"source":"contracts/ARC11550.algo.ts:157","pc":[686,687]},{"teal":667,"source":"contracts/ARC11550.algo.ts:157","pc":[688]},{"teal":668,"source":"contracts/ARC11550.algo.ts:157","pc":[689]},{"teal":669,"source":"contracts/ARC11550.algo.ts:157","pc":[690]},{"teal":670,"source":"contracts/ARC11550.algo.ts:157","pc":[691]},{"teal":671,"source":"contracts/ARC11550.algo.ts:157","pc":[692,693,694]},{"teal":675,"source":"contracts/ARC11550.algo.ts:158","pc":[695,696]},{"teal":676,"source":"contracts/ARC11550.algo.ts:158","pc":[697,698]},{"teal":677,"source":"contracts/ARC11550.algo.ts:158","pc":[699]},{"teal":678,"source":"contracts/ARC11550.algo.ts:158","pc":[700,701]},{"teal":679,"source":"contracts/ARC11550.algo.ts:158","pc":[702]},{"teal":680,"source":"contracts/ARC11550.algo.ts:158","pc":[703]},{"teal":681,"source":"contracts/ARC11550.algo.ts:158","pc":[704]},{"teal":682,"source":"contracts/ARC11550.algo.ts:158","pc":[705,706]},{"teal":683,"source":"contracts/ARC11550.algo.ts:158","pc":[707]},{"teal":684,"source":"contracts/ARC11550.algo.ts:158","pc":[708]},{"teal":685,"source":"contracts/ARC11550.algo.ts:158","pc":[709]},{"teal":686,"source":"contracts/ARC11550.algo.ts:158","pc":[710]},{"teal":687,"source":"contracts/ARC11550.algo.ts:158","pc":[711,712]},{"teal":691,"source":"contracts/ARC11550.algo.ts:159","pc":[713,714]},{"teal":692,"source":"contracts/ARC11550.algo.ts:159","pc":[715,716]},{"teal":693,"source":"contracts/ARC11550.algo.ts:159","pc":[717,718]},{"teal":694,"source":"contracts/ARC11550.algo.ts:159","pc":[719]},{"teal":695,"source":"contracts/ARC11550.algo.ts:159","pc":[720]},{"teal":696,"source":"contracts/ARC11550.algo.ts:159","pc":[721]},{"teal":699,"source":"contracts/ARC11550.algo.ts:159","errorMessage":"box value does not exist: this.params(id).value","pc":[722]},{"teal":700,"source":"contracts/ARC11550.algo.ts:159","pc":[723]},{"teal":701,"source":"contracts/ARC11550.algo.ts:159","pc":[724,725]},{"teal":706,"source":"contracts/ARC11550.algo.ts:157","pc":[726,727]},{"teal":707,"source":"contracts/ARC11550.algo.ts:157","pc":[728]},{"teal":708,"source":"contracts/ARC11550.algo.ts:157","pc":[729]},{"teal":709,"source":"contracts/ARC11550.algo.ts:157","pc":[730,731]},{"teal":710,"source":"contracts/ARC11550.algo.ts:157","pc":[732,733,734]},{"teal":715,"source":"contracts/ARC11550.algo.ts:162","pc":[735,736]},{"teal":718,"source":"contracts/ARC11550.algo.ts:155","pc":[737,738]},{"teal":721,"source":"contracts/ARC11550.algo.ts:155","pc":[739,740]},{"teal":722,"source":"contracts/ARC11550.algo.ts:155","pc":[741]},{"teal":727,"source":"contracts/ARC11550.algo.ts:165","pc":[742,743,744]},{"teal":728,"source":"contracts/ARC11550.algo.ts:165","pc":[745]},{"teal":729,"source":"contracts/ARC11550.algo.ts:165","pc":[746]},{"teal":730,"source":"contracts/ARC11550.algo.ts:165","pc":[747,748]},{"teal":731,"source":"contracts/ARC11550.algo.ts:165","pc":[749]},{"teal":734,"source":"contracts/ARC11550.algo.ts:165","errorMessage":"argument 0 (allowance) for arc11550_approve must be a (uint64,uint64)","pc":[750]},{"teal":737,"source":"contracts/ARC11550.algo.ts:165","pc":[751,752,753]},{"teal":738,"source":"contracts/ARC11550.algo.ts:165","pc":[754]},{"teal":739,"source":"contracts/ARC11550.algo.ts:165","pc":[755]},{"teal":740,"source":"contracts/ARC11550.algo.ts:165","pc":[756,757]},{"teal":741,"source":"contracts/ARC11550.algo.ts:165","pc":[758]},{"teal":744,"source":"contracts/ARC11550.algo.ts:165","errorMessage":"argument 1 (allowanceKey) for arc11550_approve must be a (address,address,uint64)","pc":[759]},{"teal":747,"source":"contracts/ARC11550.algo.ts:165","pc":[760,761,762]},{"teal":748,"source":"contracts/ARC11550.algo.ts:165","pc":[763]},{"teal":749,"source":"contracts/ARC11550.algo.ts:165","pc":[764]},{"teal":753,"source":"contracts/ARC11550.algo.ts:165","pc":[765,766,767]},{"teal":757,"source":"contracts/ARC11550.algo.ts:166","pc":[768,769]},{"teal":758,"source":"contracts/ARC11550.algo.ts:166","pc":[770,771]},{"teal":759,"source":"contracts/ARC11550.algo.ts:166","pc":[772,773]},{"teal":760,"source":"contracts/ARC11550.algo.ts:166","pc":[774,775]},{"teal":761,"source":"contracts/ARC11550.algo.ts:166","pc":[776,777]},{"teal":762,"source":"contracts/ARC11550.algo.ts:166","pc":[778,779,780]},{"teal":763,"source":"contracts/ARC11550.algo.ts:166","pc":[781]},{"teal":764,"source":"contracts/ARC11550.algo.ts:166","pc":[782]},{"teal":765,"source":"contracts/ARC11550.algo.ts:166","pc":[783]},{"teal":766,"source":"contracts/ARC11550.algo.ts:166","pc":[784,785]},{"teal":767,"source":"contracts/ARC11550.algo.ts:166","pc":[786]},{"teal":768,"source":"contracts/ARC11550.algo.ts:166","pc":[787]},{"teal":769,"source":"contracts/ARC11550.algo.ts:166","pc":[788]},{"teal":773,"source":"contracts/ARC11550.algo.ts:167","pc":[789,790]},{"teal":774,"source":"contracts/ARC11550.algo.ts:167","pc":[791,792]},{"teal":775,"source":"contracts/ARC11550.algo.ts:167","pc":[793]},{"teal":776,"source":"contracts/ARC11550.algo.ts:167","pc":[794,795]},{"teal":777,"source":"contracts/ARC11550.algo.ts:167","pc":[796]},{"teal":778,"source":"contracts/ARC11550.algo.ts:165","pc":[797]},{"teal":783,"source":"contracts/ARC11550.algo.ts:170","pc":[798,799,800]},{"teal":784,"source":"contracts/ARC11550.algo.ts:170","pc":[801,802,803]},{"teal":787,"source":"contracts/ARC11550.algo.ts:170","pc":[804,805,806]},{"teal":788,"source":"contracts/ARC11550.algo.ts:170","pc":[807]},{"teal":789,"source":"contracts/ARC11550.algo.ts:170","pc":[808]},{"teal":793,"source":"contracts/ARC11550.algo.ts:170","pc":[809,810,811]},{"teal":796,"source":"contracts/ARC11550.algo.ts:170","pc":[812]},{"teal":797,"source":"contracts/ARC11550.algo.ts:170","pc":[813]},{"teal":801,"source":"contracts/ARC11550.algo.ts:171","pc":[814]},{"teal":802,"source":"contracts/ARC11550.algo.ts:171","pc":[815,816]},{"teal":807,"source":"contracts/ARC11550.algo.ts:171","pc":[817,818]},{"teal":808,"source":"contracts/ARC11550.algo.ts:171","pc":[819,820]},{"teal":809,"source":"contracts/ARC11550.algo.ts:171","pc":[821]},{"teal":810,"source":"contracts/ARC11550.algo.ts:171","pc":[822,823]},{"teal":811,"source":"contracts/ARC11550.algo.ts:171","pc":[824]},{"teal":812,"source":"contracts/ARC11550.algo.ts:171","pc":[825]},{"teal":813,"source":"contracts/ARC11550.algo.ts:171","pc":[826,827,828]},{"teal":814,"source":"contracts/ARC11550.algo.ts:172","pc":[829,830]},{"teal":815,"source":"contracts/ARC11550.algo.ts:172","pc":[831,832]},{"teal":819,"source":"contracts/ARC11550.algo.ts:173","pc":[833,834]},{"teal":820,"source":"contracts/ARC11550.algo.ts:173","pc":[835,836]},{"teal":821,"source":"contracts/ARC11550.algo.ts:173","pc":[837]},{"teal":822,"source":"contracts/ARC11550.algo.ts:173","pc":[838,839]},{"teal":823,"source":"contracts/ARC11550.algo.ts:173","pc":[840,841]},{"teal":824,"source":"contracts/ARC11550.algo.ts:173","pc":[842]},{"teal":825,"source":"contracts/ARC11550.algo.ts:173","pc":[843]},{"teal":826,"source":"contracts/ARC11550.algo.ts:173","pc":[844,845]},{"teal":827,"source":"contracts/ARC11550.algo.ts:173","pc":[846]},{"teal":828,"source":"contracts/ARC11550.algo.ts:173","pc":[847,848]},{"teal":829,"source":"contracts/ARC11550.algo.ts:173","pc":[849]},{"teal":830,"source":"contracts/ARC11550.algo.ts:173","pc":[850,851]},{"teal":831,"source":"contracts/ARC11550.algo.ts:173","pc":[852]},{"teal":832,"source":"contracts/ARC11550.algo.ts:173","pc":[853,854]},{"teal":833,"source":"contracts/ARC11550.algo.ts:173","pc":[855,856]},{"teal":834,"source":"contracts/ARC11550.algo.ts:173","pc":[857]},{"teal":835,"source":"contracts/ARC11550.algo.ts:173","pc":[858,859]},{"teal":836,"source":"contracts/ARC11550.algo.ts:173","pc":[860,861]},{"teal":837,"source":"contracts/ARC11550.algo.ts:173","pc":[862]},{"teal":838,"source":"contracts/ARC11550.algo.ts:173","pc":[863]},{"teal":839,"source":"contracts/ARC11550.algo.ts:173","pc":[864]},{"teal":840,"source":"contracts/ARC11550.algo.ts:173","pc":[865]},{"teal":841,"source":"contracts/ARC11550.algo.ts:173","pc":[866,867]},{"teal":842,"source":"contracts/ARC11550.algo.ts:173","pc":[868]},{"teal":843,"source":"contracts/ARC11550.algo.ts:173","pc":[869,870]},{"teal":844,"source":"contracts/ARC11550.algo.ts:173","pc":[871]},{"teal":845,"source":"contracts/ARC11550.algo.ts:173","pc":[872,873,874]},{"teal":850,"source":"contracts/ARC11550.algo.ts:171","pc":[875,876]},{"teal":851,"source":"contracts/ARC11550.algo.ts:171","pc":[877]},{"teal":852,"source":"contracts/ARC11550.algo.ts:171","pc":[878]},{"teal":853,"source":"contracts/ARC11550.algo.ts:171","pc":[879,880]},{"teal":854,"source":"contracts/ARC11550.algo.ts:171","pc":[881,882,883]},{"teal":857,"source":"contracts/ARC11550.algo.ts:170","pc":[884]},{"teal":862,"source":"contracts/ARC11550.algo.ts:179","pc":[885,886,887]},{"teal":863,"source":"contracts/ARC11550.algo.ts:179","pc":[888,889,890]},{"teal":866,"source":"contracts/ARC11550.algo.ts:179","pc":[891,892,893]},{"teal":867,"source":"contracts/ARC11550.algo.ts:179","pc":[894]},{"teal":868,"source":"contracts/ARC11550.algo.ts:179","pc":[895]},{"teal":872,"source":"contracts/ARC11550.algo.ts:179","pc":[896,897,898]},{"teal":875,"source":"contracts/ARC11550.algo.ts:179","pc":[899]},{"teal":876,"source":"contracts/ARC11550.algo.ts:179","pc":[900,901]},{"teal":881,"source":"contracts/ARC11550.algo.ts:181","pc":[902,903,904]},{"teal":882,"source":"contracts/ARC11550.algo.ts:181","pc":[905,906]},{"teal":883,"source":"contracts/ARC11550.algo.ts:181","pc":[907]},{"teal":884,"source":"contracts/ARC11550.algo.ts:181","pc":[908]},{"teal":885,"source":"contracts/ARC11550.algo.ts:181","pc":[909]},{"teal":886,"source":"contracts/ARC11550.algo.ts:181","pc":[910,911,912]},{"teal":896,"source":"contracts/ARC11550.algo.ts:183","pc":[913]},{"teal":897,"source":"contracts/ARC11550.algo.ts:183","pc":[914,915]},{"teal":898,"source":"contracts/ARC11550.algo.ts:183","pc":[916,917]},{"teal":899,"source":"contracts/ARC11550.algo.ts:183","pc":[918,919,920,921,922,923]},{"teal":900,"source":"contracts/ARC11550.algo.ts:183","pc":[924,925]},{"teal":904,"source":"contracts/ARC11550.algo.ts:184","pc":[926,927]},{"teal":905,"source":"contracts/ARC11550.algo.ts:184","pc":[928]},{"teal":906,"source":"contracts/ARC11550.algo.ts:184","pc":[929,930]},{"teal":910,"source":"contracts/ARC11550.algo.ts:185","pc":[931,932]},{"teal":911,"source":"contracts/ARC11550.algo.ts:185","pc":[933,934]},{"teal":912,"source":"contracts/ARC11550.algo.ts:185","pc":[935,936]},{"teal":913,"source":"contracts/ARC11550.algo.ts:185","pc":[937]},{"teal":914,"source":"contracts/ARC11550.algo.ts:185","pc":[938]},{"teal":915,"source":"contracts/ARC11550.algo.ts:185","pc":[939]},{"teal":916,"source":"contracts/ARC11550.algo.ts:185","pc":[940]},{"teal":917,"source":"contracts/ARC11550.algo.ts:185","pc":[941]},{"teal":918,"source":"contracts/ARC11550.algo.ts:185","pc":[942,943,944]},{"teal":919,"source":"contracts/ARC11550.algo.ts:185","pc":[945]},{"teal":920,"source":"contracts/ARC11550.algo.ts:185","pc":[946]},{"teal":921,"source":"contracts/ARC11550.algo.ts:185","pc":[947,948]},{"teal":924,"source":"contracts/ARC11550.algo.ts:183","pc":[949]},{"teal":925,"source":"contracts/ARC11550.algo.ts:183","pc":[950,951]},{"teal":928,"source":"contracts/ARC11550.algo.ts:183","pc":[952]},{"teal":929,"source":"contracts/ARC11550.algo.ts:183","pc":[953,954]},{"teal":930,"source":"contracts/ARC11550.algo.ts:183","pc":[955]},{"teal":931,"source":"contracts/ARC11550.algo.ts:183","pc":[956]},{"teal":932,"source":"contracts/ARC11550.algo.ts:183","pc":[957,958]},{"teal":933,"source":"contracts/ARC11550.algo.ts:183","pc":[959,960,961]},{"teal":934,"source":"contracts/ARC11550.algo.ts:183","pc":[962]},{"teal":935,"source":"contracts/ARC11550.algo.ts:183","pc":[963]},{"teal":936,"source":"contracts/ARC11550.algo.ts:182","pc":[964]},{"teal":941,"source":"contracts/ARC11550.algo.ts:191","pc":[965]},{"teal":942,"source":"contracts/ARC11550.algo.ts:191","pc":[966,967]},{"teal":947,"source":"contracts/ARC11550.algo.ts:191","pc":[968,969]},{"teal":948,"source":"contracts/ARC11550.algo.ts:191","pc":[970,971]},{"teal":949,"source":"contracts/ARC11550.algo.ts:191","pc":[972]},{"teal":950,"source":"contracts/ARC11550.algo.ts:191","pc":[973]},{"teal":951,"source":"contracts/ARC11550.algo.ts:191","pc":[974]},{"teal":952,"source":"contracts/ARC11550.algo.ts:191","pc":[975]},{"teal":953,"source":"contracts/ARC11550.algo.ts:191","pc":[976,977,978]},{"teal":954,"source":"contracts/ARC11550.algo.ts:192","pc":[979,980]},{"teal":955,"source":"contracts/ARC11550.algo.ts:192","pc":[981,982]},{"teal":960,"source":"contracts/ARC11550.algo.ts:194","pc":[983,984]},{"teal":961,"source":"contracts/ARC11550.algo.ts:194","pc":[985,986]},{"teal":962,"source":"contracts/ARC11550.algo.ts:194","pc":[987]},{"teal":963,"source":"contracts/ARC11550.algo.ts:194","pc":[988,989]},{"teal":964,"source":"contracts/ARC11550.algo.ts:194","pc":[990]},{"teal":965,"source":"contracts/ARC11550.algo.ts:194","pc":[991]},{"teal":966,"source":"contracts/ARC11550.algo.ts:194","pc":[992]},{"teal":967,"source":"contracts/ARC11550.algo.ts:194","pc":[993]},{"teal":968,"source":"contracts/ARC11550.algo.ts:194","pc":[994]},{"teal":969,"source":"contracts/ARC11550.algo.ts:194","pc":[995,996]},{"teal":970,"source":"contracts/ARC11550.algo.ts:194","pc":[997]},{"teal":971,"source":"contracts/ARC11550.algo.ts:194","pc":[998,999]},{"teal":972,"source":"contracts/ARC11550.algo.ts:194","pc":[1000]},{"teal":973,"source":"contracts/ARC11550.algo.ts:194","pc":[1001,1002]},{"teal":974,"source":"contracts/ARC11550.algo.ts:194","pc":[1003]},{"teal":975,"source":"contracts/ARC11550.algo.ts:194","pc":[1004,1005,1006]},{"teal":980,"source":"contracts/ARC11550.algo.ts:195","pc":[1007,1008]},{"teal":981,"source":"contracts/ARC11550.algo.ts:195","pc":[1009,1010]},{"teal":982,"source":"contracts/ARC11550.algo.ts:195","pc":[1011,1012]},{"teal":983,"source":"contracts/ARC11550.algo.ts:195","pc":[1013]},{"teal":984,"source":"contracts/ARC11550.algo.ts:195","pc":[1014,1015]},{"teal":985,"source":"contracts/ARC11550.algo.ts:195","pc":[1016]},{"teal":986,"source":"contracts/ARC11550.algo.ts:195","pc":[1017]},{"teal":987,"source":"contracts/ARC11550.algo.ts:195","pc":[1018]},{"teal":988,"source":"contracts/ARC11550.algo.ts:195","pc":[1019]},{"teal":989,"source":"contracts/ARC11550.algo.ts:195","pc":[1020]},{"teal":990,"source":"contracts/ARC11550.algo.ts:195","pc":[1021,1022]},{"teal":991,"source":"contracts/ARC11550.algo.ts:195","pc":[1023]},{"teal":992,"source":"contracts/ARC11550.algo.ts:195","pc":[1024,1025]},{"teal":993,"source":"contracts/ARC11550.algo.ts:195","pc":[1026]},{"teal":994,"source":"contracts/ARC11550.algo.ts:195","pc":[1027,1028]},{"teal":995,"source":"contracts/ARC11550.algo.ts:195","pc":[1029]},{"teal":996,"source":"contracts/ARC11550.algo.ts:195","pc":[1030,1031]},{"teal":997,"source":"contracts/ARC11550.algo.ts:195","pc":[1032,1033]},{"teal":998,"source":"contracts/ARC11550.algo.ts:195","pc":[1034]},{"teal":999,"source":"contracts/ARC11550.algo.ts:195","pc":[1035,1036]},{"teal":1000,"source":"contracts/ARC11550.algo.ts:195","pc":[1037]},{"teal":1001,"source":"contracts/ARC11550.algo.ts:195","pc":[1038]},{"teal":1002,"source":"contracts/ARC11550.algo.ts:195","pc":[1039]},{"teal":1003,"source":"contracts/ARC11550.algo.ts:195","pc":[1040]},{"teal":1004,"source":"contracts/ARC11550.algo.ts:195","pc":[1041]},{"teal":1005,"source":"contracts/ARC11550.algo.ts:195","pc":[1042,1043]},{"teal":1006,"source":"contracts/ARC11550.algo.ts:195","pc":[1044]},{"teal":1007,"source":"contracts/ARC11550.algo.ts:195","pc":[1045]},{"teal":1008,"source":"contracts/ARC11550.algo.ts:195","pc":[1046]},{"teal":1009,"source":"contracts/ARC11550.algo.ts:195","pc":[1047]},{"teal":1010,"source":"contracts/ARC11550.algo.ts:195","pc":[1048]},{"teal":1011,"source":"contracts/ARC11550.algo.ts:195","pc":[1049]},{"teal":1012,"source":"contracts/ARC11550.algo.ts:195","pc":[1050]},{"teal":1013,"source":"contracts/ARC11550.algo.ts:195","pc":[1051,1052]},{"teal":1017,"source":"contracts/ARC11550.algo.ts:196","pc":[1053]},{"teal":1018,"source":"contracts/ARC11550.algo.ts:196","pc":[1054]},{"teal":1019,"source":"contracts/ARC11550.algo.ts:195","pc":[1055,1056]},{"teal":1023,"source":"contracts/ARC11550.algo.ts:195","pc":[1057,1058]},{"teal":1024,"source":"contracts/ARC11550.algo.ts:195","pc":[1059,1060]},{"teal":1025,"source":"contracts/ARC11550.algo.ts:195","pc":[1061]},{"teal":1026,"source":"contracts/ARC11550.algo.ts:195","pc":[1062,1063]},{"teal":1027,"source":"contracts/ARC11550.algo.ts:195","pc":[1064]},{"teal":1028,"source":"contracts/ARC11550.algo.ts:195","pc":[1065]},{"teal":1029,"source":"contracts/ARC11550.algo.ts:195","pc":[1066]},{"teal":1030,"source":"contracts/ARC11550.algo.ts:195","pc":[1067]},{"teal":1031,"source":"contracts/ARC11550.algo.ts:195","pc":[1068]},{"teal":1032,"source":"contracts/ARC11550.algo.ts:195","pc":[1069,1070]},{"teal":1033,"source":"contracts/ARC11550.algo.ts:195","pc":[1071]},{"teal":1034,"source":"contracts/ARC11550.algo.ts:195","pc":[1072,1073]},{"teal":1035,"source":"contracts/ARC11550.algo.ts:195","pc":[1074]},{"teal":1039,"source":"contracts/ARC11550.algo.ts:195","pc":[1075,1076]},{"teal":1040,"source":"contracts/ARC11550.algo.ts:195","pc":[1077]},{"teal":1044,"source":"contracts/ARC11550.algo.ts:195","pc":[1078,1079]},{"teal":1045,"source":"contracts/ARC11550.algo.ts:195","pc":[1080,1081]},{"teal":1046,"source":"contracts/ARC11550.algo.ts:195","pc":[1082]},{"teal":1047,"source":"contracts/ARC11550.algo.ts:195","pc":[1083,1084]},{"teal":1048,"source":"contracts/ARC11550.algo.ts:195","pc":[1085]},{"teal":1049,"source":"contracts/ARC11550.algo.ts:195","pc":[1086]},{"teal":1050,"source":"contracts/ARC11550.algo.ts:195","pc":[1087]},{"teal":1051,"source":"contracts/ARC11550.algo.ts:195","pc":[1088]},{"teal":1052,"source":"contracts/ARC11550.algo.ts:195","pc":[1089]},{"teal":1053,"source":"contracts/ARC11550.algo.ts:195","pc":[1090,1091]},{"teal":1054,"source":"contracts/ARC11550.algo.ts:195","pc":[1092]},{"teal":1055,"source":"contracts/ARC11550.algo.ts:195","pc":[1093]},{"teal":1056,"source":"contracts/ARC11550.algo.ts:195","pc":[1094]},{"teal":1057,"source":"contracts/ARC11550.algo.ts:195","pc":[1095]},{"teal":1058,"source":"contracts/ARC11550.algo.ts:195","pc":[1096]},{"teal":1059,"source":"contracts/ARC11550.algo.ts:195","pc":[1097]},{"teal":1060,"source":"contracts/ARC11550.algo.ts:195","pc":[1098]},{"teal":1061,"source":"contracts/ARC11550.algo.ts:195","pc":[1099,1100]},{"teal":1062,"source":"contracts/ARC11550.algo.ts:195","pc":[1101]},{"teal":1063,"source":"contracts/ARC11550.algo.ts:196","pc":[1102]},{"teal":1067,"source":"contracts/ARC11550.algo.ts:196","pc":[1103,1104]},{"teal":1068,"source":"contracts/ARC11550.algo.ts:196","pc":[1105]},{"teal":1069,"source":"contracts/ARC11550.algo.ts:196","pc":[1106]},{"teal":1073,"source":"contracts/ARC11550.algo.ts:197","pc":[1107]},{"teal":1074,"source":"contracts/ARC11550.algo.ts:197","pc":[1108]},{"teal":1075,"source":"contracts/ARC11550.algo.ts:197","pc":[1109]},{"teal":1076,"source":"contracts/ARC11550.algo.ts:195","pc":[1110,1111]},{"teal":1080,"source":"contracts/ARC11550.algo.ts:195","pc":[1112,1113]},{"teal":1081,"source":"contracts/ARC11550.algo.ts:195","pc":[1114,1115]},{"teal":1082,"source":"contracts/ARC11550.algo.ts:195","pc":[1116]},{"teal":1083,"source":"contracts/ARC11550.algo.ts:195","pc":[1117,1118]},{"teal":1084,"source":"contracts/ARC11550.algo.ts:195","pc":[1119]},{"teal":1085,"source":"contracts/ARC11550.algo.ts:195","pc":[1120]},{"teal":1086,"source":"contracts/ARC11550.algo.ts:195","pc":[1121]},{"teal":1087,"source":"contracts/ARC11550.algo.ts:195","pc":[1122]},{"teal":1088,"source":"contracts/ARC11550.algo.ts:195","pc":[1123]},{"teal":1089,"source":"contracts/ARC11550.algo.ts:195","pc":[1124,1125]},{"teal":1090,"source":"contracts/ARC11550.algo.ts:195","pc":[1126]},{"teal":1091,"source":"contracts/ARC11550.algo.ts:195","pc":[1127,1128]},{"teal":1092,"source":"contracts/ARC11550.algo.ts:195","pc":[1129]},{"teal":1096,"source":"contracts/ARC11550.algo.ts:195","pc":[1130,1131]},{"teal":1097,"source":"contracts/ARC11550.algo.ts:195","pc":[1132]},{"teal":1101,"source":"contracts/ARC11550.algo.ts:195","pc":[1133,1134]},{"teal":1102,"source":"contracts/ARC11550.algo.ts:195","pc":[1135,1136]},{"teal":1103,"source":"contracts/ARC11550.algo.ts:195","pc":[1137]},{"teal":1104,"source":"contracts/ARC11550.algo.ts:195","pc":[1138,1139]},{"teal":1105,"source":"contracts/ARC11550.algo.ts:195","pc":[1140]},{"teal":1106,"source":"contracts/ARC11550.algo.ts:195","pc":[1141]},{"teal":1107,"source":"contracts/ARC11550.algo.ts:195","pc":[1142]},{"teal":1108,"source":"contracts/ARC11550.algo.ts:195","pc":[1143]},{"teal":1109,"source":"contracts/ARC11550.algo.ts:195","pc":[1144]},{"teal":1110,"source":"contracts/ARC11550.algo.ts:195","pc":[1145,1146]},{"teal":1111,"source":"contracts/ARC11550.algo.ts:195","pc":[1147]},{"teal":1112,"source":"contracts/ARC11550.algo.ts:195","pc":[1148]},{"teal":1113,"source":"contracts/ARC11550.algo.ts:195","pc":[1149]},{"teal":1114,"source":"contracts/ARC11550.algo.ts:195","pc":[1150]},{"teal":1115,"source":"contracts/ARC11550.algo.ts:195","pc":[1151]},{"teal":1116,"source":"contracts/ARC11550.algo.ts:195","pc":[1152]},{"teal":1117,"source":"contracts/ARC11550.algo.ts:195","pc":[1153]},{"teal":1118,"source":"contracts/ARC11550.algo.ts:195","pc":[1154,1155]},{"teal":1119,"source":"contracts/ARC11550.algo.ts:195","pc":[1156]},{"teal":1120,"source":"contracts/ARC11550.algo.ts:197","pc":[1157]},{"teal":1124,"source":"contracts/ARC11550.algo.ts:197","pc":[1158,1159]},{"teal":1125,"source":"contracts/ARC11550.algo.ts:197","pc":[1160,1161]},{"teal":1126,"source":"contracts/ARC11550.algo.ts:197","pc":[1162]},{"teal":1127,"source":"contracts/ARC11550.algo.ts:197","pc":[1163,1164]},{"teal":1128,"source":"contracts/ARC11550.algo.ts:197","pc":[1165]},{"teal":1129,"source":"contracts/ARC11550.algo.ts:197","pc":[1166]},{"teal":1130,"source":"contracts/ARC11550.algo.ts:197","pc":[1167]},{"teal":1131,"source":"contracts/ARC11550.algo.ts:197","pc":[1168,1169]},{"teal":1132,"source":"contracts/ARC11550.algo.ts:197","pc":[1170]},{"teal":1133,"source":"contracts/ARC11550.algo.ts:197","pc":[1171,1172]},{"teal":1134,"source":"contracts/ARC11550.algo.ts:197","pc":[1173]},{"teal":1135,"source":"contracts/ARC11550.algo.ts:197","pc":[1174]},{"teal":1136,"source":"contracts/ARC11550.algo.ts:197","pc":[1175]},{"teal":1137,"source":"contracts/ARC11550.algo.ts:197","pc":[1176]},{"teal":1138,"source":"contracts/ARC11550.algo.ts:197","pc":[1177]},{"teal":1139,"source":"contracts/ARC11550.algo.ts:197","pc":[1178]},{"teal":1140,"source":"contracts/ARC11550.algo.ts:195","pc":[1179,1180]},{"teal":1141,"source":"contracts/ARC11550.algo.ts:195","pc":[1181,1182]},{"teal":1142,"source":"contracts/ARC11550.algo.ts:195","pc":[1183]},{"teal":1147,"source":"contracts/ARC11550.algo.ts:199","pc":[1184]},{"teal":1148,"source":"contracts/ARC11550.algo.ts:199","pc":[1185,1186]},{"teal":1149,"source":"contracts/ARC11550.algo.ts:199","pc":[1187,1188]},{"teal":1150,"source":"contracts/ARC11550.algo.ts:199","pc":[1189]},{"teal":1151,"source":"contracts/ARC11550.algo.ts:199","pc":[1190,1191]},{"teal":1152,"source":"contracts/ARC11550.algo.ts:199","pc":[1192]},{"teal":1153,"source":"contracts/ARC11550.algo.ts:199","pc":[1193]},{"teal":1154,"source":"contracts/ARC11550.algo.ts:199","pc":[1194]},{"teal":1155,"source":"contracts/ARC11550.algo.ts:199","pc":[1195]},{"teal":1156,"source":"contracts/ARC11550.algo.ts:199","pc":[1196]},{"teal":1157,"source":"contracts/ARC11550.algo.ts:199","pc":[1197,1198]},{"teal":1158,"source":"contracts/ARC11550.algo.ts:199","pc":[1199]},{"teal":1159,"source":"contracts/ARC11550.algo.ts:199","pc":[1200]},{"teal":1160,"source":"contracts/ARC11550.algo.ts:199","pc":[1201]},{"teal":1161,"source":"contracts/ARC11550.algo.ts:199","pc":[1202]},{"teal":1162,"source":"contracts/ARC11550.algo.ts:199","pc":[1203]},{"teal":1163,"source":"contracts/ARC11550.algo.ts:199","pc":[1204,1205]},{"teal":1164,"source":"contracts/ARC11550.algo.ts:199","pc":[1206,1207]},{"teal":1165,"source":"contracts/ARC11550.algo.ts:199","pc":[1208]},{"teal":1166,"source":"contracts/ARC11550.algo.ts:199","pc":[1209,1210]},{"teal":1167,"source":"contracts/ARC11550.algo.ts:199","pc":[1211]},{"teal":1168,"source":"contracts/ARC11550.algo.ts:199","pc":[1212]},{"teal":1169,"source":"contracts/ARC11550.algo.ts:199","pc":[1213]},{"teal":1170,"source":"contracts/ARC11550.algo.ts:199","pc":[1214]},{"teal":1171,"source":"contracts/ARC11550.algo.ts:199","pc":[1215]},{"teal":1172,"source":"contracts/ARC11550.algo.ts:199","pc":[1216,1217]},{"teal":1173,"source":"contracts/ARC11550.algo.ts:199","pc":[1218]},{"teal":1174,"source":"contracts/ARC11550.algo.ts:199","pc":[1219,1220]},{"teal":1175,"source":"contracts/ARC11550.algo.ts:199","pc":[1221]},{"teal":1176,"source":"contracts/ARC11550.algo.ts:199","pc":[1222]},{"teal":1177,"source":"contracts/ARC11550.algo.ts:199","pc":[1223]},{"teal":1178,"source":"contracts/ARC11550.algo.ts:199","pc":[1224]},{"teal":1181,"source":"contracts/ARC11550.algo.ts:199","errorMessage":"box value does not exist: this.balances({ id: t.id, address: t.from }).value","pc":[1225]},{"teal":1182,"source":"contracts/ARC11550.algo.ts:199","pc":[1226]},{"teal":1183,"source":"contracts/ARC11550.algo.ts:199","pc":[1227,1228]},{"teal":1184,"source":"contracts/ARC11550.algo.ts:199","pc":[1229,1230]},{"teal":1185,"source":"contracts/ARC11550.algo.ts:199","pc":[1231]},{"teal":1186,"source":"contracts/ARC11550.algo.ts:199","pc":[1232,1233]},{"teal":1187,"source":"contracts/ARC11550.algo.ts:199","pc":[1234]},{"teal":1188,"source":"contracts/ARC11550.algo.ts:199","pc":[1235]},{"teal":1189,"source":"contracts/ARC11550.algo.ts:199","pc":[1236]},{"teal":1190,"source":"contracts/ARC11550.algo.ts:199","pc":[1237,1238]},{"teal":1191,"source":"contracts/ARC11550.algo.ts:199","pc":[1239]},{"teal":1192,"source":"contracts/ARC11550.algo.ts:199","pc":[1240,1241]},{"teal":1193,"source":"contracts/ARC11550.algo.ts:199","pc":[1242]},{"teal":1194,"source":"contracts/ARC11550.algo.ts:199","pc":[1243]},{"teal":1195,"source":"contracts/ARC11550.algo.ts:199","pc":[1244]},{"teal":1196,"source":"contracts/ARC11550.algo.ts:199","pc":[1245]},{"teal":1197,"source":"contracts/ARC11550.algo.ts:199","pc":[1246]},{"teal":1198,"source":"contracts/ARC11550.algo.ts:199","pc":[1247]},{"teal":1199,"source":"contracts/ARC11550.algo.ts:199","pc":[1248,1249]},{"teal":1200,"source":"contracts/ARC11550.algo.ts:199","pc":[1250,1251]},{"teal":1201,"source":"contracts/ARC11550.algo.ts:199","pc":[1252]},{"teal":1202,"source":"contracts/ARC11550.algo.ts:199","pc":[1253,1254]},{"teal":1203,"source":"contracts/ARC11550.algo.ts:199","pc":[1255]},{"teal":1204,"source":"contracts/ARC11550.algo.ts:199","pc":[1256]},{"teal":1205,"source":"contracts/ARC11550.algo.ts:199","pc":[1257]},{"teal":1206,"source":"contracts/ARC11550.algo.ts:199","pc":[1258]},{"teal":1207,"source":"contracts/ARC11550.algo.ts:199","pc":[1259]},{"teal":1208,"source":"contracts/ARC11550.algo.ts:199","pc":[1260,1261]},{"teal":1209,"source":"contracts/ARC11550.algo.ts:199","pc":[1262]},{"teal":1210,"source":"contracts/ARC11550.algo.ts:199","pc":[1263]},{"teal":1211,"source":"contracts/ARC11550.algo.ts:199","pc":[1264]},{"teal":1212,"source":"contracts/ARC11550.algo.ts:199","pc":[1265]},{"teal":1213,"source":"contracts/ARC11550.algo.ts:199","pc":[1266]},{"teal":1214,"source":"contracts/ARC11550.algo.ts:199","pc":[1267,1268]},{"teal":1215,"source":"contracts/ARC11550.algo.ts:199","pc":[1269,1270]},{"teal":1216,"source":"contracts/ARC11550.algo.ts:199","pc":[1271]},{"teal":1217,"source":"contracts/ARC11550.algo.ts:199","pc":[1272,1273]},{"teal":1218,"source":"contracts/ARC11550.algo.ts:199","pc":[1274]},{"teal":1219,"source":"contracts/ARC11550.algo.ts:199","pc":[1275]},{"teal":1220,"source":"contracts/ARC11550.algo.ts:199","pc":[1276]},{"teal":1221,"source":"contracts/ARC11550.algo.ts:199","pc":[1277]},{"teal":1222,"source":"contracts/ARC11550.algo.ts:199","pc":[1278]},{"teal":1223,"source":"contracts/ARC11550.algo.ts:199","pc":[1279,1280]},{"teal":1224,"source":"contracts/ARC11550.algo.ts:199","pc":[1281]},{"teal":1225,"source":"contracts/ARC11550.algo.ts:199","pc":[1282,1283]},{"teal":1226,"source":"contracts/ARC11550.algo.ts:199","pc":[1284]},{"teal":1227,"source":"contracts/ARC11550.algo.ts:199","pc":[1285]},{"teal":1228,"source":"contracts/ARC11550.algo.ts:199","pc":[1286]},{"teal":1229,"source":"contracts/ARC11550.algo.ts:199","pc":[1287]},{"teal":1230,"source":"contracts/ARC11550.algo.ts:199","pc":[1288]},{"teal":1231,"source":"contracts/ARC11550.algo.ts:199","pc":[1289]},{"teal":1235,"source":"contracts/ARC11550.algo.ts:200","pc":[1290]},{"teal":1236,"source":"contracts/ARC11550.algo.ts:200","pc":[1291,1292]},{"teal":1237,"source":"contracts/ARC11550.algo.ts:200","pc":[1293,1294]},{"teal":1238,"source":"contracts/ARC11550.algo.ts:200","pc":[1295]},{"teal":1239,"source":"contracts/ARC11550.algo.ts:200","pc":[1296,1297]},{"teal":1240,"source":"contracts/ARC11550.algo.ts:200","pc":[1298]},{"teal":1241,"source":"contracts/ARC11550.algo.ts:200","pc":[1299]},{"teal":1242,"source":"contracts/ARC11550.algo.ts:200","pc":[1300]},{"teal":1243,"source":"contracts/ARC11550.algo.ts:200","pc":[1301]},{"teal":1244,"source":"contracts/ARC11550.algo.ts:200","pc":[1302]},{"teal":1245,"source":"contracts/ARC11550.algo.ts:200","pc":[1303,1304]},{"teal":1246,"source":"contracts/ARC11550.algo.ts:200","pc":[1305]},{"teal":1247,"source":"contracts/ARC11550.algo.ts:200","pc":[1306]},{"teal":1248,"source":"contracts/ARC11550.algo.ts:200","pc":[1307]},{"teal":1249,"source":"contracts/ARC11550.algo.ts:200","pc":[1308]},{"teal":1250,"source":"contracts/ARC11550.algo.ts:200","pc":[1309]},{"teal":1251,"source":"contracts/ARC11550.algo.ts:200","pc":[1310,1311]},{"teal":1252,"source":"contracts/ARC11550.algo.ts:200","pc":[1312,1313]},{"teal":1253,"source":"contracts/ARC11550.algo.ts:200","pc":[1314]},{"teal":1254,"source":"contracts/ARC11550.algo.ts:200","pc":[1315,1316]},{"teal":1255,"source":"contracts/ARC11550.algo.ts:200","pc":[1317]},{"teal":1256,"source":"contracts/ARC11550.algo.ts:200","pc":[1318]},{"teal":1257,"source":"contracts/ARC11550.algo.ts:200","pc":[1319]},{"teal":1258,"source":"contracts/ARC11550.algo.ts:200","pc":[1320,1321]},{"teal":1259,"source":"contracts/ARC11550.algo.ts:200","pc":[1322]},{"teal":1260,"source":"contracts/ARC11550.algo.ts:200","pc":[1323,1324]},{"teal":1261,"source":"contracts/ARC11550.algo.ts:200","pc":[1325]},{"teal":1262,"source":"contracts/ARC11550.algo.ts:200","pc":[1326,1327]},{"teal":1263,"source":"contracts/ARC11550.algo.ts:200","pc":[1328]},{"teal":1264,"source":"contracts/ARC11550.algo.ts:200","pc":[1329]},{"teal":1265,"source":"contracts/ARC11550.algo.ts:200","pc":[1330]},{"teal":1266,"source":"contracts/ARC11550.algo.ts:200","pc":[1331]},{"teal":1269,"source":"contracts/ARC11550.algo.ts:200","errorMessage":"box value does not exist: this.balances({ id: t.id, address: t.to }).value","pc":[1332]},{"teal":1270,"source":"contracts/ARC11550.algo.ts:200","pc":[1333]},{"teal":1271,"source":"contracts/ARC11550.algo.ts:200","pc":[1334,1335]},{"teal":1272,"source":"contracts/ARC11550.algo.ts:200","pc":[1336,1337]},{"teal":1273,"source":"contracts/ARC11550.algo.ts:200","pc":[1338]},{"teal":1274,"source":"contracts/ARC11550.algo.ts:200","pc":[1339,1340]},{"teal":1275,"source":"contracts/ARC11550.algo.ts:200","pc":[1341]},{"teal":1276,"source":"contracts/ARC11550.algo.ts:200","pc":[1342]},{"teal":1277,"source":"contracts/ARC11550.algo.ts:200","pc":[1343]},{"teal":1278,"source":"contracts/ARC11550.algo.ts:200","pc":[1344,1345]},{"teal":1279,"source":"contracts/ARC11550.algo.ts:200","pc":[1346]},{"teal":1280,"source":"contracts/ARC11550.algo.ts:200","pc":[1347,1348]},{"teal":1281,"source":"contracts/ARC11550.algo.ts:200","pc":[1349]},{"teal":1282,"source":"contracts/ARC11550.algo.ts:200","pc":[1350]},{"teal":1283,"source":"contracts/ARC11550.algo.ts:200","pc":[1351]},{"teal":1284,"source":"contracts/ARC11550.algo.ts:200","pc":[1352]},{"teal":1285,"source":"contracts/ARC11550.algo.ts:200","pc":[1353]},{"teal":1286,"source":"contracts/ARC11550.algo.ts:200","pc":[1354]},{"teal":1287,"source":"contracts/ARC11550.algo.ts:200","pc":[1355,1356]},{"teal":1288,"source":"contracts/ARC11550.algo.ts:200","pc":[1357,1358]},{"teal":1289,"source":"contracts/ARC11550.algo.ts:200","pc":[1359]},{"teal":1290,"source":"contracts/ARC11550.algo.ts:200","pc":[1360,1361]},{"teal":1291,"source":"contracts/ARC11550.algo.ts:200","pc":[1362]},{"teal":1292,"source":"contracts/ARC11550.algo.ts:200","pc":[1363]},{"teal":1293,"source":"contracts/ARC11550.algo.ts:200","pc":[1364]},{"teal":1294,"source":"contracts/ARC11550.algo.ts:200","pc":[1365]},{"teal":1295,"source":"contracts/ARC11550.algo.ts:200","pc":[1366]},{"teal":1296,"source":"contracts/ARC11550.algo.ts:200","pc":[1367,1368]},{"teal":1297,"source":"contracts/ARC11550.algo.ts:200","pc":[1369]},{"teal":1298,"source":"contracts/ARC11550.algo.ts:200","pc":[1370]},{"teal":1299,"source":"contracts/ARC11550.algo.ts:200","pc":[1371]},{"teal":1300,"source":"contracts/ARC11550.algo.ts:200","pc":[1372]},{"teal":1301,"source":"contracts/ARC11550.algo.ts:200","pc":[1373]},{"teal":1302,"source":"contracts/ARC11550.algo.ts:200","pc":[1374,1375]},{"teal":1303,"source":"contracts/ARC11550.algo.ts:200","pc":[1376,1377]},{"teal":1304,"source":"contracts/ARC11550.algo.ts:200","pc":[1378]},{"teal":1305,"source":"contracts/ARC11550.algo.ts:200","pc":[1379,1380]},{"teal":1306,"source":"contracts/ARC11550.algo.ts:200","pc":[1381]},{"teal":1307,"source":"contracts/ARC11550.algo.ts:200","pc":[1382]},{"teal":1308,"source":"contracts/ARC11550.algo.ts:200","pc":[1383]},{"teal":1309,"source":"contracts/ARC11550.algo.ts:200","pc":[1384,1385]},{"teal":1310,"source":"contracts/ARC11550.algo.ts:200","pc":[1386]},{"teal":1311,"source":"contracts/ARC11550.algo.ts:200","pc":[1387,1388]},{"teal":1312,"source":"contracts/ARC11550.algo.ts:200","pc":[1389]},{"teal":1313,"source":"contracts/ARC11550.algo.ts:200","pc":[1390,1391]},{"teal":1314,"source":"contracts/ARC11550.algo.ts:200","pc":[1392]},{"teal":1315,"source":"contracts/ARC11550.algo.ts:200","pc":[1393]},{"teal":1316,"source":"contracts/ARC11550.algo.ts:200","pc":[1394]},{"teal":1317,"source":"contracts/ARC11550.algo.ts:200","pc":[1395]},{"teal":1318,"source":"contracts/ARC11550.algo.ts:200","pc":[1396]},{"teal":1319,"source":"contracts/ARC11550.algo.ts:200","pc":[1397]},{"teal":1324,"source":"contracts/ARC11550.algo.ts:191","pc":[1398,1399]},{"teal":1325,"source":"contracts/ARC11550.algo.ts:191","pc":[1400]},{"teal":1326,"source":"contracts/ARC11550.algo.ts:191","pc":[1401]},{"teal":1327,"source":"contracts/ARC11550.algo.ts:191","pc":[1402,1403]},{"teal":1328,"source":"contracts/ARC11550.algo.ts:191","pc":[1404,1405,1406]},{"teal":1331,"source":"contracts/ARC11550.algo.ts:179","pc":[1407]},{"teal":1334,"source":"contracts/ARC11550.algo.ts:46","pc":[1408,1409,1410,1411,1412,1413]},{"teal":1335,"source":"contracts/ARC11550.algo.ts:46","pc":[1414,1415,1416]},{"teal":1336,"source":"contracts/ARC11550.algo.ts:46","pc":[1417,1418,1419,1420]},{"teal":1339,"source":"contracts/ARC11550.algo.ts:46","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[1421]},{"teal":1342,"source":"contracts/ARC11550.algo.ts:46","pc":[1422,1423,1424,1425,1426,1427]},{"teal":1343,"source":"contracts/ARC11550.algo.ts:46","pc":[1428,1429,1430,1431,1432,1433]},{"teal":1344,"source":"contracts/ARC11550.algo.ts:46","pc":[1434,1435,1436,1437,1438,1439]},{"teal":1345,"source":"contracts/ARC11550.algo.ts:46","pc":[1440,1441,1442,1443,1444,1445]},{"teal":1346,"source":"contracts/ARC11550.algo.ts:46","pc":[1446,1447,1448,1449,1450,1451]},{"teal":1347,"source":"contracts/ARC11550.algo.ts:46","pc":[1452,1453,1454,1455,1456,1457]},{"teal":1348,"source":"contracts/ARC11550.algo.ts:46","pc":[1458,1459,1460,1461,1462,1463]},{"teal":1349,"source":"contracts/ARC11550.algo.ts:46","pc":[1464,1465,1466,1467,1468,1469]},{"teal":1350,"source":"contracts/ARC11550.algo.ts:46","pc":[1470,1471,1472,1473,1474,1475]},{"teal":1351,"source":"contracts/ARC11550.algo.ts:46","pc":[1476,1477,1478,1479,1480,1481]},{"teal":1352,"source":"contracts/ARC11550.algo.ts:46","pc":[1482,1483,1484,1485,1486,1487]},{"teal":1353,"source":"contracts/ARC11550.algo.ts:46","pc":[1488,1489,1490,1491,1492,1493]},{"teal":1354,"source":"contracts/ARC11550.algo.ts:46","pc":[1494,1495,1496]},{"teal":1355,"source":"contracts/ARC11550.algo.ts:46","pc":[1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522]},{"teal":1358,"source":"contracts/ARC11550.algo.ts:46","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[1523]},{"teal":1361,"source":"contracts/ARC11550.algo.ts:46","pc":[1524,1525]},{"teal":1362,"source":"contracts/ARC11550.algo.ts:46","pc":[1526]},{"teal":1363,"source":"contracts/ARC11550.algo.ts:46","pc":[1527,1528]},{"teal":1364,"source":"contracts/ARC11550.algo.ts:46","pc":[1529]},{"teal":1365,"source":"contracts/ARC11550.algo.ts:46","pc":[1530,1531,1532]},{"teal":1366,"source":"contracts/ARC11550.algo.ts:46","pc":[1533,1534]},{"teal":1367,"source":"contracts/ARC11550.algo.ts:46","pc":[1535]},{"teal":1368,"source":"contracts/ARC11550.algo.ts:46","pc":[1536,1537]},{"teal":1369,"source":"contracts/ARC11550.algo.ts:46","pc":[1538]},{"teal":1370,"source":"contracts/ARC11550.algo.ts:46","pc":[1539,1540]},{"teal":1371,"source":"contracts/ARC11550.algo.ts:46","pc":[1541,1542,1543]},{"teal":1374,"source":"contracts/ARC11550.algo.ts:46","pc":[1544,1545]},{"teal":1375,"source":"contracts/ARC11550.algo.ts:46","pc":[1546,1547]},{"teal":1376,"source":"contracts/ARC11550.algo.ts:46","pc":[1548]},{"teal":1377,"source":"contracts/ARC11550.algo.ts:46","pc":[1549]},{"teal":1378,"source":"contracts/ARC11550.algo.ts:46","pc":[1550,1551]},{"teal":1381,"source":"contracts/ARC11550.algo.ts:46","pc":[1552]},{"teal":1382,"source":"contracts/ARC11550.algo.ts:46","pc":[1553,1554]},{"teal":1383,"source":"contracts/ARC11550.algo.ts:46","pc":[1555]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiALAAgBUCBYSCgGEDgmCQAEFR98dQZtaW50ZWQBYgFwAW0BYQ90cmFuc2Zlckhvb2tBcHAHbWludENhcDEYFCEICzEZCI0MBS4AAAAAAAAAAAAABSAAAAAAAAAAAAAAADYaAhc2GgEXiAACJEOKAgCL/0EABScHi/9nKiJnJwiL/meJKTYaAUkVIQUSRIgABRZQsCRDigEBKCpkjACLACcIZA5EMQCABm1pbnRlcmQSRCcEiwAWUIv/vypkJAgqTGeLAIwAiSk2GgFXAgCIAAUWULAkQ4oBAShJKmSMACKMAYsBi/8VIQUKDEEAHYv/Nf8iiwEhBQsINP9MIQVYiP+UiwEkCIwBQv/XiwCMAEYBiSmIAAUWULAkQ4oAASpkiSk2GgGIAARQsCRDigEBJwWL/1C+RIk2GgJXAgA2GgGIAAIkQ4oCADEAIQohBCcEi/81/zT/VwAIFxZQTgK6EkQnBYv/UL1MSEEADicFi/9QvkQ1/zT/IlNEJwWL/1C+RDX/JEk1+zT/NP9PAllJNf5JNP9MWSQLgQIINf00/yI0/lKL/kkVFlcGAkxQSTX8NP80/jT9CDT/FVJQUDX/iAQyNP8nBYv/UEm8SEy/iSk2GgJJFSEEEkQ2GgEXiAAFFlCwJEOKAgEri/8Wi/5QUL5EF4kpNhoBVwIAiAAOSRUjChZXBgJMUFCwJEOKAQEoRwMojAAijAGLAYv/FSEHCgxBAESL/zX/IosBIQcLCCIINP9MI1gXjAKL/zX/IosBIQcLCCMINP9MIQRYjAOLACuLAhaLA1BQvkQXFlCMAIsBJAiMAUL/sIsAjABGA4kpNhoBF4gABFCwJEOKAQEnBIv/FlC+RIkpNhoBVwIAiAAPSRUhBQoWVwYCTFBQsCRDigEBKEcCKIwAIowBiwGL/xUjCgxBACiL/zX/IosBIwsINP9MI1gXjAKLACcEiwIWUL5EUIwAiwEkCIwBQv/NiwCMAEYCiTYaAkkVIQkSRDYaAUkVIQYSRIgAAiRDigIAMQAhCiEEJwSL/1dACBcWUE4CuhJEJwaL/1CL/r+JNhoBVwIAiAACJEOKAQAoSSKMAIsAi/8VIQUKDEEAN4sAjAGL/zX/IosBIQULCCEGCDT/TCEJWIv/Nf8iiwEhBQsIIgg0/0whBliI/5KLACQIjABC/72JNhoBVwIAiAACJEOKAQAoRwI2MgAnB2VMSEEANLEhCLIQgAS0wXp7shonB2SyGDEAshqL/0kVJQoWVwYCTFCyGiKyAbO0OyQJxTpXBAAiU0QijACLAIv/FSUKDEEBrIsAjAGL/zX/IosBJQsIIwg0/0whBFgxABNBALEnBov/Nf8iiwElCwgjCDT/TCEEWDEAUIv/Nf8iiwElCwgiCDT/TCNYFxZQUIwCIyMnBov/Nf8iiwElCwgjCDT/TCEEWDEAUIv/Nf8iiwElCwgiCDT/TCNYFxZQUE4CuhcyBw9EIkkjJwaL/zX/IosBJQsIIwg0/0whBFgxAFCL/zX/IosBJQsIIgg0/0wjWBcWUFBOAroXi/81/yKLASULCCEGCDT/TCNYFwkWiwJOArsri/81/yKLASULCCIINP9MI1gXFov/Nf8iiwElCwgjCDT/TCEEWFBQvkQXi/81/yKLASULCCEGCDT/TCNYFwkri/81/yKLASULCCIINP9MI1gXFov/Nf8iiwElCwgjCDT/TCEEWFBQTBa/K4v/Nf8iiwElCwgiCDT/TCNYFxaL/zX/IosBJQsIIQcINP9MIQRYUFC+RBeL/zX/IosBJQsIIQYINP9MI1gXCCuL/zX/IosBJQsIIgg0/0wjWBcWi/81/yKLASULCCEHCDT/TCEEWFBQTBa/iwAkCIwAQv5JiYAEkXxItjYaAI4B+tQAgATTk+xTgAReBfEYgATdQvWggAQ6wjJUgAS7ud5ngATQSsvCgARl3YcXgARR9QS+gAQq0utVgATVeRddgAQPD6FzgARF8CKlNhoAjgz6kfrU+x/7LvtE+9z8Afx8/JT88/0r/YIANPwVNP0MQAALNPwVNP0kNflCAAg0/TT8FSI1+Qk1+ok=","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Params = {
  name: Uint8Array,
  symbol: Uint8Array,
  total: bigint,
  decimals: bigint,
  manager: string
}


/**
 * Converts the ABI tuple representation of a Params to the struct representation
 */
export function ParamsFromTuple(abiTuple: [Uint8Array, Uint8Array, bigint, bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Params, APP_SPEC.structs) as Params
}

export type IdAndAddress = {
  id: bigint,
  address: string
}


/**
 * Converts the ABI tuple representation of a IdAndAddress to the struct representation
 */
export function IdAndAddressFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.IdAndAddress, APP_SPEC.structs) as IdAndAddress
}

export type Metadata = {
  mutable: boolean,
  data: Uint8Array
}


/**
 * Converts the ABI tuple representation of a Metadata to the struct representation
 */
export function MetadataFromTuple(abiTuple: [boolean, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Metadata, APP_SPEC.structs) as Metadata
}

export type MetadataKey = {
  id: bigint,
  key: string
}


/**
 * Converts the ABI tuple representation of a MetadataKey to the struct representation
 */
export function MetadataKeyFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.MetadataKey, APP_SPEC.structs) as MetadataKey
}

export type Allowance = {
  amount: bigint,
  untilTimestamp: bigint
}


/**
 * Converts the ABI tuple representation of a Allowance to the struct representation
 */
export function AllowanceFromTuple(abiTuple: [bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Allowance, APP_SPEC.structs) as Allowance
}

export type AllowanceKey = {
  holder: string,
  sender: string,
  id: bigint
}


/**
 * Converts the ABI tuple representation of a AllowanceKey to the struct representation
 */
export function AllowanceKeyFromTuple(abiTuple: [string, string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AllowanceKey, APP_SPEC.structs) as AllowanceKey
}

/**
 * The argument types for the Arc11550 contract
 */
export type Arc11550Args = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(uint64,uint64)void': {
      hookApp: bigint | number
      mintCap: bigint | number
    }
    'arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64': {
      params: Params
    }
    'arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64': {
      params: [Uint8Array, Uint8Array, bigint | number, bigint | number, string][]
    }
    'arc11550_minted()uint64': Record<string, never>
    'arc11550_metadata((uint64,string))(bool,byte[])': {
      key: MetadataKey
    }
    'arc11550_setMetadata((uint64,string),byte[])void': {
      key: MetadataKey
      data: Uint8Array
    }
    'arc11550_balanceOf(uint64,address)uint64': {
      id: bigint | number
      account: string
    }
    'arc11550_balancesOf((uint64,address)[])uint64[]': {
      idAndAddrs: [bigint | number, string][]
    }
    'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)': {
      id: bigint | number
    }
    'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]': {
      ids: bigint[] | number[]
    }
    'arc11550_approve((address,address,uint64),(uint64,uint64))void': {
      allowanceKey: AllowanceKey
      allowance: Allowance
    }
    'arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void': {
      allowances: [[string, string, bigint | number], [bigint | number, bigint | number]][]
    }
    'arc11550_transfer((uint64,address,address,uint64)[])void': {
      transfers: [bigint | number, string, string, bigint | number][]
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(uint64,uint64)void': [hookApp: bigint | number, mintCap: bigint | number]
    'arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64': [params: Params]
    'arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64': [params: [Uint8Array, Uint8Array, bigint | number, bigint | number, string][]]
    'arc11550_minted()uint64': []
    'arc11550_metadata((uint64,string))(bool,byte[])': [key: MetadataKey]
    'arc11550_setMetadata((uint64,string),byte[])void': [key: MetadataKey, data: Uint8Array]
    'arc11550_balanceOf(uint64,address)uint64': [id: bigint | number, account: string]
    'arc11550_balancesOf((uint64,address)[])uint64[]': [idAndAddrs: [bigint | number, string][]]
    'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)': [id: bigint | number]
    'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]': [ids: bigint[] | number[]]
    'arc11550_approve((address,address,uint64),(uint64,uint64))void': [allowanceKey: AllowanceKey, allowance: Allowance]
    'arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void': [allowances: [[string, string, bigint | number], [bigint | number, bigint | number]][]]
    'arc11550_transfer((uint64,address,address,uint64)[])void': [transfers: [bigint | number, string, string, bigint | number][]]
  }
}

/**
 * The return type for each method
 */
export type Arc11550Returns = {
  'createApplication(uint64,uint64)void': void
  'arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64': bigint
  'arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64': bigint
  'arc11550_minted()uint64': bigint
  'arc11550_metadata((uint64,string))(bool,byte[])': Metadata
  'arc11550_setMetadata((uint64,string),byte[])void': void
  'arc11550_balanceOf(uint64,address)uint64': bigint
  'arc11550_balancesOf((uint64,address)[])uint64[]': bigint[]
  'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)': Params
  'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]': [Uint8Array, Uint8Array, bigint, bigint, string][]
  'arc11550_approve((address,address,uint64),(uint64,uint64))void': void
  'arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void': void
  'arc11550_transfer((uint64,address,address,uint64)[])void': void
}

/**
 * Defines the types of available calls and state of the Arc11550 smart contract.
 */
export type Arc11550Types = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64,uint64)void' | 'createApplication', {
      argsObj: Arc11550Args['obj']['createApplication(uint64,uint64)void']
      argsTuple: Arc11550Args['tuple']['createApplication(uint64,uint64)void']
      returns: Arc11550Returns['createApplication(uint64,uint64)void']
    }>
    & Record<'arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64' | 'arc11550_mint', {
      argsObj: Arc11550Args['obj']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64']
      argsTuple: Arc11550Args['tuple']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64']
      returns: Arc11550Returns['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64']
    }>
    & Record<'arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64' | 'arc11550_multiMint', {
      argsObj: Arc11550Args['obj']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64']
      argsTuple: Arc11550Args['tuple']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64']
      returns: Arc11550Returns['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64']
    }>
    & Record<'arc11550_minted()uint64' | 'arc11550_minted', {
      argsObj: Arc11550Args['obj']['arc11550_minted()uint64']
      argsTuple: Arc11550Args['tuple']['arc11550_minted()uint64']
      returns: Arc11550Returns['arc11550_minted()uint64']
    }>
    & Record<'arc11550_metadata((uint64,string))(bool,byte[])' | 'arc11550_metadata', {
      argsObj: Arc11550Args['obj']['arc11550_metadata((uint64,string))(bool,byte[])']
      argsTuple: Arc11550Args['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']
      returns: Arc11550Returns['arc11550_metadata((uint64,string))(bool,byte[])']
    }>
    & Record<'arc11550_setMetadata((uint64,string),byte[])void' | 'arc11550_setMetadata', {
      argsObj: Arc11550Args['obj']['arc11550_setMetadata((uint64,string),byte[])void']
      argsTuple: Arc11550Args['tuple']['arc11550_setMetadata((uint64,string),byte[])void']
      returns: Arc11550Returns['arc11550_setMetadata((uint64,string),byte[])void']
    }>
    & Record<'arc11550_balanceOf(uint64,address)uint64' | 'arc11550_balanceOf', {
      argsObj: Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64']
      argsTuple: Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']
      returns: Arc11550Returns['arc11550_balanceOf(uint64,address)uint64']
    }>
    & Record<'arc11550_balancesOf((uint64,address)[])uint64[]' | 'arc11550_balancesOf', {
      argsObj: Arc11550Args['obj']['arc11550_balancesOf((uint64,address)[])uint64[]']
      argsTuple: Arc11550Args['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']
      returns: Arc11550Returns['arc11550_balancesOf((uint64,address)[])uint64[]']
    }>
    & Record<'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)' | 'arc11550_params', {
      argsObj: Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']
      argsTuple: Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']
      returns: Arc11550Returns['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']
    }>
    & Record<'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]' | 'arc11550_mulitpleParams', {
      argsObj: Arc11550Args['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']
      argsTuple: Arc11550Args['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']
      returns: Arc11550Returns['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']
    }>
    & Record<'arc11550_approve((address,address,uint64),(uint64,uint64))void' | 'arc11550_approve', {
      argsObj: Arc11550Args['obj']['arc11550_approve((address,address,uint64),(uint64,uint64))void']
      argsTuple: Arc11550Args['tuple']['arc11550_approve((address,address,uint64),(uint64,uint64))void']
      returns: Arc11550Returns['arc11550_approve((address,address,uint64),(uint64,uint64))void']
    }>
    & Record<'arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void' | 'arc11550_setApprovals', {
      argsObj: Arc11550Args['obj']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']
      argsTuple: Arc11550Args['tuple']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']
      returns: Arc11550Returns['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']
    }>
    & Record<'arc11550_transfer((uint64,address,address,uint64)[])void' | 'arc11550_transfer', {
      argsObj: Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void']
      argsTuple: Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']
      returns: Arc11550Returns['arc11550_transfer((uint64,address,address,uint64)[])void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        minted: bigint
        transferHookApp: bigint
        mintCap: bigint
        minter: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        params: Map<bigint | number, Params>
        balances: Map<IdAndAddress, bigint>
        metadata: Map<MetadataKey, Metadata>
        allowances: Map<AllowanceKey, Allowance>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Arc11550Signatures = keyof Arc11550Types['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Arc11550NonVoidMethodSignatures = keyof Arc11550Types['methods'] extends infer T ? T extends keyof Arc11550Types['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Arc11550 smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Arc11550Signatures> = Arc11550Types['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc11550 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc11550Signatures> = Arc11550Types['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = Arc11550Types['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = Arc11550Types['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Arc11550CreateCallParams =
  | Expand<CallParams<Arc11550Args['obj']['createApplication(uint64,uint64)void'] | Arc11550Args['tuple']['createApplication(uint64,uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<Arc11550Args['obj']['createApplication(uint64,uint64)void'] | Arc11550Args['tuple']['createApplication(uint64,uint64)void']> & {method: 'createApplication(uint64,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Arc11550DeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Arc11550CreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc11550 smart contract
 */
export abstract class Arc11550ParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends Arc11550CreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(uint64,uint64)void':
            return Arc11550ParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ARC11550 smart contract using the createApplication(uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<Arc11550Args['obj']['createApplication(uint64,uint64)void'] | Arc11550Args['tuple']['createApplication(uint64,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(uint64,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.hookApp, params.args.mintCap],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Mint(params: CallParams<Arc11550Args['obj']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550Args['tuple']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.params],
    }
  }
  /**
   * Constructs a no op call for the arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550MultiMint(params: CallParams<Arc11550Args['obj']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64'] | Arc11550Args['tuple']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.params],
    }
  }
  /**
   * Constructs a no op call for the arc11550_minted()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Minted(params: CallParams<Arc11550Args['obj']['arc11550_minted()uint64'] | Arc11550Args['tuple']['arc11550_minted()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_minted()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc11550_metadata((uint64,string))(bool,byte[]) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Metadata(params: CallParams<Arc11550Args['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550Args['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_metadata((uint64,string))(bool,byte[])' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
  /**
   * Constructs a no op call for the arc11550_setMetadata((uint64,string),byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550SetMetadata(params: CallParams<Arc11550Args['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550Args['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_setMetadata((uint64,string),byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc11550_balanceOf(uint64,address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550BalanceOf(params: CallParams<Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_balanceOf(uint64,address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id, params.args.account],
    }
  }
  /**
   * Constructs a no op call for the arc11550_balancesOf((uint64,address)[])uint64[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550BalancesOf(params: CallParams<Arc11550Args['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550Args['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_balancesOf((uint64,address)[])uint64[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.idAndAddrs],
    }
  }
  /**
   * Constructs a no op call for the arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Params(params: CallParams<Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id],
    }
  }
  /**
   * Constructs a no op call for the arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550MulitpleParams(params: CallParams<Arc11550Args['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | Arc11550Args['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.ids],
    }
  }
  /**
   * Constructs a no op call for the arc11550_approve((address,address,uint64),(uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Approve(params: CallParams<Arc11550Args['obj']['arc11550_approve((address,address,uint64),(uint64,uint64))void'] | Arc11550Args['tuple']['arc11550_approve((address,address,uint64),(uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_approve((address,address,uint64),(uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.allowanceKey, params.args.allowance],
    }
  }
  /**
   * Constructs a no op call for the arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550SetApprovals(params: CallParams<Arc11550Args['obj']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void'] | Arc11550Args['tuple']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.allowances],
    }
  }
  /**
   * Constructs a no op call for the arc11550_transfer((uint64,address,address,uint64)[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Transfer(params: CallParams<Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void'] | Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_transfer((uint64,address,address,uint64)[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.transfers],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ARC11550 smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Arc11550Factory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Arc11550Factory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Arc11550Client(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Arc11550Client(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ARC11550 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Arc11550DeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? Arc11550ParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (Arc11550CreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new Arc11550Client(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550 smart contract using the createApplication(uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<Arc11550Args['obj']['createApplication(uint64,uint64)void'] | Arc11550Args['tuple']['createApplication(uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(Arc11550ParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550 smart contract using the createApplication(uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<Arc11550Args['obj']['createApplication(uint64,uint64)void'] | Arc11550Args['tuple']['createApplication(uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(Arc11550ParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550 smart contract using an ABI method call using the createApplication(uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<Arc11550Args['obj']['createApplication(uint64,uint64)void'] | Arc11550Args['tuple']['createApplication(uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(Arc11550ParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | Arc11550Returns['createApplication(uint64,uint64)void']) }, appClient: new Arc11550Client(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ARC11550 smart contract
 */
export class Arc11550Client {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Arc11550Client`
   *
   * @param appClient An `AppClient` instance which has been created with the Arc11550 app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Arc11550Client`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Arc11550NonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Arc11550Client` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Arc11550Client> {
    return new Arc11550Client(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Arc11550Client` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Arc11550Client> {
    return new Arc11550Client(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Mint: (params: CallParams<Arc11550Args['obj']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550Args['tuple']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550Mint(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550MultiMint: (params: CallParams<Arc11550Args['obj']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64'] | Arc11550Args['tuple']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550MultiMint(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_minted()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Minted: (params: CallParams<Arc11550Args['obj']['arc11550_minted()uint64'] | Arc11550Args['tuple']['arc11550_minted()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550Minted(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_metadata((uint64,string))(bool,byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Metadata: (params: CallParams<Arc11550Args['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550Args['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550Metadata(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_setMetadata((uint64,string),byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550SetMetadata: (params: CallParams<Arc11550Args['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550Args['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550SetMetadata(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_balanceOf(uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550BalanceOf: (params: CallParams<Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550BalanceOf(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_balancesOf((uint64,address)[])uint64[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550BalancesOf: (params: CallParams<Arc11550Args['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550Args['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550BalancesOf(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Params: (params: CallParams<Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550Params(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550MulitpleParams: (params: CallParams<Arc11550Args['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | Arc11550Args['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550MulitpleParams(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_approve((address,address,uint64),(uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Approve: (params: CallParams<Arc11550Args['obj']['arc11550_approve((address,address,uint64),(uint64,uint64))void'] | Arc11550Args['tuple']['arc11550_approve((address,address,uint64),(uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550Approve(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550SetApprovals: (params: CallParams<Arc11550Args['obj']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void'] | Arc11550Args['tuple']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550SetApprovals(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_transfer((uint64,address,address,uint64)[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Transfer: (params: CallParams<Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void'] | Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550Transfer(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Mint: (params: CallParams<Arc11550Args['obj']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550Args['tuple']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550Mint(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550MultiMint: (params: CallParams<Arc11550Args['obj']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64'] | Arc11550Args['tuple']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550MultiMint(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_minted()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Minted: (params: CallParams<Arc11550Args['obj']['arc11550_minted()uint64'] | Arc11550Args['tuple']['arc11550_minted()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550Minted(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_metadata((uint64,string))(bool,byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Metadata: (params: CallParams<Arc11550Args['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550Args['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550Metadata(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_setMetadata((uint64,string),byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550SetMetadata: (params: CallParams<Arc11550Args['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550Args['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550SetMetadata(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_balanceOf(uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550BalanceOf: (params: CallParams<Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550BalanceOf(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_balancesOf((uint64,address)[])uint64[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550BalancesOf: (params: CallParams<Arc11550Args['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550Args['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550BalancesOf(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Params: (params: CallParams<Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550Params(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550MulitpleParams: (params: CallParams<Arc11550Args['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | Arc11550Args['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550MulitpleParams(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_approve((address,address,uint64),(uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Approve: (params: CallParams<Arc11550Args['obj']['arc11550_approve((address,address,uint64),(uint64,uint64))void'] | Arc11550Args['tuple']['arc11550_approve((address,address,uint64),(uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550Approve(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550SetApprovals: (params: CallParams<Arc11550Args['obj']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void'] | Arc11550Args['tuple']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550SetApprovals(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_transfer((uint64,address,address,uint64)[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Transfer: (params: CallParams<Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void'] | Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550Transfer(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Mint: async (params: CallParams<Arc11550Args['obj']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550Args['tuple']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550Mint(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550MultiMint: async (params: CallParams<Arc11550Args['obj']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64'] | Arc11550Args['tuple']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550MultiMint(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_minted()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Minted: async (params: CallParams<Arc11550Args['obj']['arc11550_minted()uint64'] | Arc11550Args['tuple']['arc11550_minted()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550Minted(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_minted()uint64'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_metadata((uint64,string))(bool,byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Metadata: async (params: CallParams<Arc11550Args['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550Args['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550Metadata(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_metadata((uint64,string))(bool,byte[])'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_setMetadata((uint64,string),byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550SetMetadata: async (params: CallParams<Arc11550Args['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550Args['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550SetMetadata(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_setMetadata((uint64,string),byte[])void'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_balanceOf(uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550BalanceOf: async (params: CallParams<Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550BalanceOf(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_balanceOf(uint64,address)uint64'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_balancesOf((uint64,address)[])uint64[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550BalancesOf: async (params: CallParams<Arc11550Args['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550Args['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550BalancesOf(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_balancesOf((uint64,address)[])uint64[]'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Params: async (params: CallParams<Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550Params(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550MulitpleParams: async (params: CallParams<Arc11550Args['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | Arc11550Args['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550MulitpleParams(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_approve((address,address,uint64),(uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Approve: async (params: CallParams<Arc11550Args['obj']['arc11550_approve((address,address,uint64),(uint64,uint64))void'] | Arc11550Args['tuple']['arc11550_approve((address,address,uint64),(uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550Approve(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_approve((address,address,uint64),(uint64,uint64))void'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550SetApprovals: async (params: CallParams<Arc11550Args['obj']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void'] | Arc11550Args['tuple']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550SetApprovals(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_transfer((uint64,address,address,uint64)[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Transfer: async (params: CallParams<Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void'] | Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550Transfer(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_transfer((uint64,address,address,uint64)[])void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Arc11550Client(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ARC11550 app
   */
  state = {
    /**
     * Methods to access global state for the current ARC11550 app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          minted: result.minted,
          transferHookApp: result.transferHookApp,
          mintCap: result.mintCap,
          minter: result.minter,
        }
      },
      /**
       * Get the current value of the minted key in global state
       */
      minted: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("minted")) as bigint | undefined },
      /**
       * Get the current value of the transferHookApp key in global state
       */
      transferHookApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("transferHookApp")) as bigint | undefined },
      /**
       * Get the current value of the mintCap key in global state
       */
      mintCap: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("mintCap")) as bigint | undefined },
      /**
       * Get the current value of the minter key in global state
       */
      minter: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("minter")) as string | undefined },
    },
    /**
     * Methods to access box state for the current ARC11550 app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the params map in box state
       */
      params: {
        /**
         * Get all current values of the params map in box state
         */
        getMap: async (): Promise<Map<bigint, Params>> => { return (await this.appClient.state.box.getMap("params")) as Map<bigint, Params> },
        /**
         * Get a current value of the params map by key from box state
         */
        value: async (key: bigint | number): Promise<Params | undefined> => { return await this.appClient.state.box.getMapValue("params", key) as Params | undefined },
      },
      /**
       * Get values from the balances map in box state
       */
      balances: {
        /**
         * Get all current values of the balances map in box state
         */
        getMap: async (): Promise<Map<IdAndAddress, bigint>> => { return (await this.appClient.state.box.getMap("balances")) as Map<IdAndAddress, bigint> },
        /**
         * Get a current value of the balances map by key from box state
         */
        value: async (key: IdAndAddress): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("balances", key) as bigint | undefined },
      },
      /**
       * Get values from the metadata map in box state
       */
      metadata: {
        /**
         * Get all current values of the metadata map in box state
         */
        getMap: async (): Promise<Map<MetadataKey, Metadata>> => { return (await this.appClient.state.box.getMap("metadata")) as Map<MetadataKey, Metadata> },
        /**
         * Get a current value of the metadata map by key from box state
         */
        value: async (key: MetadataKey): Promise<Metadata | undefined> => { return await this.appClient.state.box.getMapValue("metadata", key) as Metadata | undefined },
      },
      /**
       * Get values from the allowances map in box state
       */
      allowances: {
        /**
         * Get all current values of the allowances map in box state
         */
        getMap: async (): Promise<Map<AllowanceKey, Allowance>> => { return (await this.appClient.state.box.getMap("allowances")) as Map<AllowanceKey, Allowance> },
        /**
         * Get a current value of the allowances map by key from box state
         */
        value: async (key: AllowanceKey): Promise<Allowance | undefined> => { return await this.appClient.state.box.getMapValue("allowances", key) as Allowance | undefined },
      },
    },
  }

  public newGroup(): Arc11550Composer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64 method call against the ARC11550 contract
       */
      arc11550Mint(params: CallParams<Arc11550Args['obj']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550Args['tuple']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Mint(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64', v))
        return this
      },
      /**
       * Add a arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64 method call against the ARC11550 contract
       */
      arc11550MultiMint(params: CallParams<Arc11550Args['obj']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64'] | Arc11550Args['tuple']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550MultiMint(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64', v))
        return this
      },
      /**
       * Add a arc11550_minted()uint64 method call against the ARC11550 contract
       */
      arc11550Minted(params: CallParams<Arc11550Args['obj']['arc11550_minted()uint64'] | Arc11550Args['tuple']['arc11550_minted()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Minted(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_minted()uint64', v))
        return this
      },
      /**
       * Add a arc11550_metadata((uint64,string))(bool,byte[]) method call against the ARC11550 contract
       */
      arc11550Metadata(params: CallParams<Arc11550Args['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550Args['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Metadata(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_metadata((uint64,string))(bool,byte[])', v))
        return this
      },
      /**
       * Add a arc11550_setMetadata((uint64,string),byte[])void method call against the ARC11550 contract
       */
      arc11550SetMetadata(params: CallParams<Arc11550Args['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550Args['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550SetMetadata(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc11550_balanceOf(uint64,address)uint64 method call against the ARC11550 contract
       */
      arc11550BalanceOf(params: CallParams<Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550BalanceOf(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_balanceOf(uint64,address)uint64', v))
        return this
      },
      /**
       * Add a arc11550_balancesOf((uint64,address)[])uint64[] method call against the ARC11550 contract
       */
      arc11550BalancesOf(params: CallParams<Arc11550Args['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550Args['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550BalancesOf(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_balancesOf((uint64,address)[])uint64[]', v))
        return this
      },
      /**
       * Add a arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address) method call against the ARC11550 contract
       */
      arc11550Params(params: CallParams<Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Params(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)', v))
        return this
      },
      /**
       * Add a arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[] method call against the ARC11550 contract
       */
      arc11550MulitpleParams(params: CallParams<Arc11550Args['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | Arc11550Args['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550MulitpleParams(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]', v))
        return this
      },
      /**
       * Add a arc11550_approve((address,address,uint64),(uint64,uint64))void method call against the ARC11550 contract
       */
      arc11550Approve(params: CallParams<Arc11550Args['obj']['arc11550_approve((address,address,uint64),(uint64,uint64))void'] | Arc11550Args['tuple']['arc11550_approve((address,address,uint64),(uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Approve(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void method call against the ARC11550 contract
       */
      arc11550SetApprovals(params: CallParams<Arc11550Args['obj']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void'] | Arc11550Args['tuple']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550SetApprovals(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc11550_transfer((uint64,address,address,uint64)[])void method call against the ARC11550 contract
       */
      arc11550Transfer(params: CallParams<Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void'] | Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Transfer(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the ARC11550 contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Arc11550Composer
  }
}
export type Arc11550Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Mint(params?: CallParams<Arc11550Args['obj']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550Args['tuple']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64'] | undefined]>

  /**
   * Calls the arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550MultiMint(params?: CallParams<Arc11550Args['obj']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64'] | Arc11550Args['tuple']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64'] | undefined]>

  /**
   * Calls the arc11550_minted()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Minted(params?: CallParams<Arc11550Args['obj']['arc11550_minted()uint64'] | Arc11550Args['tuple']['arc11550_minted()uint64']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_minted()uint64'] | undefined]>

  /**
   * Calls the arc11550_metadata((uint64,string))(bool,byte[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Metadata(params?: CallParams<Arc11550Args['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550Args['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_metadata((uint64,string))(bool,byte[])'] | undefined]>

  /**
   * Calls the arc11550_setMetadata((uint64,string),byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550SetMetadata(params?: CallParams<Arc11550Args['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550Args['tuple']['arc11550_setMetadata((uint64,string),byte[])void']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_setMetadata((uint64,string),byte[])void'] | undefined]>

  /**
   * Calls the arc11550_balanceOf(uint64,address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550BalanceOf(params?: CallParams<Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_balanceOf(uint64,address)uint64'] | undefined]>

  /**
   * Calls the arc11550_balancesOf((uint64,address)[])uint64[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550BalancesOf(params?: CallParams<Arc11550Args['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550Args['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_balancesOf((uint64,address)[])uint64[]'] | undefined]>

  /**
   * Calls the arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Params(params?: CallParams<Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | undefined]>

  /**
   * Calls the arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550MulitpleParams(params?: CallParams<Arc11550Args['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | Arc11550Args['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | undefined]>

  /**
   * Calls the arc11550_approve((address,address,uint64),(uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Approve(params?: CallParams<Arc11550Args['obj']['arc11550_approve((address,address,uint64),(uint64,uint64))void'] | Arc11550Args['tuple']['arc11550_approve((address,address,uint64),(uint64,uint64))void']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_approve((address,address,uint64),(uint64,uint64))void'] | undefined]>

  /**
   * Calls the arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550SetApprovals(params?: CallParams<Arc11550Args['obj']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void'] | Arc11550Args['tuple']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void'] | undefined]>

  /**
   * Calls the arc11550_transfer((uint64,address,address,uint64)[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Transfer(params?: CallParams<Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void'] | Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_transfer((uint64,address,address,uint64)[])void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ARC11550 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Arc11550Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc11550Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc11550ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Arc11550ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Arc11550ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Arc11550ComposerResults<TReturns>>
}
export type Arc11550ComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ARC200Bridge","desc":"","methods":[{"name":"optInToAsa","args":[{"name":"asa","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"asaToArc200","args":[{"name":"axfer","type":"axfer"},{"name":"receiver","type":"address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc200ToAsa","args":[{"name":"app","type":"uint64"},{"name":"amount","type":"uint64"},{"name":"receiver","type":"address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":0,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"asaToArc200Map":{"keyType":"uint64","valueType":"uint64","prefix":"YXNh"},"arc200ToAsaMap":{"keyType":"uint64","valueType":"uint64","prefix":"YXBw"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[0]},{"teal":2,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[1,2,3,4,5,6,7]},{"teal":3,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]},{"teal":15,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[24,25]},{"teal":16,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[26]},{"teal":17,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[27]},{"teal":18,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[28]},{"teal":19,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[29,30]},{"teal":20,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[31]},{"teal":21,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57]},{"teal":25,"source":"contracts/ARC200Bridge.algo.ts:16","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[58]},{"teal":30,"source":"contracts/ARC200Bridge.algo.ts:20","pc":[59,60,61]},{"teal":31,"source":"contracts/ARC200Bridge.algo.ts:20","pc":[62]},{"teal":34,"source":"contracts/ARC200Bridge.algo.ts:20","pc":[63,64,65]},{"teal":35,"source":"contracts/ARC200Bridge.algo.ts:20","pc":[66]},{"teal":36,"source":"contracts/ARC200Bridge.algo.ts:20","pc":[67]},{"teal":40,"source":"contracts/ARC200Bridge.algo.ts:20","pc":[68,69,70]},{"teal":48,"source":"contracts/ARC200Bridge.algo.ts:21","pc":[71]},{"teal":49,"source":"contracts/ARC200Bridge.algo.ts:21","pc":[72]},{"teal":50,"source":"contracts/ARC200Bridge.algo.ts:21","pc":[73,74]},{"teal":54,"source":"contracts/ARC200Bridge.algo.ts:22","pc":[75,76]},{"teal":55,"source":"contracts/ARC200Bridge.algo.ts:22","pc":[77,78]},{"teal":59,"source":"contracts/ARC200Bridge.algo.ts:23","pc":[79]},{"teal":60,"source":"contracts/ARC200Bridge.algo.ts:23","pc":[80,81]},{"teal":64,"source":"contracts/ARC200Bridge.algo.ts:24","pc":[82,83]},{"teal":65,"source":"contracts/ARC200Bridge.algo.ts:24","pc":[84,85]},{"teal":68,"source":"contracts/ARC200Bridge.algo.ts:21","pc":[86]},{"teal":69,"source":"contracts/ARC200Bridge.algo.ts:21","pc":[87,88]},{"teal":72,"source":"contracts/ARC200Bridge.algo.ts:21","pc":[89]},{"teal":73,"source":"contracts/ARC200Bridge.algo.ts:20","pc":[90]},{"teal":78,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[91]},{"teal":81,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[92,93,94]},{"teal":82,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[95]},{"teal":83,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[96]},{"teal":84,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[97,98]},{"teal":85,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[99]},{"teal":88,"source":"contracts/ARC200Bridge.algo.ts:28","errorMessage":"argument 0 (receiver) for asaToArc200 must be a address","pc":[100]},{"teal":91,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[101,102]},{"teal":92,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[103]},{"teal":93,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[104]},{"teal":94,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[105]},{"teal":95,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[106,107]},{"teal":96,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[108]},{"teal":97,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[109]},{"teal":100,"source":"contracts/ARC200Bridge.algo.ts:28","errorMessage":"argument 1 (axfer) for asaToArc200 must be a axfer transaction","pc":[110]},{"teal":103,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[111,112,113]},{"teal":104,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[114]},{"teal":105,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[115]},{"teal":106,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[116]},{"teal":107,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[117]},{"teal":108,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[118]},{"teal":112,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[119,120,121]},{"teal":115,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[122]},{"teal":116,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[123,124]},{"teal":123,"source":"contracts/ARC200Bridge.algo.ts:29","pc":[125,126]},{"teal":124,"source":"contracts/ARC200Bridge.algo.ts:30","pc":[127,128]},{"teal":125,"source":"contracts/ARC200Bridge.algo.ts:30","pc":[129,130]},{"teal":126,"source":"contracts/ARC200Bridge.algo.ts:30","pc":[131]},{"teal":129,"source":"contracts/ARC200Bridge.algo.ts:30","errorMessage":"transaction verification failed: {\"txn\":\"axfer\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}","pc":[132]},{"teal":133,"source":"contracts/ARC200Bridge.algo.ts:33","pc":[133,134]},{"teal":134,"source":"contracts/ARC200Bridge.algo.ts:33","pc":[135,136]},{"teal":135,"source":"contracts/ARC200Bridge.algo.ts:33","pc":[137,138]},{"teal":139,"source":"contracts/ARC200Bridge.algo.ts:35","pc":[139,140]},{"teal":140,"source":"contracts/ARC200Bridge.algo.ts:35","pc":[141,142]},{"teal":141,"source":"contracts/ARC200Bridge.algo.ts:35","pc":[143]},{"teal":142,"source":"contracts/ARC200Bridge.algo.ts:35","pc":[144,145]},{"teal":143,"source":"contracts/ARC200Bridge.algo.ts:35","pc":[146]},{"teal":144,"source":"contracts/ARC200Bridge.algo.ts:35","pc":[147]},{"teal":149,"source":"contracts/ARC200Bridge.algo.ts:38","pc":[148]},{"teal":150,"source":"contracts/ARC200Bridge.algo.ts:38","pc":[149,150]},{"teal":151,"source":"contracts/ARC200Bridge.algo.ts:38","pc":[151,152]},{"teal":152,"source":"contracts/ARC200Bridge.algo.ts:38","pc":[153]},{"teal":153,"source":"contracts/ARC200Bridge.algo.ts:38","pc":[154]},{"teal":154,"source":"contracts/ARC200Bridge.algo.ts:38","pc":[155]},{"teal":155,"source":"contracts/ARC200Bridge.algo.ts:38","pc":[156]},{"teal":156,"source":"contracts/ARC200Bridge.algo.ts:38","pc":[157]},{"teal":157,"source":"contracts/ARC200Bridge.algo.ts:38","pc":[158]},{"teal":158,"source":"contracts/ARC200Bridge.algo.ts:38","pc":[159,160,161]},{"teal":171,"source":"contracts/ARC200Bridge.algo.ts:39","pc":[162]},{"teal":172,"source":"contracts/ARC200Bridge.algo.ts:39","pc":[163]},{"teal":173,"source":"contracts/ARC200Bridge.algo.ts:39","pc":[164,165]},{"teal":174,"source":"contracts/ARC200Bridge.algo.ts:39","pc":[166,167,168,169,170,171]},{"teal":175,"source":"contracts/ARC200Bridge.algo.ts:39","pc":[172,173]},{"teal":185,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[174,175]},{"teal":186,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[176,177]},{"teal":187,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[178]},{"teal":188,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212]},{"teal":189,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[213]},{"teal":190,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[214]},{"teal":191,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[215,216,217]},{"teal":192,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[218]},{"teal":193,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[219]},{"teal":194,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[220]},{"teal":195,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[221,222,223]},{"teal":196,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[224,225]},{"teal":197,"source":"contracts/ARC200Bridge.algo.ts:42","pc":[226,227]},{"teal":198,"source":"contracts/ARC200Bridge.algo.ts:42","pc":[228,229]},{"teal":199,"source":"contracts/ARC200Bridge.algo.ts:42","pc":[230]},{"teal":200,"source":"contracts/ARC200Bridge.algo.ts:42","pc":[231,232,233,234,235,236,237,238,239,240]},{"teal":201,"source":"contracts/ARC200Bridge.algo.ts:42","pc":[241]},{"teal":202,"source":"contracts/ARC200Bridge.algo.ts:42","pc":[242]},{"teal":203,"source":"contracts/ARC200Bridge.algo.ts:42","pc":[243,244,245]},{"teal":204,"source":"contracts/ARC200Bridge.algo.ts:42","pc":[246]},{"teal":205,"source":"contracts/ARC200Bridge.algo.ts:42","pc":[247]},{"teal":206,"source":"contracts/ARC200Bridge.algo.ts:42","pc":[248]},{"teal":207,"source":"contracts/ARC200Bridge.algo.ts:42","pc":[249,250,251]},{"teal":208,"source":"contracts/ARC200Bridge.algo.ts:42","pc":[252,253]},{"teal":209,"source":"contracts/ARC200Bridge.algo.ts:44","pc":[254,255]},{"teal":210,"source":"contracts/ARC200Bridge.algo.ts:44","pc":[256,257]},{"teal":211,"source":"contracts/ARC200Bridge.algo.ts:44","pc":[258]},{"teal":212,"source":"contracts/ARC200Bridge.algo.ts:44","pc":[259]},{"teal":213,"source":"contracts/ARC200Bridge.algo.ts:44","pc":[260,261,262]},{"teal":214,"source":"contracts/ARC200Bridge.algo.ts:44","pc":[263,264]},{"teal":215,"source":"contracts/ARC200Bridge.algo.ts:45","pc":[265,266]},{"teal":216,"source":"contracts/ARC200Bridge.algo.ts:45","pc":[267,268]},{"teal":217,"source":"contracts/ARC200Bridge.algo.ts:45","pc":[269]},{"teal":218,"source":"contracts/ARC200Bridge.algo.ts:45","pc":[270]},{"teal":219,"source":"contracts/ARC200Bridge.algo.ts:45","pc":[271,272]},{"teal":222,"source":"contracts/ARC200Bridge.algo.ts:39","pc":[273]},{"teal":223,"source":"contracts/ARC200Bridge.algo.ts:39","pc":[274,275]},{"teal":226,"source":"contracts/ARC200Bridge.algo.ts:39","pc":[276]},{"teal":230,"source":"contracts/ARC200Bridge.algo.ts:49","pc":[277,278]},{"teal":231,"source":"contracts/ARC200Bridge.algo.ts:49","pc":[279,280]},{"teal":235,"source":"contracts/ARC200Bridge.algo.ts:51","pc":[281]},{"teal":236,"source":"contracts/ARC200Bridge.algo.ts:51","pc":[282,283]},{"teal":237,"source":"contracts/ARC200Bridge.algo.ts:51","pc":[284]},{"teal":238,"source":"contracts/ARC200Bridge.algo.ts:51","pc":[285]},{"teal":239,"source":"contracts/ARC200Bridge.algo.ts:51","pc":[286,287]},{"teal":240,"source":"contracts/ARC200Bridge.algo.ts:51","pc":[288]},{"teal":241,"source":"contracts/ARC200Bridge.algo.ts:51","pc":[289]},{"teal":245,"source":"contracts/ARC200Bridge.algo.ts:52","pc":[290]},{"teal":246,"source":"contracts/ARC200Bridge.algo.ts:52","pc":[291,292]},{"teal":247,"source":"contracts/ARC200Bridge.algo.ts:52","pc":[293]},{"teal":248,"source":"contracts/ARC200Bridge.algo.ts:52","pc":[294]},{"teal":249,"source":"contracts/ARC200Bridge.algo.ts:52","pc":[295,296]},{"teal":250,"source":"contracts/ARC200Bridge.algo.ts:52","pc":[297]},{"teal":251,"source":"contracts/ARC200Bridge.algo.ts:52","pc":[298]},{"teal":256,"source":"contracts/ARC200Bridge.algo.ts:55","pc":[299]},{"teal":257,"source":"contracts/ARC200Bridge.algo.ts:55","pc":[300,301]},{"teal":258,"source":"contracts/ARC200Bridge.algo.ts:55","pc":[302]},{"teal":259,"source":"contracts/ARC200Bridge.algo.ts:55","pc":[303]},{"teal":260,"source":"contracts/ARC200Bridge.algo.ts:55","pc":[304]},{"teal":263,"source":"contracts/ARC200Bridge.algo.ts:55","errorMessage":"box value does not exist: this.asaToArc200Map(asa).value","pc":[305]},{"teal":264,"source":"contracts/ARC200Bridge.algo.ts:55","pc":[306]},{"teal":265,"source":"contracts/ARC200Bridge.algo.ts:55","pc":[307,308]},{"teal":272,"source":"contracts/ARC200Bridge.algo.ts:57","pc":[309]},{"teal":273,"source":"contracts/ARC200Bridge.algo.ts:57","pc":[310]},{"teal":274,"source":"contracts/ARC200Bridge.algo.ts:57","pc":[311,312]},{"teal":275,"source":"contracts/ARC200Bridge.algo.ts:57","pc":[313,314,315,316,317,318]},{"teal":276,"source":"contracts/ARC200Bridge.algo.ts:57","pc":[319,320]},{"teal":280,"source":"contracts/ARC200Bridge.algo.ts:58","pc":[321,322]},{"teal":281,"source":"contracts/ARC200Bridge.algo.ts:58","pc":[323,324]},{"teal":285,"source":"contracts/ARC200Bridge.algo.ts:59","pc":[325,326]},{"teal":286,"source":"contracts/ARC200Bridge.algo.ts:59","pc":[327,328]},{"teal":287,"source":"contracts/ARC200Bridge.algo.ts:59","pc":[329,330]},{"teal":288,"source":"contracts/ARC200Bridge.algo.ts:59","pc":[331,332]},{"teal":289,"source":"contracts/ARC200Bridge.algo.ts:59","pc":[333]},{"teal":290,"source":"contracts/ARC200Bridge.algo.ts:59","pc":[334,335]},{"teal":293,"source":"contracts/ARC200Bridge.algo.ts:57","pc":[336]},{"teal":294,"source":"contracts/ARC200Bridge.algo.ts:57","pc":[337,338]},{"teal":297,"source":"contracts/ARC200Bridge.algo.ts:57","pc":[339]},{"teal":298,"source":"contracts/ARC200Bridge.algo.ts:57","pc":[340,341]},{"teal":299,"source":"contracts/ARC200Bridge.algo.ts:57","pc":[342]},{"teal":300,"source":"contracts/ARC200Bridge.algo.ts:57","pc":[343]},{"teal":301,"source":"contracts/ARC200Bridge.algo.ts:57","pc":[344,345]},{"teal":302,"source":"contracts/ARC200Bridge.algo.ts:57","pc":[346,347,348]},{"teal":303,"source":"contracts/ARC200Bridge.algo.ts:57","pc":[349]},{"teal":304,"source":"contracts/ARC200Bridge.algo.ts:57","pc":[350]},{"teal":305,"source":"contracts/ARC200Bridge.algo.ts:57","pc":[351,352]},{"teal":309,"source":"contracts/ARC200Bridge.algo.ts:62","pc":[353,354]},{"teal":310,"source":"contracts/ARC200Bridge.algo.ts:62","pc":[355]},{"teal":314,"source":"contracts/ARC200Bridge.algo.ts:64","pc":[356,357]},{"teal":317,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[358,359]},{"teal":320,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[360,361]},{"teal":321,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[362]},{"teal":325,"source":"contracts/ARC200Bridge.algo.ts:68","pc":[363,364,365]},{"teal":334,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[366]},{"teal":335,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[367]},{"teal":336,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[368,369]},{"teal":337,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[370,371,372,373,374,375]},{"teal":338,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[376,377]},{"teal":342,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[378,379]},{"teal":343,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[380,381]},{"teal":346,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[382]},{"teal":347,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[383,384]},{"teal":350,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[385]},{"teal":351,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[386,387]},{"teal":352,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[388]},{"teal":353,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[389]},{"teal":354,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[390,391]},{"teal":355,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[392,393,394]},{"teal":359,"source":"contracts/ARC200Bridge.algo.ts:73","pc":[395]},{"teal":360,"source":"contracts/ARC200Bridge.algo.ts:73","pc":[396]},{"teal":361,"source":"contracts/ARC200Bridge.algo.ts:73","pc":[397,398]},{"teal":362,"source":"contracts/ARC200Bridge.algo.ts:73","pc":[399,400,401,402,403,404]},{"teal":363,"source":"contracts/ARC200Bridge.algo.ts:73","pc":[405,406]},{"teal":367,"source":"contracts/ARC200Bridge.algo.ts:73","pc":[407,408]},{"teal":368,"source":"contracts/ARC200Bridge.algo.ts:73","pc":[409,410]},{"teal":371,"source":"contracts/ARC200Bridge.algo.ts:73","pc":[411]},{"teal":372,"source":"contracts/ARC200Bridge.algo.ts:73","pc":[412,413]},{"teal":375,"source":"contracts/ARC200Bridge.algo.ts:73","pc":[414]},{"teal":376,"source":"contracts/ARC200Bridge.algo.ts:73","pc":[415,416]},{"teal":377,"source":"contracts/ARC200Bridge.algo.ts:73","pc":[417]},{"teal":378,"source":"contracts/ARC200Bridge.algo.ts:73","pc":[418]},{"teal":379,"source":"contracts/ARC200Bridge.algo.ts:73","pc":[419,420]},{"teal":380,"source":"contracts/ARC200Bridge.algo.ts:73","pc":[421,422,423]},{"teal":381,"source":"contracts/ARC200Bridge.algo.ts:73","pc":[424]},{"teal":382,"source":"contracts/ARC200Bridge.algo.ts:73","pc":[425]},{"teal":383,"source":"contracts/ARC200Bridge.algo.ts:73","pc":[426,427,428]},{"teal":384,"source":"contracts/ARC200Bridge.algo.ts:73","pc":[429]},{"teal":388,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[430]},{"teal":389,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[431]},{"teal":390,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[432,433]},{"teal":391,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[434,435,436,437,438,439]},{"teal":392,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[440,441]},{"teal":396,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[442,443]},{"teal":397,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[444,445]},{"teal":400,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[446]},{"teal":401,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[447,448]},{"teal":404,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[449]},{"teal":405,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[450,451]},{"teal":406,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[452]},{"teal":407,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[453]},{"teal":408,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[454,455]},{"teal":409,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[456,457,458]},{"teal":410,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[459]},{"teal":414,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[460]},{"teal":415,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[461]},{"teal":416,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[462,463]},{"teal":417,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[464,465,466,467,468,469]},{"teal":418,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[470,471]},{"teal":422,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[472,473]},{"teal":423,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[474,475]},{"teal":426,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[476]},{"teal":427,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[477,478]},{"teal":430,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[479]},{"teal":431,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[480,481]},{"teal":432,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[482]},{"teal":433,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[483]},{"teal":434,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[484,485]},{"teal":435,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[486,487,488]},{"teal":436,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[489]},{"teal":437,"source":"contracts/ARC200Bridge.algo.ts:68","pc":[490]},{"teal":442,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[491]},{"teal":445,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[492,493,494]},{"teal":446,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[495]},{"teal":447,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[496]},{"teal":448,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[497,498]},{"teal":449,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[499]},{"teal":452,"source":"contracts/ARC200Bridge.algo.ts:77","errorMessage":"argument 0 (receiver) for arc200ToAsa must be a address","pc":[500]},{"teal":455,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[501,502,503]},{"teal":456,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[504]},{"teal":459,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[505,506,507]},{"teal":460,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[508]},{"teal":463,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[509,510,511]},{"teal":464,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[512]},{"teal":465,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[513]},{"teal":466,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[514]},{"teal":467,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[515]},{"teal":468,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[516]},{"teal":472,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[517,518,519]},{"teal":475,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[520]},{"teal":476,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[521,522]},{"teal":481,"source":"contracts/ARC200Bridge.algo.ts:78","pc":[523]},{"teal":482,"source":"contracts/ARC200Bridge.algo.ts:78","pc":[524,525]},{"teal":483,"source":"contracts/ARC200Bridge.algo.ts:78","pc":[526]},{"teal":484,"source":"contracts/ARC200Bridge.algo.ts:78","pc":[527]},{"teal":485,"source":"contracts/ARC200Bridge.algo.ts:78","pc":[528]},{"teal":486,"source":"contracts/ARC200Bridge.algo.ts:78","pc":[529]},{"teal":487,"source":"contracts/ARC200Bridge.algo.ts:78","pc":[530]},{"teal":488,"source":"contracts/ARC200Bridge.algo.ts:78","pc":[531]},{"teal":489,"source":"contracts/ARC200Bridge.algo.ts:78","pc":[532,533,534]},{"teal":494,"source":"contracts/ARC200Bridge.algo.ts:79","pc":[535,536]},{"teal":495,"source":"contracts/ARC200Bridge.algo.ts:79","pc":[537,538,539]},{"teal":496,"source":"contracts/ARC200Bridge.algo.ts:79","pc":[540,541]},{"teal":506,"source":"contracts/ARC200Bridge.algo.ts:80","pc":[542]},{"teal":507,"source":"contracts/ARC200Bridge.algo.ts:80","pc":[543,544]},{"teal":508,"source":"contracts/ARC200Bridge.algo.ts:80","pc":[545,546]},{"teal":512,"source":"contracts/ARC200Bridge.algo.ts:81","pc":[547,548]},{"teal":513,"source":"contracts/ARC200Bridge.algo.ts:81","pc":[549,550,551]},{"teal":514,"source":"contracts/ARC200Bridge.algo.ts:81","pc":[552]},{"teal":515,"source":"contracts/ARC200Bridge.algo.ts:81","pc":[553]},{"teal":516,"source":"contracts/ARC200Bridge.algo.ts:81","pc":[554,555]},{"teal":517,"source":"contracts/ARC200Bridge.algo.ts:81","pc":[556]},{"teal":520,"source":"contracts/ARC200Bridge.algo.ts:81","errorMessage":"params.total as uint64 overflowed 64 bits","pc":[557]},{"teal":521,"source":"contracts/ARC200Bridge.algo.ts:81","pc":[558,559,560]},{"teal":522,"source":"contracts/ARC200Bridge.algo.ts:81","pc":[561]},{"teal":523,"source":"contracts/ARC200Bridge.algo.ts:81","pc":[562,563]},{"teal":527,"source":"contracts/ARC200Bridge.algo.ts:82","pc":[564,565]},{"teal":528,"source":"contracts/ARC200Bridge.algo.ts:82","pc":[566,567,568]},{"teal":529,"source":"contracts/ARC200Bridge.algo.ts:82","pc":[569]},{"teal":530,"source":"contracts/ARC200Bridge.algo.ts:82","pc":[570,571]},{"teal":534,"source":"contracts/ARC200Bridge.algo.ts:83","pc":[572,573]},{"teal":535,"source":"contracts/ARC200Bridge.algo.ts:83","pc":[574,575,576]},{"teal":536,"source":"contracts/ARC200Bridge.algo.ts:83","pc":[577,578]},{"teal":540,"source":"contracts/ARC200Bridge.algo.ts:84","pc":[579,580]},{"teal":541,"source":"contracts/ARC200Bridge.algo.ts:84","pc":[581,582,583]},{"teal":542,"source":"contracts/ARC200Bridge.algo.ts:84","pc":[584,585]},{"teal":546,"source":"contracts/ARC200Bridge.algo.ts:85","pc":[586,587]},{"teal":547,"source":"contracts/ARC200Bridge.algo.ts:85","pc":[588,589]},{"teal":550,"source":"contracts/ARC200Bridge.algo.ts:80","pc":[590]},{"teal":551,"source":"contracts/ARC200Bridge.algo.ts:80","pc":[591,592]},{"teal":554,"source":"contracts/ARC200Bridge.algo.ts:80","pc":[593]},{"teal":555,"source":"contracts/ARC200Bridge.algo.ts:80","pc":[594,595]},{"teal":559,"source":"contracts/ARC200Bridge.algo.ts:88","pc":[596,597]},{"teal":560,"source":"contracts/ARC200Bridge.algo.ts:88","pc":[598,599]},{"teal":564,"source":"contracts/ARC200Bridge.algo.ts:89","pc":[600]},{"teal":565,"source":"contracts/ARC200Bridge.algo.ts:89","pc":[601,602]},{"teal":566,"source":"contracts/ARC200Bridge.algo.ts:89","pc":[603]},{"teal":567,"source":"contracts/ARC200Bridge.algo.ts:89","pc":[604]},{"teal":568,"source":"contracts/ARC200Bridge.algo.ts:89","pc":[605,606]},{"teal":569,"source":"contracts/ARC200Bridge.algo.ts:89","pc":[607]},{"teal":570,"source":"contracts/ARC200Bridge.algo.ts:89","pc":[608]},{"teal":574,"source":"contracts/ARC200Bridge.algo.ts:90","pc":[609]},{"teal":575,"source":"contracts/ARC200Bridge.algo.ts:90","pc":[610,611]},{"teal":576,"source":"contracts/ARC200Bridge.algo.ts:90","pc":[612]},{"teal":577,"source":"contracts/ARC200Bridge.algo.ts:90","pc":[613]},{"teal":578,"source":"contracts/ARC200Bridge.algo.ts:90","pc":[614,615]},{"teal":579,"source":"contracts/ARC200Bridge.algo.ts:90","pc":[616]},{"teal":580,"source":"contracts/ARC200Bridge.algo.ts:90","pc":[617]},{"teal":585,"source":"contracts/ARC200Bridge.algo.ts:93","pc":[618]},{"teal":586,"source":"contracts/ARC200Bridge.algo.ts:93","pc":[619,620]},{"teal":587,"source":"contracts/ARC200Bridge.algo.ts:93","pc":[621]},{"teal":588,"source":"contracts/ARC200Bridge.algo.ts:93","pc":[622]},{"teal":589,"source":"contracts/ARC200Bridge.algo.ts:93","pc":[623]},{"teal":592,"source":"contracts/ARC200Bridge.algo.ts:93","errorMessage":"box value does not exist: this.arc200ToAsaMap(app).value","pc":[624]},{"teal":593,"source":"contracts/ARC200Bridge.algo.ts:93","pc":[625]},{"teal":594,"source":"contracts/ARC200Bridge.algo.ts:93","pc":[626,627]},{"teal":601,"source":"contracts/ARC200Bridge.algo.ts:96","pc":[628]},{"teal":602,"source":"contracts/ARC200Bridge.algo.ts:96","pc":[629]},{"teal":603,"source":"contracts/ARC200Bridge.algo.ts:96","pc":[630,631]},{"teal":604,"source":"contracts/ARC200Bridge.algo.ts:96","pc":[632,633,634,635,636,637]},{"teal":605,"source":"contracts/ARC200Bridge.algo.ts:96","pc":[638,639]},{"teal":609,"source":"contracts/ARC200Bridge.algo.ts:97","pc":[640,641]},{"teal":610,"source":"contracts/ARC200Bridge.algo.ts:97","pc":[642,643]},{"teal":614,"source":"contracts/ARC200Bridge.algo.ts:98","pc":[644,645]},{"teal":615,"source":"contracts/ARC200Bridge.algo.ts:98","pc":[646,647]},{"teal":616,"source":"contracts/ARC200Bridge.algo.ts:98","pc":[648,649]},{"teal":617,"source":"contracts/ARC200Bridge.algo.ts:98","pc":[650,651]},{"teal":618,"source":"contracts/ARC200Bridge.algo.ts:98","pc":[652,653]},{"teal":619,"source":"contracts/ARC200Bridge.algo.ts:98","pc":[654]},{"teal":620,"source":"contracts/ARC200Bridge.algo.ts:98","pc":[655,656]},{"teal":623,"source":"contracts/ARC200Bridge.algo.ts:96","pc":[657]},{"teal":624,"source":"contracts/ARC200Bridge.algo.ts:96","pc":[658,659]},{"teal":627,"source":"contracts/ARC200Bridge.algo.ts:96","pc":[660]},{"teal":628,"source":"contracts/ARC200Bridge.algo.ts:96","pc":[661,662]},{"teal":629,"source":"contracts/ARC200Bridge.algo.ts:96","pc":[663]},{"teal":630,"source":"contracts/ARC200Bridge.algo.ts:96","pc":[664]},{"teal":631,"source":"contracts/ARC200Bridge.algo.ts:96","pc":[665,666]},{"teal":632,"source":"contracts/ARC200Bridge.algo.ts:96","pc":[667,668,669]},{"teal":633,"source":"contracts/ARC200Bridge.algo.ts:96","pc":[670]},{"teal":634,"source":"contracts/ARC200Bridge.algo.ts:96","pc":[671]},{"teal":635,"source":"contracts/ARC200Bridge.algo.ts:96","pc":[672,673]},{"teal":639,"source":"contracts/ARC200Bridge.algo.ts:101","pc":[674,675]},{"teal":640,"source":"contracts/ARC200Bridge.algo.ts:101","pc":[676]},{"teal":644,"source":"contracts/ARC200Bridge.algo.ts:103","pc":[677]},{"teal":645,"source":"contracts/ARC200Bridge.algo.ts:103","pc":[678]},{"teal":646,"source":"contracts/ARC200Bridge.algo.ts:103","pc":[679,680]},{"teal":650,"source":"contracts/ARC200Bridge.algo.ts:103","pc":[681,682]},{"teal":651,"source":"contracts/ARC200Bridge.algo.ts:103","pc":[683,684]},{"teal":655,"source":"contracts/ARC200Bridge.algo.ts:103","pc":[685,686]},{"teal":656,"source":"contracts/ARC200Bridge.algo.ts:103","pc":[687,688]},{"teal":660,"source":"contracts/ARC200Bridge.algo.ts:103","pc":[689,690]},{"teal":661,"source":"contracts/ARC200Bridge.algo.ts:103","pc":[691,692]},{"teal":664,"source":"contracts/ARC200Bridge.algo.ts:103","pc":[693]},{"teal":665,"source":"contracts/ARC200Bridge.algo.ts:103","pc":[694,695]},{"teal":668,"source":"contracts/ARC200Bridge.algo.ts:103","pc":[696]},{"teal":672,"source":"contracts/ARC200Bridge.algo.ts:105","pc":[697,698]},{"teal":675,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[699,700]},{"teal":678,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[701,702]},{"teal":679,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[703]},{"teal":682,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[704]},{"teal":683,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[705]},{"teal":686,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[706,707,708,709,710,711]},{"teal":687,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[712,713,714]},{"teal":688,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[715,716,717,718]},{"teal":691,"source":"contracts/ARC200Bridge.algo.ts:16","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[719]},{"teal":694,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[720,721,722,723,724,725]},{"teal":695,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[726,727,728,729,730,731]},{"teal":696,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[732,733,734,735,736,737]},{"teal":697,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[738,739,740]},{"teal":698,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[741,742,743,744,745,746,747,748]},{"teal":701,"source":"contracts/ARC200Bridge.algo.ts:16","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[749]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAFAAEGBCAmBAADYXNhA2FwcAQVH3x1MRgUJAsxGQiNDAKWAAAAAAAAAAAAAAKIAAAAAAAAAAAAAAA2GgEXiAACI0OKAQCxJbIQi/+yESKyEjIKshQisgGziSs2GgFJFSEEEkQxFiMJSTgQJRJEiAAFFlCwI0OKAgEoRwOL/zgUMgoSRIv/OBGMAIsAcQpIMgMSRCmL/zgRFlC9TEgUQQCJsSSyEIAEhSn3g7IaiwBxBEiAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUElXIAAoqERXACCyGosAcQNIgAgAAAAAAAAAAFBJVwgAKKhEVwAIshqLAHEBSBZXBwGyGosAcQBIFrIaIrIBs7Q9jAEpiwAWUIsBFr8qiwEWUIsAFr8piwAWUL5EF4wCsSSyEIAE2nAlubIaiwKyGIv+shqL/zgSFrIaIrIBs7Q7IwnFOlcEACJTjAOLA0SLAowARgOJigEBsSSyEIAE7JlgQbIai/+yGCKyAbO0OyMJxTpXBACxJLIQgASE7BPVshqL/7IYIrIBs7Q7IwnFOlcEABcWVwcBULEkshCABGV9E+yyGov/shgisgGztDsjCcU6VwQAULEkshCABLauGiWyGov/shgisgGztDsjCcU6VwQAUIkrNhoDSRUhBBJENhoCFzYaAReIAAUWULAjQ4oDAShHAyqL/xZQvUxIFEEAU4v/iP9PjACxgQOyEIsAVwAgSZOBQA5EVxgIF7IiiwBXIAEXsiOLAFchILImiwBXQQiyJTIKsioisgGztDy0PIwBKov/FlCLARa/KYsBFlCL/xa/Kov/FlC+RBeMArEkshCABEqWj4+yGov/shgxALIaMgqyGov+FrIaIrIBs7Q7IwnFOlcEACJTjAOLA0SxJbIQiwKyEYv9shSL/rISIrIBs4sCjABGA4kjQ4AEuER7NjYaAI4B//EAgASygaVtgARZvTO3gAT5KwxSNhoAjgP9Tv1u/v4A","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Arc200Bridge contract
 */
export type Arc200BridgeArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'optInToAsa(uint64)void': {
      asa: bigint | number
    }
    'asaToArc200(axfer,address)uint64': {
      axfer: AppMethodCallTransactionArgument
      receiver: string
    }
    'arc200ToAsa(uint64,uint64,address)uint64': {
      app: bigint | number
      amount: bigint | number
      receiver: string
    }
    'createApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'optInToAsa(uint64)void': [asa: bigint | number]
    'asaToArc200(axfer,address)uint64': [axfer: AppMethodCallTransactionArgument, receiver: string]
    'arc200ToAsa(uint64,uint64,address)uint64': [app: bigint | number, amount: bigint | number, receiver: string]
    'createApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type Arc200BridgeReturns = {
  'optInToAsa(uint64)void': void
  'asaToArc200(axfer,address)uint64': bigint
  'arc200ToAsa(uint64,uint64,address)uint64': bigint
  'createApplication()void': void
}

/**
 * Defines the types of available calls and state of the Arc200Bridge smart contract.
 */
export type Arc200BridgeTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'optInToAsa(uint64)void' | 'optInToAsa', {
      argsObj: Arc200BridgeArgs['obj']['optInToAsa(uint64)void']
      argsTuple: Arc200BridgeArgs['tuple']['optInToAsa(uint64)void']
      returns: Arc200BridgeReturns['optInToAsa(uint64)void']
    }>
    & Record<'asaToArc200(axfer,address)uint64' | 'asaToArc200', {
      argsObj: Arc200BridgeArgs['obj']['asaToArc200(axfer,address)uint64']
      argsTuple: Arc200BridgeArgs['tuple']['asaToArc200(axfer,address)uint64']
      returns: Arc200BridgeReturns['asaToArc200(axfer,address)uint64']
    }>
    & Record<'arc200ToAsa(uint64,uint64,address)uint64' | 'arc200ToAsa', {
      argsObj: Arc200BridgeArgs['obj']['arc200ToAsa(uint64,uint64,address)uint64']
      argsTuple: Arc200BridgeArgs['tuple']['arc200ToAsa(uint64,uint64,address)uint64']
      returns: Arc200BridgeReturns['arc200ToAsa(uint64,uint64,address)uint64']
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: Arc200BridgeArgs['obj']['createApplication()void']
      argsTuple: Arc200BridgeArgs['tuple']['createApplication()void']
      returns: Arc200BridgeReturns['createApplication()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    box: {
      keys: {}
      maps: {
        asaToArc200Map: Map<bigint | number, bigint>
        arc200ToAsaMap: Map<bigint | number, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Arc200BridgeSignatures = keyof Arc200BridgeTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Arc200BridgeNonVoidMethodSignatures = keyof Arc200BridgeTypes['methods'] extends infer T ? T extends keyof Arc200BridgeTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Arc200Bridge smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Arc200BridgeSignatures> = Arc200BridgeTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc200Bridge smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc200BridgeSignatures> = Arc200BridgeTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = Arc200BridgeTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Arc200BridgeCreateCallParams =
  | Expand<CallParams<Arc200BridgeArgs['obj']['createApplication()void'] | Arc200BridgeArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<Arc200BridgeArgs['obj']['createApplication()void'] | Arc200BridgeArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Arc200BridgeDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Arc200BridgeCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc200Bridge smart contract
 */
export abstract class Arc200BridgeParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends Arc200BridgeCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return Arc200BridgeParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ARC200Bridge smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<Arc200BridgeArgs['obj']['createApplication()void'] | Arc200BridgeArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the optInToAsa(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToAsa(params: CallParams<Arc200BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc200BridgeArgs['tuple']['optInToAsa(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optInToAsa(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asa],
    }
  }
  /**
   * Constructs a no op call for the asaToArc200(axfer,address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static asaToArc200(params: CallParams<Arc200BridgeArgs['obj']['asaToArc200(axfer,address)uint64'] | Arc200BridgeArgs['tuple']['asaToArc200(axfer,address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'asaToArc200(axfer,address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.axfer, params.args.receiver],
    }
  }
  /**
   * Constructs a no op call for the arc200ToAsa(uint64,uint64,address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200ToAsa(params: CallParams<Arc200BridgeArgs['obj']['arc200ToAsa(uint64,uint64,address)uint64'] | Arc200BridgeArgs['tuple']['arc200ToAsa(uint64,uint64,address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200ToAsa(uint64,uint64,address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app, params.args.amount, params.args.receiver],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ARC200Bridge smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Arc200BridgeFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Arc200BridgeFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Arc200BridgeClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Arc200BridgeClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ARC200Bridge smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Arc200BridgeDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? Arc200BridgeParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (Arc200BridgeCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new Arc200BridgeClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC200Bridge smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<Arc200BridgeArgs['obj']['createApplication()void'] | Arc200BridgeArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(Arc200BridgeParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC200Bridge smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<Arc200BridgeArgs['obj']['createApplication()void'] | Arc200BridgeArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(Arc200BridgeParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC200Bridge smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<Arc200BridgeArgs['obj']['createApplication()void'] | Arc200BridgeArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(Arc200BridgeParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | Arc200BridgeReturns['createApplication()void']) }, appClient: new Arc200BridgeClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ARC200Bridge smart contract
 */
export class Arc200BridgeClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Arc200BridgeClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Arc200Bridge app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Arc200BridgeClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Arc200BridgeNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Arc200BridgeClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Arc200BridgeClient> {
    return new Arc200BridgeClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Arc200BridgeClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Arc200BridgeClient> {
    return new Arc200BridgeClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ARC200Bridge smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC200Bridge smart contract using the `optInToAsa(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToAsa: (params: CallParams<Arc200BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc200BridgeArgs['tuple']['optInToAsa(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc200BridgeParamsFactory.optInToAsa(params))
    },

    /**
     * Makes a call to the ARC200Bridge smart contract using the `asaToArc200(axfer,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    asaToArc200: (params: CallParams<Arc200BridgeArgs['obj']['asaToArc200(axfer,address)uint64'] | Arc200BridgeArgs['tuple']['asaToArc200(axfer,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc200BridgeParamsFactory.asaToArc200(params))
    },

    /**
     * Makes a call to the ARC200Bridge smart contract using the `arc200ToAsa(uint64,uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc200ToAsa: (params: CallParams<Arc200BridgeArgs['obj']['arc200ToAsa(uint64,uint64,address)uint64'] | Arc200BridgeArgs['tuple']['arc200ToAsa(uint64,uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc200BridgeParamsFactory.arc200ToAsa(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ARC200Bridge smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC200Bridge smart contract using the `optInToAsa(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToAsa: (params: CallParams<Arc200BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc200BridgeArgs['tuple']['optInToAsa(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc200BridgeParamsFactory.optInToAsa(params))
    },

    /**
     * Makes a call to the ARC200Bridge smart contract using the `asaToArc200(axfer,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    asaToArc200: (params: CallParams<Arc200BridgeArgs['obj']['asaToArc200(axfer,address)uint64'] | Arc200BridgeArgs['tuple']['asaToArc200(axfer,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc200BridgeParamsFactory.asaToArc200(params))
    },

    /**
     * Makes a call to the ARC200Bridge smart contract using the `arc200ToAsa(uint64,uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc200ToAsa: (params: CallParams<Arc200BridgeArgs['obj']['arc200ToAsa(uint64,uint64,address)uint64'] | Arc200BridgeArgs['tuple']['arc200ToAsa(uint64,uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc200BridgeParamsFactory.arc200ToAsa(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ARC200Bridge smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC200Bridge smart contract using the `optInToAsa(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToAsa: async (params: CallParams<Arc200BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc200BridgeArgs['tuple']['optInToAsa(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc200BridgeParamsFactory.optInToAsa(params))
      return {...result, return: result.return as unknown as (undefined | Arc200BridgeReturns['optInToAsa(uint64)void'])}
    },

    /**
     * Makes a call to the ARC200Bridge smart contract using the `asaToArc200(axfer,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    asaToArc200: async (params: CallParams<Arc200BridgeArgs['obj']['asaToArc200(axfer,address)uint64'] | Arc200BridgeArgs['tuple']['asaToArc200(axfer,address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc200BridgeParamsFactory.asaToArc200(params))
      return {...result, return: result.return as unknown as (undefined | Arc200BridgeReturns['asaToArc200(axfer,address)uint64'])}
    },

    /**
     * Makes a call to the ARC200Bridge smart contract using the `arc200ToAsa(uint64,uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc200ToAsa: async (params: CallParams<Arc200BridgeArgs['obj']['arc200ToAsa(uint64,uint64,address)uint64'] | Arc200BridgeArgs['tuple']['arc200ToAsa(uint64,uint64,address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc200BridgeParamsFactory.arc200ToAsa(params))
      return {...result, return: result.return as unknown as (undefined | Arc200BridgeReturns['arc200ToAsa(uint64,uint64,address)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Arc200BridgeClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ARC200Bridge app
   */
  state = {
    /**
     * Methods to access box state for the current ARC200Bridge app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the asaToArc200Map map in box state
       */
      asaToArc200Map: {
        /**
         * Get all current values of the asaToArc200Map map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("asaToArc200Map")) as Map<bigint, bigint> },
        /**
         * Get a current value of the asaToArc200Map map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("asaToArc200Map", key) as bigint | undefined },
      },
      /**
       * Get values from the arc200ToAsaMap map in box state
       */
      arc200ToAsaMap: {
        /**
         * Get all current values of the arc200ToAsaMap map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("arc200ToAsaMap")) as Map<bigint, bigint> },
        /**
         * Get a current value of the arc200ToAsaMap map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("arc200ToAsaMap", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): Arc200BridgeComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a optInToAsa(uint64)void method call against the ARC200Bridge contract
       */
      optInToAsa(params: CallParams<Arc200BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc200BridgeArgs['tuple']['optInToAsa(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToAsa(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a asaToArc200(axfer,address)uint64 method call against the ARC200Bridge contract
       */
      asaToArc200(params: CallParams<Arc200BridgeArgs['obj']['asaToArc200(axfer,address)uint64'] | Arc200BridgeArgs['tuple']['asaToArc200(axfer,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.asaToArc200(params)))
        resultMappers.push((v) => client.decodeReturnValue('asaToArc200(axfer,address)uint64', v))
        return this
      },
      /**
       * Add a arc200ToAsa(uint64,uint64,address)uint64 method call against the ARC200Bridge contract
       */
      arc200ToAsa(params: CallParams<Arc200BridgeArgs['obj']['arc200ToAsa(uint64,uint64,address)uint64'] | Arc200BridgeArgs['tuple']['arc200ToAsa(uint64,uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200ToAsa(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200ToAsa(uint64,uint64,address)uint64', v))
        return this
      },
      /**
       * Add a clear state call to the ARC200Bridge contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Arc200BridgeComposer
  }
}
export type Arc200BridgeComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the optInToAsa(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsa(params?: CallParams<Arc200BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc200BridgeArgs['tuple']['optInToAsa(uint64)void']>): Arc200BridgeComposer<[...TReturns, Arc200BridgeReturns['optInToAsa(uint64)void'] | undefined]>

  /**
   * Calls the asaToArc200(axfer,address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  asaToArc200(params?: CallParams<Arc200BridgeArgs['obj']['asaToArc200(axfer,address)uint64'] | Arc200BridgeArgs['tuple']['asaToArc200(axfer,address)uint64']>): Arc200BridgeComposer<[...TReturns, Arc200BridgeReturns['asaToArc200(axfer,address)uint64'] | undefined]>

  /**
   * Calls the arc200ToAsa(uint64,uint64,address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200ToAsa(params?: CallParams<Arc200BridgeArgs['obj']['arc200ToAsa(uint64,uint64,address)uint64'] | Arc200BridgeArgs['tuple']['arc200ToAsa(uint64,uint64,address)uint64']>): Arc200BridgeComposer<[...TReturns, Arc200BridgeReturns['arc200ToAsa(uint64,uint64,address)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ARC200Bridge smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Arc200BridgeComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc200BridgeComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc200BridgeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Arc200BridgeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Arc200BridgeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Arc200BridgeComposerResults<TReturns>>
}
export type Arc200BridgeComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


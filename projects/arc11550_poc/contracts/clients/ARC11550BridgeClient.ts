/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ARC11550Bridge","desc":"","methods":[{"name":"createApplication","args":[{"name":"dataApp","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"optInToAsa","args":[{"name":"asa","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"asaToArc11550","args":[{"name":"axfer","type":"axfer"},{"name":"receiver","type":"address"}],"returns":{"type":"(uint64,uint64)","struct":"Arc11550Id"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550ToAsa","args":[{"name":"xferCall","type":"appl"},{"name":"xferIndex","type":"uint64"},{"name":"receiver","type":"address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"withdrawAsa","args":[{"name":"asa","type":"uint64"},{"name":"withdrawalFor","type":"address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"Arc11550Id":[{"name":"id","type":"uint64"},{"name":"dataApp","type":"uint64"}],"AsaAndAddr":[{"name":"asa","type":"uint64"},{"name":"address","type":"address"}]},"state":{"schema":{"global":{"bytes":0,"ints":2},"local":{"bytes":0,"ints":0}},"keys":{"global":{"dataApp":{"key":"ZGF0YUFwcA==","keyType":"AVMBytes","valueType":"uint64"},"collection":{"key":"Y29sbGVjdGlvbg==","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"asaToArc11550Map":{"keyType":"uint64","valueType":"Arc11550Id","prefix":"YXNh"},"arc11550ToAsaMap":{"keyType":"Arc11550Id","valueType":"uint64","prefix":"YXBw"},"withdrawAmounts":{"keyType":"AsaAndAddr","valueType":"uint64"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[0]},{"teal":2,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[1,2,3,4,5,6,7,8,9,10]},{"teal":3,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59]},{"teal":15,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[60,61]},{"teal":16,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[62]},{"teal":17,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[63]},{"teal":18,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[64]},{"teal":19,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[65,66]},{"teal":20,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[67]},{"teal":21,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93]},{"teal":25,"source":"contracts/ARC11550Bridge.algo.ts:15","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[94]},{"teal":30,"source":"contracts/ARC11550Bridge.algo.ts:28","pc":[95,96,97]},{"teal":31,"source":"contracts/ARC11550Bridge.algo.ts:28","pc":[98]},{"teal":34,"source":"contracts/ARC11550Bridge.algo.ts:28","pc":[99,100,101]},{"teal":35,"source":"contracts/ARC11550Bridge.algo.ts:28","pc":[102]},{"teal":36,"source":"contracts/ARC11550Bridge.algo.ts:28","pc":[103]},{"teal":40,"source":"contracts/ARC11550Bridge.algo.ts:28","pc":[104,105,106]},{"teal":44,"source":"contracts/ARC11550Bridge.algo.ts:29","pc":[107]},{"teal":45,"source":"contracts/ARC11550Bridge.algo.ts:29","pc":[108,109]},{"teal":46,"source":"contracts/ARC11550Bridge.algo.ts:29","pc":[110]},{"teal":53,"source":"contracts/ARC11550Bridge.algo.ts:30","pc":[111,112]},{"teal":54,"source":"contracts/ARC11550Bridge.algo.ts:30","pc":[113]},{"teal":55,"source":"contracts/ARC11550Bridge.algo.ts:30","pc":[114]},{"teal":56,"source":"contracts/ARC11550Bridge.algo.ts:30","pc":[115,116]},{"teal":57,"source":"contracts/ARC11550Bridge.algo.ts:30","pc":[117,118,119,120,121,122]},{"teal":58,"source":"contracts/ARC11550Bridge.algo.ts:30","pc":[123,124]},{"teal":62,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[125,126]},{"teal":63,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[127,128]},{"teal":67,"source":"contracts/ARC11550Bridge.algo.ts:32","pc":[129,130]},{"teal":68,"source":"contracts/ARC11550Bridge.algo.ts:32","pc":[131,132]},{"teal":69,"source":"contracts/ARC11550Bridge.algo.ts:32","pc":[133,134,135,136,137,138,139,140,141,142]},{"teal":70,"source":"contracts/ARC11550Bridge.algo.ts:32","pc":[143,144]},{"teal":73,"source":"contracts/ARC11550Bridge.algo.ts:30","pc":[145]},{"teal":74,"source":"contracts/ARC11550Bridge.algo.ts:30","pc":[146,147]},{"teal":77,"source":"contracts/ARC11550Bridge.algo.ts:30","pc":[148]},{"teal":78,"source":"contracts/ARC11550Bridge.algo.ts:30","pc":[149,150]},{"teal":79,"source":"contracts/ARC11550Bridge.algo.ts:30","pc":[151]},{"teal":80,"source":"contracts/ARC11550Bridge.algo.ts:30","pc":[152]},{"teal":81,"source":"contracts/ARC11550Bridge.algo.ts:30","pc":[153,154]},{"teal":82,"source":"contracts/ARC11550Bridge.algo.ts:30","pc":[155,156,157]},{"teal":83,"source":"contracts/ARC11550Bridge.algo.ts:30","pc":[158]},{"teal":84,"source":"contracts/ARC11550Bridge.algo.ts:30","pc":[159]},{"teal":85,"source":"contracts/ARC11550Bridge.algo.ts:28","pc":[160]},{"teal":90,"source":"contracts/ARC11550Bridge.algo.ts:36","pc":[161,162,163]},{"teal":91,"source":"contracts/ARC11550Bridge.algo.ts:36","pc":[164]},{"teal":94,"source":"contracts/ARC11550Bridge.algo.ts:36","pc":[165,166,167]},{"teal":95,"source":"contracts/ARC11550Bridge.algo.ts:36","pc":[168]},{"teal":96,"source":"contracts/ARC11550Bridge.algo.ts:36","pc":[169]},{"teal":100,"source":"contracts/ARC11550Bridge.algo.ts:36","pc":[170,171,172]},{"teal":108,"source":"contracts/ARC11550Bridge.algo.ts:37","pc":[173]},{"teal":109,"source":"contracts/ARC11550Bridge.algo.ts:37","pc":[174,175]},{"teal":110,"source":"contracts/ARC11550Bridge.algo.ts:37","pc":[176,177]},{"teal":114,"source":"contracts/ARC11550Bridge.algo.ts:38","pc":[178,179]},{"teal":115,"source":"contracts/ARC11550Bridge.algo.ts:38","pc":[180,181]},{"teal":119,"source":"contracts/ARC11550Bridge.algo.ts:39","pc":[182]},{"teal":120,"source":"contracts/ARC11550Bridge.algo.ts:39","pc":[183,184]},{"teal":124,"source":"contracts/ARC11550Bridge.algo.ts:40","pc":[185,186]},{"teal":125,"source":"contracts/ARC11550Bridge.algo.ts:40","pc":[187,188]},{"teal":128,"source":"contracts/ARC11550Bridge.algo.ts:37","pc":[189]},{"teal":129,"source":"contracts/ARC11550Bridge.algo.ts:37","pc":[190,191]},{"teal":132,"source":"contracts/ARC11550Bridge.algo.ts:37","pc":[192]},{"teal":133,"source":"contracts/ARC11550Bridge.algo.ts:36","pc":[193]},{"teal":138,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[194,195]},{"teal":141,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[196,197,198]},{"teal":142,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[199]},{"teal":143,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[200]},{"teal":144,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[201,202]},{"teal":145,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[203]},{"teal":148,"source":"contracts/ARC11550Bridge.algo.ts:44","errorMessage":"argument 0 (receiver) for asaToArc11550 must be a address","pc":[204]},{"teal":151,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[205,206]},{"teal":152,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[207]},{"teal":153,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[208]},{"teal":154,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[209]},{"teal":155,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[210,211]},{"teal":156,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[212,213]},{"teal":157,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[214]},{"teal":160,"source":"contracts/ARC11550Bridge.algo.ts:44","errorMessage":"argument 1 (axfer) for asaToArc11550 must be a axfer transaction","pc":[215]},{"teal":163,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[216,217,218]},{"teal":164,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[219]},{"teal":165,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[220]},{"teal":166,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[221]},{"teal":167,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[222]},{"teal":171,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[223,224,225]},{"teal":174,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[226]},{"teal":175,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[227,228]},{"teal":182,"source":"contracts/ARC11550Bridge.algo.ts:45","pc":[229,230]},{"teal":183,"source":"contracts/ARC11550Bridge.algo.ts:46","pc":[231,232]},{"teal":184,"source":"contracts/ARC11550Bridge.algo.ts:46","pc":[233,234]},{"teal":185,"source":"contracts/ARC11550Bridge.algo.ts:46","pc":[235]},{"teal":188,"source":"contracts/ARC11550Bridge.algo.ts:46","errorMessage":"transaction verification failed: {\"txn\":\"axfer\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}","pc":[236]},{"teal":192,"source":"contracts/ARC11550Bridge.algo.ts:49","pc":[237,238]},{"teal":193,"source":"contracts/ARC11550Bridge.algo.ts:49","pc":[239,240]},{"teal":194,"source":"contracts/ARC11550Bridge.algo.ts:49","pc":[241,242]},{"teal":198,"source":"contracts/ARC11550Bridge.algo.ts:51","pc":[243,244]},{"teal":199,"source":"contracts/ARC11550Bridge.algo.ts:51","pc":[245,246]},{"teal":200,"source":"contracts/ARC11550Bridge.algo.ts:51","pc":[247]},{"teal":201,"source":"contracts/ARC11550Bridge.algo.ts:51","pc":[248,249]},{"teal":202,"source":"contracts/ARC11550Bridge.algo.ts:51","pc":[250]},{"teal":203,"source":"contracts/ARC11550Bridge.algo.ts:51","pc":[251]},{"teal":208,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[252]},{"teal":209,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[253,254]},{"teal":210,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[255,256]},{"teal":211,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[257]},{"teal":212,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[258]},{"teal":213,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[259]},{"teal":214,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[260]},{"teal":215,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[261]},{"teal":216,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[262]},{"teal":217,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[263,264,265]},{"teal":235,"source":"contracts/ARC11550Bridge.algo.ts:55","pc":[266]},{"teal":236,"source":"contracts/ARC11550Bridge.algo.ts:55","pc":[267]},{"teal":237,"source":"contracts/ARC11550Bridge.algo.ts:55","pc":[268,269]},{"teal":238,"source":"contracts/ARC11550Bridge.algo.ts:55","pc":[270,271,272,273,274,275]},{"teal":239,"source":"contracts/ARC11550Bridge.algo.ts:55","pc":[276,277]},{"teal":243,"source":"contracts/ARC11550Bridge.algo.ts:56","pc":[278]},{"teal":244,"source":"contracts/ARC11550Bridge.algo.ts:56","pc":[279]},{"teal":245,"source":"contracts/ARC11550Bridge.algo.ts:56","pc":[280,281]},{"teal":259,"source":"contracts/ARC11550Bridge.algo.ts:58","pc":[282,283]},{"teal":260,"source":"contracts/ARC11550Bridge.algo.ts:58","pc":[284]},{"teal":261,"source":"contracts/ARC11550Bridge.algo.ts:58","pc":[285]},{"teal":262,"source":"contracts/ARC11550Bridge.algo.ts:58","pc":[286,287]},{"teal":263,"source":"contracts/ARC11550Bridge.algo.ts:63","pc":[288,289]},{"teal":264,"source":"contracts/ARC11550Bridge.algo.ts:63","pc":[290,291]},{"teal":265,"source":"contracts/ARC11550Bridge.algo.ts:63","pc":[292]},{"teal":266,"source":"contracts/ARC11550Bridge.algo.ts:63","pc":[293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326]},{"teal":267,"source":"contracts/ARC11550Bridge.algo.ts:63","pc":[327]},{"teal":268,"source":"contracts/ARC11550Bridge.algo.ts:63","pc":[328]},{"teal":269,"source":"contracts/ARC11550Bridge.algo.ts:63","pc":[329,330,331]},{"teal":270,"source":"contracts/ARC11550Bridge.algo.ts:63","pc":[332]},{"teal":271,"source":"contracts/ARC11550Bridge.algo.ts:63","pc":[333]},{"teal":272,"source":"contracts/ARC11550Bridge.algo.ts:63","pc":[334]},{"teal":273,"source":"contracts/ARC11550Bridge.algo.ts:63","pc":[335,336,337]},{"teal":274,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[338,339]},{"teal":275,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[340,341]},{"teal":276,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[342]},{"teal":277,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[343,344]},{"teal":278,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[345]},{"teal":279,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[346]},{"teal":280,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[347,348,349]},{"teal":281,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[350]},{"teal":282,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[351]},{"teal":283,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[352]},{"teal":284,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[353,354,355]},{"teal":285,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[356]},{"teal":286,"source":"contracts/ARC11550Bridge.algo.ts:60","pc":[357,358]},{"teal":287,"source":"contracts/ARC11550Bridge.algo.ts:60","pc":[359,360]},{"teal":288,"source":"contracts/ARC11550Bridge.algo.ts:60","pc":[361]},{"teal":289,"source":"contracts/ARC11550Bridge.algo.ts:60","pc":[362]},{"teal":290,"source":"contracts/ARC11550Bridge.algo.ts:60","pc":[363]},{"teal":291,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[364,365]},{"teal":292,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[366,367]},{"teal":293,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[368]},{"teal":294,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[369]},{"teal":295,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[370]},{"teal":296,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[371,372]},{"teal":297,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[373]},{"teal":298,"source":"contracts/ARC11550Bridge.algo.ts:65","pc":[374,375]},{"teal":299,"source":"contracts/ARC11550Bridge.algo.ts:65","pc":[376]},{"teal":300,"source":"contracts/ARC11550Bridge.algo.ts:59","pc":[377,378]},{"teal":303,"source":"contracts/ARC11550Bridge.algo.ts:55","pc":[379]},{"teal":304,"source":"contracts/ARC11550Bridge.algo.ts:55","pc":[380,381]},{"teal":307,"source":"contracts/ARC11550Bridge.algo.ts:55","pc":[382]},{"teal":308,"source":"contracts/ARC11550Bridge.algo.ts:55","pc":[383,384]},{"teal":309,"source":"contracts/ARC11550Bridge.algo.ts:55","pc":[385]},{"teal":310,"source":"contracts/ARC11550Bridge.algo.ts:55","pc":[386]},{"teal":311,"source":"contracts/ARC11550Bridge.algo.ts:55","pc":[387,388]},{"teal":312,"source":"contracts/ARC11550Bridge.algo.ts:55","pc":[389,390,391]},{"teal":313,"source":"contracts/ARC11550Bridge.algo.ts:55","pc":[392]},{"teal":314,"source":"contracts/ARC11550Bridge.algo.ts:55","pc":[393,394]},{"teal":318,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[395,396]},{"teal":319,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[397]},{"teal":320,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[398]},{"teal":321,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[399]},{"teal":322,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[400]},{"teal":323,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[401]},{"teal":324,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[402,403]},{"teal":328,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[404]},{"teal":329,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[405,406]},{"teal":330,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[407]},{"teal":331,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[408]},{"teal":332,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[409,410]},{"teal":333,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[411]},{"teal":337,"source":"contracts/ARC11550Bridge.algo.ts:72","pc":[412]},{"teal":338,"source":"contracts/ARC11550Bridge.algo.ts:72","pc":[413,414]},{"teal":339,"source":"contracts/ARC11550Bridge.algo.ts:72","pc":[415]},{"teal":340,"source":"contracts/ARC11550Bridge.algo.ts:72","pc":[416,417]},{"teal":341,"source":"contracts/ARC11550Bridge.algo.ts:72","pc":[418]},{"teal":342,"source":"contracts/ARC11550Bridge.algo.ts:72","pc":[419]},{"teal":347,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[420]},{"teal":348,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[421,422]},{"teal":349,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[423]},{"teal":350,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[424]},{"teal":351,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[425,426]},{"teal":357,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[427]},{"teal":358,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[428]},{"teal":359,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[429,430]},{"teal":360,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[431,432]},{"teal":361,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[433,434]},{"teal":365,"source":"contracts/ARC11550Bridge.algo.ts:78","pc":[435]},{"teal":366,"source":"contracts/ARC11550Bridge.algo.ts:78","pc":[436]},{"teal":367,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[437]},{"teal":368,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[438,439]},{"teal":369,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[440]},{"teal":370,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[441]},{"teal":371,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[442,443]},{"teal":372,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[444]},{"teal":373,"source":"contracts/ARC11550Bridge.algo.ts:78","pc":[445]},{"teal":374,"source":"contracts/ARC11550Bridge.algo.ts:78","pc":[446,447]},{"teal":377,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[448]},{"teal":378,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[449,450]},{"teal":381,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[451]},{"teal":382,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[452,453]},{"teal":383,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[454]},{"teal":384,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[455]},{"teal":385,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[456,457]},{"teal":386,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[458,459,460]},{"teal":387,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[461]},{"teal":388,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[462,463]},{"teal":398,"source":"contracts/ARC11550Bridge.algo.ts:82","pc":[464]},{"teal":399,"source":"contracts/ARC11550Bridge.algo.ts:82","pc":[465]},{"teal":400,"source":"contracts/ARC11550Bridge.algo.ts:82","pc":[466,467]},{"teal":401,"source":"contracts/ARC11550Bridge.algo.ts:82","pc":[468,469,470,471,472,473]},{"teal":402,"source":"contracts/ARC11550Bridge.algo.ts:82","pc":[474,475]},{"teal":406,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[476,477]},{"teal":407,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[478,479]},{"teal":414,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[480]},{"teal":415,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[481]},{"teal":416,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[482]},{"teal":417,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[483,484]},{"teal":418,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[485]},{"teal":419,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[486]},{"teal":420,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[487,488]},{"teal":421,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[489]},{"teal":422,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[490]},{"teal":423,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[491]},{"teal":424,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[492,493]},{"teal":425,"source":"contracts/ARC11550Bridge.algo.ts:86","pc":[494]},{"teal":426,"source":"contracts/ARC11550Bridge.algo.ts:86","pc":[495]},{"teal":427,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[496]},{"teal":428,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[497,498]},{"teal":429,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[499]},{"teal":430,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[500]},{"teal":431,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[501,502]},{"teal":432,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[503]},{"teal":433,"source":"contracts/ARC11550Bridge.algo.ts:86","pc":[504]},{"teal":434,"source":"contracts/ARC11550Bridge.algo.ts:86","pc":[505]},{"teal":435,"source":"contracts/ARC11550Bridge.algo.ts:86","pc":[506,507]},{"teal":436,"source":"contracts/ARC11550Bridge.algo.ts:86","pc":[508]},{"teal":437,"source":"contracts/ARC11550Bridge.algo.ts:86","pc":[509,510]},{"teal":438,"source":"contracts/ARC11550Bridge.algo.ts:86","pc":[511]},{"teal":439,"source":"contracts/ARC11550Bridge.algo.ts:86","pc":[512,513]},{"teal":440,"source":"contracts/ARC11550Bridge.algo.ts:86","pc":[514,515]},{"teal":441,"source":"contracts/ARC11550Bridge.algo.ts:86","pc":[516]},{"teal":442,"source":"contracts/ARC11550Bridge.algo.ts:86","pc":[517]},{"teal":443,"source":"contracts/ARC11550Bridge.algo.ts:86","pc":[518]},{"teal":444,"source":"contracts/ARC11550Bridge.algo.ts:86","pc":[519]},{"teal":445,"source":"contracts/ARC11550Bridge.algo.ts:86","pc":[520,521]},{"teal":446,"source":"contracts/ARC11550Bridge.algo.ts:86","pc":[522]},{"teal":447,"source":"contracts/ARC11550Bridge.algo.ts:86","pc":[523]},{"teal":448,"source":"contracts/ARC11550Bridge.algo.ts:86","pc":[524,525,526]},{"teal":449,"source":"contracts/ARC11550Bridge.algo.ts:86","pc":[527]},{"teal":450,"source":"contracts/ARC11550Bridge.algo.ts:86","pc":[528]},{"teal":451,"source":"contracts/ARC11550Bridge.algo.ts:86","pc":[529,530]},{"teal":454,"source":"contracts/ARC11550Bridge.algo.ts:82","pc":[531]},{"teal":455,"source":"contracts/ARC11550Bridge.algo.ts:82","pc":[532,533]},{"teal":458,"source":"contracts/ARC11550Bridge.algo.ts:82","pc":[534]},{"teal":462,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[535,536]},{"teal":463,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[537]},{"teal":466,"source":"contracts/ARC11550Bridge.algo.ts:75","errorMessage":"box value does not exist: this.asaToArc11550Map(asa).value","pc":[538]},{"teal":469,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[539,540]},{"teal":472,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[541,542]},{"teal":473,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[543]},{"teal":478,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[544,545]},{"teal":481,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[546,547,548]},{"teal":482,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[549]},{"teal":483,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[550]},{"teal":484,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[551,552]},{"teal":485,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[553]},{"teal":488,"source":"contracts/ARC11550Bridge.algo.ts:93","errorMessage":"argument 0 (receiver) for arc11550ToAsa must be a address","pc":[554]},{"teal":491,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[555,556,557]},{"teal":492,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[558]},{"teal":495,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[559,560]},{"teal":496,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[561]},{"teal":497,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[562]},{"teal":498,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[563]},{"teal":499,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[564,565]},{"teal":500,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[566]},{"teal":501,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[567]},{"teal":504,"source":"contracts/ARC11550Bridge.algo.ts:93","errorMessage":"argument 2 (xferCall) for arc11550ToAsa must be a appl transaction","pc":[568]},{"teal":507,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[569,570,571]},{"teal":508,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[572]},{"teal":509,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[573]},{"teal":510,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[574]},{"teal":511,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[575]},{"teal":512,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[576]},{"teal":516,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[577,578,579]},{"teal":519,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[580]},{"teal":520,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[581,582]},{"teal":524,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[583,584]},{"teal":525,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[585,586,587]},{"teal":526,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[588,589,590]},{"teal":527,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[591,592]},{"teal":528,"source":"contracts/ARC11550Bridge.algo.ts:95","pc":[593,594]},{"teal":529,"source":"contracts/ARC11550Bridge.algo.ts:95","pc":[595,596]},{"teal":533,"source":"contracts/ARC11550Bridge.algo.ts:96","pc":[597,598]},{"teal":534,"source":"contracts/ARC11550Bridge.algo.ts:96","pc":[599,600]},{"teal":535,"source":"contracts/ARC11550Bridge.algo.ts:96","pc":[601]},{"teal":536,"source":"contracts/ARC11550Bridge.algo.ts:96","pc":[602,603]},{"teal":537,"source":"contracts/ARC11550Bridge.algo.ts:96","pc":[604,605]},{"teal":538,"source":"contracts/ARC11550Bridge.algo.ts:96","pc":[606]},{"teal":539,"source":"contracts/ARC11550Bridge.algo.ts:96","pc":[607]},{"teal":540,"source":"contracts/ARC11550Bridge.algo.ts:96","pc":[608,609]},{"teal":541,"source":"contracts/ARC11550Bridge.algo.ts:96","pc":[610]},{"teal":542,"source":"contracts/ARC11550Bridge.algo.ts:96","pc":[611,612]},{"teal":543,"source":"contracts/ARC11550Bridge.algo.ts:96","pc":[613]},{"teal":544,"source":"contracts/ARC11550Bridge.algo.ts:96","pc":[614,615]},{"teal":545,"source":"contracts/ARC11550Bridge.algo.ts:96","pc":[616]},{"teal":546,"source":"contracts/ARC11550Bridge.algo.ts:96","pc":[617,618]},{"teal":547,"source":"contracts/ARC11550Bridge.algo.ts:96","pc":[619]},{"teal":548,"source":"contracts/ARC11550Bridge.algo.ts:96","pc":[620]},{"teal":552,"source":"contracts/ARC11550Bridge.algo.ts:98","pc":[621,622]},{"teal":553,"source":"contracts/ARC11550Bridge.algo.ts:98","pc":[623,624,625]},{"teal":554,"source":"contracts/ARC11550Bridge.algo.ts:98","pc":[626]},{"teal":555,"source":"contracts/ARC11550Bridge.algo.ts:98","pc":[627,628]},{"teal":562,"source":"contracts/ARC11550Bridge.algo.ts:102","pc":[629,630]},{"teal":563,"source":"contracts/ARC11550Bridge.algo.ts:102","pc":[631,632]},{"teal":564,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[633]},{"teal":565,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[634]},{"teal":566,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[635,636]},{"teal":567,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[637,638]},{"teal":568,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[639,640]},{"teal":572,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[641,642]},{"teal":573,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[643,644]},{"teal":576,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[645]},{"teal":577,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[646,647]},{"teal":580,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[648]},{"teal":581,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[649,650]},{"teal":582,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[651]},{"teal":583,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[652]},{"teal":584,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[653,654]},{"teal":585,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[655,656,657]},{"teal":586,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[658]},{"teal":587,"source":"contracts/ARC11550Bridge.algo.ts:102","pc":[659]},{"teal":588,"source":"contracts/ARC11550Bridge.algo.ts:101","pc":[660]},{"teal":592,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[661,662]},{"teal":593,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[663,664]},{"teal":594,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[665]},{"teal":595,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[666,667]},{"teal":596,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[668,669]},{"teal":597,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[670]},{"teal":598,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[671]},{"teal":599,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[672]},{"teal":600,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[673]},{"teal":601,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[674,675]},{"teal":602,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[676]},{"teal":603,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[677]},{"teal":604,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[678]},{"teal":605,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[679]},{"teal":606,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[680]},{"teal":607,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[681,682]},{"teal":608,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[683]},{"teal":609,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[684]},{"teal":610,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[685,686]},{"teal":615,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[687]},{"teal":616,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[688,689]},{"teal":617,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[690]},{"teal":618,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[691]},{"teal":619,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[692]},{"teal":620,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[693]},{"teal":621,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[694]},{"teal":622,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[695,696,697]},{"teal":630,"source":"contracts/ARC11550Bridge.algo.ts:109","pc":[698]},{"teal":631,"source":"contracts/ARC11550Bridge.algo.ts:109","pc":[699]},{"teal":632,"source":"contracts/ARC11550Bridge.algo.ts:109","pc":[700,701]},{"teal":633,"source":"contracts/ARC11550Bridge.algo.ts:109","pc":[702,703,704,705,706,707]},{"teal":634,"source":"contracts/ARC11550Bridge.algo.ts:109","pc":[708,709]},{"teal":638,"source":"contracts/ARC11550Bridge.algo.ts:110","pc":[710,711]},{"teal":639,"source":"contracts/ARC11550Bridge.algo.ts:110","pc":[712,713,714]},{"teal":640,"source":"contracts/ARC11550Bridge.algo.ts:110","pc":[715]},{"teal":641,"source":"contracts/ARC11550Bridge.algo.ts:110","pc":[716,717]},{"teal":645,"source":"contracts/ARC11550Bridge.algo.ts:111","pc":[718,719]},{"teal":646,"source":"contracts/ARC11550Bridge.algo.ts:111","pc":[720,721]},{"teal":647,"source":"contracts/ARC11550Bridge.algo.ts:111","pc":[722]},{"teal":648,"source":"contracts/ARC11550Bridge.algo.ts:111","pc":[723,724]},{"teal":649,"source":"contracts/ARC11550Bridge.algo.ts:111","pc":[725,726]},{"teal":650,"source":"contracts/ARC11550Bridge.algo.ts:111","pc":[727]},{"teal":651,"source":"contracts/ARC11550Bridge.algo.ts:111","pc":[728]},{"teal":652,"source":"contracts/ARC11550Bridge.algo.ts:111","pc":[729]},{"teal":653,"source":"contracts/ARC11550Bridge.algo.ts:111","pc":[730]},{"teal":654,"source":"contracts/ARC11550Bridge.algo.ts:111","pc":[731,732]},{"teal":655,"source":"contracts/ARC11550Bridge.algo.ts:111","pc":[733]},{"teal":656,"source":"contracts/ARC11550Bridge.algo.ts:111","pc":[734]},{"teal":657,"source":"contracts/ARC11550Bridge.algo.ts:111","pc":[735]},{"teal":658,"source":"contracts/ARC11550Bridge.algo.ts:111","pc":[736]},{"teal":659,"source":"contracts/ARC11550Bridge.algo.ts:111","pc":[737]},{"teal":660,"source":"contracts/ARC11550Bridge.algo.ts:111","pc":[738,739]},{"teal":663,"source":"contracts/ARC11550Bridge.algo.ts:109","pc":[740]},{"teal":664,"source":"contracts/ARC11550Bridge.algo.ts:109","pc":[741,742]},{"teal":667,"source":"contracts/ARC11550Bridge.algo.ts:109","pc":[743]},{"teal":668,"source":"contracts/ARC11550Bridge.algo.ts:109","pc":[744,745]},{"teal":669,"source":"contracts/ARC11550Bridge.algo.ts:109","pc":[746]},{"teal":670,"source":"contracts/ARC11550Bridge.algo.ts:109","pc":[747]},{"teal":671,"source":"contracts/ARC11550Bridge.algo.ts:109","pc":[748,749]},{"teal":672,"source":"contracts/ARC11550Bridge.algo.ts:109","pc":[750,751,752]},{"teal":673,"source":"contracts/ARC11550Bridge.algo.ts:109","pc":[753,754]},{"teal":683,"source":"contracts/ARC11550Bridge.algo.ts:114","pc":[755]},{"teal":684,"source":"contracts/ARC11550Bridge.algo.ts:114","pc":[756,757]},{"teal":685,"source":"contracts/ARC11550Bridge.algo.ts:114","pc":[758,759]},{"teal":689,"source":"contracts/ARC11550Bridge.algo.ts:115","pc":[760,761]},{"teal":690,"source":"contracts/ARC11550Bridge.algo.ts:115","pc":[762,763,764]},{"teal":691,"source":"contracts/ARC11550Bridge.algo.ts:115","pc":[765]},{"teal":692,"source":"contracts/ARC11550Bridge.algo.ts:115","pc":[766,767]},{"teal":696,"source":"contracts/ARC11550Bridge.algo.ts:116","pc":[768,769]},{"teal":697,"source":"contracts/ARC11550Bridge.algo.ts:116","pc":[770,771,772]},{"teal":698,"source":"contracts/ARC11550Bridge.algo.ts:116","pc":[773]},{"teal":699,"source":"contracts/ARC11550Bridge.algo.ts:116","pc":[774,775]},{"teal":703,"source":"contracts/ARC11550Bridge.algo.ts:117","pc":[776,777]},{"teal":704,"source":"contracts/ARC11550Bridge.algo.ts:117","pc":[778,779,780]},{"teal":705,"source":"contracts/ARC11550Bridge.algo.ts:117","pc":[781,782]},{"teal":709,"source":"contracts/ARC11550Bridge.algo.ts:118","pc":[783,784]},{"teal":710,"source":"contracts/ARC11550Bridge.algo.ts:118","pc":[785,786,787]},{"teal":711,"source":"contracts/ARC11550Bridge.algo.ts:118","pc":[788,789]},{"teal":715,"source":"contracts/ARC11550Bridge.algo.ts:119","pc":[790,791]},{"teal":716,"source":"contracts/ARC11550Bridge.algo.ts:119","pc":[792,793]},{"teal":719,"source":"contracts/ARC11550Bridge.algo.ts:114","pc":[794]},{"teal":720,"source":"contracts/ARC11550Bridge.algo.ts:114","pc":[795,796]},{"teal":723,"source":"contracts/ARC11550Bridge.algo.ts:114","pc":[797]},{"teal":724,"source":"contracts/ARC11550Bridge.algo.ts:114","pc":[798,799]},{"teal":728,"source":"contracts/ARC11550Bridge.algo.ts:122","pc":[800,801]},{"teal":729,"source":"contracts/ARC11550Bridge.algo.ts:122","pc":[802,803]},{"teal":733,"source":"contracts/ARC11550Bridge.algo.ts:123","pc":[804]},{"teal":734,"source":"contracts/ARC11550Bridge.algo.ts:123","pc":[805,806]},{"teal":735,"source":"contracts/ARC11550Bridge.algo.ts:123","pc":[807]},{"teal":736,"source":"contracts/ARC11550Bridge.algo.ts:123","pc":[808,809]},{"teal":737,"source":"contracts/ARC11550Bridge.algo.ts:123","pc":[810]},{"teal":738,"source":"contracts/ARC11550Bridge.algo.ts:123","pc":[811]},{"teal":742,"source":"contracts/ARC11550Bridge.algo.ts:124","pc":[812]},{"teal":743,"source":"contracts/ARC11550Bridge.algo.ts:124","pc":[813,814]},{"teal":744,"source":"contracts/ARC11550Bridge.algo.ts:124","pc":[815]},{"teal":745,"source":"contracts/ARC11550Bridge.algo.ts:124","pc":[816]},{"teal":746,"source":"contracts/ARC11550Bridge.algo.ts:124","pc":[817,818]},{"teal":747,"source":"contracts/ARC11550Bridge.algo.ts:124","pc":[819]},{"teal":752,"source":"contracts/ARC11550Bridge.algo.ts:127","pc":[820]},{"teal":753,"source":"contracts/ARC11550Bridge.algo.ts:127","pc":[821,822]},{"teal":754,"source":"contracts/ARC11550Bridge.algo.ts:127","pc":[823]},{"teal":755,"source":"contracts/ARC11550Bridge.algo.ts:127","pc":[824]},{"teal":758,"source":"contracts/ARC11550Bridge.algo.ts:127","errorMessage":"box value does not exist: this.arc11550ToAsaMap(arc11550).value","pc":[825]},{"teal":759,"source":"contracts/ARC11550Bridge.algo.ts:127","pc":[826]},{"teal":760,"source":"contracts/ARC11550Bridge.algo.ts:127","pc":[827,828]},{"teal":765,"source":"contracts/ARC11550Bridge.algo.ts:129","pc":[829,830]},{"teal":766,"source":"contracts/ARC11550Bridge.algo.ts:129","pc":[831,832]},{"teal":767,"source":"contracts/ARC11550Bridge.algo.ts:129","pc":[833,834]},{"teal":768,"source":"contracts/ARC11550Bridge.algo.ts:129","pc":[835]},{"teal":769,"source":"contracts/ARC11550Bridge.algo.ts:129","pc":[836]},{"teal":770,"source":"contracts/ARC11550Bridge.algo.ts:129","pc":[837]},{"teal":771,"source":"contracts/ARC11550Bridge.algo.ts:129","pc":[838,839,840]},{"teal":776,"source":"contracts/ARC11550Bridge.algo.ts:130","pc":[841,842]},{"teal":777,"source":"contracts/ARC11550Bridge.algo.ts:130","pc":[843]},{"teal":778,"source":"contracts/ARC11550Bridge.algo.ts:130","pc":[844,845]},{"teal":779,"source":"contracts/ARC11550Bridge.algo.ts:130","pc":[846]},{"teal":780,"source":"contracts/ARC11550Bridge.algo.ts:130","pc":[847,848]},{"teal":785,"source":"contracts/ARC11550Bridge.algo.ts:131","pc":[849,850]},{"teal":786,"source":"contracts/ARC11550Bridge.algo.ts:131","pc":[851]},{"teal":787,"source":"contracts/ARC11550Bridge.algo.ts:131","pc":[852]},{"teal":788,"source":"contracts/ARC11550Bridge.algo.ts:131","pc":[853]},{"teal":789,"source":"contracts/ARC11550Bridge.algo.ts:131","pc":[854]},{"teal":790,"source":"contracts/ARC11550Bridge.algo.ts:131","pc":[855,856,857]},{"teal":795,"source":"contracts/ARC11550Bridge.algo.ts:131","pc":[858,859]},{"teal":796,"source":"contracts/ARC11550Bridge.algo.ts:131","pc":[860]},{"teal":797,"source":"contracts/ARC11550Bridge.algo.ts:131","pc":[861]},{"teal":798,"source":"contracts/ARC11550Bridge.algo.ts:131","pc":[862]},{"teal":803,"source":"contracts/ARC11550Bridge.algo.ts:133","pc":[863,864]},{"teal":804,"source":"contracts/ARC11550Bridge.algo.ts:133","pc":[865]},{"teal":807,"source":"contracts/ARC11550Bridge.algo.ts:133","errorMessage":"box value does not exist: this.withdrawAmounts(key).value","pc":[866]},{"teal":808,"source":"contracts/ARC11550Bridge.algo.ts:133","pc":[867]},{"teal":809,"source":"contracts/ARC11550Bridge.algo.ts:133","pc":[868,869]},{"teal":810,"source":"contracts/ARC11550Bridge.algo.ts:133","pc":[870,871]},{"teal":811,"source":"contracts/ARC11550Bridge.algo.ts:133","pc":[872]},{"teal":812,"source":"contracts/ARC11550Bridge.algo.ts:133","pc":[873,874]},{"teal":813,"source":"contracts/ARC11550Bridge.algo.ts:133","pc":[875,876]},{"teal":814,"source":"contracts/ARC11550Bridge.algo.ts:133","pc":[877]},{"teal":815,"source":"contracts/ARC11550Bridge.algo.ts:133","pc":[878]},{"teal":816,"source":"contracts/ARC11550Bridge.algo.ts:133","pc":[879,880]},{"teal":817,"source":"contracts/ARC11550Bridge.algo.ts:133","pc":[881]},{"teal":818,"source":"contracts/ARC11550Bridge.algo.ts:133","pc":[882,883]},{"teal":819,"source":"contracts/ARC11550Bridge.algo.ts:133","pc":[884]},{"teal":820,"source":"contracts/ARC11550Bridge.algo.ts:133","pc":[885]},{"teal":821,"source":"contracts/ARC11550Bridge.algo.ts:133","pc":[886]},{"teal":822,"source":"contracts/ARC11550Bridge.algo.ts:133","pc":[887]},{"teal":823,"source":"contracts/ARC11550Bridge.algo.ts:133","pc":[888]},{"teal":824,"source":"contracts/ARC11550Bridge.algo.ts:133","pc":[889,890]},{"teal":825,"source":"contracts/ARC11550Bridge.algo.ts:133","pc":[891]},{"teal":826,"source":"contracts/ARC11550Bridge.algo.ts:133","pc":[892]},{"teal":827,"source":"contracts/ARC11550Bridge.algo.ts:133","pc":[893]},{"teal":828,"source":"contracts/ARC11550Bridge.algo.ts:129","pc":[894,895,896]},{"teal":833,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[897]},{"teal":834,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[898,899]},{"teal":835,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[900,901]},{"teal":839,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[902,903]},{"teal":840,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[904,905]},{"teal":844,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[906,907]},{"teal":845,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[908,909]},{"teal":849,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[910,911]},{"teal":850,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[912,913]},{"teal":851,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[914]},{"teal":852,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[915,916]},{"teal":853,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[917,918]},{"teal":854,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[919]},{"teal":855,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[920]},{"teal":856,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[921,922]},{"teal":857,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[923]},{"teal":858,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[924,925]},{"teal":859,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[926]},{"teal":860,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[927]},{"teal":861,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[928]},{"teal":862,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[929]},{"teal":863,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[930,931]},{"teal":866,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[932]},{"teal":867,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[933,934]},{"teal":870,"source":"contracts/ARC11550Bridge.algo.ts:135","pc":[935]},{"teal":875,"source":"contracts/ARC11550Bridge.algo.ts:138","pc":[936,937]},{"teal":878,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[938,939]},{"teal":881,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[940,941]},{"teal":882,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[942]},{"teal":887,"source":"contracts/ARC11550Bridge.algo.ts:141","pc":[943,944,945]},{"teal":888,"source":"contracts/ARC11550Bridge.algo.ts:141","pc":[946]},{"teal":889,"source":"contracts/ARC11550Bridge.algo.ts:141","pc":[947]},{"teal":890,"source":"contracts/ARC11550Bridge.algo.ts:141","pc":[948,949]},{"teal":891,"source":"contracts/ARC11550Bridge.algo.ts:141","pc":[950]},{"teal":894,"source":"contracts/ARC11550Bridge.algo.ts:141","errorMessage":"argument 0 (withdrawalFor) for withdrawAsa must be a address","pc":[951]},{"teal":897,"source":"contracts/ARC11550Bridge.algo.ts:141","pc":[952,953,954]},{"teal":898,"source":"contracts/ARC11550Bridge.algo.ts:141","pc":[955]},{"teal":901,"source":"contracts/ARC11550Bridge.algo.ts:141","pc":[956,957,958]},{"teal":902,"source":"contracts/ARC11550Bridge.algo.ts:141","pc":[959]},{"teal":903,"source":"contracts/ARC11550Bridge.algo.ts:141","pc":[960]},{"teal":907,"source":"contracts/ARC11550Bridge.algo.ts:141","pc":[961,962,963]},{"teal":910,"source":"contracts/ARC11550Bridge.algo.ts:141","pc":[964]},{"teal":914,"source":"contracts/ARC11550Bridge.algo.ts:142","pc":[965,966]},{"teal":915,"source":"contracts/ARC11550Bridge.algo.ts:142","pc":[967]},{"teal":916,"source":"contracts/ARC11550Bridge.algo.ts:142","pc":[968,969]},{"teal":917,"source":"contracts/ARC11550Bridge.algo.ts:142","pc":[970]},{"teal":918,"source":"contracts/ARC11550Bridge.algo.ts:142","pc":[971,972]},{"teal":922,"source":"contracts/ARC11550Bridge.algo.ts:143","pc":[973]},{"teal":923,"source":"contracts/ARC11550Bridge.algo.ts:143","pc":[974,975]},{"teal":924,"source":"contracts/ARC11550Bridge.algo.ts:143","pc":[976,977]},{"teal":928,"source":"contracts/ARC11550Bridge.algo.ts:143","pc":[978,979]},{"teal":929,"source":"contracts/ARC11550Bridge.algo.ts:143","pc":[980,981]},{"teal":933,"source":"contracts/ARC11550Bridge.algo.ts:143","pc":[982,983]},{"teal":934,"source":"contracts/ARC11550Bridge.algo.ts:143","pc":[984,985]},{"teal":938,"source":"contracts/ARC11550Bridge.algo.ts:143","pc":[986,987]},{"teal":939,"source":"contracts/ARC11550Bridge.algo.ts:143","pc":[988]},{"teal":942,"source":"contracts/ARC11550Bridge.algo.ts:143","errorMessage":"box value does not exist: this.withdrawAmounts(key).value","pc":[989]},{"teal":943,"source":"contracts/ARC11550Bridge.algo.ts:143","pc":[990]},{"teal":944,"source":"contracts/ARC11550Bridge.algo.ts:143","pc":[991,992]},{"teal":947,"source":"contracts/ARC11550Bridge.algo.ts:143","pc":[993]},{"teal":948,"source":"contracts/ARC11550Bridge.algo.ts:143","pc":[994,995]},{"teal":951,"source":"contracts/ARC11550Bridge.algo.ts:143","pc":[996]},{"teal":955,"source":"contracts/ARC11550Bridge.algo.ts:144","pc":[997,998]},{"teal":956,"source":"contracts/ARC11550Bridge.algo.ts:144","pc":[999]},{"teal":957,"source":"contracts/ARC11550Bridge.algo.ts:141","pc":[1000]},{"teal":960,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[1001,1002,1003,1004,1005,1006]},{"teal":961,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[1007,1008,1009]},{"teal":962,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[1010,1011,1012,1013]},{"teal":965,"source":"contracts/ARC11550Bridge.algo.ts:15","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[1014]},{"teal":968,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[1015,1016,1017,1018,1019,1020]},{"teal":969,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[1021,1022,1023,1024,1025,1026]},{"teal":970,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[1027,1028,1029,1030,1031,1032]},{"teal":971,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[1033,1034,1035,1036,1037,1038]},{"teal":972,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[1039,1040,1041]},{"teal":973,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[1042,1043,1044,1045,1046,1047,1048,1049,1050,1051]},{"teal":976,"source":"contracts/ARC11550Bridge.algo.ts:15","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[1052]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAIAAEIBlAEIEgmCAADYXNhA2FwcAdkYXRhQXBwCmNvbGxlY3Rpb24IAAAAAAAAAAAEFR98dQTBTmjZMRgUJQsxGQiNDAOZAAAAAAAAAAAAAAOLAAAAAAAAAAAAAAA2GgEXiAACI0OKAQAri/9nJwSxJbIQgATGlXH4shqL/7IYMgqyGoAI//////////+yGiKyAbO0OyMJxTpXBAAXZ4k2GgEXiAACI0OKAQCxIQWyEIv/shEishIyCrIUIrIBs4knBjYaAUkVIQYSRDEWIwlJOBAhBRJEiAAEULAjQ4oCAShHBIv/OBQyChJEi/84EYwAiwBxCkgyAxJEKYv/OBEWUL1MSBRBAJqxJbIQgAS/gAPVshorZLIYJwRkFrIaiwBxBEiAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUElXIAAoqERXACCLAHEDSCcFUElXCAAoqERXAAhQiwBxAEgWUIsAcQFIFlAyClAnBVCyGiKyAbO0OyMJxTpXBAAXjAGLARYrZBZQjAIpiwAWUIsCvyqLAlCLABa/KYsAFlCMA7ElshAnB7IaJCQpiwAWUE4CuheyGCKyAbO0OyMJxTpXBAAXjASxJbIQgARhus/IshqLBLIYJCQpiwAWUE4CuhcWshoiJCmLABZQTgK6FxYyClCL/lCL/zgSFlBJFSEEChZXBgJMULIaIrIBs4sDvkSMAEYEiScGNhoCSRUhBhJENhoBFzEWIwlJOBAlEkSIAAUWULAjQ4oDAShHB4v/ORoCVwIAjACL/owBiwA1/yKLASEECwiBKAg0/0whBlgyChJEi/85GgEXjAKL/zgYsSWyECcHshqLArIYIrIBs7Q7IwnFOlcEABcSRIsANf8iiwEhBAsIIgg0/0wkWBcWiwIWUIwDKosDUL1MSBRBAHqxJbIQgASgrJQ8shqLA1cICBeyGIsANf8iiwEhBAsIIgg0/0wkWBcWshoisgGztDsjCcU6VwQAjASxgQOyEIsEVygIF7IiiwRXMAgXsiOLBFcAILImiwRXIAiyJTIKsioisgGztDy0PIwFKosDUIsFFr8piwUWUIsDvyqLA1C+RBeMBov9iwZwAExIFEEAOIsGFov9UIwHiwe9TEgUQQAFiwckuUiLB75EF4sANf8iiwEhBAsIIQcINP9MJFgXCIsHTBa/QgAnsSEFshCLBrIRi/2yFIsANf8iiwEhBAsIIQcINP9MJFgXshIisgGziwaMAEYHiTYaAkkVIQYSRDYaAReIAAIjQ4oCACiL/xaL/lCMALEhBbIQi/+yEYv+shSLAL5EF7ISIrIBs4sAvImABJc7YW82GgCOAfxpAIAEsoGlbYAEA17YfoAETC6RRYAE9KQT4zYaAI4E/IX8pv4E/5MA","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Arc11550Id = {
  id: bigint,
  dataApp: bigint
}


/**
 * Converts the ABI tuple representation of a Arc11550Id to the struct representation
 */
export function Arc11550IdFromTuple(abiTuple: [bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Arc11550Id, APP_SPEC.structs) as Arc11550Id
}

export type AsaAndAddr = {
  asa: bigint,
  address: string
}


/**
 * Converts the ABI tuple representation of a AsaAndAddr to the struct representation
 */
export function AsaAndAddrFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AsaAndAddr, APP_SPEC.structs) as AsaAndAddr
}

/**
 * The argument types for the Arc11550Bridge contract
 */
export type Arc11550BridgeArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(uint64)void': {
      dataApp: bigint | number
    }
    'optInToAsa(uint64)void': {
      asa: bigint | number
    }
    'asaToArc11550(axfer,address)(uint64,uint64)': {
      axfer: AppMethodCallTransactionArgument
      receiver: string
    }
    'arc11550ToAsa(appl,uint64,address)uint64': {
      xferCall: AppMethodCallTransactionArgument
      xferIndex: bigint | number
      receiver: string
    }
    'withdrawAsa(uint64,address)void': {
      asa: bigint | number
      withdrawalFor: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(uint64)void': [dataApp: bigint | number]
    'optInToAsa(uint64)void': [asa: bigint | number]
    'asaToArc11550(axfer,address)(uint64,uint64)': [axfer: AppMethodCallTransactionArgument, receiver: string]
    'arc11550ToAsa(appl,uint64,address)uint64': [xferCall: AppMethodCallTransactionArgument, xferIndex: bigint | number, receiver: string]
    'withdrawAsa(uint64,address)void': [asa: bigint | number, withdrawalFor: string]
  }
}

/**
 * The return type for each method
 */
export type Arc11550BridgeReturns = {
  'createApplication(uint64)void': void
  'optInToAsa(uint64)void': void
  'asaToArc11550(axfer,address)(uint64,uint64)': Arc11550Id
  'arc11550ToAsa(appl,uint64,address)uint64': bigint
  'withdrawAsa(uint64,address)void': void
}

/**
 * Defines the types of available calls and state of the Arc11550Bridge smart contract.
 */
export type Arc11550BridgeTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64)void' | 'createApplication', {
      argsObj: Arc11550BridgeArgs['obj']['createApplication(uint64)void']
      argsTuple: Arc11550BridgeArgs['tuple']['createApplication(uint64)void']
      returns: Arc11550BridgeReturns['createApplication(uint64)void']
    }>
    & Record<'optInToAsa(uint64)void' | 'optInToAsa', {
      argsObj: Arc11550BridgeArgs['obj']['optInToAsa(uint64)void']
      argsTuple: Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']
      returns: Arc11550BridgeReturns['optInToAsa(uint64)void']
    }>
    & Record<'asaToArc11550(axfer,address)(uint64,uint64)' | 'asaToArc11550', {
      argsObj: Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)']
      argsTuple: Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']
      returns: Arc11550BridgeReturns['asaToArc11550(axfer,address)(uint64,uint64)']
    }>
    & Record<'arc11550ToAsa(appl,uint64,address)uint64' | 'arc11550ToAsa', {
      argsObj: Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64']
      argsTuple: Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']
      returns: Arc11550BridgeReturns['arc11550ToAsa(appl,uint64,address)uint64']
    }>
    & Record<'withdrawAsa(uint64,address)void' | 'withdrawAsa', {
      argsObj: Arc11550BridgeArgs['obj']['withdrawAsa(uint64,address)void']
      argsTuple: Arc11550BridgeArgs['tuple']['withdrawAsa(uint64,address)void']
      returns: Arc11550BridgeReturns['withdrawAsa(uint64,address)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        dataApp: bigint
        collection: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        asaToArc11550Map: Map<bigint | number, Arc11550Id>
        arc11550ToAsaMap: Map<Arc11550Id, bigint>
        withdrawAmounts: Map<AsaAndAddr, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Arc11550BridgeSignatures = keyof Arc11550BridgeTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Arc11550BridgeNonVoidMethodSignatures = keyof Arc11550BridgeTypes['methods'] extends infer T ? T extends keyof Arc11550BridgeTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Arc11550Bridge smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Arc11550BridgeSignatures> = Arc11550BridgeTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc11550Bridge smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc11550BridgeSignatures> = Arc11550BridgeTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = Arc11550BridgeTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = Arc11550BridgeTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Arc11550BridgeCreateCallParams =
  | Expand<CallParams<Arc11550BridgeArgs['obj']['createApplication(uint64)void'] | Arc11550BridgeArgs['tuple']['createApplication(uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<Arc11550BridgeArgs['obj']['createApplication(uint64)void'] | Arc11550BridgeArgs['tuple']['createApplication(uint64)void']> & {method: 'createApplication(uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Arc11550BridgeDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Arc11550BridgeCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc11550Bridge smart contract
 */
export abstract class Arc11550BridgeParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends Arc11550BridgeCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(uint64)void':
            return Arc11550BridgeParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ARC11550Bridge smart contract using the createApplication(uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<Arc11550BridgeArgs['obj']['createApplication(uint64)void'] | Arc11550BridgeArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.dataApp],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the optInToAsa(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToAsa(params: CallParams<Arc11550BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optInToAsa(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asa],
    }
  }
  /**
   * Constructs a no op call for the asaToArc11550(axfer,address)(uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static asaToArc11550(params: CallParams<Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)'] | Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'asaToArc11550(axfer,address)(uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.axfer, params.args.receiver],
    }
  }
  /**
   * Constructs a no op call for the arc11550ToAsa(appl,uint64,address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550ToAsa(params: CallParams<Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64'] | Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550ToAsa(appl,uint64,address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.xferCall, params.args.xferIndex, params.args.receiver],
    }
  }
  /**
   * Constructs a no op call for the withdrawAsa(uint64,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawAsa(params: CallParams<Arc11550BridgeArgs['obj']['withdrawAsa(uint64,address)void'] | Arc11550BridgeArgs['tuple']['withdrawAsa(uint64,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdrawAsa(uint64,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asa, params.args.withdrawalFor],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ARC11550Bridge smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Arc11550BridgeFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Arc11550BridgeFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Arc11550BridgeClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Arc11550BridgeClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ARC11550Bridge smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Arc11550BridgeDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? Arc11550BridgeParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (Arc11550BridgeCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new Arc11550BridgeClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Bridge smart contract using the createApplication(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<Arc11550BridgeArgs['obj']['createApplication(uint64)void'] | Arc11550BridgeArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(Arc11550BridgeParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Bridge smart contract using the createApplication(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<Arc11550BridgeArgs['obj']['createApplication(uint64)void'] | Arc11550BridgeArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(Arc11550BridgeParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Bridge smart contract using an ABI method call using the createApplication(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<Arc11550BridgeArgs['obj']['createApplication(uint64)void'] | Arc11550BridgeArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(Arc11550BridgeParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | Arc11550BridgeReturns['createApplication(uint64)void']) }, appClient: new Arc11550BridgeClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ARC11550Bridge smart contract
 */
export class Arc11550BridgeClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Arc11550BridgeClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Arc11550Bridge app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Arc11550BridgeClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Arc11550BridgeNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Arc11550BridgeClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Arc11550BridgeClient> {
    return new Arc11550BridgeClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Arc11550BridgeClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Arc11550BridgeClient> {
    return new Arc11550BridgeClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Bridge smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `optInToAsa(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToAsa: (params: CallParams<Arc11550BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550BridgeParamsFactory.optInToAsa(params))
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `asaToArc11550(axfer,address)(uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    asaToArc11550: (params: CallParams<Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)'] | Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550BridgeParamsFactory.asaToArc11550(params))
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `arc11550ToAsa(appl,uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550ToAsa: (params: CallParams<Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64'] | Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550BridgeParamsFactory.arc11550ToAsa(params))
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `withdrawAsa(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawAsa: (params: CallParams<Arc11550BridgeArgs['obj']['withdrawAsa(uint64,address)void'] | Arc11550BridgeArgs['tuple']['withdrawAsa(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550BridgeParamsFactory.withdrawAsa(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Bridge smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `optInToAsa(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToAsa: (params: CallParams<Arc11550BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550BridgeParamsFactory.optInToAsa(params))
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `asaToArc11550(axfer,address)(uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    asaToArc11550: (params: CallParams<Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)'] | Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550BridgeParamsFactory.asaToArc11550(params))
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `arc11550ToAsa(appl,uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550ToAsa: (params: CallParams<Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64'] | Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550BridgeParamsFactory.arc11550ToAsa(params))
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `withdrawAsa(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawAsa: (params: CallParams<Arc11550BridgeArgs['obj']['withdrawAsa(uint64,address)void'] | Arc11550BridgeArgs['tuple']['withdrawAsa(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550BridgeParamsFactory.withdrawAsa(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Bridge smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `optInToAsa(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToAsa: async (params: CallParams<Arc11550BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550BridgeParamsFactory.optInToAsa(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550BridgeReturns['optInToAsa(uint64)void'])}
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `asaToArc11550(axfer,address)(uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    asaToArc11550: async (params: CallParams<Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)'] | Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550BridgeParamsFactory.asaToArc11550(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550BridgeReturns['asaToArc11550(axfer,address)(uint64,uint64)'])}
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `arc11550ToAsa(appl,uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550ToAsa: async (params: CallParams<Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64'] | Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550BridgeParamsFactory.arc11550ToAsa(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550BridgeReturns['arc11550ToAsa(appl,uint64,address)uint64'])}
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `withdrawAsa(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawAsa: async (params: CallParams<Arc11550BridgeArgs['obj']['withdrawAsa(uint64,address)void'] | Arc11550BridgeArgs['tuple']['withdrawAsa(uint64,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550BridgeParamsFactory.withdrawAsa(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550BridgeReturns['withdrawAsa(uint64,address)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Arc11550BridgeClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ARC11550Bridge app
   */
  state = {
    /**
     * Methods to access global state for the current ARC11550Bridge app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          dataApp: result.dataApp,
          collection: result.collection,
        }
      },
      /**
       * Get the current value of the dataApp key in global state
       */
      dataApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("dataApp")) as bigint | undefined },
      /**
       * Get the current value of the collection key in global state
       */
      collection: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("collection")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current ARC11550Bridge app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the asaToArc11550Map map in box state
       */
      asaToArc11550Map: {
        /**
         * Get all current values of the asaToArc11550Map map in box state
         */
        getMap: async (): Promise<Map<bigint, Arc11550Id>> => { return (await this.appClient.state.box.getMap("asaToArc11550Map")) as Map<bigint, Arc11550Id> },
        /**
         * Get a current value of the asaToArc11550Map map by key from box state
         */
        value: async (key: bigint | number): Promise<Arc11550Id | undefined> => { return await this.appClient.state.box.getMapValue("asaToArc11550Map", key) as Arc11550Id | undefined },
      },
      /**
       * Get values from the arc11550ToAsaMap map in box state
       */
      arc11550ToAsaMap: {
        /**
         * Get all current values of the arc11550ToAsaMap map in box state
         */
        getMap: async (): Promise<Map<Arc11550Id, bigint>> => { return (await this.appClient.state.box.getMap("arc11550ToAsaMap")) as Map<Arc11550Id, bigint> },
        /**
         * Get a current value of the arc11550ToAsaMap map by key from box state
         */
        value: async (key: Arc11550Id): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("arc11550ToAsaMap", key) as bigint | undefined },
      },
      /**
       * Get values from the withdrawAmounts map in box state
       */
      withdrawAmounts: {
        /**
         * Get all current values of the withdrawAmounts map in box state
         */
        getMap: async (): Promise<Map<AsaAndAddr, bigint>> => { return (await this.appClient.state.box.getMap("withdrawAmounts")) as Map<AsaAndAddr, bigint> },
        /**
         * Get a current value of the withdrawAmounts map by key from box state
         */
        value: async (key: AsaAndAddr): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("withdrawAmounts", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): Arc11550BridgeComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a optInToAsa(uint64)void method call against the ARC11550Bridge contract
       */
      optInToAsa(params: CallParams<Arc11550BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToAsa(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a asaToArc11550(axfer,address)(uint64,uint64) method call against the ARC11550Bridge contract
       */
      asaToArc11550(params: CallParams<Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)'] | Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.asaToArc11550(params)))
        resultMappers.push((v) => client.decodeReturnValue('asaToArc11550(axfer,address)(uint64,uint64)', v))
        return this
      },
      /**
       * Add a arc11550ToAsa(appl,uint64,address)uint64 method call against the ARC11550Bridge contract
       */
      arc11550ToAsa(params: CallParams<Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64'] | Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550ToAsa(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550ToAsa(appl,uint64,address)uint64', v))
        return this
      },
      /**
       * Add a withdrawAsa(uint64,address)void method call against the ARC11550Bridge contract
       */
      withdrawAsa(params: CallParams<Arc11550BridgeArgs['obj']['withdrawAsa(uint64,address)void'] | Arc11550BridgeArgs['tuple']['withdrawAsa(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawAsa(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the ARC11550Bridge contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Arc11550BridgeComposer
  }
}
export type Arc11550BridgeComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the optInToAsa(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsa(params?: CallParams<Arc11550BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']>): Arc11550BridgeComposer<[...TReturns, Arc11550BridgeReturns['optInToAsa(uint64)void'] | undefined]>

  /**
   * Calls the asaToArc11550(axfer,address)(uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  asaToArc11550(params?: CallParams<Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)'] | Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']>): Arc11550BridgeComposer<[...TReturns, Arc11550BridgeReturns['asaToArc11550(axfer,address)(uint64,uint64)'] | undefined]>

  /**
   * Calls the arc11550ToAsa(appl,uint64,address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550ToAsa(params?: CallParams<Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64'] | Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']>): Arc11550BridgeComposer<[...TReturns, Arc11550BridgeReturns['arc11550ToAsa(appl,uint64,address)uint64'] | undefined]>

  /**
   * Calls the withdrawAsa(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawAsa(params?: CallParams<Arc11550BridgeArgs['obj']['withdrawAsa(uint64,address)void'] | Arc11550BridgeArgs['tuple']['withdrawAsa(uint64,address)void']>): Arc11550BridgeComposer<[...TReturns, Arc11550BridgeReturns['withdrawAsa(uint64,address)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ARC11550Bridge smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Arc11550BridgeComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc11550BridgeComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc11550BridgeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Arc11550BridgeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Arc11550BridgeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Arc11550BridgeComposerResults<TReturns>>
}
export type Arc11550BridgeComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ARC11550Accounting","desc":"","methods":[{"name":"createApplication","args":[{"name":"transferApp","type":"uint64"},{"name":"mintCap","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"arc11550_minted","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_metadata","args":[{"name":"key","type":"(uint64,string)","struct":"MetadataKey"}],"returns":{"type":"(bool,byte[])","struct":"Metadata"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_setMetadata","args":[{"name":"key","type":"(uint64,string)","struct":"MetadataKey"},{"name":"data","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_balanceOf","args":[{"name":"id","type":"uint64"},{"name":"account","type":"address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_balancesOf","args":[{"name":"idAndAddrs","type":"(uint64,address)[]"}],"returns":{"type":"uint64[]"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_params","args":[{"name":"id","type":"uint64"}],"returns":{"type":"(byte[32],byte[8],uint64,uint64,address)","struct":"Params"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_mulitpleParams","args":[{"name":"ids","type":"uint64[]"}],"returns":{"type":"(byte[32],byte[8],uint64,uint64,address)[]"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_approve","args":[{"name":"allowanceKey","type":"(address,address,uint64)","struct":"AllowanceKey"},{"name":"allowance","type":"(uint64,uint64)","struct":"Allowance"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_setApprovals","args":[{"name":"allowances","type":"((address,address,uint64),(uint64,uint64))[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"doTransfers","args":[{"name":"transfers","type":"(uint64,address,address,uint64)[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"doMint","args":[{"name":"params","type":"(byte[32],byte[8],uint64,uint64,address)","struct":"Params"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"Params":[{"name":"name","type":"byte[32]"},{"name":"symbol","type":"byte[8]"},{"name":"total","type":"uint64"},{"name":"decimals","type":"uint64"},{"name":"manager","type":"address"}],"IdAndAddress":[{"name":"id","type":"uint64"},{"name":"address","type":"address"}],"Metadata":[{"name":"mutable","type":"bool"},{"name":"data","type":"byte[]"}],"MetadataKey":[{"name":"id","type":"uint64"},{"name":"key","type":"string"}],"Allowance":[{"name":"amount","type":"uint64"},{"name":"untilTimestamp","type":"uint64"}],"AllowanceKey":[{"name":"holder","type":"address"},{"name":"sender","type":"address"},{"name":"id","type":"uint64"}]},"state":{"schema":{"global":{"bytes":1,"ints":3},"local":{"bytes":0,"ints":0}},"keys":{"global":{"minted":{"key":"bWludGVk","keyType":"AVMBytes","valueType":"uint64"},"transferApp":{"key":"dHJhbnNmZXJBcHA=","keyType":"AVMBytes","valueType":"uint64"},"mintCap":{"key":"bWludENhcA==","keyType":"AVMBytes","valueType":"uint64"},"minter":{"key":"bWludGVy","keyType":"AVMBytes","valueType":"address"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"params":{"keyType":"uint64","valueType":"Params","prefix":"cA=="},"balances":{"keyType":"IdAndAddress","valueType":"uint64","prefix":"Yg=="},"metadata":{"keyType":"MetadataKey","valueType":"Metadata","prefix":"bQ=="},"allowances":{"keyType":"AllowanceKey","valueType":"Allowance","prefix":"YQ=="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[0]},{"teal":2,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1,2,3,4,5,6,7,8,9,10,11,12]},{"teal":3,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55]},{"teal":15,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[56,57]},{"teal":16,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[58]},{"teal":17,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[59,60]},{"teal":18,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[61]},{"teal":19,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[62,63]},{"teal":20,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[64]},{"teal":21,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90]},{"teal":25,"source":"contracts/ARC11550Accounting.algo.ts:46","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[91]},{"teal":30,"source":"contracts/ARC11550Accounting.algo.ts:71","pc":[92,93,94]},{"teal":31,"source":"contracts/ARC11550Accounting.algo.ts:71","pc":[95]},{"teal":34,"source":"contracts/ARC11550Accounting.algo.ts:71","pc":[96,97,98]},{"teal":35,"source":"contracts/ARC11550Accounting.algo.ts:71","pc":[99]},{"teal":38,"source":"contracts/ARC11550Accounting.algo.ts:71","pc":[100,101,102]},{"teal":39,"source":"contracts/ARC11550Accounting.algo.ts:71","pc":[103]},{"teal":40,"source":"contracts/ARC11550Accounting.algo.ts:71","pc":[104]},{"teal":44,"source":"contracts/ARC11550Accounting.algo.ts:71","pc":[105,106,107]},{"teal":48,"source":"contracts/ARC11550Accounting.algo.ts:72","pc":[108,109]},{"teal":49,"source":"contracts/ARC11550Accounting.algo.ts:72","pc":[110,111]},{"teal":50,"source":"contracts/ARC11550Accounting.algo.ts:72","pc":[112]},{"teal":54,"source":"contracts/ARC11550Accounting.algo.ts:73","pc":[113]},{"teal":55,"source":"contracts/ARC11550Accounting.algo.ts:73","pc":[114]},{"teal":56,"source":"contracts/ARC11550Accounting.algo.ts:73","pc":[115]},{"teal":60,"source":"contracts/ARC11550Accounting.algo.ts:74","pc":[116,117]},{"teal":61,"source":"contracts/ARC11550Accounting.algo.ts:74","pc":[118,119]},{"teal":62,"source":"contracts/ARC11550Accounting.algo.ts:74","pc":[120]},{"teal":63,"source":"contracts/ARC11550Accounting.algo.ts:71","pc":[121]},{"teal":68,"source":"contracts/ARC11550Accounting.algo.ts:77","pc":[122]},{"teal":71,"source":"contracts/ARC11550Accounting.algo.ts:77","pc":[123,124,125]},{"teal":72,"source":"contracts/ARC11550Accounting.algo.ts:77","pc":[126]},{"teal":73,"source":"contracts/ARC11550Accounting.algo.ts:77","pc":[127]},{"teal":74,"source":"contracts/ARC11550Accounting.algo.ts:77","pc":[128]},{"teal":75,"source":"contracts/ARC11550Accounting.algo.ts:77","pc":[129]},{"teal":76,"source":"contracts/ARC11550Accounting.algo.ts:77","pc":[130]},{"teal":80,"source":"contracts/ARC11550Accounting.algo.ts:77","pc":[131,132,133]},{"teal":84,"source":"contracts/ARC11550Accounting.algo.ts:78","pc":[134]},{"teal":85,"source":"contracts/ARC11550Accounting.algo.ts:78","pc":[135]},{"teal":86,"source":"contracts/ARC11550Accounting.algo.ts:77","pc":[136]},{"teal":91,"source":"contracts/ARC11550Accounting.algo.ts:81","pc":[137]},{"teal":94,"source":"contracts/ARC11550Accounting.algo.ts:81","pc":[138,139,140]},{"teal":97,"source":"contracts/ARC11550Accounting.algo.ts:81","pc":[141,142,143]},{"teal":98,"source":"contracts/ARC11550Accounting.algo.ts:81","pc":[144]},{"teal":99,"source":"contracts/ARC11550Accounting.algo.ts:81","pc":[145]},{"teal":100,"source":"contracts/ARC11550Accounting.algo.ts:81","pc":[146]},{"teal":101,"source":"contracts/ARC11550Accounting.algo.ts:81","pc":[147]},{"teal":105,"source":"contracts/ARC11550Accounting.algo.ts:81","pc":[148,149,150]},{"teal":109,"source":"contracts/ARC11550Accounting.algo.ts:82","pc":[151,152]},{"teal":110,"source":"contracts/ARC11550Accounting.algo.ts:82","pc":[153,154]},{"teal":111,"source":"contracts/ARC11550Accounting.algo.ts:82","pc":[155]},{"teal":112,"source":"contracts/ARC11550Accounting.algo.ts:82","pc":[156]},{"teal":115,"source":"contracts/ARC11550Accounting.algo.ts:82","errorMessage":"box value does not exist: this.metadata(key).value","pc":[157]},{"teal":116,"source":"contracts/ARC11550Accounting.algo.ts:81","pc":[158]},{"teal":121,"source":"contracts/ARC11550Accounting.algo.ts:96","pc":[159,160,161]},{"teal":122,"source":"contracts/ARC11550Accounting.algo.ts:96","pc":[162,163,164]},{"teal":125,"source":"contracts/ARC11550Accounting.algo.ts:96","pc":[165,166,167]},{"teal":128,"source":"contracts/ARC11550Accounting.algo.ts:96","pc":[168,169,170]},{"teal":129,"source":"contracts/ARC11550Accounting.algo.ts:96","pc":[171]},{"teal":130,"source":"contracts/ARC11550Accounting.algo.ts:96","pc":[172]},{"teal":134,"source":"contracts/ARC11550Accounting.algo.ts:96","pc":[173,174,175]},{"teal":138,"source":"contracts/ARC11550Accounting.algo.ts:97","pc":[176,177]},{"teal":139,"source":"contracts/ARC11550Accounting.algo.ts:97","pc":[178,179]},{"teal":140,"source":"contracts/ARC11550Accounting.algo.ts:97","pc":[180,181]},{"teal":141,"source":"contracts/ARC11550Accounting.algo.ts:97","pc":[182,183]},{"teal":142,"source":"contracts/ARC11550Accounting.algo.ts:97","pc":[184,185]},{"teal":143,"source":"contracts/ARC11550Accounting.algo.ts:97","pc":[186,187]},{"teal":144,"source":"contracts/ARC11550Accounting.algo.ts:97","pc":[188,189]},{"teal":145,"source":"contracts/ARC11550Accounting.algo.ts:97","pc":[190,191,192]},{"teal":146,"source":"contracts/ARC11550Accounting.algo.ts:97","pc":[193]},{"teal":147,"source":"contracts/ARC11550Accounting.algo.ts:97","pc":[194]},{"teal":148,"source":"contracts/ARC11550Accounting.algo.ts:97","pc":[195]},{"teal":149,"source":"contracts/ARC11550Accounting.algo.ts:97","pc":[196,197]},{"teal":150,"source":"contracts/ARC11550Accounting.algo.ts:97","pc":[198]},{"teal":151,"source":"contracts/ARC11550Accounting.algo.ts:97","pc":[199]},{"teal":152,"source":"contracts/ARC11550Accounting.algo.ts:97","pc":[200]},{"teal":157,"source":"contracts/ARC11550Accounting.algo.ts:99","pc":[201,202]},{"teal":158,"source":"contracts/ARC11550Accounting.algo.ts:99","pc":[203,204]},{"teal":159,"source":"contracts/ARC11550Accounting.algo.ts:99","pc":[205]},{"teal":160,"source":"contracts/ARC11550Accounting.algo.ts:99","pc":[206]},{"teal":161,"source":"contracts/ARC11550Accounting.algo.ts:99","pc":[207]},{"teal":162,"source":"contracts/ARC11550Accounting.algo.ts:99","pc":[208]},{"teal":163,"source":"contracts/ARC11550Accounting.algo.ts:99","pc":[209,210,211]},{"teal":168,"source":"contracts/ARC11550Accounting.algo.ts:100","pc":[212,213]},{"teal":169,"source":"contracts/ARC11550Accounting.algo.ts:100","pc":[214,215]},{"teal":170,"source":"contracts/ARC11550Accounting.algo.ts:100","pc":[216]},{"teal":171,"source":"contracts/ARC11550Accounting.algo.ts:100","pc":[217]},{"teal":174,"source":"contracts/ARC11550Accounting.algo.ts:100","errorMessage":"box value does not exist: this.metadata(key).value","pc":[218]},{"teal":175,"source":"contracts/ARC11550Accounting.algo.ts:100","pc":[219,220]},{"teal":176,"source":"contracts/ARC11550Accounting.algo.ts:100","pc":[221,222]},{"teal":177,"source":"contracts/ARC11550Accounting.algo.ts:100","pc":[223]},{"teal":178,"source":"contracts/ARC11550Accounting.algo.ts:100","pc":[224]},{"teal":179,"source":"contracts/ARC11550Accounting.algo.ts:100","pc":[225]},{"teal":184,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[226,227]},{"teal":185,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[228,229]},{"teal":186,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[230]},{"teal":187,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[231]},{"teal":190,"source":"contracts/ARC11550Accounting.algo.ts:103","errorMessage":"box value does not exist: this.metadata(key).value","pc":[232]},{"teal":191,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[233,234]},{"teal":192,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[235]},{"teal":193,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[236]},{"teal":194,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[237,238]},{"teal":195,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[239,240]},{"teal":196,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[241,242]},{"teal":197,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[243,244]},{"teal":198,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[245]},{"teal":199,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[246]},{"teal":200,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[247,248]},{"teal":201,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[249]},{"teal":202,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[250,251]},{"teal":203,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[252]},{"teal":204,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[253]},{"teal":205,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[254]},{"teal":206,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[255]},{"teal":207,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[256,257]},{"teal":208,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[258]},{"teal":209,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[259,260]},{"teal":210,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[261,262]},{"teal":211,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[263]},{"teal":212,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[264,265]},{"teal":213,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[266]},{"teal":214,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[267,268]},{"teal":215,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[269]},{"teal":216,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[270]},{"teal":217,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[271]},{"teal":218,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[272,273,274]},{"teal":219,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[275]},{"teal":220,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[276]},{"teal":221,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[277]},{"teal":222,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[278,279]},{"teal":223,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[280,281]},{"teal":224,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[282,283]},{"teal":225,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[284,285]},{"teal":226,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[286]},{"teal":227,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[287,288]},{"teal":228,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[289]},{"teal":229,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[290]},{"teal":230,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[291]},{"teal":231,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[292]},{"teal":232,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[293,294]},{"teal":233,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[295,296,297]},{"teal":234,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[298,299]},{"teal":235,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[300,301]},{"teal":236,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[302,303]},{"teal":237,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[304]},{"teal":238,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[305]},{"teal":239,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[306]},{"teal":240,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[307]},{"teal":241,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[308]},{"teal":242,"source":"contracts/ARC11550Accounting.algo.ts:103","pc":[309]},{"teal":243,"source":"contracts/ARC11550Accounting.algo.ts:96","pc":[310]},{"teal":248,"source":"contracts/ARC11550Accounting.algo.ts:113","pc":[311]},{"teal":251,"source":"contracts/ARC11550Accounting.algo.ts:113","pc":[312,313,314]},{"teal":252,"source":"contracts/ARC11550Accounting.algo.ts:113","pc":[315]},{"teal":253,"source":"contracts/ARC11550Accounting.algo.ts:113","pc":[316]},{"teal":254,"source":"contracts/ARC11550Accounting.algo.ts:113","pc":[317,318]},{"teal":255,"source":"contracts/ARC11550Accounting.algo.ts:113","pc":[319]},{"teal":258,"source":"contracts/ARC11550Accounting.algo.ts:113","errorMessage":"argument 0 (account) for arc11550_balanceOf must be a address","pc":[320]},{"teal":261,"source":"contracts/ARC11550Accounting.algo.ts:113","pc":[321,322,323]},{"teal":262,"source":"contracts/ARC11550Accounting.algo.ts:113","pc":[324]},{"teal":265,"source":"contracts/ARC11550Accounting.algo.ts:113","pc":[325,326,327]},{"teal":266,"source":"contracts/ARC11550Accounting.algo.ts:113","pc":[328]},{"teal":267,"source":"contracts/ARC11550Accounting.algo.ts:113","pc":[329]},{"teal":268,"source":"contracts/ARC11550Accounting.algo.ts:113","pc":[330]},{"teal":269,"source":"contracts/ARC11550Accounting.algo.ts:113","pc":[331]},{"teal":270,"source":"contracts/ARC11550Accounting.algo.ts:113","pc":[332]},{"teal":274,"source":"contracts/ARC11550Accounting.algo.ts:113","pc":[333,334,335]},{"teal":278,"source":"contracts/ARC11550Accounting.algo.ts:114","pc":[336]},{"teal":279,"source":"contracts/ARC11550Accounting.algo.ts:114","pc":[337,338]},{"teal":280,"source":"contracts/ARC11550Accounting.algo.ts:114","pc":[339]},{"teal":281,"source":"contracts/ARC11550Accounting.algo.ts:114","pc":[340,341]},{"teal":282,"source":"contracts/ARC11550Accounting.algo.ts:114","pc":[342]},{"teal":283,"source":"contracts/ARC11550Accounting.algo.ts:114","pc":[343]},{"teal":284,"source":"contracts/ARC11550Accounting.algo.ts:114","pc":[344]},{"teal":287,"source":"contracts/ARC11550Accounting.algo.ts:114","errorMessage":"box value does not exist: this.balances({ id: id, address: account }).value","pc":[345]},{"teal":288,"source":"contracts/ARC11550Accounting.algo.ts:114","pc":[346]},{"teal":289,"source":"contracts/ARC11550Accounting.algo.ts:113","pc":[347]},{"teal":294,"source":"contracts/ARC11550Accounting.algo.ts:117","pc":[348]},{"teal":297,"source":"contracts/ARC11550Accounting.algo.ts:117","pc":[349,350,351]},{"teal":298,"source":"contracts/ARC11550Accounting.algo.ts:117","pc":[352,353,354]},{"teal":301,"source":"contracts/ARC11550Accounting.algo.ts:117","pc":[355,356,357]},{"teal":302,"source":"contracts/ARC11550Accounting.algo.ts:117","pc":[358]},{"teal":303,"source":"contracts/ARC11550Accounting.algo.ts:117","pc":[359]},{"teal":304,"source":"contracts/ARC11550Accounting.algo.ts:117","pc":[360]},{"teal":305,"source":"contracts/ARC11550Accounting.algo.ts:117","pc":[361]},{"teal":306,"source":"contracts/ARC11550Accounting.algo.ts:117","pc":[362]},{"teal":307,"source":"contracts/ARC11550Accounting.algo.ts:117","pc":[363,364,365]},{"teal":308,"source":"contracts/ARC11550Accounting.algo.ts:117","pc":[366]},{"teal":309,"source":"contracts/ARC11550Accounting.algo.ts:117","pc":[367]},{"teal":310,"source":"contracts/ARC11550Accounting.algo.ts:117","pc":[368]},{"teal":311,"source":"contracts/ARC11550Accounting.algo.ts:117","pc":[369]},{"teal":312,"source":"contracts/ARC11550Accounting.algo.ts:117","pc":[370]},{"teal":313,"source":"contracts/ARC11550Accounting.algo.ts:117","pc":[371]},{"teal":317,"source":"contracts/ARC11550Accounting.algo.ts:117","pc":[372,373,374]},{"teal":320,"source":"contracts/ARC11550Accounting.algo.ts:117","pc":[375]},{"teal":321,"source":"contracts/ARC11550Accounting.algo.ts:117","pc":[376,377]},{"teal":325,"source":"contracts/ARC11550Accounting.algo.ts:118","pc":[378]},{"teal":326,"source":"contracts/ARC11550Accounting.algo.ts:118","pc":[379,380]},{"teal":330,"source":"contracts/ARC11550Accounting.algo.ts:119","pc":[381]},{"teal":331,"source":"contracts/ARC11550Accounting.algo.ts:119","pc":[382,383]},{"teal":336,"source":"contracts/ARC11550Accounting.algo.ts:119","pc":[384,385]},{"teal":337,"source":"contracts/ARC11550Accounting.algo.ts:119","pc":[386,387]},{"teal":338,"source":"contracts/ARC11550Accounting.algo.ts:119","pc":[388]},{"teal":339,"source":"contracts/ARC11550Accounting.algo.ts:119","pc":[389,390]},{"teal":340,"source":"contracts/ARC11550Accounting.algo.ts:119","pc":[391]},{"teal":341,"source":"contracts/ARC11550Accounting.algo.ts:119","pc":[392]},{"teal":342,"source":"contracts/ARC11550Accounting.algo.ts:119","pc":[393,394,395]},{"teal":346,"source":"contracts/ARC11550Accounting.algo.ts:120","pc":[396,397]},{"teal":347,"source":"contracts/ARC11550Accounting.algo.ts:120","pc":[398,399]},{"teal":348,"source":"contracts/ARC11550Accounting.algo.ts:120","pc":[400]},{"teal":349,"source":"contracts/ARC11550Accounting.algo.ts:120","pc":[401,402]},{"teal":350,"source":"contracts/ARC11550Accounting.algo.ts:120","pc":[403,404]},{"teal":351,"source":"contracts/ARC11550Accounting.algo.ts:120","pc":[405]},{"teal":352,"source":"contracts/ARC11550Accounting.algo.ts:120","pc":[406]},{"teal":353,"source":"contracts/ARC11550Accounting.algo.ts:120","pc":[407]},{"teal":354,"source":"contracts/ARC11550Accounting.algo.ts:120","pc":[408]},{"teal":355,"source":"contracts/ARC11550Accounting.algo.ts:120","pc":[409,410]},{"teal":356,"source":"contracts/ARC11550Accounting.algo.ts:120","pc":[411]},{"teal":357,"source":"contracts/ARC11550Accounting.algo.ts:120","pc":[412]},{"teal":358,"source":"contracts/ARC11550Accounting.algo.ts:120","pc":[413]},{"teal":359,"source":"contracts/ARC11550Accounting.algo.ts:120","pc":[414]},{"teal":360,"source":"contracts/ARC11550Accounting.algo.ts:120","pc":[415,416]},{"teal":364,"source":"contracts/ARC11550Accounting.algo.ts:121","pc":[417,418]},{"teal":365,"source":"contracts/ARC11550Accounting.algo.ts:121","pc":[419,420]},{"teal":366,"source":"contracts/ARC11550Accounting.algo.ts:121","pc":[421]},{"teal":367,"source":"contracts/ARC11550Accounting.algo.ts:121","pc":[422,423]},{"teal":368,"source":"contracts/ARC11550Accounting.algo.ts:121","pc":[424,425]},{"teal":369,"source":"contracts/ARC11550Accounting.algo.ts:121","pc":[426]},{"teal":370,"source":"contracts/ARC11550Accounting.algo.ts:121","pc":[427]},{"teal":371,"source":"contracts/ARC11550Accounting.algo.ts:121","pc":[428]},{"teal":372,"source":"contracts/ARC11550Accounting.algo.ts:121","pc":[429]},{"teal":373,"source":"contracts/ARC11550Accounting.algo.ts:121","pc":[430,431]},{"teal":374,"source":"contracts/ARC11550Accounting.algo.ts:121","pc":[432]},{"teal":375,"source":"contracts/ARC11550Accounting.algo.ts:121","pc":[433,434]},{"teal":376,"source":"contracts/ARC11550Accounting.algo.ts:121","pc":[435]},{"teal":377,"source":"contracts/ARC11550Accounting.algo.ts:121","pc":[436,437]},{"teal":381,"source":"contracts/ARC11550Accounting.algo.ts:122","pc":[438,439]},{"teal":382,"source":"contracts/ARC11550Accounting.algo.ts:122","pc":[440]},{"teal":383,"source":"contracts/ARC11550Accounting.algo.ts:122","pc":[441,442]},{"teal":384,"source":"contracts/ARC11550Accounting.algo.ts:122","pc":[443]},{"teal":385,"source":"contracts/ARC11550Accounting.algo.ts:122","pc":[444,445]},{"teal":386,"source":"contracts/ARC11550Accounting.algo.ts:122","pc":[446]},{"teal":387,"source":"contracts/ARC11550Accounting.algo.ts:122","pc":[447]},{"teal":388,"source":"contracts/ARC11550Accounting.algo.ts:122","pc":[448]},{"teal":391,"source":"contracts/ARC11550Accounting.algo.ts:122","errorMessage":"box value does not exist: this.balances({ id: id, address: addr }).value","pc":[449]},{"teal":392,"source":"contracts/ARC11550Accounting.algo.ts:122","pc":[450]},{"teal":393,"source":"contracts/ARC11550Accounting.algo.ts:122","pc":[451]},{"teal":394,"source":"contracts/ARC11550Accounting.algo.ts:122","pc":[452]},{"teal":395,"source":"contracts/ARC11550Accounting.algo.ts:122","pc":[453,454]},{"teal":400,"source":"contracts/ARC11550Accounting.algo.ts:119","pc":[455,456]},{"teal":401,"source":"contracts/ARC11550Accounting.algo.ts:119","pc":[457]},{"teal":402,"source":"contracts/ARC11550Accounting.algo.ts:119","pc":[458]},{"teal":403,"source":"contracts/ARC11550Accounting.algo.ts:119","pc":[459,460]},{"teal":404,"source":"contracts/ARC11550Accounting.algo.ts:119","pc":[461,462,463]},{"teal":409,"source":"contracts/ARC11550Accounting.algo.ts:125","pc":[464,465]},{"teal":412,"source":"contracts/ARC11550Accounting.algo.ts:117","pc":[466,467]},{"teal":415,"source":"contracts/ARC11550Accounting.algo.ts:117","pc":[468,469]},{"teal":416,"source":"contracts/ARC11550Accounting.algo.ts:117","pc":[470]},{"teal":421,"source":"contracts/ARC11550Accounting.algo.ts:128","pc":[471]},{"teal":424,"source":"contracts/ARC11550Accounting.algo.ts:128","pc":[472,473,474]},{"teal":425,"source":"contracts/ARC11550Accounting.algo.ts:128","pc":[475]},{"teal":428,"source":"contracts/ARC11550Accounting.algo.ts:128","pc":[476,477,478]},{"teal":429,"source":"contracts/ARC11550Accounting.algo.ts:128","pc":[479]},{"teal":430,"source":"contracts/ARC11550Accounting.algo.ts:128","pc":[480]},{"teal":431,"source":"contracts/ARC11550Accounting.algo.ts:128","pc":[481]},{"teal":432,"source":"contracts/ARC11550Accounting.algo.ts:128","pc":[482]},{"teal":436,"source":"contracts/ARC11550Accounting.algo.ts:128","pc":[483,484,485]},{"teal":440,"source":"contracts/ARC11550Accounting.algo.ts:129","pc":[486,487]},{"teal":441,"source":"contracts/ARC11550Accounting.algo.ts:129","pc":[488,489]},{"teal":442,"source":"contracts/ARC11550Accounting.algo.ts:129","pc":[490]},{"teal":443,"source":"contracts/ARC11550Accounting.algo.ts:129","pc":[491]},{"teal":444,"source":"contracts/ARC11550Accounting.algo.ts:129","pc":[492]},{"teal":447,"source":"contracts/ARC11550Accounting.algo.ts:129","errorMessage":"box value does not exist: this.params(id).value","pc":[493]},{"teal":448,"source":"contracts/ARC11550Accounting.algo.ts:128","pc":[494]},{"teal":453,"source":"contracts/ARC11550Accounting.algo.ts:132","pc":[495]},{"teal":456,"source":"contracts/ARC11550Accounting.algo.ts:132","pc":[496,497,498]},{"teal":457,"source":"contracts/ARC11550Accounting.algo.ts:132","pc":[499,500,501]},{"teal":460,"source":"contracts/ARC11550Accounting.algo.ts:132","pc":[502,503,504]},{"teal":461,"source":"contracts/ARC11550Accounting.algo.ts:132","pc":[505]},{"teal":462,"source":"contracts/ARC11550Accounting.algo.ts:132","pc":[506]},{"teal":463,"source":"contracts/ARC11550Accounting.algo.ts:132","pc":[507,508]},{"teal":464,"source":"contracts/ARC11550Accounting.algo.ts:132","pc":[509]},{"teal":465,"source":"contracts/ARC11550Accounting.algo.ts:132","pc":[510]},{"teal":466,"source":"contracts/ARC11550Accounting.algo.ts:132","pc":[511,512,513]},{"teal":467,"source":"contracts/ARC11550Accounting.algo.ts:132","pc":[514]},{"teal":468,"source":"contracts/ARC11550Accounting.algo.ts:132","pc":[515]},{"teal":469,"source":"contracts/ARC11550Accounting.algo.ts:132","pc":[516]},{"teal":470,"source":"contracts/ARC11550Accounting.algo.ts:132","pc":[517]},{"teal":471,"source":"contracts/ARC11550Accounting.algo.ts:132","pc":[518]},{"teal":472,"source":"contracts/ARC11550Accounting.algo.ts:132","pc":[519]},{"teal":476,"source":"contracts/ARC11550Accounting.algo.ts:132","pc":[520,521,522]},{"teal":479,"source":"contracts/ARC11550Accounting.algo.ts:132","pc":[523]},{"teal":480,"source":"contracts/ARC11550Accounting.algo.ts:132","pc":[524,525]},{"teal":484,"source":"contracts/ARC11550Accounting.algo.ts:133","pc":[526]},{"teal":485,"source":"contracts/ARC11550Accounting.algo.ts:133","pc":[527,528]},{"teal":489,"source":"contracts/ARC11550Accounting.algo.ts:134","pc":[529]},{"teal":490,"source":"contracts/ARC11550Accounting.algo.ts:134","pc":[530,531]},{"teal":495,"source":"contracts/ARC11550Accounting.algo.ts:134","pc":[532,533]},{"teal":496,"source":"contracts/ARC11550Accounting.algo.ts:134","pc":[534,535]},{"teal":497,"source":"contracts/ARC11550Accounting.algo.ts:134","pc":[536]},{"teal":498,"source":"contracts/ARC11550Accounting.algo.ts:134","pc":[537]},{"teal":499,"source":"contracts/ARC11550Accounting.algo.ts:134","pc":[538]},{"teal":500,"source":"contracts/ARC11550Accounting.algo.ts:134","pc":[539]},{"teal":501,"source":"contracts/ARC11550Accounting.algo.ts:134","pc":[540,541,542]},{"teal":505,"source":"contracts/ARC11550Accounting.algo.ts:135","pc":[543,544]},{"teal":506,"source":"contracts/ARC11550Accounting.algo.ts:135","pc":[545,546]},{"teal":507,"source":"contracts/ARC11550Accounting.algo.ts:135","pc":[547]},{"teal":508,"source":"contracts/ARC11550Accounting.algo.ts:135","pc":[548,549]},{"teal":509,"source":"contracts/ARC11550Accounting.algo.ts:135","pc":[550]},{"teal":510,"source":"contracts/ARC11550Accounting.algo.ts:135","pc":[551]},{"teal":511,"source":"contracts/ARC11550Accounting.algo.ts:135","pc":[552]},{"teal":512,"source":"contracts/ARC11550Accounting.algo.ts:135","pc":[553,554]},{"teal":513,"source":"contracts/ARC11550Accounting.algo.ts:135","pc":[555]},{"teal":514,"source":"contracts/ARC11550Accounting.algo.ts:135","pc":[556]},{"teal":515,"source":"contracts/ARC11550Accounting.algo.ts:135","pc":[557]},{"teal":516,"source":"contracts/ARC11550Accounting.algo.ts:135","pc":[558]},{"teal":517,"source":"contracts/ARC11550Accounting.algo.ts:135","pc":[559,560]},{"teal":521,"source":"contracts/ARC11550Accounting.algo.ts:136","pc":[561,562]},{"teal":522,"source":"contracts/ARC11550Accounting.algo.ts:136","pc":[563,564]},{"teal":523,"source":"contracts/ARC11550Accounting.algo.ts:136","pc":[565,566]},{"teal":524,"source":"contracts/ARC11550Accounting.algo.ts:136","pc":[567]},{"teal":525,"source":"contracts/ARC11550Accounting.algo.ts:136","pc":[568]},{"teal":526,"source":"contracts/ARC11550Accounting.algo.ts:136","pc":[569]},{"teal":529,"source":"contracts/ARC11550Accounting.algo.ts:136","errorMessage":"box value does not exist: this.params(id).value","pc":[570]},{"teal":530,"source":"contracts/ARC11550Accounting.algo.ts:136","pc":[571]},{"teal":531,"source":"contracts/ARC11550Accounting.algo.ts:136","pc":[572,573]},{"teal":536,"source":"contracts/ARC11550Accounting.algo.ts:134","pc":[574,575]},{"teal":537,"source":"contracts/ARC11550Accounting.algo.ts:134","pc":[576]},{"teal":538,"source":"contracts/ARC11550Accounting.algo.ts:134","pc":[577]},{"teal":539,"source":"contracts/ARC11550Accounting.algo.ts:134","pc":[578,579]},{"teal":540,"source":"contracts/ARC11550Accounting.algo.ts:134","pc":[580,581,582]},{"teal":545,"source":"contracts/ARC11550Accounting.algo.ts:139","pc":[583,584]},{"teal":548,"source":"contracts/ARC11550Accounting.algo.ts:132","pc":[585,586]},{"teal":551,"source":"contracts/ARC11550Accounting.algo.ts:132","pc":[587,588]},{"teal":552,"source":"contracts/ARC11550Accounting.algo.ts:132","pc":[589]},{"teal":557,"source":"contracts/ARC11550Accounting.algo.ts:142","pc":[590,591,592]},{"teal":558,"source":"contracts/ARC11550Accounting.algo.ts:142","pc":[593]},{"teal":559,"source":"contracts/ARC11550Accounting.algo.ts:142","pc":[594]},{"teal":560,"source":"contracts/ARC11550Accounting.algo.ts:142","pc":[595,596]},{"teal":561,"source":"contracts/ARC11550Accounting.algo.ts:142","pc":[597]},{"teal":564,"source":"contracts/ARC11550Accounting.algo.ts:142","errorMessage":"argument 0 (allowance) for arc11550_approve must be a (uint64,uint64)","pc":[598]},{"teal":567,"source":"contracts/ARC11550Accounting.algo.ts:142","pc":[599,600,601]},{"teal":568,"source":"contracts/ARC11550Accounting.algo.ts:142","pc":[602]},{"teal":569,"source":"contracts/ARC11550Accounting.algo.ts:142","pc":[603]},{"teal":570,"source":"contracts/ARC11550Accounting.algo.ts:142","pc":[604,605]},{"teal":571,"source":"contracts/ARC11550Accounting.algo.ts:142","pc":[606]},{"teal":574,"source":"contracts/ARC11550Accounting.algo.ts:142","errorMessage":"argument 1 (allowanceKey) for arc11550_approve must be a (address,address,uint64)","pc":[607]},{"teal":577,"source":"contracts/ARC11550Accounting.algo.ts:142","pc":[608,609,610]},{"teal":578,"source":"contracts/ARC11550Accounting.algo.ts:142","pc":[611]},{"teal":579,"source":"contracts/ARC11550Accounting.algo.ts:142","pc":[612]},{"teal":583,"source":"contracts/ARC11550Accounting.algo.ts:142","pc":[613,614,615]},{"teal":587,"source":"contracts/ARC11550Accounting.algo.ts:143","pc":[616,617]},{"teal":588,"source":"contracts/ARC11550Accounting.algo.ts:143","pc":[618,619]},{"teal":589,"source":"contracts/ARC11550Accounting.algo.ts:143","pc":[620,621]},{"teal":590,"source":"contracts/ARC11550Accounting.algo.ts:143","pc":[622,623]},{"teal":591,"source":"contracts/ARC11550Accounting.algo.ts:143","pc":[624,625]},{"teal":592,"source":"contracts/ARC11550Accounting.algo.ts:143","pc":[626,627,628]},{"teal":593,"source":"contracts/ARC11550Accounting.algo.ts:143","pc":[629]},{"teal":594,"source":"contracts/ARC11550Accounting.algo.ts:143","pc":[630]},{"teal":595,"source":"contracts/ARC11550Accounting.algo.ts:143","pc":[631]},{"teal":596,"source":"contracts/ARC11550Accounting.algo.ts:143","pc":[632,633]},{"teal":597,"source":"contracts/ARC11550Accounting.algo.ts:143","pc":[634]},{"teal":598,"source":"contracts/ARC11550Accounting.algo.ts:143","pc":[635]},{"teal":599,"source":"contracts/ARC11550Accounting.algo.ts:143","pc":[636]},{"teal":603,"source":"contracts/ARC11550Accounting.algo.ts:144","pc":[637,638]},{"teal":604,"source":"contracts/ARC11550Accounting.algo.ts:144","pc":[639,640]},{"teal":605,"source":"contracts/ARC11550Accounting.algo.ts:144","pc":[641]},{"teal":606,"source":"contracts/ARC11550Accounting.algo.ts:144","pc":[642,643]},{"teal":607,"source":"contracts/ARC11550Accounting.algo.ts:144","pc":[644]},{"teal":608,"source":"contracts/ARC11550Accounting.algo.ts:142","pc":[645]},{"teal":613,"source":"contracts/ARC11550Accounting.algo.ts:147","pc":[646,647,648]},{"teal":614,"source":"contracts/ARC11550Accounting.algo.ts:147","pc":[649,650,651]},{"teal":617,"source":"contracts/ARC11550Accounting.algo.ts:147","pc":[652,653,654]},{"teal":618,"source":"contracts/ARC11550Accounting.algo.ts:147","pc":[655]},{"teal":619,"source":"contracts/ARC11550Accounting.algo.ts:147","pc":[656]},{"teal":623,"source":"contracts/ARC11550Accounting.algo.ts:147","pc":[657,658,659]},{"teal":626,"source":"contracts/ARC11550Accounting.algo.ts:147","pc":[660]},{"teal":627,"source":"contracts/ARC11550Accounting.algo.ts:147","pc":[661]},{"teal":631,"source":"contracts/ARC11550Accounting.algo.ts:148","pc":[662]},{"teal":632,"source":"contracts/ARC11550Accounting.algo.ts:148","pc":[663,664]},{"teal":637,"source":"contracts/ARC11550Accounting.algo.ts:148","pc":[665,666]},{"teal":638,"source":"contracts/ARC11550Accounting.algo.ts:148","pc":[667,668]},{"teal":639,"source":"contracts/ARC11550Accounting.algo.ts:148","pc":[669]},{"teal":640,"source":"contracts/ARC11550Accounting.algo.ts:148","pc":[670,671]},{"teal":641,"source":"contracts/ARC11550Accounting.algo.ts:148","pc":[672]},{"teal":642,"source":"contracts/ARC11550Accounting.algo.ts:148","pc":[673]},{"teal":643,"source":"contracts/ARC11550Accounting.algo.ts:148","pc":[674,675,676]},{"teal":644,"source":"contracts/ARC11550Accounting.algo.ts:149","pc":[677,678]},{"teal":645,"source":"contracts/ARC11550Accounting.algo.ts:149","pc":[679,680]},{"teal":649,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[681,682]},{"teal":650,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[683,684]},{"teal":651,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[685]},{"teal":652,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[686,687]},{"teal":653,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[688,689]},{"teal":654,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[690]},{"teal":655,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[691]},{"teal":656,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[692,693]},{"teal":657,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[694]},{"teal":658,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[695,696]},{"teal":659,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[697]},{"teal":660,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[698,699]},{"teal":661,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[700]},{"teal":662,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[701,702]},{"teal":663,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[703,704]},{"teal":664,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[705]},{"teal":665,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[706,707]},{"teal":666,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[708,709]},{"teal":667,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[710]},{"teal":668,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[711]},{"teal":669,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[712]},{"teal":670,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[713]},{"teal":671,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[714,715]},{"teal":672,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[716]},{"teal":673,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[717,718]},{"teal":674,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[719]},{"teal":675,"source":"contracts/ARC11550Accounting.algo.ts:150","pc":[720,721,722]},{"teal":680,"source":"contracts/ARC11550Accounting.algo.ts:148","pc":[723,724]},{"teal":681,"source":"contracts/ARC11550Accounting.algo.ts:148","pc":[725]},{"teal":682,"source":"contracts/ARC11550Accounting.algo.ts:148","pc":[726]},{"teal":683,"source":"contracts/ARC11550Accounting.algo.ts:148","pc":[727,728]},{"teal":684,"source":"contracts/ARC11550Accounting.algo.ts:148","pc":[729,730,731]},{"teal":687,"source":"contracts/ARC11550Accounting.algo.ts:147","pc":[732]},{"teal":692,"source":"contracts/ARC11550Accounting.algo.ts:154","pc":[733,734,735]},{"teal":693,"source":"contracts/ARC11550Accounting.algo.ts:154","pc":[736,737,738]},{"teal":696,"source":"contracts/ARC11550Accounting.algo.ts:154","pc":[739,740,741]},{"teal":697,"source":"contracts/ARC11550Accounting.algo.ts:154","pc":[742]},{"teal":698,"source":"contracts/ARC11550Accounting.algo.ts:154","pc":[743]},{"teal":702,"source":"contracts/ARC11550Accounting.algo.ts:154","pc":[744,745,746]},{"teal":705,"source":"contracts/ARC11550Accounting.algo.ts:154","pc":[747]},{"teal":706,"source":"contracts/ARC11550Accounting.algo.ts:154","pc":[748,749]},{"teal":710,"source":"contracts/ARC11550Accounting.algo.ts:155","pc":[750,751]},{"teal":711,"source":"contracts/ARC11550Accounting.algo.ts:155","pc":[752,753]},{"teal":712,"source":"contracts/ARC11550Accounting.algo.ts:155","pc":[754]},{"teal":713,"source":"contracts/ARC11550Accounting.algo.ts:155","pc":[755]},{"teal":714,"source":"contracts/ARC11550Accounting.algo.ts:155","pc":[756]},{"teal":718,"source":"contracts/ARC11550Accounting.algo.ts:157","pc":[757]},{"teal":719,"source":"contracts/ARC11550Accounting.algo.ts:157","pc":[758,759]},{"teal":724,"source":"contracts/ARC11550Accounting.algo.ts:157","pc":[760,761]},{"teal":725,"source":"contracts/ARC11550Accounting.algo.ts:157","pc":[762,763]},{"teal":726,"source":"contracts/ARC11550Accounting.algo.ts:157","pc":[764]},{"teal":727,"source":"contracts/ARC11550Accounting.algo.ts:157","pc":[765]},{"teal":728,"source":"contracts/ARC11550Accounting.algo.ts:157","pc":[766]},{"teal":729,"source":"contracts/ARC11550Accounting.algo.ts:157","pc":[767]},{"teal":730,"source":"contracts/ARC11550Accounting.algo.ts:157","pc":[768,769,770]},{"teal":731,"source":"contracts/ARC11550Accounting.algo.ts:158","pc":[771,772]},{"teal":732,"source":"contracts/ARC11550Accounting.algo.ts:158","pc":[773,774]},{"teal":737,"source":"contracts/ARC11550Accounting.algo.ts:160","pc":[775,776]},{"teal":738,"source":"contracts/ARC11550Accounting.algo.ts:160","pc":[777,778]},{"teal":739,"source":"contracts/ARC11550Accounting.algo.ts:160","pc":[779]},{"teal":740,"source":"contracts/ARC11550Accounting.algo.ts:160","pc":[780,781]},{"teal":741,"source":"contracts/ARC11550Accounting.algo.ts:160","pc":[782]},{"teal":742,"source":"contracts/ARC11550Accounting.algo.ts:160","pc":[783]},{"teal":743,"source":"contracts/ARC11550Accounting.algo.ts:160","pc":[784]},{"teal":744,"source":"contracts/ARC11550Accounting.algo.ts:160","pc":[785]},{"teal":745,"source":"contracts/ARC11550Accounting.algo.ts:160","pc":[786]},{"teal":746,"source":"contracts/ARC11550Accounting.algo.ts:160","pc":[787,788]},{"teal":747,"source":"contracts/ARC11550Accounting.algo.ts:160","pc":[789]},{"teal":748,"source":"contracts/ARC11550Accounting.algo.ts:160","pc":[790,791]},{"teal":749,"source":"contracts/ARC11550Accounting.algo.ts:160","pc":[792]},{"teal":750,"source":"contracts/ARC11550Accounting.algo.ts:160","pc":[793,794]},{"teal":751,"source":"contracts/ARC11550Accounting.algo.ts:160","pc":[795]},{"teal":752,"source":"contracts/ARC11550Accounting.algo.ts:160","pc":[796,797,798]},{"teal":757,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[799,800]},{"teal":758,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[801,802]},{"teal":759,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[803,804]},{"teal":760,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[805]},{"teal":761,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[806,807]},{"teal":762,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[808]},{"teal":763,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[809]},{"teal":764,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[810]},{"teal":765,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[811]},{"teal":766,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[812]},{"teal":767,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[813,814]},{"teal":768,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[815]},{"teal":769,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[816,817]},{"teal":770,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[818]},{"teal":771,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[819,820]},{"teal":772,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[821]},{"teal":773,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[822,823]},{"teal":774,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[824,825]},{"teal":775,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[826]},{"teal":776,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[827,828]},{"teal":777,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[829]},{"teal":778,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[830]},{"teal":779,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[831]},{"teal":780,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[832]},{"teal":781,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[833]},{"teal":782,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[834,835]},{"teal":783,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[836]},{"teal":784,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[837]},{"teal":785,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[838]},{"teal":786,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[839]},{"teal":787,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[840]},{"teal":788,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[841]},{"teal":789,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[842]},{"teal":790,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[843,844]},{"teal":794,"source":"contracts/ARC11550Accounting.algo.ts:162","pc":[845]},{"teal":795,"source":"contracts/ARC11550Accounting.algo.ts:162","pc":[846]},{"teal":796,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[847,848]},{"teal":800,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[849,850]},{"teal":801,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[851,852]},{"teal":802,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[853]},{"teal":803,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[854,855]},{"teal":804,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[856]},{"teal":805,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[857]},{"teal":806,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[858]},{"teal":807,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[859]},{"teal":808,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[860]},{"teal":809,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[861,862]},{"teal":810,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[863]},{"teal":811,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[864,865]},{"teal":812,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[866]},{"teal":816,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[867,868]},{"teal":817,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[869]},{"teal":821,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[870,871]},{"teal":822,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[872,873]},{"teal":823,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[874]},{"teal":824,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[875,876]},{"teal":825,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[877]},{"teal":826,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[878]},{"teal":827,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[879]},{"teal":828,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[880]},{"teal":829,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[881]},{"teal":830,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[882,883]},{"teal":831,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[884]},{"teal":832,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[885]},{"teal":833,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[886]},{"teal":834,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[887]},{"teal":835,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[888]},{"teal":836,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[889]},{"teal":837,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[890]},{"teal":838,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[891,892]},{"teal":839,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[893]},{"teal":840,"source":"contracts/ARC11550Accounting.algo.ts:162","pc":[894]},{"teal":844,"source":"contracts/ARC11550Accounting.algo.ts:162","pc":[895,896]},{"teal":845,"source":"contracts/ARC11550Accounting.algo.ts:162","pc":[897]},{"teal":846,"source":"contracts/ARC11550Accounting.algo.ts:162","pc":[898]},{"teal":850,"source":"contracts/ARC11550Accounting.algo.ts:163","pc":[899]},{"teal":851,"source":"contracts/ARC11550Accounting.algo.ts:163","pc":[900]},{"teal":852,"source":"contracts/ARC11550Accounting.algo.ts:163","pc":[901]},{"teal":853,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[902,903]},{"teal":857,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[904,905]},{"teal":858,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[906,907]},{"teal":859,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[908]},{"teal":860,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[909,910]},{"teal":861,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[911]},{"teal":862,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[912]},{"teal":863,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[913]},{"teal":864,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[914]},{"teal":865,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[915]},{"teal":866,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[916,917]},{"teal":867,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[918]},{"teal":868,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[919,920]},{"teal":869,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[921]},{"teal":873,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[922,923]},{"teal":874,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[924]},{"teal":878,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[925,926]},{"teal":879,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[927,928]},{"teal":880,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[929]},{"teal":881,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[930,931]},{"teal":882,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[932]},{"teal":883,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[933]},{"teal":884,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[934]},{"teal":885,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[935]},{"teal":886,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[936]},{"teal":887,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[937,938]},{"teal":888,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[939]},{"teal":889,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[940]},{"teal":890,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[941]},{"teal":891,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[942]},{"teal":892,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[943]},{"teal":893,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[944]},{"teal":894,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[945]},{"teal":895,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[946,947]},{"teal":896,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[948]},{"teal":897,"source":"contracts/ARC11550Accounting.algo.ts:163","pc":[949]},{"teal":901,"source":"contracts/ARC11550Accounting.algo.ts:163","pc":[950,951]},{"teal":902,"source":"contracts/ARC11550Accounting.algo.ts:163","pc":[952,953]},{"teal":903,"source":"contracts/ARC11550Accounting.algo.ts:163","pc":[954]},{"teal":904,"source":"contracts/ARC11550Accounting.algo.ts:163","pc":[955,956]},{"teal":905,"source":"contracts/ARC11550Accounting.algo.ts:163","pc":[957]},{"teal":906,"source":"contracts/ARC11550Accounting.algo.ts:163","pc":[958]},{"teal":907,"source":"contracts/ARC11550Accounting.algo.ts:163","pc":[959]},{"teal":908,"source":"contracts/ARC11550Accounting.algo.ts:163","pc":[960,961]},{"teal":909,"source":"contracts/ARC11550Accounting.algo.ts:163","pc":[962]},{"teal":910,"source":"contracts/ARC11550Accounting.algo.ts:163","pc":[963,964]},{"teal":911,"source":"contracts/ARC11550Accounting.algo.ts:163","pc":[965]},{"teal":912,"source":"contracts/ARC11550Accounting.algo.ts:163","pc":[966]},{"teal":913,"source":"contracts/ARC11550Accounting.algo.ts:163","pc":[967]},{"teal":914,"source":"contracts/ARC11550Accounting.algo.ts:163","pc":[968]},{"teal":915,"source":"contracts/ARC11550Accounting.algo.ts:163","pc":[969]},{"teal":916,"source":"contracts/ARC11550Accounting.algo.ts:163","pc":[970]},{"teal":917,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[971,972]},{"teal":918,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[973,974]},{"teal":919,"source":"contracts/ARC11550Accounting.algo.ts:161","pc":[975]},{"teal":924,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[976]},{"teal":925,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[977,978]},{"teal":926,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[979,980]},{"teal":927,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[981]},{"teal":928,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[982,983]},{"teal":929,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[984]},{"teal":930,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[985]},{"teal":931,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[986]},{"teal":932,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[987]},{"teal":933,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[988]},{"teal":934,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[989,990]},{"teal":935,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[991]},{"teal":936,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[992]},{"teal":937,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[993]},{"teal":938,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[994]},{"teal":939,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[995]},{"teal":940,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[996,997]},{"teal":941,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[998,999]},{"teal":942,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1000]},{"teal":943,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1001,1002]},{"teal":944,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1003]},{"teal":945,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1004]},{"teal":946,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1005]},{"teal":947,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1006]},{"teal":948,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1007]},{"teal":949,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1008,1009]},{"teal":950,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1010]},{"teal":951,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1011,1012]},{"teal":952,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1013]},{"teal":953,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1014]},{"teal":954,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1015]},{"teal":955,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1016]},{"teal":958,"source":"contracts/ARC11550Accounting.algo.ts:165","errorMessage":"box value does not exist: this.balances({ id: t.id, address: t.from }).value","pc":[1017]},{"teal":959,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1018]},{"teal":960,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1019,1020]},{"teal":961,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1021,1022]},{"teal":962,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1023]},{"teal":963,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1024,1025]},{"teal":964,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1026]},{"teal":965,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1027]},{"teal":966,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1028]},{"teal":967,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1029,1030]},{"teal":968,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1031]},{"teal":969,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1032,1033]},{"teal":970,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1034]},{"teal":971,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1035]},{"teal":972,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1036]},{"teal":973,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1037]},{"teal":974,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1038]},{"teal":975,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1039]},{"teal":976,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1040,1041]},{"teal":977,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1042,1043]},{"teal":978,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1044]},{"teal":979,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1045,1046]},{"teal":980,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1047]},{"teal":981,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1048]},{"teal":982,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1049]},{"teal":983,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1050]},{"teal":984,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1051]},{"teal":985,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1052,1053]},{"teal":986,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1054]},{"teal":987,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1055]},{"teal":988,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1056]},{"teal":989,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1057]},{"teal":990,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1058]},{"teal":991,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1059,1060]},{"teal":992,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1061,1062]},{"teal":993,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1063]},{"teal":994,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1064,1065]},{"teal":995,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1066]},{"teal":996,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1067]},{"teal":997,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1068]},{"teal":998,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1069]},{"teal":999,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1070]},{"teal":1000,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1071,1072]},{"teal":1001,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1073]},{"teal":1002,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1074,1075]},{"teal":1003,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1076]},{"teal":1004,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1077]},{"teal":1005,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1078]},{"teal":1006,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1079]},{"teal":1007,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1080]},{"teal":1008,"source":"contracts/ARC11550Accounting.algo.ts:165","pc":[1081]},{"teal":1012,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1082]},{"teal":1013,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1083,1084]},{"teal":1014,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1085,1086]},{"teal":1015,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1087]},{"teal":1016,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1088,1089]},{"teal":1017,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1090]},{"teal":1018,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1091]},{"teal":1019,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1092]},{"teal":1020,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1093]},{"teal":1021,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1094]},{"teal":1022,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1095,1096]},{"teal":1023,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1097]},{"teal":1024,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1098]},{"teal":1025,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1099]},{"teal":1026,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1100]},{"teal":1027,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1101]},{"teal":1028,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1102,1103]},{"teal":1029,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1104,1105]},{"teal":1030,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1106]},{"teal":1031,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1107,1108]},{"teal":1032,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1109]},{"teal":1033,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1110]},{"teal":1034,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1111]},{"teal":1035,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1112,1113]},{"teal":1036,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1114]},{"teal":1037,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1115,1116]},{"teal":1038,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1117]},{"teal":1039,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1118,1119]},{"teal":1040,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1120]},{"teal":1041,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1121]},{"teal":1042,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1122]},{"teal":1043,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1123]},{"teal":1046,"source":"contracts/ARC11550Accounting.algo.ts:166","errorMessage":"box value does not exist: this.balances({ id: t.id, address: t.to }).value","pc":[1124]},{"teal":1047,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1125]},{"teal":1048,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1126,1127]},{"teal":1049,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1128,1129]},{"teal":1050,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1130]},{"teal":1051,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1131,1132]},{"teal":1052,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1133]},{"teal":1053,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1134]},{"teal":1054,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1135]},{"teal":1055,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1136,1137]},{"teal":1056,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1138]},{"teal":1057,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1139,1140]},{"teal":1058,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1141]},{"teal":1059,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1142]},{"teal":1060,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1143]},{"teal":1061,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1144]},{"teal":1062,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1145]},{"teal":1063,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1146]},{"teal":1064,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1147,1148]},{"teal":1065,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1149,1150]},{"teal":1066,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1151]},{"teal":1067,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1152,1153]},{"teal":1068,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1154]},{"teal":1069,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1155]},{"teal":1070,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1156]},{"teal":1071,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1157]},{"teal":1072,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1158]},{"teal":1073,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1159,1160]},{"teal":1074,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1161]},{"teal":1075,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1162]},{"teal":1076,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1163]},{"teal":1077,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1164]},{"teal":1078,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1165]},{"teal":1079,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1166,1167]},{"teal":1080,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1168,1169]},{"teal":1081,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1170]},{"teal":1082,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1171,1172]},{"teal":1083,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1173]},{"teal":1084,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1174]},{"teal":1085,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1175]},{"teal":1086,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1176,1177]},{"teal":1087,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1178]},{"teal":1088,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1179,1180]},{"teal":1089,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1181]},{"teal":1090,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1182,1183]},{"teal":1091,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1184]},{"teal":1092,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1185]},{"teal":1093,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1186]},{"teal":1094,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1187]},{"teal":1095,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1188]},{"teal":1096,"source":"contracts/ARC11550Accounting.algo.ts:166","pc":[1189]},{"teal":1101,"source":"contracts/ARC11550Accounting.algo.ts:157","pc":[1190,1191]},{"teal":1102,"source":"contracts/ARC11550Accounting.algo.ts:157","pc":[1192]},{"teal":1103,"source":"contracts/ARC11550Accounting.algo.ts:157","pc":[1193]},{"teal":1104,"source":"contracts/ARC11550Accounting.algo.ts:157","pc":[1194,1195]},{"teal":1105,"source":"contracts/ARC11550Accounting.algo.ts:157","pc":[1196,1197,1198]},{"teal":1108,"source":"contracts/ARC11550Accounting.algo.ts:154","pc":[1199]},{"teal":1113,"source":"contracts/ARC11550Accounting.algo.ts:170","pc":[1200]},{"teal":1116,"source":"contracts/ARC11550Accounting.algo.ts:170","pc":[1201,1202,1203]},{"teal":1117,"source":"contracts/ARC11550Accounting.algo.ts:170","pc":[1204]},{"teal":1118,"source":"contracts/ARC11550Accounting.algo.ts:170","pc":[1205]},{"teal":1119,"source":"contracts/ARC11550Accounting.algo.ts:170","pc":[1206,1207]},{"teal":1120,"source":"contracts/ARC11550Accounting.algo.ts:170","pc":[1208]},{"teal":1123,"source":"contracts/ARC11550Accounting.algo.ts:170","errorMessage":"argument 0 (params) for doMint must be a (byte[32],byte[8],uint64,uint64,address)","pc":[1209]},{"teal":1126,"source":"contracts/ARC11550Accounting.algo.ts:170","pc":[1210,1211,1212]},{"teal":1127,"source":"contracts/ARC11550Accounting.algo.ts:170","pc":[1213]},{"teal":1128,"source":"contracts/ARC11550Accounting.algo.ts:170","pc":[1214]},{"teal":1129,"source":"contracts/ARC11550Accounting.algo.ts:170","pc":[1215]},{"teal":1130,"source":"contracts/ARC11550Accounting.algo.ts:170","pc":[1216]},{"teal":1131,"source":"contracts/ARC11550Accounting.algo.ts:170","pc":[1217]},{"teal":1135,"source":"contracts/ARC11550Accounting.algo.ts:170","pc":[1218,1219,1220]},{"teal":1138,"source":"contracts/ARC11550Accounting.algo.ts:170","pc":[1221]},{"teal":1142,"source":"contracts/ARC11550Accounting.algo.ts:171","pc":[1222,1223]},{"teal":1143,"source":"contracts/ARC11550Accounting.algo.ts:171","pc":[1224,1225]},{"teal":1144,"source":"contracts/ARC11550Accounting.algo.ts:171","pc":[1226]},{"teal":1145,"source":"contracts/ARC11550Accounting.algo.ts:171","pc":[1227]},{"teal":1146,"source":"contracts/ARC11550Accounting.algo.ts:171","pc":[1228]},{"teal":1150,"source":"contracts/ARC11550Accounting.algo.ts:173","pc":[1229]},{"teal":1151,"source":"contracts/ARC11550Accounting.algo.ts:173","pc":[1230]},{"teal":1152,"source":"contracts/ARC11550Accounting.algo.ts:173","pc":[1231,1232]},{"teal":1156,"source":"contracts/ARC11550Accounting.algo.ts:174","pc":[1233,1234]},{"teal":1157,"source":"contracts/ARC11550Accounting.algo.ts:174","pc":[1235,1236]},{"teal":1158,"source":"contracts/ARC11550Accounting.algo.ts:174","pc":[1237]},{"teal":1159,"source":"contracts/ARC11550Accounting.algo.ts:174","pc":[1238]},{"teal":1160,"source":"contracts/ARC11550Accounting.algo.ts:174","pc":[1239]},{"teal":1164,"source":"contracts/ARC11550Accounting.algo.ts:175","pc":[1240,1241]},{"teal":1165,"source":"contracts/ARC11550Accounting.algo.ts:175","pc":[1242,1243,1244,1245,1246,1247,1248,1249]},{"teal":1166,"source":"contracts/ARC11550Accounting.algo.ts:175","pc":[1250]},{"teal":1167,"source":"contracts/ARC11550Accounting.algo.ts:175","pc":[1251]},{"teal":1168,"source":"contracts/ARC11550Accounting.algo.ts:175","pc":[1252]},{"teal":1172,"source":"contracts/ARC11550Accounting.algo.ts:177","pc":[1253,1254]},{"teal":1173,"source":"contracts/ARC11550Accounting.algo.ts:177","pc":[1255,1256]},{"teal":1174,"source":"contracts/ARC11550Accounting.algo.ts:177","pc":[1257]},{"teal":1175,"source":"contracts/ARC11550Accounting.algo.ts:177","pc":[1258]},{"teal":1176,"source":"contracts/ARC11550Accounting.algo.ts:177","pc":[1259,1260]},{"teal":1177,"source":"contracts/ARC11550Accounting.algo.ts:177","pc":[1261]},{"teal":1181,"source":"contracts/ARC11550Accounting.algo.ts:178","pc":[1262]},{"teal":1182,"source":"contracts/ARC11550Accounting.algo.ts:178","pc":[1263]},{"teal":1183,"source":"contracts/ARC11550Accounting.algo.ts:178","pc":[1264]},{"teal":1184,"source":"contracts/ARC11550Accounting.algo.ts:178","pc":[1265]},{"teal":1185,"source":"contracts/ARC11550Accounting.algo.ts:178","pc":[1266]},{"teal":1186,"source":"contracts/ARC11550Accounting.algo.ts:178","pc":[1267]},{"teal":1187,"source":"contracts/ARC11550Accounting.algo.ts:178","pc":[1268]},{"teal":1191,"source":"contracts/ARC11550Accounting.algo.ts:180","pc":[1269,1270]},{"teal":1194,"source":"contracts/ARC11550Accounting.algo.ts:170","pc":[1271,1272]},{"teal":1195,"source":"contracts/ARC11550Accounting.algo.ts:170","pc":[1273]},{"teal":1198,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1274,1275,1276,1277,1278,1279]},{"teal":1199,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1280,1281,1282]},{"teal":1200,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1283,1284,1285,1286]},{"teal":1203,"source":"contracts/ARC11550Accounting.algo.ts:46","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[1287]},{"teal":1206,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1288,1289,1290,1291,1292,1293]},{"teal":1207,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1294,1295,1296,1297,1298,1299]},{"teal":1208,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1300,1301,1302,1303,1304,1305]},{"teal":1209,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1306,1307,1308,1309,1310,1311]},{"teal":1210,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1312,1313,1314,1315,1316,1317]},{"teal":1211,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1318,1319,1320,1321,1322,1323]},{"teal":1212,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1324,1325,1326,1327,1328,1329]},{"teal":1213,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1330,1331,1332,1333,1334,1335]},{"teal":1214,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1336,1337,1338,1339,1340,1341]},{"teal":1215,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1342,1343,1344,1345,1346,1347]},{"teal":1216,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1348,1349,1350,1351,1352,1353]},{"teal":1217,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1354,1355,1356]},{"teal":1218,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380]},{"teal":1221,"source":"contracts/ARC11550Accounting.algo.ts:46","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[1381]},{"teal":1224,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1382,1383]},{"teal":1225,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1384]},{"teal":1226,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1385,1386]},{"teal":1227,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1387]},{"teal":1228,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1388,1389,1390]},{"teal":1229,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1391,1392]},{"teal":1230,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1393]},{"teal":1231,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1394,1395]},{"teal":1232,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1396]},{"teal":1233,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1397,1398]},{"teal":1234,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1399,1400,1401]},{"teal":1237,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1402,1403]},{"teal":1238,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1404,1405]},{"teal":1239,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1406]},{"teal":1240,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1407]},{"teal":1241,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1408,1409]},{"teal":1244,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1410]},{"teal":1245,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1411,1412]},{"teal":1246,"source":"contracts/ARC11550Accounting.algo.ts:46","pc":[1413]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAKAAgBUCBIKFgQOCYJAAQVH3x1AWIGbWludGVkAW0BcAFhC3RyYW5zZmVyQXBwB21pbnRDYXAxGBSBBgsxGQiNDAStAAAAAAAAAAAAAASfAAAAAAAAAAAAAAA2GgIXNhoBF4gAAiRDigIAJweL/2crImcnCIv+Z4kpiAAFFlCwJEOKAAErZIkpNhoBiAAEULAkQ4oBAScEi/9QvkSJNhoCVwIANhoBiAACJEOKAgAxACEJIQQnBYv/Nf80/1cACBcWUE4CuhJEJwSL/1C9TEhBAA4nBIv/UL5ENf80/yJTRCcEi/9QvkQ1/yRJNfs0/zT/TwJZSTX+STT/TFkkC4ECCDX9NP8iNP5Si/5JFRZXBgJMUEk1/DT/NP40/Qg0/xVSUFA1/4gEPDT/JwSL/1BJvEhMv4kpNhoCSRUhBBJENhoBF4gABRZQsCRDigIBKov/Fov+UFC+RBeJKTYaAVcCAIgADkkVIwoWVwYCTFBQsCRDigEBKEcDKIwAIowBiwGL/xUhBgoMQQBEi/81/yKLASEGCwgiCDT/TCNYF4wCi/81/yKLASEGCwgjCDT/TCEEWIwDiwAqiwIWiwNQUL5EFxZQjACLASQIjAFC/7CLAIwARgOJKTYaAReIAARQsCRDigEBJwWL/xZQvkSJKTYaAVcCAIgAD0kVIQcKFlcGAkxQULAkQ4oBAShHAiiMACKMAYsBi/8VIwoMQQAoi/81/yKLASMLCDT/TCNYF4wCiwAnBYsCFlC+RFCMAIsBJAiMAUL/zYsAjABGAok2GgJJFSEIEkQ2GgFJFSEFEkSIAAIkQ4oCADEAIQkhBCcFi/9XQAgXFlBOAroSRCcGi/9Qi/6/iTYaAVcCAIgAAiRDigEAKEkijACLAIv/FSEHCgxBADeLAIwBi/81/yKLASEHCwghBQg0/0whCFiL/zX/IosBIQcLCCIINP9MIQVYiP+SiwAkCIwAQv+9iTYaAVcCAIgAAiRDigEAKEcCMg0nB2QSRCKMAIsAi/8VJQoMQQGsiwCMAYv/Nf8iiwElCwgjCDT/TCEEWDEAE0EAsScGi/81/yKLASULCCMINP9MIQRYMQBQi/81/yKLASULCCIINP9MI1gXFlBQjAIjIycGi/81/yKLASULCCMINP9MIQRYMQBQi/81/yKLASULCCIINP9MI1gXFlBQTgK6FzIHD0QiSSMnBov/Nf8iiwElCwgjCDT/TCEEWDEAUIv/Nf8iiwElCwgiCDT/TCNYFxZQUE4CuheL/zX/IosBJQsIIQUINP9MI1gXCRaLAk4CuyqL/zX/IosBJQsIIgg0/0wjWBcWi/81/yKLASULCCMINP9MIQRYUFC+RBeL/zX/IosBJQsIIQUINP9MI1gXCSqL/zX/IosBJQsIIgg0/0wjWBcWi/81/yKLASULCCMINP9MIQRYUFBMFr8qi/81/yKLASULCCIINP9MI1gXFov/Nf8iiwElCwghBgg0/0whBFhQUL5EF4v/Nf8iiwElCwghBQg0/0wjWBcIKov/Nf8iiwElCwgiCDT/TCNYFxaL/zX/IosBJQsIIQYINP9MIQRYUFBMFr+LACQIjABC/kmJKTYaAUkVIQcSRIgABRZQsCRDigEBKDINJwdkEkQrZIwAiwAnCGQORDEAgAZtaW50ZXJkEkQnBYsAFlCL/78rZCQIK0xniwCMAImABJF8SLY2GgCOAftVAIAE3UL1oIAEOsIyVIAEu7neZ4AE0ErLwoAEZd2HF4AEUfUEvoAEKtLrVYAE1XkXXYAEDw+hc4AEYrUHi4AEQQV4VTYaAI4L+xX7JPs6+9L79/xy/Ir86f0h/Xj/SwA0/BU0/QxAAAs0/BU0/SQ1+UIACDT9NPwVIjX5CTX6iQ==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Params = {
  name: Uint8Array,
  symbol: Uint8Array,
  total: bigint,
  decimals: bigint,
  manager: string
}


/**
 * Converts the ABI tuple representation of a Params to the struct representation
 */
export function ParamsFromTuple(abiTuple: [Uint8Array, Uint8Array, bigint, bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Params, APP_SPEC.structs) as Params
}

export type IdAndAddress = {
  id: bigint,
  address: string
}


/**
 * Converts the ABI tuple representation of a IdAndAddress to the struct representation
 */
export function IdAndAddressFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.IdAndAddress, APP_SPEC.structs) as IdAndAddress
}

export type Metadata = {
  mutable: boolean,
  data: Uint8Array
}


/**
 * Converts the ABI tuple representation of a Metadata to the struct representation
 */
export function MetadataFromTuple(abiTuple: [boolean, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Metadata, APP_SPEC.structs) as Metadata
}

export type MetadataKey = {
  id: bigint,
  key: string
}


/**
 * Converts the ABI tuple representation of a MetadataKey to the struct representation
 */
export function MetadataKeyFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.MetadataKey, APP_SPEC.structs) as MetadataKey
}

export type Allowance = {
  amount: bigint,
  untilTimestamp: bigint
}


/**
 * Converts the ABI tuple representation of a Allowance to the struct representation
 */
export function AllowanceFromTuple(abiTuple: [bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Allowance, APP_SPEC.structs) as Allowance
}

export type AllowanceKey = {
  holder: string,
  sender: string,
  id: bigint
}


/**
 * Converts the ABI tuple representation of a AllowanceKey to the struct representation
 */
export function AllowanceKeyFromTuple(abiTuple: [string, string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AllowanceKey, APP_SPEC.structs) as AllowanceKey
}

/**
 * The argument types for the Arc11550Accounting contract
 */
export type Arc11550AccountingArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(uint64,uint64)void': {
      transferApp: bigint | number
      mintCap: bigint | number
    }
    'arc11550_minted()uint64': Record<string, never>
    'arc11550_metadata((uint64,string))(bool,byte[])': {
      key: MetadataKey
    }
    'arc11550_setMetadata((uint64,string),byte[])void': {
      key: MetadataKey
      data: Uint8Array
    }
    'arc11550_balanceOf(uint64,address)uint64': {
      id: bigint | number
      account: string
    }
    'arc11550_balancesOf((uint64,address)[])uint64[]': {
      idAndAddrs: [bigint | number, string][]
    }
    'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)': {
      id: bigint | number
    }
    'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]': {
      ids: bigint[] | number[]
    }
    'arc11550_approve((address,address,uint64),(uint64,uint64))void': {
      allowanceKey: AllowanceKey
      allowance: Allowance
    }
    'arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void': {
      allowances: [[string, string, bigint | number], [bigint | number, bigint | number]][]
    }
    'doTransfers((uint64,address,address,uint64)[])void': {
      transfers: [bigint | number, string, string, bigint | number][]
    }
    'doMint((byte[32],byte[8],uint64,uint64,address))uint64': {
      params: Params
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(uint64,uint64)void': [transferApp: bigint | number, mintCap: bigint | number]
    'arc11550_minted()uint64': []
    'arc11550_metadata((uint64,string))(bool,byte[])': [key: MetadataKey]
    'arc11550_setMetadata((uint64,string),byte[])void': [key: MetadataKey, data: Uint8Array]
    'arc11550_balanceOf(uint64,address)uint64': [id: bigint | number, account: string]
    'arc11550_balancesOf((uint64,address)[])uint64[]': [idAndAddrs: [bigint | number, string][]]
    'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)': [id: bigint | number]
    'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]': [ids: bigint[] | number[]]
    'arc11550_approve((address,address,uint64),(uint64,uint64))void': [allowanceKey: AllowanceKey, allowance: Allowance]
    'arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void': [allowances: [[string, string, bigint | number], [bigint | number, bigint | number]][]]
    'doTransfers((uint64,address,address,uint64)[])void': [transfers: [bigint | number, string, string, bigint | number][]]
    'doMint((byte[32],byte[8],uint64,uint64,address))uint64': [params: Params]
  }
}

/**
 * The return type for each method
 */
export type Arc11550AccountingReturns = {
  'createApplication(uint64,uint64)void': void
  'arc11550_minted()uint64': bigint
  'arc11550_metadata((uint64,string))(bool,byte[])': Metadata
  'arc11550_setMetadata((uint64,string),byte[])void': void
  'arc11550_balanceOf(uint64,address)uint64': bigint
  'arc11550_balancesOf((uint64,address)[])uint64[]': bigint[]
  'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)': Params
  'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]': [Uint8Array, Uint8Array, bigint, bigint, string][]
  'arc11550_approve((address,address,uint64),(uint64,uint64))void': void
  'arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void': void
  'doTransfers((uint64,address,address,uint64)[])void': void
  'doMint((byte[32],byte[8],uint64,uint64,address))uint64': bigint
}

/**
 * Defines the types of available calls and state of the Arc11550Accounting smart contract.
 */
export type Arc11550AccountingTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64,uint64)void' | 'createApplication', {
      argsObj: Arc11550AccountingArgs['obj']['createApplication(uint64,uint64)void']
      argsTuple: Arc11550AccountingArgs['tuple']['createApplication(uint64,uint64)void']
      returns: Arc11550AccountingReturns['createApplication(uint64,uint64)void']
    }>
    & Record<'arc11550_minted()uint64' | 'arc11550_minted', {
      argsObj: Arc11550AccountingArgs['obj']['arc11550_minted()uint64']
      argsTuple: Arc11550AccountingArgs['tuple']['arc11550_minted()uint64']
      returns: Arc11550AccountingReturns['arc11550_minted()uint64']
    }>
    & Record<'arc11550_metadata((uint64,string))(bool,byte[])' | 'arc11550_metadata', {
      argsObj: Arc11550AccountingArgs['obj']['arc11550_metadata((uint64,string))(bool,byte[])']
      argsTuple: Arc11550AccountingArgs['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']
      returns: Arc11550AccountingReturns['arc11550_metadata((uint64,string))(bool,byte[])']
    }>
    & Record<'arc11550_setMetadata((uint64,string),byte[])void' | 'arc11550_setMetadata', {
      argsObj: Arc11550AccountingArgs['obj']['arc11550_setMetadata((uint64,string),byte[])void']
      argsTuple: Arc11550AccountingArgs['tuple']['arc11550_setMetadata((uint64,string),byte[])void']
      returns: Arc11550AccountingReturns['arc11550_setMetadata((uint64,string),byte[])void']
    }>
    & Record<'arc11550_balanceOf(uint64,address)uint64' | 'arc11550_balanceOf', {
      argsObj: Arc11550AccountingArgs['obj']['arc11550_balanceOf(uint64,address)uint64']
      argsTuple: Arc11550AccountingArgs['tuple']['arc11550_balanceOf(uint64,address)uint64']
      returns: Arc11550AccountingReturns['arc11550_balanceOf(uint64,address)uint64']
    }>
    & Record<'arc11550_balancesOf((uint64,address)[])uint64[]' | 'arc11550_balancesOf', {
      argsObj: Arc11550AccountingArgs['obj']['arc11550_balancesOf((uint64,address)[])uint64[]']
      argsTuple: Arc11550AccountingArgs['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']
      returns: Arc11550AccountingReturns['arc11550_balancesOf((uint64,address)[])uint64[]']
    }>
    & Record<'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)' | 'arc11550_params', {
      argsObj: Arc11550AccountingArgs['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']
      argsTuple: Arc11550AccountingArgs['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']
      returns: Arc11550AccountingReturns['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']
    }>
    & Record<'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]' | 'arc11550_mulitpleParams', {
      argsObj: Arc11550AccountingArgs['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']
      argsTuple: Arc11550AccountingArgs['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']
      returns: Arc11550AccountingReturns['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']
    }>
    & Record<'arc11550_approve((address,address,uint64),(uint64,uint64))void' | 'arc11550_approve', {
      argsObj: Arc11550AccountingArgs['obj']['arc11550_approve((address,address,uint64),(uint64,uint64))void']
      argsTuple: Arc11550AccountingArgs['tuple']['arc11550_approve((address,address,uint64),(uint64,uint64))void']
      returns: Arc11550AccountingReturns['arc11550_approve((address,address,uint64),(uint64,uint64))void']
    }>
    & Record<'arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void' | 'arc11550_setApprovals', {
      argsObj: Arc11550AccountingArgs['obj']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']
      argsTuple: Arc11550AccountingArgs['tuple']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']
      returns: Arc11550AccountingReturns['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']
    }>
    & Record<'doTransfers((uint64,address,address,uint64)[])void' | 'doTransfers', {
      argsObj: Arc11550AccountingArgs['obj']['doTransfers((uint64,address,address,uint64)[])void']
      argsTuple: Arc11550AccountingArgs['tuple']['doTransfers((uint64,address,address,uint64)[])void']
      returns: Arc11550AccountingReturns['doTransfers((uint64,address,address,uint64)[])void']
    }>
    & Record<'doMint((byte[32],byte[8],uint64,uint64,address))uint64' | 'doMint', {
      argsObj: Arc11550AccountingArgs['obj']['doMint((byte[32],byte[8],uint64,uint64,address))uint64']
      argsTuple: Arc11550AccountingArgs['tuple']['doMint((byte[32],byte[8],uint64,uint64,address))uint64']
      returns: Arc11550AccountingReturns['doMint((byte[32],byte[8],uint64,uint64,address))uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        minted: bigint
        transferApp: bigint
        mintCap: bigint
        minter: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        params: Map<bigint | number, Params>
        balances: Map<IdAndAddress, bigint>
        metadata: Map<MetadataKey, Metadata>
        allowances: Map<AllowanceKey, Allowance>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Arc11550AccountingSignatures = keyof Arc11550AccountingTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Arc11550AccountingNonVoidMethodSignatures = keyof Arc11550AccountingTypes['methods'] extends infer T ? T extends keyof Arc11550AccountingTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Arc11550Accounting smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Arc11550AccountingSignatures> = Arc11550AccountingTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc11550Accounting smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc11550AccountingSignatures> = Arc11550AccountingTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = Arc11550AccountingTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = Arc11550AccountingTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Arc11550AccountingCreateCallParams =
  | Expand<CallParams<Arc11550AccountingArgs['obj']['createApplication(uint64,uint64)void'] | Arc11550AccountingArgs['tuple']['createApplication(uint64,uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<Arc11550AccountingArgs['obj']['createApplication(uint64,uint64)void'] | Arc11550AccountingArgs['tuple']['createApplication(uint64,uint64)void']> & {method: 'createApplication(uint64,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Arc11550AccountingDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Arc11550AccountingCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc11550Accounting smart contract
 */
export abstract class Arc11550AccountingParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends Arc11550AccountingCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(uint64,uint64)void':
            return Arc11550AccountingParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ARC11550Accounting smart contract using the createApplication(uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<Arc11550AccountingArgs['obj']['createApplication(uint64,uint64)void'] | Arc11550AccountingArgs['tuple']['createApplication(uint64,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(uint64,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.transferApp, params.args.mintCap],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the arc11550_minted()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Minted(params: CallParams<Arc11550AccountingArgs['obj']['arc11550_minted()uint64'] | Arc11550AccountingArgs['tuple']['arc11550_minted()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_minted()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc11550_metadata((uint64,string))(bool,byte[]) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Metadata(params: CallParams<Arc11550AccountingArgs['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550AccountingArgs['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_metadata((uint64,string))(bool,byte[])' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
  /**
   * Constructs a no op call for the arc11550_setMetadata((uint64,string),byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550SetMetadata(params: CallParams<Arc11550AccountingArgs['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550AccountingArgs['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_setMetadata((uint64,string),byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc11550_balanceOf(uint64,address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550BalanceOf(params: CallParams<Arc11550AccountingArgs['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550AccountingArgs['tuple']['arc11550_balanceOf(uint64,address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_balanceOf(uint64,address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id, params.args.account],
    }
  }
  /**
   * Constructs a no op call for the arc11550_balancesOf((uint64,address)[])uint64[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550BalancesOf(params: CallParams<Arc11550AccountingArgs['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550AccountingArgs['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_balancesOf((uint64,address)[])uint64[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.idAndAddrs],
    }
  }
  /**
   * Constructs a no op call for the arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Params(params: CallParams<Arc11550AccountingArgs['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | Arc11550AccountingArgs['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id],
    }
  }
  /**
   * Constructs a no op call for the arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550MulitpleParams(params: CallParams<Arc11550AccountingArgs['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | Arc11550AccountingArgs['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.ids],
    }
  }
  /**
   * Constructs a no op call for the arc11550_approve((address,address,uint64),(uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Approve(params: CallParams<Arc11550AccountingArgs['obj']['arc11550_approve((address,address,uint64),(uint64,uint64))void'] | Arc11550AccountingArgs['tuple']['arc11550_approve((address,address,uint64),(uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_approve((address,address,uint64),(uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.allowanceKey, params.args.allowance],
    }
  }
  /**
   * Constructs a no op call for the arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550SetApprovals(params: CallParams<Arc11550AccountingArgs['obj']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void'] | Arc11550AccountingArgs['tuple']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.allowances],
    }
  }
  /**
   * Constructs a no op call for the doTransfers((uint64,address,address,uint64)[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static doTransfers(params: CallParams<Arc11550AccountingArgs['obj']['doTransfers((uint64,address,address,uint64)[])void'] | Arc11550AccountingArgs['tuple']['doTransfers((uint64,address,address,uint64)[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'doTransfers((uint64,address,address,uint64)[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.transfers],
    }
  }
  /**
   * Constructs a no op call for the doMint((byte[32],byte[8],uint64,uint64,address))uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static doMint(params: CallParams<Arc11550AccountingArgs['obj']['doMint((byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550AccountingArgs['tuple']['doMint((byte[32],byte[8],uint64,uint64,address))uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'doMint((byte[32],byte[8],uint64,uint64,address))uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.params],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ARC11550Accounting smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Arc11550AccountingFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Arc11550AccountingFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Arc11550AccountingClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Arc11550AccountingClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ARC11550Accounting smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Arc11550AccountingDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? Arc11550AccountingParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (Arc11550AccountingCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new Arc11550AccountingClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Accounting smart contract using the createApplication(uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<Arc11550AccountingArgs['obj']['createApplication(uint64,uint64)void'] | Arc11550AccountingArgs['tuple']['createApplication(uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(Arc11550AccountingParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Accounting smart contract using the createApplication(uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<Arc11550AccountingArgs['obj']['createApplication(uint64,uint64)void'] | Arc11550AccountingArgs['tuple']['createApplication(uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(Arc11550AccountingParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Accounting smart contract using an ABI method call using the createApplication(uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<Arc11550AccountingArgs['obj']['createApplication(uint64,uint64)void'] | Arc11550AccountingArgs['tuple']['createApplication(uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(Arc11550AccountingParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | Arc11550AccountingReturns['createApplication(uint64,uint64)void']) }, appClient: new Arc11550AccountingClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ARC11550Accounting smart contract
 */
export class Arc11550AccountingClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Arc11550AccountingClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Arc11550Accounting app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Arc11550AccountingClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Arc11550AccountingNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Arc11550AccountingClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Arc11550AccountingClient> {
    return new Arc11550AccountingClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Arc11550AccountingClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Arc11550AccountingClient> {
    return new Arc11550AccountingClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Accounting smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_minted()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Minted: (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_minted()uint64'] | Arc11550AccountingArgs['tuple']['arc11550_minted()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc11550AccountingParamsFactory.arc11550Minted(params))
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_metadata((uint64,string))(bool,byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Metadata: (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550AccountingArgs['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550AccountingParamsFactory.arc11550Metadata(params))
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_setMetadata((uint64,string),byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550SetMetadata: (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550AccountingArgs['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550AccountingParamsFactory.arc11550SetMetadata(params))
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_balanceOf(uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550BalanceOf: (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550AccountingArgs['tuple']['arc11550_balanceOf(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550AccountingParamsFactory.arc11550BalanceOf(params))
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_balancesOf((uint64,address)[])uint64[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550BalancesOf: (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550AccountingArgs['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550AccountingParamsFactory.arc11550BalancesOf(params))
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Params: (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | Arc11550AccountingArgs['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550AccountingParamsFactory.arc11550Params(params))
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550MulitpleParams: (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | Arc11550AccountingArgs['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550AccountingParamsFactory.arc11550MulitpleParams(params))
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_approve((address,address,uint64),(uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Approve: (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_approve((address,address,uint64),(uint64,uint64))void'] | Arc11550AccountingArgs['tuple']['arc11550_approve((address,address,uint64),(uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550AccountingParamsFactory.arc11550Approve(params))
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550SetApprovals: (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void'] | Arc11550AccountingArgs['tuple']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550AccountingParamsFactory.arc11550SetApprovals(params))
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `doTransfers((uint64,address,address,uint64)[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    doTransfers: (params: CallParams<Arc11550AccountingArgs['obj']['doTransfers((uint64,address,address,uint64)[])void'] | Arc11550AccountingArgs['tuple']['doTransfers((uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550AccountingParamsFactory.doTransfers(params))
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `doMint((byte[32],byte[8],uint64,uint64,address))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    doMint: (params: CallParams<Arc11550AccountingArgs['obj']['doMint((byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550AccountingArgs['tuple']['doMint((byte[32],byte[8],uint64,uint64,address))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550AccountingParamsFactory.doMint(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Accounting smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_minted()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Minted: (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_minted()uint64'] | Arc11550AccountingArgs['tuple']['arc11550_minted()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc11550AccountingParamsFactory.arc11550Minted(params))
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_metadata((uint64,string))(bool,byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Metadata: (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550AccountingArgs['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550AccountingParamsFactory.arc11550Metadata(params))
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_setMetadata((uint64,string),byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550SetMetadata: (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550AccountingArgs['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550AccountingParamsFactory.arc11550SetMetadata(params))
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_balanceOf(uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550BalanceOf: (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550AccountingArgs['tuple']['arc11550_balanceOf(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550AccountingParamsFactory.arc11550BalanceOf(params))
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_balancesOf((uint64,address)[])uint64[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550BalancesOf: (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550AccountingArgs['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550AccountingParamsFactory.arc11550BalancesOf(params))
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Params: (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | Arc11550AccountingArgs['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550AccountingParamsFactory.arc11550Params(params))
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550MulitpleParams: (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | Arc11550AccountingArgs['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550AccountingParamsFactory.arc11550MulitpleParams(params))
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_approve((address,address,uint64),(uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Approve: (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_approve((address,address,uint64),(uint64,uint64))void'] | Arc11550AccountingArgs['tuple']['arc11550_approve((address,address,uint64),(uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550AccountingParamsFactory.arc11550Approve(params))
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550SetApprovals: (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void'] | Arc11550AccountingArgs['tuple']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550AccountingParamsFactory.arc11550SetApprovals(params))
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `doTransfers((uint64,address,address,uint64)[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    doTransfers: (params: CallParams<Arc11550AccountingArgs['obj']['doTransfers((uint64,address,address,uint64)[])void'] | Arc11550AccountingArgs['tuple']['doTransfers((uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550AccountingParamsFactory.doTransfers(params))
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `doMint((byte[32],byte[8],uint64,uint64,address))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    doMint: (params: CallParams<Arc11550AccountingArgs['obj']['doMint((byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550AccountingArgs['tuple']['doMint((byte[32],byte[8],uint64,uint64,address))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550AccountingParamsFactory.doMint(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Accounting smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_minted()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Minted: async (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_minted()uint64'] | Arc11550AccountingArgs['tuple']['arc11550_minted()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc11550AccountingParamsFactory.arc11550Minted(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550AccountingReturns['arc11550_minted()uint64'])}
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_metadata((uint64,string))(bool,byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Metadata: async (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550AccountingArgs['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550AccountingParamsFactory.arc11550Metadata(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550AccountingReturns['arc11550_metadata((uint64,string))(bool,byte[])'])}
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_setMetadata((uint64,string),byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550SetMetadata: async (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550AccountingArgs['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550AccountingParamsFactory.arc11550SetMetadata(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550AccountingReturns['arc11550_setMetadata((uint64,string),byte[])void'])}
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_balanceOf(uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550BalanceOf: async (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550AccountingArgs['tuple']['arc11550_balanceOf(uint64,address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550AccountingParamsFactory.arc11550BalanceOf(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550AccountingReturns['arc11550_balanceOf(uint64,address)uint64'])}
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_balancesOf((uint64,address)[])uint64[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550BalancesOf: async (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550AccountingArgs['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550AccountingParamsFactory.arc11550BalancesOf(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550AccountingReturns['arc11550_balancesOf((uint64,address)[])uint64[]'])}
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Params: async (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | Arc11550AccountingArgs['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550AccountingParamsFactory.arc11550Params(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550AccountingReturns['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'])}
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550MulitpleParams: async (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | Arc11550AccountingArgs['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550AccountingParamsFactory.arc11550MulitpleParams(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550AccountingReturns['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'])}
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_approve((address,address,uint64),(uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Approve: async (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_approve((address,address,uint64),(uint64,uint64))void'] | Arc11550AccountingArgs['tuple']['arc11550_approve((address,address,uint64),(uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550AccountingParamsFactory.arc11550Approve(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550AccountingReturns['arc11550_approve((address,address,uint64),(uint64,uint64))void'])}
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550SetApprovals: async (params: CallParams<Arc11550AccountingArgs['obj']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void'] | Arc11550AccountingArgs['tuple']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550AccountingParamsFactory.arc11550SetApprovals(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550AccountingReturns['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void'])}
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `doTransfers((uint64,address,address,uint64)[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    doTransfers: async (params: CallParams<Arc11550AccountingArgs['obj']['doTransfers((uint64,address,address,uint64)[])void'] | Arc11550AccountingArgs['tuple']['doTransfers((uint64,address,address,uint64)[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550AccountingParamsFactory.doTransfers(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550AccountingReturns['doTransfers((uint64,address,address,uint64)[])void'])}
    },

    /**
     * Makes a call to the ARC11550Accounting smart contract using the `doMint((byte[32],byte[8],uint64,uint64,address))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    doMint: async (params: CallParams<Arc11550AccountingArgs['obj']['doMint((byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550AccountingArgs['tuple']['doMint((byte[32],byte[8],uint64,uint64,address))uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550AccountingParamsFactory.doMint(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550AccountingReturns['doMint((byte[32],byte[8],uint64,uint64,address))uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Arc11550AccountingClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ARC11550Accounting app
   */
  state = {
    /**
     * Methods to access global state for the current ARC11550Accounting app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          minted: result.minted,
          transferApp: result.transferApp,
          mintCap: result.mintCap,
          minter: result.minter,
        }
      },
      /**
       * Get the current value of the minted key in global state
       */
      minted: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("minted")) as bigint | undefined },
      /**
       * Get the current value of the transferApp key in global state
       */
      transferApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("transferApp")) as bigint | undefined },
      /**
       * Get the current value of the mintCap key in global state
       */
      mintCap: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("mintCap")) as bigint | undefined },
      /**
       * Get the current value of the minter key in global state
       */
      minter: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("minter")) as string | undefined },
    },
    /**
     * Methods to access box state for the current ARC11550Accounting app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the params map in box state
       */
      params: {
        /**
         * Get all current values of the params map in box state
         */
        getMap: async (): Promise<Map<bigint, Params>> => { return (await this.appClient.state.box.getMap("params")) as Map<bigint, Params> },
        /**
         * Get a current value of the params map by key from box state
         */
        value: async (key: bigint | number): Promise<Params | undefined> => { return await this.appClient.state.box.getMapValue("params", key) as Params | undefined },
      },
      /**
       * Get values from the balances map in box state
       */
      balances: {
        /**
         * Get all current values of the balances map in box state
         */
        getMap: async (): Promise<Map<IdAndAddress, bigint>> => { return (await this.appClient.state.box.getMap("balances")) as Map<IdAndAddress, bigint> },
        /**
         * Get a current value of the balances map by key from box state
         */
        value: async (key: IdAndAddress): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("balances", key) as bigint | undefined },
      },
      /**
       * Get values from the metadata map in box state
       */
      metadata: {
        /**
         * Get all current values of the metadata map in box state
         */
        getMap: async (): Promise<Map<MetadataKey, Metadata>> => { return (await this.appClient.state.box.getMap("metadata")) as Map<MetadataKey, Metadata> },
        /**
         * Get a current value of the metadata map by key from box state
         */
        value: async (key: MetadataKey): Promise<Metadata | undefined> => { return await this.appClient.state.box.getMapValue("metadata", key) as Metadata | undefined },
      },
      /**
       * Get values from the allowances map in box state
       */
      allowances: {
        /**
         * Get all current values of the allowances map in box state
         */
        getMap: async (): Promise<Map<AllowanceKey, Allowance>> => { return (await this.appClient.state.box.getMap("allowances")) as Map<AllowanceKey, Allowance> },
        /**
         * Get a current value of the allowances map by key from box state
         */
        value: async (key: AllowanceKey): Promise<Allowance | undefined> => { return await this.appClient.state.box.getMapValue("allowances", key) as Allowance | undefined },
      },
    },
  }

  public newGroup(): Arc11550AccountingComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a arc11550_minted()uint64 method call against the ARC11550Accounting contract
       */
      arc11550Minted(params: CallParams<Arc11550AccountingArgs['obj']['arc11550_minted()uint64'] | Arc11550AccountingArgs['tuple']['arc11550_minted()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Minted(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_minted()uint64', v))
        return this
      },
      /**
       * Add a arc11550_metadata((uint64,string))(bool,byte[]) method call against the ARC11550Accounting contract
       */
      arc11550Metadata(params: CallParams<Arc11550AccountingArgs['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550AccountingArgs['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Metadata(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_metadata((uint64,string))(bool,byte[])', v))
        return this
      },
      /**
       * Add a arc11550_setMetadata((uint64,string),byte[])void method call against the ARC11550Accounting contract
       */
      arc11550SetMetadata(params: CallParams<Arc11550AccountingArgs['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550AccountingArgs['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550SetMetadata(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc11550_balanceOf(uint64,address)uint64 method call against the ARC11550Accounting contract
       */
      arc11550BalanceOf(params: CallParams<Arc11550AccountingArgs['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550AccountingArgs['tuple']['arc11550_balanceOf(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550BalanceOf(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_balanceOf(uint64,address)uint64', v))
        return this
      },
      /**
       * Add a arc11550_balancesOf((uint64,address)[])uint64[] method call against the ARC11550Accounting contract
       */
      arc11550BalancesOf(params: CallParams<Arc11550AccountingArgs['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550AccountingArgs['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550BalancesOf(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_balancesOf((uint64,address)[])uint64[]', v))
        return this
      },
      /**
       * Add a arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address) method call against the ARC11550Accounting contract
       */
      arc11550Params(params: CallParams<Arc11550AccountingArgs['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | Arc11550AccountingArgs['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Params(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)', v))
        return this
      },
      /**
       * Add a arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[] method call against the ARC11550Accounting contract
       */
      arc11550MulitpleParams(params: CallParams<Arc11550AccountingArgs['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | Arc11550AccountingArgs['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550MulitpleParams(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]', v))
        return this
      },
      /**
       * Add a arc11550_approve((address,address,uint64),(uint64,uint64))void method call against the ARC11550Accounting contract
       */
      arc11550Approve(params: CallParams<Arc11550AccountingArgs['obj']['arc11550_approve((address,address,uint64),(uint64,uint64))void'] | Arc11550AccountingArgs['tuple']['arc11550_approve((address,address,uint64),(uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Approve(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void method call against the ARC11550Accounting contract
       */
      arc11550SetApprovals(params: CallParams<Arc11550AccountingArgs['obj']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void'] | Arc11550AccountingArgs['tuple']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550SetApprovals(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a doTransfers((uint64,address,address,uint64)[])void method call against the ARC11550Accounting contract
       */
      doTransfers(params: CallParams<Arc11550AccountingArgs['obj']['doTransfers((uint64,address,address,uint64)[])void'] | Arc11550AccountingArgs['tuple']['doTransfers((uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.doTransfers(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a doMint((byte[32],byte[8],uint64,uint64,address))uint64 method call against the ARC11550Accounting contract
       */
      doMint(params: CallParams<Arc11550AccountingArgs['obj']['doMint((byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550AccountingArgs['tuple']['doMint((byte[32],byte[8],uint64,uint64,address))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.doMint(params)))
        resultMappers.push((v) => client.decodeReturnValue('doMint((byte[32],byte[8],uint64,uint64,address))uint64', v))
        return this
      },
      /**
       * Add a clear state call to the ARC11550Accounting contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Arc11550AccountingComposer
  }
}
export type Arc11550AccountingComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc11550_minted()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Minted(params?: CallParams<Arc11550AccountingArgs['obj']['arc11550_minted()uint64'] | Arc11550AccountingArgs['tuple']['arc11550_minted()uint64']>): Arc11550AccountingComposer<[...TReturns, Arc11550AccountingReturns['arc11550_minted()uint64'] | undefined]>

  /**
   * Calls the arc11550_metadata((uint64,string))(bool,byte[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Metadata(params?: CallParams<Arc11550AccountingArgs['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550AccountingArgs['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']>): Arc11550AccountingComposer<[...TReturns, Arc11550AccountingReturns['arc11550_metadata((uint64,string))(bool,byte[])'] | undefined]>

  /**
   * Calls the arc11550_setMetadata((uint64,string),byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550SetMetadata(params?: CallParams<Arc11550AccountingArgs['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550AccountingArgs['tuple']['arc11550_setMetadata((uint64,string),byte[])void']>): Arc11550AccountingComposer<[...TReturns, Arc11550AccountingReturns['arc11550_setMetadata((uint64,string),byte[])void'] | undefined]>

  /**
   * Calls the arc11550_balanceOf(uint64,address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550BalanceOf(params?: CallParams<Arc11550AccountingArgs['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550AccountingArgs['tuple']['arc11550_balanceOf(uint64,address)uint64']>): Arc11550AccountingComposer<[...TReturns, Arc11550AccountingReturns['arc11550_balanceOf(uint64,address)uint64'] | undefined]>

  /**
   * Calls the arc11550_balancesOf((uint64,address)[])uint64[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550BalancesOf(params?: CallParams<Arc11550AccountingArgs['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550AccountingArgs['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']>): Arc11550AccountingComposer<[...TReturns, Arc11550AccountingReturns['arc11550_balancesOf((uint64,address)[])uint64[]'] | undefined]>

  /**
   * Calls the arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Params(params?: CallParams<Arc11550AccountingArgs['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | Arc11550AccountingArgs['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']>): Arc11550AccountingComposer<[...TReturns, Arc11550AccountingReturns['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | undefined]>

  /**
   * Calls the arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550MulitpleParams(params?: CallParams<Arc11550AccountingArgs['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | Arc11550AccountingArgs['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']>): Arc11550AccountingComposer<[...TReturns, Arc11550AccountingReturns['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | undefined]>

  /**
   * Calls the arc11550_approve((address,address,uint64),(uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Approve(params?: CallParams<Arc11550AccountingArgs['obj']['arc11550_approve((address,address,uint64),(uint64,uint64))void'] | Arc11550AccountingArgs['tuple']['arc11550_approve((address,address,uint64),(uint64,uint64))void']>): Arc11550AccountingComposer<[...TReturns, Arc11550AccountingReturns['arc11550_approve((address,address,uint64),(uint64,uint64))void'] | undefined]>

  /**
   * Calls the arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550SetApprovals(params?: CallParams<Arc11550AccountingArgs['obj']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void'] | Arc11550AccountingArgs['tuple']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']>): Arc11550AccountingComposer<[...TReturns, Arc11550AccountingReturns['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void'] | undefined]>

  /**
   * Calls the doTransfers((uint64,address,address,uint64)[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  doTransfers(params?: CallParams<Arc11550AccountingArgs['obj']['doTransfers((uint64,address,address,uint64)[])void'] | Arc11550AccountingArgs['tuple']['doTransfers((uint64,address,address,uint64)[])void']>): Arc11550AccountingComposer<[...TReturns, Arc11550AccountingReturns['doTransfers((uint64,address,address,uint64)[])void'] | undefined]>

  /**
   * Calls the doMint((byte[32],byte[8],uint64,uint64,address))uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  doMint(params?: CallParams<Arc11550AccountingArgs['obj']['doMint((byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550AccountingArgs['tuple']['doMint((byte[32],byte[8],uint64,uint64,address))uint64']>): Arc11550AccountingComposer<[...TReturns, Arc11550AccountingReturns['doMint((byte[32],byte[8],uint64,uint64,address))uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ARC11550Accounting smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Arc11550AccountingComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc11550AccountingComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc11550AccountingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Arc11550AccountingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Arc11550AccountingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Arc11550AccountingComposerResults<TReturns>>
}
export type Arc11550AccountingComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


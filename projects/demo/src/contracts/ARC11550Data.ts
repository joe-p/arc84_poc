/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ARC11550Data","desc":"","methods":[{"name":"createApplication","args":[{"name":"transferApp","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"arc11550_newCollection","args":[{"name":"manager","type":"address"},{"name":"mintCap","type":"uint64"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_collection_minted","desc":"***************\nGetter Methods\n***************","args":[{"name":"id","type":"uint64"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_metadata","args":[{"name":"key","type":"(uint64,byte[])","struct":"MetadataKey"}],"returns":{"type":"(bool,byte[])","struct":"Metadata"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_balanceOf","args":[{"name":"id","type":"uint64"},{"name":"account","type":"address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_params","args":[{"name":"id","type":"uint64"}],"returns":{"type":"(byte[32],byte[8],uint64,uint64,address,uint64)","struct":"Params"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_transferApp","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_transferHookApp","args":[{"name":"id","type":"uint64"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_balancesOf","desc":"********************\nMulti Getter Methods\n********************","args":[{"name":"idAndAddrs","type":"(uint64,address)[]"}],"returns":{"type":"uint64[]"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_mulitpleParams","args":[{"name":"ids","type":"uint64[]"}],"returns":{"type":"(byte[32],byte[8],uint64,uint64,address,uint64)[]"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_setMetadata","desc":"***************\nSetter methods\n***************","args":[{"name":"key","type":"(uint64,byte[])","struct":"MetadataKey"},{"name":"data","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_setAllowance","args":[{"name":"allowanceKey","type":"(address,address,uint64)","struct":"AllowanceKey"},{"name":"allowance","type":"(uint64,uint64,uint64,uint64,uint64)","struct":"Allowance"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_setAllowances","desc":"********************\nMulti Setter Methods\n********************","args":[{"name":"allowances","type":"((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"doTransfers","desc":"*********************\nTransfer/Mint Methods\n*********************","args":[{"name":"sender","type":"address"},{"name":"transfers","type":"(uint64,address,address,uint64)[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_mint","args":[{"name":"collectionId","type":"uint64"},{"name":"params","type":"(byte[32],byte[8],uint64,uint64,address,uint64)","struct":"Params"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"Params":[{"name":"name","type":"byte[32]"},{"name":"symbol","type":"byte[8]"},{"name":"total","type":"uint64"},{"name":"decimals","type":"uint64"},{"name":"manager","type":"address"},{"name":"transferHookApp","type":"uint64"}],"IdAndAddress":[{"name":"tokenId","type":"uint64"},{"name":"address","type":"address"}],"Metadata":[{"name":"mutable","type":"bool"},{"name":"data","type":"byte[]"}],"MetadataKey":[{"name":"id","type":"uint64"},{"name":"key","type":"byte[]"}],"Allowance":[{"name":"amount","type":"uint64"},{"name":"remainingAmount","type":"uint64"},{"name":"cooldown","type":"uint64"},{"name":"lastUsed","type":"uint64"},{"name":"expirationTimestamp","type":"uint64"}],"Collection":[{"name":"minted","type":"uint64"},{"name":"mintCap","type":"uint64"},{"name":"manager","type":"address"}],"AllowanceKey":[{"name":"holder","type":"address"},{"name":"sender","type":"address"},{"name":"tokenId","type":"uint64"}]},"state":{"schema":{"global":{"bytes":0,"ints":2},"local":{"bytes":0,"ints":0}},"keys":{"global":{"transferApp":{"key":"dHJhbnNmZXJBcHA=","keyType":"AVMBytes","valueType":"uint64"},"collectionId":{"key":"Y29sbGVjdGlvbklk","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"params":{"keyType":"uint64","valueType":"Params","prefix":"cA=="},"balances":{"keyType":"IdAndAddress","valueType":"uint64","prefix":"Yg=="},"tokenMetadata":{"keyType":"MetadataKey","valueType":"Metadata","prefix":"bQ=="},"collectionMetadata":{"keyType":"MetadataKey","valueType":"Metadata","prefix":"TQ=="},"allowances":{"keyType":"byte[32]","valueType":"Allowance","prefix":"YQ=="},"collections":{"keyType":"uint64","valueType":"Collection","prefix":"Yw=="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/ARC11550Data.algo.ts:63","pc":[0]},{"teal":2,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]},{"teal":3,"source":"contracts/ARC11550Data.algo.ts:63","pc":[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58]},{"teal":15,"source":"contracts/ARC11550Data.algo.ts:63","pc":[59,60]},{"teal":16,"source":"contracts/ARC11550Data.algo.ts:63","pc":[61]},{"teal":17,"source":"contracts/ARC11550Data.algo.ts:63","pc":[62,63]},{"teal":18,"source":"contracts/ARC11550Data.algo.ts:63","pc":[64]},{"teal":19,"source":"contracts/ARC11550Data.algo.ts:63","pc":[65,66]},{"teal":20,"source":"contracts/ARC11550Data.algo.ts:63","pc":[67]},{"teal":21,"source":"contracts/ARC11550Data.algo.ts:63","pc":[68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93]},{"teal":25,"source":"contracts/ARC11550Data.algo.ts:63","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[94]},{"teal":30,"source":"contracts/ARC11550Data.algo.ts:86","pc":[95,96,97]},{"teal":31,"source":"contracts/ARC11550Data.algo.ts:86","pc":[98]},{"teal":34,"source":"contracts/ARC11550Data.algo.ts:86","pc":[99,100,101]},{"teal":35,"source":"contracts/ARC11550Data.algo.ts:86","pc":[102]},{"teal":36,"source":"contracts/ARC11550Data.algo.ts:86","pc":[103]},{"teal":40,"source":"contracts/ARC11550Data.algo.ts:86","pc":[104,105,106]},{"teal":44,"source":"contracts/ARC11550Data.algo.ts:87","pc":[107,108]},{"teal":45,"source":"contracts/ARC11550Data.algo.ts:87","pc":[109,110]},{"teal":46,"source":"contracts/ARC11550Data.algo.ts:87","pc":[111]},{"teal":47,"source":"contracts/ARC11550Data.algo.ts:86","pc":[112]},{"teal":52,"source":"contracts/ARC11550Data.algo.ts:90","pc":[113]},{"teal":55,"source":"contracts/ARC11550Data.algo.ts:90","pc":[114,115,116]},{"teal":56,"source":"contracts/ARC11550Data.algo.ts:90","pc":[117]},{"teal":59,"source":"contracts/ARC11550Data.algo.ts:90","pc":[118,119,120]},{"teal":60,"source":"contracts/ARC11550Data.algo.ts:90","pc":[121]},{"teal":61,"source":"contracts/ARC11550Data.algo.ts:90","pc":[122]},{"teal":62,"source":"contracts/ARC11550Data.algo.ts:90","pc":[123,124]},{"teal":63,"source":"contracts/ARC11550Data.algo.ts:90","pc":[125]},{"teal":66,"source":"contracts/ARC11550Data.algo.ts:90","errorMessage":"argument 1 (manager) for arc11550_newCollection must be a address","pc":[126]},{"teal":69,"source":"contracts/ARC11550Data.algo.ts:90","pc":[127,128,129]},{"teal":70,"source":"contracts/ARC11550Data.algo.ts:90","pc":[130]},{"teal":71,"source":"contracts/ARC11550Data.algo.ts:90","pc":[131]},{"teal":72,"source":"contracts/ARC11550Data.algo.ts:90","pc":[132]},{"teal":73,"source":"contracts/ARC11550Data.algo.ts:90","pc":[133]},{"teal":74,"source":"contracts/ARC11550Data.algo.ts:90","pc":[134]},{"teal":78,"source":"contracts/ARC11550Data.algo.ts:90","pc":[135,136,137]},{"teal":81,"source":"contracts/ARC11550Data.algo.ts:90","pc":[138]},{"teal":82,"source":"contracts/ARC11550Data.algo.ts:90","pc":[139]},{"teal":86,"source":"contracts/ARC11550Data.algo.ts:91","pc":[140,141]},{"teal":87,"source":"contracts/ARC11550Data.algo.ts:91","pc":[142]},{"teal":88,"source":"contracts/ARC11550Data.algo.ts:91","pc":[143,144]},{"teal":92,"source":"contracts/ARC11550Data.algo.ts:92","pc":[145,146]},{"teal":93,"source":"contracts/ARC11550Data.algo.ts:92","pc":[147]},{"teal":94,"source":"contracts/ARC11550Data.algo.ts:92","pc":[148]},{"teal":95,"source":"contracts/ARC11550Data.algo.ts:92","pc":[149]},{"teal":96,"source":"contracts/ARC11550Data.algo.ts:92","pc":[150,151]},{"teal":97,"source":"contracts/ARC11550Data.algo.ts:92","pc":[152]},{"teal":98,"source":"contracts/ARC11550Data.algo.ts:92","pc":[153]},{"teal":106,"source":"contracts/ARC11550Data.algo.ts:97","pc":[154,155,156,157,158,159,160,161,162,163]},{"teal":107,"source":"contracts/ARC11550Data.algo.ts:96","pc":[164,165]},{"teal":108,"source":"contracts/ARC11550Data.algo.ts:96","pc":[166]},{"teal":109,"source":"contracts/ARC11550Data.algo.ts:96","pc":[167]},{"teal":110,"source":"contracts/ARC11550Data.algo.ts:95","pc":[168,169]},{"teal":111,"source":"contracts/ARC11550Data.algo.ts:95","pc":[170]},{"teal":112,"source":"contracts/ARC11550Data.algo.ts:94","pc":[171,172]},{"teal":116,"source":"contracts/ARC11550Data.algo.ts:100","pc":[173,174]},{"teal":117,"source":"contracts/ARC11550Data.algo.ts:100","pc":[175,176]},{"teal":118,"source":"contracts/ARC11550Data.algo.ts:100","pc":[177]},{"teal":119,"source":"contracts/ARC11550Data.algo.ts:100","pc":[178]},{"teal":120,"source":"contracts/ARC11550Data.algo.ts:100","pc":[179,180]},{"teal":121,"source":"contracts/ARC11550Data.algo.ts:100","pc":[181]},{"teal":125,"source":"contracts/ARC11550Data.algo.ts:102","pc":[182,183]},{"teal":128,"source":"contracts/ARC11550Data.algo.ts:90","pc":[184,185]},{"teal":131,"source":"contracts/ARC11550Data.algo.ts:90","pc":[186,187]},{"teal":132,"source":"contracts/ARC11550Data.algo.ts:90","pc":[188]},{"teal":137,"source":"contracts/ARC11550Data.algo.ts:109","pc":[189]},{"teal":140,"source":"contracts/ARC11550Data.algo.ts:109","pc":[190,191,192]},{"teal":141,"source":"contracts/ARC11550Data.algo.ts:109","pc":[193]},{"teal":144,"source":"contracts/ARC11550Data.algo.ts:109","pc":[194,195,196]},{"teal":145,"source":"contracts/ARC11550Data.algo.ts:109","pc":[197]},{"teal":146,"source":"contracts/ARC11550Data.algo.ts:109","pc":[198]},{"teal":147,"source":"contracts/ARC11550Data.algo.ts:109","pc":[199]},{"teal":148,"source":"contracts/ARC11550Data.algo.ts:109","pc":[200]},{"teal":149,"source":"contracts/ARC11550Data.algo.ts:109","pc":[201]},{"teal":157,"source":"contracts/ARC11550Data.algo.ts:109","pc":[202,203,204]},{"teal":161,"source":"contracts/ARC11550Data.algo.ts:110","pc":[205]},{"teal":162,"source":"contracts/ARC11550Data.algo.ts:110","pc":[206]},{"teal":163,"source":"contracts/ARC11550Data.algo.ts:110","pc":[207,208]},{"teal":164,"source":"contracts/ARC11550Data.algo.ts:110","pc":[209,210]},{"teal":165,"source":"contracts/ARC11550Data.algo.ts:110","pc":[211]},{"teal":166,"source":"contracts/ARC11550Data.algo.ts:110","pc":[212]},{"teal":167,"source":"contracts/ARC11550Data.algo.ts:110","pc":[213,214]},{"teal":168,"source":"contracts/ARC11550Data.algo.ts:110","pc":[215]},{"teal":169,"source":"contracts/ARC11550Data.algo.ts:110","pc":[216]},{"teal":170,"source":"contracts/ARC11550Data.algo.ts:109","pc":[217]},{"teal":175,"source":"contracts/ARC11550Data.algo.ts:113","pc":[218]},{"teal":178,"source":"contracts/ARC11550Data.algo.ts:113","pc":[219,220,221]},{"teal":181,"source":"contracts/ARC11550Data.algo.ts:113","pc":[222,223,224]},{"teal":182,"source":"contracts/ARC11550Data.algo.ts:113","pc":[225]},{"teal":183,"source":"contracts/ARC11550Data.algo.ts:113","pc":[226]},{"teal":184,"source":"contracts/ARC11550Data.algo.ts:113","pc":[227]},{"teal":185,"source":"contracts/ARC11550Data.algo.ts:113","pc":[228]},{"teal":189,"source":"contracts/ARC11550Data.algo.ts:113","pc":[229,230,231]},{"teal":193,"source":"contracts/ARC11550Data.algo.ts:114","pc":[232,233]},{"teal":194,"source":"contracts/ARC11550Data.algo.ts:114","pc":[234,235]},{"teal":195,"source":"contracts/ARC11550Data.algo.ts:114","pc":[236]},{"teal":196,"source":"contracts/ARC11550Data.algo.ts:114","pc":[237]},{"teal":199,"source":"contracts/ARC11550Data.algo.ts:114","errorMessage":"box value does not exist: this.tokenMetadata(key).value","pc":[238]},{"teal":200,"source":"contracts/ARC11550Data.algo.ts:113","pc":[239]},{"teal":205,"source":"contracts/ARC11550Data.algo.ts:117","pc":[240]},{"teal":208,"source":"contracts/ARC11550Data.algo.ts:117","pc":[241,242,243]},{"teal":209,"source":"contracts/ARC11550Data.algo.ts:117","pc":[244]},{"teal":210,"source":"contracts/ARC11550Data.algo.ts:117","pc":[245]},{"teal":211,"source":"contracts/ARC11550Data.algo.ts:117","pc":[246,247]},{"teal":212,"source":"contracts/ARC11550Data.algo.ts:117","pc":[248]},{"teal":215,"source":"contracts/ARC11550Data.algo.ts:117","errorMessage":"argument 0 (account) for arc11550_balanceOf must be a address","pc":[249]},{"teal":218,"source":"contracts/ARC11550Data.algo.ts:117","pc":[250,251,252]},{"teal":219,"source":"contracts/ARC11550Data.algo.ts:117","pc":[253]},{"teal":222,"source":"contracts/ARC11550Data.algo.ts:117","pc":[254,255,256]},{"teal":223,"source":"contracts/ARC11550Data.algo.ts:117","pc":[257]},{"teal":224,"source":"contracts/ARC11550Data.algo.ts:117","pc":[258]},{"teal":225,"source":"contracts/ARC11550Data.algo.ts:117","pc":[259]},{"teal":226,"source":"contracts/ARC11550Data.algo.ts:117","pc":[260]},{"teal":227,"source":"contracts/ARC11550Data.algo.ts:117","pc":[261]},{"teal":231,"source":"contracts/ARC11550Data.algo.ts:117","pc":[262,263,264]},{"teal":235,"source":"contracts/ARC11550Data.algo.ts:118","pc":[265]},{"teal":236,"source":"contracts/ARC11550Data.algo.ts:118","pc":[266,267]},{"teal":237,"source":"contracts/ARC11550Data.algo.ts:118","pc":[268]},{"teal":238,"source":"contracts/ARC11550Data.algo.ts:118","pc":[269,270]},{"teal":239,"source":"contracts/ARC11550Data.algo.ts:118","pc":[271]},{"teal":240,"source":"contracts/ARC11550Data.algo.ts:118","pc":[272]},{"teal":241,"source":"contracts/ARC11550Data.algo.ts:118","pc":[273]},{"teal":244,"source":"contracts/ARC11550Data.algo.ts:118","errorMessage":"box value does not exist: this.balances({ tokenId: id, address: account }).value","pc":[274]},{"teal":245,"source":"contracts/ARC11550Data.algo.ts:118","pc":[275]},{"teal":246,"source":"contracts/ARC11550Data.algo.ts:117","pc":[276]},{"teal":251,"source":"contracts/ARC11550Data.algo.ts:121","pc":[277]},{"teal":254,"source":"contracts/ARC11550Data.algo.ts:121","pc":[278,279,280]},{"teal":255,"source":"contracts/ARC11550Data.algo.ts:121","pc":[281]},{"teal":258,"source":"contracts/ARC11550Data.algo.ts:121","pc":[282,283,284]},{"teal":259,"source":"contracts/ARC11550Data.algo.ts:121","pc":[285]},{"teal":260,"source":"contracts/ARC11550Data.algo.ts:121","pc":[286]},{"teal":261,"source":"contracts/ARC11550Data.algo.ts:121","pc":[287]},{"teal":262,"source":"contracts/ARC11550Data.algo.ts:121","pc":[288]},{"teal":266,"source":"contracts/ARC11550Data.algo.ts:121","pc":[289,290,291]},{"teal":270,"source":"contracts/ARC11550Data.algo.ts:122","pc":[292,293]},{"teal":271,"source":"contracts/ARC11550Data.algo.ts:122","pc":[294,295]},{"teal":272,"source":"contracts/ARC11550Data.algo.ts:122","pc":[296]},{"teal":273,"source":"contracts/ARC11550Data.algo.ts:122","pc":[297]},{"teal":274,"source":"contracts/ARC11550Data.algo.ts:122","pc":[298]},{"teal":277,"source":"contracts/ARC11550Data.algo.ts:122","errorMessage":"box value does not exist: this.params(id).value","pc":[299]},{"teal":278,"source":"contracts/ARC11550Data.algo.ts:121","pc":[300]},{"teal":283,"source":"contracts/ARC11550Data.algo.ts:125","pc":[301]},{"teal":286,"source":"contracts/ARC11550Data.algo.ts:125","pc":[302,303,304]},{"teal":287,"source":"contracts/ARC11550Data.algo.ts:125","pc":[305]},{"teal":288,"source":"contracts/ARC11550Data.algo.ts:125","pc":[306]},{"teal":289,"source":"contracts/ARC11550Data.algo.ts:125","pc":[307]},{"teal":290,"source":"contracts/ARC11550Data.algo.ts:125","pc":[308]},{"teal":291,"source":"contracts/ARC11550Data.algo.ts:125","pc":[309]},{"teal":295,"source":"contracts/ARC11550Data.algo.ts:125","pc":[310,311,312]},{"teal":299,"source":"contracts/ARC11550Data.algo.ts:126","pc":[313,314]},{"teal":300,"source":"contracts/ARC11550Data.algo.ts:126","pc":[315]},{"teal":301,"source":"contracts/ARC11550Data.algo.ts:125","pc":[316]},{"teal":306,"source":"contracts/ARC11550Data.algo.ts:129","pc":[317]},{"teal":309,"source":"contracts/ARC11550Data.algo.ts:129","pc":[318,319,320]},{"teal":310,"source":"contracts/ARC11550Data.algo.ts:129","pc":[321]},{"teal":313,"source":"contracts/ARC11550Data.algo.ts:129","pc":[322,323,324]},{"teal":314,"source":"contracts/ARC11550Data.algo.ts:129","pc":[325]},{"teal":315,"source":"contracts/ARC11550Data.algo.ts:129","pc":[326]},{"teal":316,"source":"contracts/ARC11550Data.algo.ts:129","pc":[327]},{"teal":317,"source":"contracts/ARC11550Data.algo.ts:129","pc":[328]},{"teal":318,"source":"contracts/ARC11550Data.algo.ts:129","pc":[329]},{"teal":322,"source":"contracts/ARC11550Data.algo.ts:129","pc":[330,331,332]},{"teal":326,"source":"contracts/ARC11550Data.algo.ts:130","pc":[333,334]},{"teal":327,"source":"contracts/ARC11550Data.algo.ts:130","pc":[335]},{"teal":328,"source":"contracts/ARC11550Data.algo.ts:130","pc":[336,337]},{"teal":329,"source":"contracts/ARC11550Data.algo.ts:130","pc":[338,339]},{"teal":330,"source":"contracts/ARC11550Data.algo.ts:130","pc":[340]},{"teal":331,"source":"contracts/ARC11550Data.algo.ts:130","pc":[341]},{"teal":332,"source":"contracts/ARC11550Data.algo.ts:130","pc":[342,343]},{"teal":333,"source":"contracts/ARC11550Data.algo.ts:130","pc":[344]},{"teal":334,"source":"contracts/ARC11550Data.algo.ts:130","pc":[345]},{"teal":335,"source":"contracts/ARC11550Data.algo.ts:129","pc":[346]},{"teal":340,"source":"contracts/ARC11550Data.algo.ts:137","pc":[347]},{"teal":343,"source":"contracts/ARC11550Data.algo.ts:137","pc":[348,349,350]},{"teal":344,"source":"contracts/ARC11550Data.algo.ts:137","pc":[351,352,353]},{"teal":347,"source":"contracts/ARC11550Data.algo.ts:137","pc":[354,355,356]},{"teal":348,"source":"contracts/ARC11550Data.algo.ts:137","pc":[357]},{"teal":349,"source":"contracts/ARC11550Data.algo.ts:137","pc":[358]},{"teal":350,"source":"contracts/ARC11550Data.algo.ts:137","pc":[359]},{"teal":351,"source":"contracts/ARC11550Data.algo.ts:137","pc":[360]},{"teal":352,"source":"contracts/ARC11550Data.algo.ts:137","pc":[361]},{"teal":353,"source":"contracts/ARC11550Data.algo.ts:137","pc":[362,363,364]},{"teal":354,"source":"contracts/ARC11550Data.algo.ts:137","pc":[365]},{"teal":355,"source":"contracts/ARC11550Data.algo.ts:137","pc":[366]},{"teal":356,"source":"contracts/ARC11550Data.algo.ts:137","pc":[367]},{"teal":357,"source":"contracts/ARC11550Data.algo.ts:137","pc":[368]},{"teal":358,"source":"contracts/ARC11550Data.algo.ts:137","pc":[369]},{"teal":359,"source":"contracts/ARC11550Data.algo.ts:137","pc":[370]},{"teal":367,"source":"contracts/ARC11550Data.algo.ts:137","pc":[371,372,373]},{"teal":370,"source":"contracts/ARC11550Data.algo.ts:137","pc":[374]},{"teal":371,"source":"contracts/ARC11550Data.algo.ts:137","pc":[375,376]},{"teal":375,"source":"contracts/ARC11550Data.algo.ts:138","pc":[377]},{"teal":376,"source":"contracts/ARC11550Data.algo.ts:138","pc":[378,379]},{"teal":380,"source":"contracts/ARC11550Data.algo.ts:139","pc":[380]},{"teal":381,"source":"contracts/ARC11550Data.algo.ts:139","pc":[381,382]},{"teal":386,"source":"contracts/ARC11550Data.algo.ts:139","pc":[383,384]},{"teal":387,"source":"contracts/ARC11550Data.algo.ts:139","pc":[385,386]},{"teal":388,"source":"contracts/ARC11550Data.algo.ts:139","pc":[387]},{"teal":389,"source":"contracts/ARC11550Data.algo.ts:139","pc":[388,389]},{"teal":390,"source":"contracts/ARC11550Data.algo.ts:139","pc":[390]},{"teal":391,"source":"contracts/ARC11550Data.algo.ts:139","pc":[391]},{"teal":392,"source":"contracts/ARC11550Data.algo.ts:139","pc":[392,393,394]},{"teal":396,"source":"contracts/ARC11550Data.algo.ts:140","pc":[395,396]},{"teal":397,"source":"contracts/ARC11550Data.algo.ts:140","pc":[397,398]},{"teal":398,"source":"contracts/ARC11550Data.algo.ts:140","pc":[399]},{"teal":399,"source":"contracts/ARC11550Data.algo.ts:140","pc":[400,401]},{"teal":400,"source":"contracts/ARC11550Data.algo.ts:140","pc":[402,403]},{"teal":401,"source":"contracts/ARC11550Data.algo.ts:140","pc":[404]},{"teal":402,"source":"contracts/ARC11550Data.algo.ts:140","pc":[405]},{"teal":403,"source":"contracts/ARC11550Data.algo.ts:140","pc":[406]},{"teal":404,"source":"contracts/ARC11550Data.algo.ts:140","pc":[407]},{"teal":405,"source":"contracts/ARC11550Data.algo.ts:140","pc":[408,409]},{"teal":406,"source":"contracts/ARC11550Data.algo.ts:140","pc":[410]},{"teal":407,"source":"contracts/ARC11550Data.algo.ts:140","pc":[411]},{"teal":408,"source":"contracts/ARC11550Data.algo.ts:140","pc":[412]},{"teal":409,"source":"contracts/ARC11550Data.algo.ts:140","pc":[413]},{"teal":410,"source":"contracts/ARC11550Data.algo.ts:140","pc":[414,415]},{"teal":414,"source":"contracts/ARC11550Data.algo.ts:141","pc":[416,417]},{"teal":415,"source":"contracts/ARC11550Data.algo.ts:141","pc":[418,419]},{"teal":416,"source":"contracts/ARC11550Data.algo.ts:141","pc":[420]},{"teal":417,"source":"contracts/ARC11550Data.algo.ts:141","pc":[421,422]},{"teal":418,"source":"contracts/ARC11550Data.algo.ts:141","pc":[423,424]},{"teal":419,"source":"contracts/ARC11550Data.algo.ts:141","pc":[425]},{"teal":420,"source":"contracts/ARC11550Data.algo.ts:141","pc":[426]},{"teal":421,"source":"contracts/ARC11550Data.algo.ts:141","pc":[427]},{"teal":422,"source":"contracts/ARC11550Data.algo.ts:141","pc":[428]},{"teal":423,"source":"contracts/ARC11550Data.algo.ts:141","pc":[429,430]},{"teal":424,"source":"contracts/ARC11550Data.algo.ts:141","pc":[431]},{"teal":425,"source":"contracts/ARC11550Data.algo.ts:141","pc":[432,433]},{"teal":426,"source":"contracts/ARC11550Data.algo.ts:141","pc":[434]},{"teal":427,"source":"contracts/ARC11550Data.algo.ts:141","pc":[435,436]},{"teal":431,"source":"contracts/ARC11550Data.algo.ts:142","pc":[437,438]},{"teal":432,"source":"contracts/ARC11550Data.algo.ts:142","pc":[439]},{"teal":433,"source":"contracts/ARC11550Data.algo.ts:142","pc":[440,441]},{"teal":434,"source":"contracts/ARC11550Data.algo.ts:142","pc":[442]},{"teal":435,"source":"contracts/ARC11550Data.algo.ts:142","pc":[443,444]},{"teal":436,"source":"contracts/ARC11550Data.algo.ts:142","pc":[445]},{"teal":437,"source":"contracts/ARC11550Data.algo.ts:142","pc":[446]},{"teal":438,"source":"contracts/ARC11550Data.algo.ts:142","pc":[447]},{"teal":441,"source":"contracts/ARC11550Data.algo.ts:142","errorMessage":"box value does not exist: this.balances({ tokenId: id, address: addr }).value","pc":[448]},{"teal":442,"source":"contracts/ARC11550Data.algo.ts:142","pc":[449]},{"teal":443,"source":"contracts/ARC11550Data.algo.ts:142","pc":[450]},{"teal":444,"source":"contracts/ARC11550Data.algo.ts:142","pc":[451]},{"teal":445,"source":"contracts/ARC11550Data.algo.ts:142","pc":[452,453]},{"teal":450,"source":"contracts/ARC11550Data.algo.ts:139","pc":[454,455]},{"teal":451,"source":"contracts/ARC11550Data.algo.ts:139","pc":[456]},{"teal":452,"source":"contracts/ARC11550Data.algo.ts:139","pc":[457]},{"teal":453,"source":"contracts/ARC11550Data.algo.ts:139","pc":[458,459]},{"teal":454,"source":"contracts/ARC11550Data.algo.ts:139","pc":[460,461,462]},{"teal":459,"source":"contracts/ARC11550Data.algo.ts:145","pc":[463,464]},{"teal":462,"source":"contracts/ARC11550Data.algo.ts:137","pc":[465,466]},{"teal":465,"source":"contracts/ARC11550Data.algo.ts:137","pc":[467,468]},{"teal":466,"source":"contracts/ARC11550Data.algo.ts:137","pc":[469]},{"teal":471,"source":"contracts/ARC11550Data.algo.ts:148","pc":[470]},{"teal":474,"source":"contracts/ARC11550Data.algo.ts:148","pc":[471,472,473]},{"teal":475,"source":"contracts/ARC11550Data.algo.ts:148","pc":[474,475,476]},{"teal":478,"source":"contracts/ARC11550Data.algo.ts:148","pc":[477,478,479]},{"teal":479,"source":"contracts/ARC11550Data.algo.ts:148","pc":[480]},{"teal":480,"source":"contracts/ARC11550Data.algo.ts:148","pc":[481]},{"teal":481,"source":"contracts/ARC11550Data.algo.ts:148","pc":[482,483]},{"teal":482,"source":"contracts/ARC11550Data.algo.ts:148","pc":[484]},{"teal":483,"source":"contracts/ARC11550Data.algo.ts:148","pc":[485]},{"teal":484,"source":"contracts/ARC11550Data.algo.ts:148","pc":[486,487,488]},{"teal":485,"source":"contracts/ARC11550Data.algo.ts:148","pc":[489]},{"teal":486,"source":"contracts/ARC11550Data.algo.ts:148","pc":[490]},{"teal":487,"source":"contracts/ARC11550Data.algo.ts:148","pc":[491]},{"teal":488,"source":"contracts/ARC11550Data.algo.ts:148","pc":[492]},{"teal":489,"source":"contracts/ARC11550Data.algo.ts:148","pc":[493]},{"teal":490,"source":"contracts/ARC11550Data.algo.ts:148","pc":[494]},{"teal":494,"source":"contracts/ARC11550Data.algo.ts:148","pc":[495,496,497]},{"teal":497,"source":"contracts/ARC11550Data.algo.ts:148","pc":[498]},{"teal":498,"source":"contracts/ARC11550Data.algo.ts:148","pc":[499,500]},{"teal":502,"source":"contracts/ARC11550Data.algo.ts:149","pc":[501]},{"teal":503,"source":"contracts/ARC11550Data.algo.ts:149","pc":[502,503]},{"teal":507,"source":"contracts/ARC11550Data.algo.ts:150","pc":[504]},{"teal":508,"source":"contracts/ARC11550Data.algo.ts:150","pc":[505,506]},{"teal":513,"source":"contracts/ARC11550Data.algo.ts:150","pc":[507,508]},{"teal":514,"source":"contracts/ARC11550Data.algo.ts:150","pc":[509,510]},{"teal":515,"source":"contracts/ARC11550Data.algo.ts:150","pc":[511]},{"teal":516,"source":"contracts/ARC11550Data.algo.ts:150","pc":[512]},{"teal":517,"source":"contracts/ARC11550Data.algo.ts:150","pc":[513]},{"teal":518,"source":"contracts/ARC11550Data.algo.ts:150","pc":[514]},{"teal":519,"source":"contracts/ARC11550Data.algo.ts:150","pc":[515,516,517]},{"teal":523,"source":"contracts/ARC11550Data.algo.ts:151","pc":[518,519]},{"teal":524,"source":"contracts/ARC11550Data.algo.ts:151","pc":[520,521]},{"teal":525,"source":"contracts/ARC11550Data.algo.ts:151","pc":[522]},{"teal":526,"source":"contracts/ARC11550Data.algo.ts:151","pc":[523,524]},{"teal":527,"source":"contracts/ARC11550Data.algo.ts:151","pc":[525]},{"teal":528,"source":"contracts/ARC11550Data.algo.ts:151","pc":[526]},{"teal":529,"source":"contracts/ARC11550Data.algo.ts:151","pc":[527]},{"teal":530,"source":"contracts/ARC11550Data.algo.ts:151","pc":[528,529]},{"teal":531,"source":"contracts/ARC11550Data.algo.ts:151","pc":[530]},{"teal":532,"source":"contracts/ARC11550Data.algo.ts:151","pc":[531]},{"teal":533,"source":"contracts/ARC11550Data.algo.ts:151","pc":[532]},{"teal":534,"source":"contracts/ARC11550Data.algo.ts:151","pc":[533]},{"teal":535,"source":"contracts/ARC11550Data.algo.ts:151","pc":[534,535]},{"teal":539,"source":"contracts/ARC11550Data.algo.ts:152","pc":[536,537]},{"teal":540,"source":"contracts/ARC11550Data.algo.ts:152","pc":[538,539]},{"teal":541,"source":"contracts/ARC11550Data.algo.ts:152","pc":[540,541]},{"teal":542,"source":"contracts/ARC11550Data.algo.ts:152","pc":[542]},{"teal":543,"source":"contracts/ARC11550Data.algo.ts:152","pc":[543]},{"teal":544,"source":"contracts/ARC11550Data.algo.ts:152","pc":[544]},{"teal":547,"source":"contracts/ARC11550Data.algo.ts:152","errorMessage":"box value does not exist: this.params(id).value","pc":[545]},{"teal":548,"source":"contracts/ARC11550Data.algo.ts:152","pc":[546]},{"teal":549,"source":"contracts/ARC11550Data.algo.ts:152","pc":[547,548]},{"teal":554,"source":"contracts/ARC11550Data.algo.ts:150","pc":[549,550]},{"teal":555,"source":"contracts/ARC11550Data.algo.ts:150","pc":[551]},{"teal":556,"source":"contracts/ARC11550Data.algo.ts:150","pc":[552]},{"teal":557,"source":"contracts/ARC11550Data.algo.ts:150","pc":[553,554]},{"teal":558,"source":"contracts/ARC11550Data.algo.ts:150","pc":[555,556,557]},{"teal":563,"source":"contracts/ARC11550Data.algo.ts:155","pc":[558,559]},{"teal":566,"source":"contracts/ARC11550Data.algo.ts:148","pc":[560,561]},{"teal":569,"source":"contracts/ARC11550Data.algo.ts:148","pc":[562,563]},{"teal":570,"source":"contracts/ARC11550Data.algo.ts:148","pc":[564]},{"teal":575,"source":"contracts/ARC11550Data.algo.ts:164","pc":[565,566,567]},{"teal":576,"source":"contracts/ARC11550Data.algo.ts:164","pc":[568,569,570]},{"teal":579,"source":"contracts/ARC11550Data.algo.ts:164","pc":[571,572,573]},{"teal":582,"source":"contracts/ARC11550Data.algo.ts:164","pc":[574,575,576]},{"teal":583,"source":"contracts/ARC11550Data.algo.ts:164","pc":[577]},{"teal":584,"source":"contracts/ARC11550Data.algo.ts:164","pc":[578]},{"teal":592,"source":"contracts/ARC11550Data.algo.ts:164","pc":[579,580,581]},{"teal":596,"source":"contracts/ARC11550Data.algo.ts:165","pc":[582,583]},{"teal":597,"source":"contracts/ARC11550Data.algo.ts:165","pc":[584,585]},{"teal":598,"source":"contracts/ARC11550Data.algo.ts:165","pc":[586,587]},{"teal":599,"source":"contracts/ARC11550Data.algo.ts:165","pc":[588,589]},{"teal":600,"source":"contracts/ARC11550Data.algo.ts:165","pc":[590,591]},{"teal":601,"source":"contracts/ARC11550Data.algo.ts:165","pc":[592,593]},{"teal":602,"source":"contracts/ARC11550Data.algo.ts:165","pc":[594,595]},{"teal":603,"source":"contracts/ARC11550Data.algo.ts:165","pc":[596,597,598]},{"teal":604,"source":"contracts/ARC11550Data.algo.ts:165","pc":[599]},{"teal":605,"source":"contracts/ARC11550Data.algo.ts:165","pc":[600]},{"teal":606,"source":"contracts/ARC11550Data.algo.ts:165","pc":[601]},{"teal":607,"source":"contracts/ARC11550Data.algo.ts:165","pc":[602,603]},{"teal":608,"source":"contracts/ARC11550Data.algo.ts:165","pc":[604]},{"teal":609,"source":"contracts/ARC11550Data.algo.ts:165","pc":[605]},{"teal":610,"source":"contracts/ARC11550Data.algo.ts:165","pc":[606]},{"teal":615,"source":"contracts/ARC11550Data.algo.ts:167","pc":[607,608]},{"teal":616,"source":"contracts/ARC11550Data.algo.ts:167","pc":[609,610]},{"teal":617,"source":"contracts/ARC11550Data.algo.ts:167","pc":[611]},{"teal":618,"source":"contracts/ARC11550Data.algo.ts:167","pc":[612]},{"teal":619,"source":"contracts/ARC11550Data.algo.ts:167","pc":[613]},{"teal":620,"source":"contracts/ARC11550Data.algo.ts:167","pc":[614]},{"teal":621,"source":"contracts/ARC11550Data.algo.ts:167","pc":[615,616,617]},{"teal":626,"source":"contracts/ARC11550Data.algo.ts:168","pc":[618,619]},{"teal":627,"source":"contracts/ARC11550Data.algo.ts:168","pc":[620,621]},{"teal":628,"source":"contracts/ARC11550Data.algo.ts:168","pc":[622]},{"teal":629,"source":"contracts/ARC11550Data.algo.ts:168","pc":[623]},{"teal":632,"source":"contracts/ARC11550Data.algo.ts:168","errorMessage":"box value does not exist: this.tokenMetadata(key).value","pc":[624]},{"teal":633,"source":"contracts/ARC11550Data.algo.ts:168","pc":[625,626]},{"teal":634,"source":"contracts/ARC11550Data.algo.ts:168","pc":[627,628]},{"teal":635,"source":"contracts/ARC11550Data.algo.ts:168","pc":[629]},{"teal":636,"source":"contracts/ARC11550Data.algo.ts:168","pc":[630]},{"teal":637,"source":"contracts/ARC11550Data.algo.ts:168","pc":[631]},{"teal":642,"source":"contracts/ARC11550Data.algo.ts:171","pc":[632,633]},{"teal":643,"source":"contracts/ARC11550Data.algo.ts:171","pc":[634,635]},{"teal":644,"source":"contracts/ARC11550Data.algo.ts:171","pc":[636]},{"teal":645,"source":"contracts/ARC11550Data.algo.ts:171","pc":[637]},{"teal":648,"source":"contracts/ARC11550Data.algo.ts:171","errorMessage":"box value does not exist: this.tokenMetadata(key).value","pc":[638]},{"teal":649,"source":"contracts/ARC11550Data.algo.ts:171","pc":[639,640]},{"teal":650,"source":"contracts/ARC11550Data.algo.ts:171","pc":[641]},{"teal":651,"source":"contracts/ARC11550Data.algo.ts:171","pc":[642]},{"teal":652,"source":"contracts/ARC11550Data.algo.ts:171","pc":[643,644]},{"teal":653,"source":"contracts/ARC11550Data.algo.ts:171","pc":[645,646]},{"teal":654,"source":"contracts/ARC11550Data.algo.ts:171","pc":[647,648]},{"teal":655,"source":"contracts/ARC11550Data.algo.ts:171","pc":[649,650]},{"teal":656,"source":"contracts/ARC11550Data.algo.ts:171","pc":[651]},{"teal":657,"source":"contracts/ARC11550Data.algo.ts:171","pc":[652]},{"teal":658,"source":"contracts/ARC11550Data.algo.ts:171","pc":[653,654]},{"teal":659,"source":"contracts/ARC11550Data.algo.ts:171","pc":[655]},{"teal":660,"source":"contracts/ARC11550Data.algo.ts:171","pc":[656,657]},{"teal":661,"source":"contracts/ARC11550Data.algo.ts:171","pc":[658]},{"teal":662,"source":"contracts/ARC11550Data.algo.ts:171","pc":[659]},{"teal":663,"source":"contracts/ARC11550Data.algo.ts:171","pc":[660]},{"teal":664,"source":"contracts/ARC11550Data.algo.ts:171","pc":[661]},{"teal":665,"source":"contracts/ARC11550Data.algo.ts:171","pc":[662,663]},{"teal":666,"source":"contracts/ARC11550Data.algo.ts:171","pc":[664]},{"teal":667,"source":"contracts/ARC11550Data.algo.ts:171","pc":[665,666]},{"teal":668,"source":"contracts/ARC11550Data.algo.ts:171","pc":[667,668]},{"teal":669,"source":"contracts/ARC11550Data.algo.ts:171","pc":[669]},{"teal":670,"source":"contracts/ARC11550Data.algo.ts:171","pc":[670,671]},{"teal":671,"source":"contracts/ARC11550Data.algo.ts:171","pc":[672]},{"teal":672,"source":"contracts/ARC11550Data.algo.ts:171","pc":[673,674]},{"teal":673,"source":"contracts/ARC11550Data.algo.ts:171","pc":[675]},{"teal":674,"source":"contracts/ARC11550Data.algo.ts:171","pc":[676]},{"teal":675,"source":"contracts/ARC11550Data.algo.ts:171","pc":[677]},{"teal":676,"source":"contracts/ARC11550Data.algo.ts:171","pc":[678,679,680]},{"teal":677,"source":"contracts/ARC11550Data.algo.ts:171","pc":[681]},{"teal":678,"source":"contracts/ARC11550Data.algo.ts:171","pc":[682]},{"teal":679,"source":"contracts/ARC11550Data.algo.ts:171","pc":[683]},{"teal":680,"source":"contracts/ARC11550Data.algo.ts:171","pc":[684,685]},{"teal":681,"source":"contracts/ARC11550Data.algo.ts:171","pc":[686,687]},{"teal":682,"source":"contracts/ARC11550Data.algo.ts:171","pc":[688,689]},{"teal":683,"source":"contracts/ARC11550Data.algo.ts:171","pc":[690,691]},{"teal":684,"source":"contracts/ARC11550Data.algo.ts:171","pc":[692]},{"teal":685,"source":"contracts/ARC11550Data.algo.ts:171","pc":[693,694]},{"teal":686,"source":"contracts/ARC11550Data.algo.ts:171","pc":[695]},{"teal":687,"source":"contracts/ARC11550Data.algo.ts:171","pc":[696]},{"teal":688,"source":"contracts/ARC11550Data.algo.ts:171","pc":[697]},{"teal":689,"source":"contracts/ARC11550Data.algo.ts:171","pc":[698]},{"teal":690,"source":"contracts/ARC11550Data.algo.ts:171","pc":[699,700]},{"teal":691,"source":"contracts/ARC11550Data.algo.ts:171","pc":[701,702,703]},{"teal":692,"source":"contracts/ARC11550Data.algo.ts:171","pc":[704,705]},{"teal":693,"source":"contracts/ARC11550Data.algo.ts:171","pc":[706,707]},{"teal":694,"source":"contracts/ARC11550Data.algo.ts:171","pc":[708,709]},{"teal":695,"source":"contracts/ARC11550Data.algo.ts:171","pc":[710]},{"teal":696,"source":"contracts/ARC11550Data.algo.ts:171","pc":[711]},{"teal":697,"source":"contracts/ARC11550Data.algo.ts:171","pc":[712]},{"teal":698,"source":"contracts/ARC11550Data.algo.ts:171","pc":[713]},{"teal":699,"source":"contracts/ARC11550Data.algo.ts:171","pc":[714]},{"teal":700,"source":"contracts/ARC11550Data.algo.ts:171","pc":[715]},{"teal":701,"source":"contracts/ARC11550Data.algo.ts:164","pc":[716]},{"teal":706,"source":"contracts/ARC11550Data.algo.ts:174","pc":[717,718,719]},{"teal":707,"source":"contracts/ARC11550Data.algo.ts:174","pc":[720]},{"teal":708,"source":"contracts/ARC11550Data.algo.ts:174","pc":[721]},{"teal":709,"source":"contracts/ARC11550Data.algo.ts:174","pc":[722,723]},{"teal":710,"source":"contracts/ARC11550Data.algo.ts:174","pc":[724]},{"teal":713,"source":"contracts/ARC11550Data.algo.ts:174","errorMessage":"argument 0 (allowance) for arc11550_setAllowance must be a (uint64,uint64,uint64,uint64,uint64)","pc":[725]},{"teal":716,"source":"contracts/ARC11550Data.algo.ts:174","pc":[726,727,728]},{"teal":717,"source":"contracts/ARC11550Data.algo.ts:174","pc":[729]},{"teal":718,"source":"contracts/ARC11550Data.algo.ts:174","pc":[730]},{"teal":719,"source":"contracts/ARC11550Data.algo.ts:174","pc":[731,732]},{"teal":720,"source":"contracts/ARC11550Data.algo.ts:174","pc":[733]},{"teal":723,"source":"contracts/ARC11550Data.algo.ts:174","errorMessage":"argument 1 (allowanceKey) for arc11550_setAllowance must be a (address,address,uint64)","pc":[734]},{"teal":726,"source":"contracts/ARC11550Data.algo.ts:174","pc":[735,736,737]},{"teal":727,"source":"contracts/ARC11550Data.algo.ts:174","pc":[738]},{"teal":728,"source":"contracts/ARC11550Data.algo.ts:174","pc":[739]},{"teal":732,"source":"contracts/ARC11550Data.algo.ts:174","pc":[740,741,742]},{"teal":736,"source":"contracts/ARC11550Data.algo.ts:175","pc":[743,744]},{"teal":737,"source":"contracts/ARC11550Data.algo.ts:175","pc":[745,746]},{"teal":738,"source":"contracts/ARC11550Data.algo.ts:175","pc":[747,748]},{"teal":739,"source":"contracts/ARC11550Data.algo.ts:175","pc":[749,750]},{"teal":740,"source":"contracts/ARC11550Data.algo.ts:175","pc":[751,752]},{"teal":741,"source":"contracts/ARC11550Data.algo.ts:175","pc":[753,754,755]},{"teal":742,"source":"contracts/ARC11550Data.algo.ts:175","pc":[756]},{"teal":743,"source":"contracts/ARC11550Data.algo.ts:175","pc":[757]},{"teal":744,"source":"contracts/ARC11550Data.algo.ts:175","pc":[758]},{"teal":745,"source":"contracts/ARC11550Data.algo.ts:175","pc":[759,760]},{"teal":746,"source":"contracts/ARC11550Data.algo.ts:175","pc":[761]},{"teal":747,"source":"contracts/ARC11550Data.algo.ts:175","pc":[762]},{"teal":748,"source":"contracts/ARC11550Data.algo.ts:175","pc":[763]},{"teal":752,"source":"contracts/ARC11550Data.algo.ts:176","pc":[764]},{"teal":753,"source":"contracts/ARC11550Data.algo.ts:176","pc":[765,766]},{"teal":754,"source":"contracts/ARC11550Data.algo.ts:176","pc":[767]},{"teal":755,"source":"contracts/ARC11550Data.algo.ts:176","pc":[768]},{"teal":756,"source":"contracts/ARC11550Data.algo.ts:176","pc":[769,770]},{"teal":757,"source":"contracts/ARC11550Data.algo.ts:176","pc":[771]},{"teal":758,"source":"contracts/ARC11550Data.algo.ts:174","pc":[772]},{"teal":763,"source":"contracts/ARC11550Data.algo.ts:183","pc":[773,774,775]},{"teal":764,"source":"contracts/ARC11550Data.algo.ts:183","pc":[776,777,778]},{"teal":767,"source":"contracts/ARC11550Data.algo.ts:183","pc":[779,780,781]},{"teal":768,"source":"contracts/ARC11550Data.algo.ts:183","pc":[782]},{"teal":769,"source":"contracts/ARC11550Data.algo.ts:183","pc":[783]},{"teal":777,"source":"contracts/ARC11550Data.algo.ts:183","pc":[784,785,786]},{"teal":780,"source":"contracts/ARC11550Data.algo.ts:183","pc":[787]},{"teal":781,"source":"contracts/ARC11550Data.algo.ts:183","pc":[788]},{"teal":785,"source":"contracts/ARC11550Data.algo.ts:184","pc":[789]},{"teal":786,"source":"contracts/ARC11550Data.algo.ts:184","pc":[790,791]},{"teal":791,"source":"contracts/ARC11550Data.algo.ts:184","pc":[792,793]},{"teal":792,"source":"contracts/ARC11550Data.algo.ts:184","pc":[794,795]},{"teal":793,"source":"contracts/ARC11550Data.algo.ts:184","pc":[796]},{"teal":794,"source":"contracts/ARC11550Data.algo.ts:184","pc":[797,798]},{"teal":795,"source":"contracts/ARC11550Data.algo.ts:184","pc":[799]},{"teal":796,"source":"contracts/ARC11550Data.algo.ts:184","pc":[800]},{"teal":797,"source":"contracts/ARC11550Data.algo.ts:184","pc":[801,802,803]},{"teal":798,"source":"contracts/ARC11550Data.algo.ts:185","pc":[804,805]},{"teal":799,"source":"contracts/ARC11550Data.algo.ts:185","pc":[806,807]},{"teal":803,"source":"contracts/ARC11550Data.algo.ts:186","pc":[808,809]},{"teal":804,"source":"contracts/ARC11550Data.algo.ts:186","pc":[810,811]},{"teal":805,"source":"contracts/ARC11550Data.algo.ts:186","pc":[812]},{"teal":806,"source":"contracts/ARC11550Data.algo.ts:186","pc":[813,814]},{"teal":807,"source":"contracts/ARC11550Data.algo.ts:186","pc":[815,816]},{"teal":808,"source":"contracts/ARC11550Data.algo.ts:186","pc":[817]},{"teal":809,"source":"contracts/ARC11550Data.algo.ts:186","pc":[818]},{"teal":810,"source":"contracts/ARC11550Data.algo.ts:186","pc":[819,820]},{"teal":811,"source":"contracts/ARC11550Data.algo.ts:186","pc":[821]},{"teal":812,"source":"contracts/ARC11550Data.algo.ts:186","pc":[822,823]},{"teal":813,"source":"contracts/ARC11550Data.algo.ts:186","pc":[824]},{"teal":814,"source":"contracts/ARC11550Data.algo.ts:186","pc":[825,826]},{"teal":815,"source":"contracts/ARC11550Data.algo.ts:186","pc":[827]},{"teal":816,"source":"contracts/ARC11550Data.algo.ts:186","pc":[828,829]},{"teal":817,"source":"contracts/ARC11550Data.algo.ts:186","pc":[830,831]},{"teal":818,"source":"contracts/ARC11550Data.algo.ts:186","pc":[832]},{"teal":819,"source":"contracts/ARC11550Data.algo.ts:186","pc":[833,834]},{"teal":820,"source":"contracts/ARC11550Data.algo.ts:186","pc":[835,836]},{"teal":821,"source":"contracts/ARC11550Data.algo.ts:186","pc":[837]},{"teal":822,"source":"contracts/ARC11550Data.algo.ts:186","pc":[838]},{"teal":823,"source":"contracts/ARC11550Data.algo.ts:186","pc":[839]},{"teal":824,"source":"contracts/ARC11550Data.algo.ts:186","pc":[840]},{"teal":825,"source":"contracts/ARC11550Data.algo.ts:186","pc":[841,842]},{"teal":826,"source":"contracts/ARC11550Data.algo.ts:186","pc":[843]},{"teal":827,"source":"contracts/ARC11550Data.algo.ts:186","pc":[844,845]},{"teal":828,"source":"contracts/ARC11550Data.algo.ts:186","pc":[846]},{"teal":829,"source":"contracts/ARC11550Data.algo.ts:186","pc":[847,848,849]},{"teal":834,"source":"contracts/ARC11550Data.algo.ts:184","pc":[850,851]},{"teal":835,"source":"contracts/ARC11550Data.algo.ts:184","pc":[852]},{"teal":836,"source":"contracts/ARC11550Data.algo.ts:184","pc":[853]},{"teal":837,"source":"contracts/ARC11550Data.algo.ts:184","pc":[854,855]},{"teal":838,"source":"contracts/ARC11550Data.algo.ts:184","pc":[856,857,858]},{"teal":841,"source":"contracts/ARC11550Data.algo.ts:183","pc":[859]},{"teal":846,"source":"contracts/ARC11550Data.algo.ts:196","pc":[860,861,862]},{"teal":847,"source":"contracts/ARC11550Data.algo.ts:196","pc":[863,864,865]},{"teal":850,"source":"contracts/ARC11550Data.algo.ts:196","pc":[866,867,868]},{"teal":851,"source":"contracts/ARC11550Data.algo.ts:196","pc":[869]},{"teal":852,"source":"contracts/ARC11550Data.algo.ts:196","pc":[870]},{"teal":853,"source":"contracts/ARC11550Data.algo.ts:196","pc":[871,872]},{"teal":854,"source":"contracts/ARC11550Data.algo.ts:196","pc":[873]},{"teal":857,"source":"contracts/ARC11550Data.algo.ts:196","errorMessage":"argument 1 (sender) for doTransfers must be a address","pc":[874]},{"teal":860,"source":"contracts/ARC11550Data.algo.ts:196","pc":[875,876,877]},{"teal":861,"source":"contracts/ARC11550Data.algo.ts:196","pc":[878]},{"teal":862,"source":"contracts/ARC11550Data.algo.ts:196","pc":[879]},{"teal":870,"source":"contracts/ARC11550Data.algo.ts:196","pc":[880,881,882]},{"teal":873,"source":"contracts/ARC11550Data.algo.ts:196","pc":[883]},{"teal":874,"source":"contracts/ARC11550Data.algo.ts:196","pc":[884,885]},{"teal":878,"source":"contracts/ARC11550Data.algo.ts:197","pc":[886,887]},{"teal":879,"source":"contracts/ARC11550Data.algo.ts:197","pc":[888,889]},{"teal":880,"source":"contracts/ARC11550Data.algo.ts:197","pc":[890]},{"teal":881,"source":"contracts/ARC11550Data.algo.ts:197","pc":[891]},{"teal":882,"source":"contracts/ARC11550Data.algo.ts:197","pc":[892]},{"teal":886,"source":"contracts/ARC11550Data.algo.ts:199","pc":[893]},{"teal":887,"source":"contracts/ARC11550Data.algo.ts:199","pc":[894,895]},{"teal":892,"source":"contracts/ARC11550Data.algo.ts:199","pc":[896,897]},{"teal":893,"source":"contracts/ARC11550Data.algo.ts:199","pc":[898,899]},{"teal":894,"source":"contracts/ARC11550Data.algo.ts:199","pc":[900]},{"teal":895,"source":"contracts/ARC11550Data.algo.ts:199","pc":[901]},{"teal":896,"source":"contracts/ARC11550Data.algo.ts:199","pc":[902]},{"teal":897,"source":"contracts/ARC11550Data.algo.ts:199","pc":[903]},{"teal":898,"source":"contracts/ARC11550Data.algo.ts:199","pc":[904,905,906]},{"teal":899,"source":"contracts/ARC11550Data.algo.ts:200","pc":[907,908]},{"teal":900,"source":"contracts/ARC11550Data.algo.ts:200","pc":[909,910]},{"teal":905,"source":"contracts/ARC11550Data.algo.ts:202","pc":[911,912]},{"teal":906,"source":"contracts/ARC11550Data.algo.ts:202","pc":[913,914]},{"teal":907,"source":"contracts/ARC11550Data.algo.ts:202","pc":[915]},{"teal":908,"source":"contracts/ARC11550Data.algo.ts:202","pc":[916,917]},{"teal":909,"source":"contracts/ARC11550Data.algo.ts:202","pc":[918]},{"teal":910,"source":"contracts/ARC11550Data.algo.ts:202","pc":[919]},{"teal":911,"source":"contracts/ARC11550Data.algo.ts:202","pc":[920]},{"teal":912,"source":"contracts/ARC11550Data.algo.ts:202","pc":[921]},{"teal":913,"source":"contracts/ARC11550Data.algo.ts:202","pc":[922]},{"teal":914,"source":"contracts/ARC11550Data.algo.ts:202","pc":[923,924]},{"teal":915,"source":"contracts/ARC11550Data.algo.ts:202","pc":[925]},{"teal":916,"source":"contracts/ARC11550Data.algo.ts:202","pc":[926,927]},{"teal":917,"source":"contracts/ARC11550Data.algo.ts:202","pc":[928]},{"teal":918,"source":"contracts/ARC11550Data.algo.ts:202","pc":[929,930]},{"teal":919,"source":"contracts/ARC11550Data.algo.ts:202","pc":[931]},{"teal":920,"source":"contracts/ARC11550Data.algo.ts:202","pc":[932,933,934]},{"teal":931,"source":"contracts/ARC11550Data.algo.ts:205","pc":[935,936]},{"teal":932,"source":"contracts/ARC11550Data.algo.ts:205","pc":[937,938]},{"teal":933,"source":"contracts/ARC11550Data.algo.ts:205","pc":[939]},{"teal":934,"source":"contracts/ARC11550Data.algo.ts:205","pc":[940,941]},{"teal":935,"source":"contracts/ARC11550Data.algo.ts:205","pc":[942]},{"teal":936,"source":"contracts/ARC11550Data.algo.ts:205","pc":[943]},{"teal":937,"source":"contracts/ARC11550Data.algo.ts:205","pc":[944]},{"teal":938,"source":"contracts/ARC11550Data.algo.ts:205","pc":[945]},{"teal":939,"source":"contracts/ARC11550Data.algo.ts:205","pc":[946]},{"teal":940,"source":"contracts/ARC11550Data.algo.ts:205","pc":[947,948]},{"teal":941,"source":"contracts/ARC11550Data.algo.ts:205","pc":[949]},{"teal":942,"source":"contracts/ARC11550Data.algo.ts:205","pc":[950,951]},{"teal":943,"source":"contracts/ARC11550Data.algo.ts:205","pc":[952]},{"teal":944,"source":"contracts/ARC11550Data.algo.ts:206","pc":[953,954]},{"teal":945,"source":"contracts/ARC11550Data.algo.ts:206","pc":[955]},{"teal":946,"source":"contracts/ARC11550Data.algo.ts:207","pc":[956,957]},{"teal":947,"source":"contracts/ARC11550Data.algo.ts:207","pc":[958,959]},{"teal":948,"source":"contracts/ARC11550Data.algo.ts:207","pc":[960]},{"teal":949,"source":"contracts/ARC11550Data.algo.ts:207","pc":[961,962]},{"teal":950,"source":"contracts/ARC11550Data.algo.ts:207","pc":[963]},{"teal":951,"source":"contracts/ARC11550Data.algo.ts:207","pc":[964]},{"teal":952,"source":"contracts/ARC11550Data.algo.ts:207","pc":[965]},{"teal":953,"source":"contracts/ARC11550Data.algo.ts:207","pc":[966]},{"teal":954,"source":"contracts/ARC11550Data.algo.ts:207","pc":[967]},{"teal":955,"source":"contracts/ARC11550Data.algo.ts:207","pc":[968,969]},{"teal":956,"source":"contracts/ARC11550Data.algo.ts:207","pc":[970]},{"teal":957,"source":"contracts/ARC11550Data.algo.ts:207","pc":[971]},{"teal":958,"source":"contracts/ARC11550Data.algo.ts:207","pc":[972]},{"teal":959,"source":"contracts/ARC11550Data.algo.ts:207","pc":[973]},{"teal":960,"source":"contracts/ARC11550Data.algo.ts:207","pc":[974]},{"teal":961,"source":"contracts/ARC11550Data.algo.ts:207","pc":[975]},{"teal":962,"source":"contracts/ARC11550Data.algo.ts:203","pc":[976]},{"teal":963,"source":"contracts/ARC11550Data.algo.ts:203","pc":[977,978]},{"teal":967,"source":"contracts/ARC11550Data.algo.ts:211","pc":[979]},{"teal":968,"source":"contracts/ARC11550Data.algo.ts:211","pc":[980,981]},{"teal":969,"source":"contracts/ARC11550Data.algo.ts:211","pc":[982]},{"teal":970,"source":"contracts/ARC11550Data.algo.ts:211","pc":[983]},{"teal":971,"source":"contracts/ARC11550Data.algo.ts:211","pc":[984]},{"teal":972,"source":"contracts/ARC11550Data.algo.ts:211","pc":[985]},{"teal":973,"source":"contracts/ARC11550Data.algo.ts:211","pc":[986]},{"teal":977,"source":"contracts/ARC11550Data.algo.ts:213","pc":[987]},{"teal":978,"source":"contracts/ARC11550Data.algo.ts:213","pc":[988,989]},{"teal":979,"source":"contracts/ARC11550Data.algo.ts:213","pc":[990]},{"teal":980,"source":"contracts/ARC11550Data.algo.ts:213","pc":[991,992]},{"teal":984,"source":"contracts/ARC11550Data.algo.ts:215","pc":[993,994]},{"teal":985,"source":"contracts/ARC11550Data.algo.ts:215","pc":[995,996]},{"teal":989,"source":"contracts/ARC11550Data.algo.ts:216","pc":[997,998]},{"teal":990,"source":"contracts/ARC11550Data.algo.ts:216","pc":[999]},{"teal":991,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1000]},{"teal":992,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1001,1002]},{"teal":993,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1003]},{"teal":994,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1004,1005]},{"teal":995,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1006]},{"teal":996,"source":"contracts/ARC11550Data.algo.ts:216","pc":[1007]},{"teal":997,"source":"contracts/ARC11550Data.algo.ts:216","pc":[1008,1009]},{"teal":998,"source":"contracts/ARC11550Data.algo.ts:216","pc":[1010]},{"teal":999,"source":"contracts/ARC11550Data.algo.ts:216","pc":[1011]},{"teal":1004,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1012]},{"teal":1005,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1013]},{"teal":1006,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1014]},{"teal":1007,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1015,1016]},{"teal":1008,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1017]},{"teal":1009,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1018,1019]},{"teal":1010,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1020]},{"teal":1011,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1021]},{"teal":1012,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1022,1023]},{"teal":1013,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1024,1025]},{"teal":1014,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1026]},{"teal":1015,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1027,1028]},{"teal":1016,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1029]},{"teal":1017,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1030]},{"teal":1018,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1031]},{"teal":1019,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1032,1033]},{"teal":1020,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1034]},{"teal":1021,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1035,1036]},{"teal":1022,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1037]},{"teal":1023,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1038]},{"teal":1024,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1039]},{"teal":1025,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1040]},{"teal":1026,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1041]},{"teal":1027,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1042]},{"teal":1028,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1043,1044,1045]},{"teal":1029,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1046,1047]},{"teal":1030,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1048,1049]},{"teal":1031,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1050]},{"teal":1032,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1051]},{"teal":1033,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1052,1053]},{"teal":1034,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1054]},{"teal":1035,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1055,1056]},{"teal":1036,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1057]},{"teal":1037,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1058]},{"teal":1038,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1059]},{"teal":1039,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1060,1061]},{"teal":1040,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1062]},{"teal":1041,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1063]},{"teal":1042,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1064,1065]},{"teal":1043,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1066]},{"teal":1044,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1067,1068]},{"teal":1045,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1069]},{"teal":1046,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1070]},{"teal":1047,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1071]},{"teal":1048,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1072]},{"teal":1051,"source":"contracts/ARC11550Data.algo.ts:219","pc":[1073,1074,1075]},{"teal":1056,"source":"contracts/ARC11550Data.algo.ts:220","pc":[1076]},{"teal":1057,"source":"contracts/ARC11550Data.algo.ts:220","pc":[1077]},{"teal":1058,"source":"contracts/ARC11550Data.algo.ts:220","pc":[1078]},{"teal":1059,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1079]},{"teal":1060,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1080,1081]},{"teal":1061,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1082]},{"teal":1062,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1083,1084]},{"teal":1063,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1085]},{"teal":1064,"source":"contracts/ARC11550Data.algo.ts:220","pc":[1086]},{"teal":1065,"source":"contracts/ARC11550Data.algo.ts:220","pc":[1087]},{"teal":1066,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1088,1089]},{"teal":1067,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1090,1091]},{"teal":1068,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1092]},{"teal":1072,"source":"contracts/ARC11550Data.algo.ts:221","pc":[1093,1094]},{"teal":1073,"source":"contracts/ARC11550Data.algo.ts:221","pc":[1095,1096]},{"teal":1074,"source":"contracts/ARC11550Data.algo.ts:221","pc":[1097]},{"teal":1075,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1098,1099]},{"teal":1076,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1100,1101]},{"teal":1077,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1102]},{"teal":1082,"source":"contracts/ARC11550Data.algo.ts:224","pc":[1103]},{"teal":1083,"source":"contracts/ARC11550Data.algo.ts:224","pc":[1104]},{"teal":1084,"source":"contracts/ARC11550Data.algo.ts:224","pc":[1105]},{"teal":1085,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1106]},{"teal":1086,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1107,1108]},{"teal":1087,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1109]},{"teal":1088,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1110,1111]},{"teal":1089,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1112]},{"teal":1090,"source":"contracts/ARC11550Data.algo.ts:224","pc":[1113]},{"teal":1091,"source":"contracts/ARC11550Data.algo.ts:224","pc":[1114,1115]},{"teal":1092,"source":"contracts/ARC11550Data.algo.ts:224","pc":[1116,1117]},{"teal":1093,"source":"contracts/ARC11550Data.algo.ts:224","pc":[1118]},{"teal":1094,"source":"contracts/ARC11550Data.algo.ts:224","pc":[1119,1120]},{"teal":1095,"source":"contracts/ARC11550Data.algo.ts:224","pc":[1121]},{"teal":1096,"source":"contracts/ARC11550Data.algo.ts:224","pc":[1122]},{"teal":1097,"source":"contracts/ARC11550Data.algo.ts:224","pc":[1123]},{"teal":1098,"source":"contracts/ARC11550Data.algo.ts:224","pc":[1124,1125]},{"teal":1099,"source":"contracts/ARC11550Data.algo.ts:224","pc":[1126]},{"teal":1100,"source":"contracts/ARC11550Data.algo.ts:224","pc":[1127,1128]},{"teal":1101,"source":"contracts/ARC11550Data.algo.ts:224","pc":[1129]},{"teal":1102,"source":"contracts/ARC11550Data.algo.ts:224","pc":[1130]},{"teal":1103,"source":"contracts/ARC11550Data.algo.ts:224","pc":[1131]},{"teal":1104,"source":"contracts/ARC11550Data.algo.ts:224","pc":[1132]},{"teal":1105,"source":"contracts/ARC11550Data.algo.ts:224","pc":[1133]},{"teal":1106,"source":"contracts/ARC11550Data.algo.ts:224","pc":[1134]},{"teal":1107,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1135,1136]},{"teal":1108,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1137,1138]},{"teal":1109,"source":"contracts/ARC11550Data.algo.ts:213","pc":[1139]},{"teal":1114,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1140]},{"teal":1115,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1141,1142]},{"teal":1116,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1143,1144]},{"teal":1117,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1145]},{"teal":1118,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1146,1147]},{"teal":1119,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1148]},{"teal":1120,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1149]},{"teal":1121,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1150]},{"teal":1122,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1151]},{"teal":1123,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1152]},{"teal":1124,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1153,1154]},{"teal":1125,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1155]},{"teal":1126,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1156]},{"teal":1127,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1157]},{"teal":1128,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1158]},{"teal":1129,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1159]},{"teal":1130,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1160,1161]},{"teal":1131,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1162,1163]},{"teal":1132,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1164]},{"teal":1133,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1165,1166]},{"teal":1134,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1167]},{"teal":1135,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1168]},{"teal":1136,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1169]},{"teal":1137,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1170]},{"teal":1138,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1171]},{"teal":1139,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1172,1173]},{"teal":1140,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1174]},{"teal":1141,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1175,1176]},{"teal":1142,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1177]},{"teal":1143,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1178]},{"teal":1144,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1179]},{"teal":1145,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1180]},{"teal":1148,"source":"contracts/ARC11550Data.algo.ts:226","errorMessage":"box value does not exist: this.balances({ tokenId: t.tokenId, address: t.from }).value","pc":[1181]},{"teal":1149,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1182]},{"teal":1150,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1183,1184]},{"teal":1151,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1185,1186]},{"teal":1152,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1187]},{"teal":1153,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1188,1189]},{"teal":1154,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1190]},{"teal":1155,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1191]},{"teal":1156,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1192]},{"teal":1157,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1193,1194]},{"teal":1158,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1195]},{"teal":1159,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1196,1197]},{"teal":1160,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1198]},{"teal":1161,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1199]},{"teal":1162,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1200]},{"teal":1163,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1201]},{"teal":1164,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1202]},{"teal":1165,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1203]},{"teal":1166,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1204,1205]},{"teal":1167,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1206,1207]},{"teal":1168,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1208]},{"teal":1169,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1209,1210]},{"teal":1170,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1211]},{"teal":1171,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1212]},{"teal":1172,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1213]},{"teal":1173,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1214]},{"teal":1174,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1215]},{"teal":1175,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1216,1217]},{"teal":1176,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1218]},{"teal":1177,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1219]},{"teal":1178,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1220]},{"teal":1179,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1221]},{"teal":1180,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1222]},{"teal":1181,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1223,1224]},{"teal":1182,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1225,1226]},{"teal":1183,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1227]},{"teal":1184,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1228,1229]},{"teal":1185,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1230]},{"teal":1186,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1231]},{"teal":1187,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1232]},{"teal":1188,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1233]},{"teal":1189,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1234]},{"teal":1190,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1235,1236]},{"teal":1191,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1237]},{"teal":1192,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1238,1239]},{"teal":1193,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1240]},{"teal":1194,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1241]},{"teal":1195,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1242]},{"teal":1196,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1243]},{"teal":1197,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1244]},{"teal":1198,"source":"contracts/ARC11550Data.algo.ts:226","pc":[1245]},{"teal":1202,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1246,1247]},{"teal":1203,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1248,1249]},{"teal":1204,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1250]},{"teal":1205,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1251,1252]},{"teal":1206,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1253]},{"teal":1207,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1254]},{"teal":1208,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1255]},{"teal":1209,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1256]},{"teal":1210,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1257]},{"teal":1211,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1258,1259]},{"teal":1212,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1260]},{"teal":1213,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1261]},{"teal":1214,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1262]},{"teal":1215,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1263]},{"teal":1216,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1264]},{"teal":1217,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1265,1266]},{"teal":1218,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1267,1268]},{"teal":1219,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1269]},{"teal":1220,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1270,1271]},{"teal":1221,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1272]},{"teal":1222,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1273]},{"teal":1223,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1274]},{"teal":1224,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1275,1276]},{"teal":1225,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1277]},{"teal":1226,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1278,1279]},{"teal":1227,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1280]},{"teal":1228,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1281,1282]},{"teal":1229,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1283]},{"teal":1230,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1284]},{"teal":1231,"source":"contracts/ARC11550Data.algo.ts:228","pc":[1285,1286]},{"teal":1236,"source":"contracts/ARC11550Data.algo.ts:229","pc":[1287]},{"teal":1237,"source":"contracts/ARC11550Data.algo.ts:229","pc":[1288,1289]},{"teal":1238,"source":"contracts/ARC11550Data.algo.ts:229","pc":[1290]},{"teal":1239,"source":"contracts/ARC11550Data.algo.ts:229","pc":[1291]},{"teal":1240,"source":"contracts/ARC11550Data.algo.ts:229","pc":[1292]},{"teal":1241,"source":"contracts/ARC11550Data.algo.ts:229","pc":[1293]},{"teal":1242,"source":"contracts/ARC11550Data.algo.ts:229","pc":[1294]},{"teal":1243,"source":"contracts/ARC11550Data.algo.ts:229","pc":[1295,1296,1297]},{"teal":1248,"source":"contracts/ARC11550Data.algo.ts:230","pc":[1298]},{"teal":1249,"source":"contracts/ARC11550Data.algo.ts:230","pc":[1299,1300]},{"teal":1250,"source":"contracts/ARC11550Data.algo.ts:230","pc":[1301]},{"teal":1251,"source":"contracts/ARC11550Data.algo.ts:230","pc":[1302]},{"teal":1252,"source":"contracts/ARC11550Data.algo.ts:230","pc":[1303]},{"teal":1253,"source":"contracts/ARC11550Data.algo.ts:230","pc":[1304]},{"teal":1258,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1305]},{"teal":1259,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1306,1307]},{"teal":1260,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1308,1309]},{"teal":1261,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1310]},{"teal":1262,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1311,1312]},{"teal":1263,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1313]},{"teal":1264,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1314]},{"teal":1265,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1315]},{"teal":1266,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1316]},{"teal":1267,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1317]},{"teal":1268,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1318,1319]},{"teal":1269,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1320]},{"teal":1270,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1321]},{"teal":1271,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1322]},{"teal":1272,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1323]},{"teal":1273,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1324]},{"teal":1274,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1325,1326]},{"teal":1275,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1327,1328]},{"teal":1276,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1329]},{"teal":1277,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1330,1331]},{"teal":1278,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1332]},{"teal":1279,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1333]},{"teal":1280,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1334]},{"teal":1281,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1335,1336]},{"teal":1282,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1337]},{"teal":1283,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1338,1339]},{"teal":1284,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1340]},{"teal":1285,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1341,1342]},{"teal":1286,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1343]},{"teal":1287,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1344]},{"teal":1288,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1345]},{"teal":1289,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1346]},{"teal":1292,"source":"contracts/ARC11550Data.algo.ts:232","errorMessage":"box value does not exist: this.balances({ tokenId: t.tokenId, address: t.to }).value","pc":[1347]},{"teal":1293,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1348]},{"teal":1294,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1349,1350]},{"teal":1295,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1351,1352]},{"teal":1296,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1353]},{"teal":1297,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1354,1355]},{"teal":1298,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1356]},{"teal":1299,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1357]},{"teal":1300,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1358]},{"teal":1301,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1359,1360]},{"teal":1302,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1361]},{"teal":1303,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1362,1363]},{"teal":1304,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1364]},{"teal":1305,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1365]},{"teal":1306,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1366]},{"teal":1307,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1367]},{"teal":1308,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1368]},{"teal":1309,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1369]},{"teal":1310,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1370,1371]},{"teal":1311,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1372,1373]},{"teal":1312,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1374]},{"teal":1313,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1375,1376]},{"teal":1314,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1377]},{"teal":1315,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1378]},{"teal":1316,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1379]},{"teal":1317,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1380]},{"teal":1318,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1381]},{"teal":1319,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1382,1383]},{"teal":1320,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1384]},{"teal":1321,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1385]},{"teal":1322,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1386]},{"teal":1323,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1387]},{"teal":1324,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1388]},{"teal":1325,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1389,1390]},{"teal":1326,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1391,1392]},{"teal":1327,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1393]},{"teal":1328,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1394,1395]},{"teal":1329,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1396]},{"teal":1330,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1397]},{"teal":1331,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1398]},{"teal":1332,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1399,1400]},{"teal":1333,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1401]},{"teal":1334,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1402,1403]},{"teal":1335,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1404]},{"teal":1336,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1405,1406]},{"teal":1337,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1407]},{"teal":1338,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1408]},{"teal":1339,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1409]},{"teal":1340,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1410]},{"teal":1341,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1411]},{"teal":1342,"source":"contracts/ARC11550Data.algo.ts:232","pc":[1412]},{"teal":1347,"source":"contracts/ARC11550Data.algo.ts:199","pc":[1413,1414]},{"teal":1348,"source":"contracts/ARC11550Data.algo.ts:199","pc":[1415]},{"teal":1349,"source":"contracts/ARC11550Data.algo.ts:199","pc":[1416]},{"teal":1350,"source":"contracts/ARC11550Data.algo.ts:199","pc":[1417,1418]},{"teal":1351,"source":"contracts/ARC11550Data.algo.ts:199","pc":[1419,1420,1421]},{"teal":1354,"source":"contracts/ARC11550Data.algo.ts:196","pc":[1422]},{"teal":1359,"source":"contracts/ARC11550Data.algo.ts:236","pc":[1423]},{"teal":1362,"source":"contracts/ARC11550Data.algo.ts:236","pc":[1424,1425,1426]},{"teal":1363,"source":"contracts/ARC11550Data.algo.ts:236","pc":[1427]},{"teal":1364,"source":"contracts/ARC11550Data.algo.ts:236","pc":[1428]},{"teal":1365,"source":"contracts/ARC11550Data.algo.ts:236","pc":[1429,1430]},{"teal":1366,"source":"contracts/ARC11550Data.algo.ts:236","pc":[1431]},{"teal":1369,"source":"contracts/ARC11550Data.algo.ts:236","errorMessage":"argument 0 (params) for arc11550_mint must be a (byte[32],byte[8],uint64,uint64,address,uint64)","pc":[1432]},{"teal":1372,"source":"contracts/ARC11550Data.algo.ts:236","pc":[1433,1434,1435]},{"teal":1373,"source":"contracts/ARC11550Data.algo.ts:236","pc":[1436]},{"teal":1376,"source":"contracts/ARC11550Data.algo.ts:236","pc":[1437,1438,1439]},{"teal":1377,"source":"contracts/ARC11550Data.algo.ts:236","pc":[1440]},{"teal":1378,"source":"contracts/ARC11550Data.algo.ts:236","pc":[1441]},{"teal":1379,"source":"contracts/ARC11550Data.algo.ts:236","pc":[1442]},{"teal":1380,"source":"contracts/ARC11550Data.algo.ts:236","pc":[1443]},{"teal":1381,"source":"contracts/ARC11550Data.algo.ts:236","pc":[1444]},{"teal":1385,"source":"contracts/ARC11550Data.algo.ts:236","pc":[1445,1446,1447]},{"teal":1388,"source":"contracts/ARC11550Data.algo.ts:236","pc":[1448]},{"teal":1389,"source":"contracts/ARC11550Data.algo.ts:236","pc":[1449,1450]},{"teal":1393,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1451,1452]},{"teal":1394,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1453,1454]},{"teal":1395,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1455]},{"teal":1396,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1456]},{"teal":1397,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1457,1458]},{"teal":1401,"source":"contracts/ARC11550Data.algo.ts:239","pc":[1459,1460]},{"teal":1402,"source":"contracts/ARC11550Data.algo.ts:239","pc":[1461,1462]},{"teal":1403,"source":"contracts/ARC11550Data.algo.ts:239","pc":[1463,1464]},{"teal":1404,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1465,1466]},{"teal":1405,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1467,1468]},{"teal":1406,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1469]},{"teal":1407,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1470]},{"teal":1408,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1471,1472]},{"teal":1409,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1473]},{"teal":1410,"source":"contracts/ARC11550Data.algo.ts:239","pc":[1474]},{"teal":1411,"source":"contracts/ARC11550Data.algo.ts:239","pc":[1475]},{"teal":1415,"source":"contracts/ARC11550Data.algo.ts:240","pc":[1476]},{"teal":1416,"source":"contracts/ARC11550Data.algo.ts:240","pc":[1477]},{"teal":1417,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1478,1479]},{"teal":1418,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1480,1481]},{"teal":1419,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1482]},{"teal":1420,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1483]},{"teal":1421,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1484,1485]},{"teal":1422,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1486]},{"teal":1423,"source":"contracts/ARC11550Data.algo.ts:240","pc":[1487]},{"teal":1424,"source":"contracts/ARC11550Data.algo.ts:240","pc":[1488]},{"teal":1425,"source":"contracts/ARC11550Data.algo.ts:240","pc":[1489]},{"teal":1426,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1490,1491]},{"teal":1427,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1492,1493]},{"teal":1428,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1494]},{"teal":1429,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1495]},{"teal":1430,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1496,1497]},{"teal":1431,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1498]},{"teal":1432,"source":"contracts/ARC11550Data.algo.ts:240","pc":[1499]},{"teal":1433,"source":"contracts/ARC11550Data.algo.ts:240","pc":[1500]},{"teal":1434,"source":"contracts/ARC11550Data.algo.ts:240","pc":[1501]},{"teal":1442,"source":"contracts/ARC11550Data.algo.ts:244","pc":[1502]},{"teal":1443,"source":"contracts/ARC11550Data.algo.ts:244","pc":[1503,1504]},{"teal":1444,"source":"contracts/ARC11550Data.algo.ts:244","pc":[1505,1506]},{"teal":1445,"source":"contracts/ARC11550Data.algo.ts:244","pc":[1507,1508,1509,1510,1511,1512]},{"teal":1446,"source":"contracts/ARC11550Data.algo.ts:244","pc":[1513,1514]},{"teal":1450,"source":"contracts/ARC11550Data.algo.ts:245","pc":[1515,1516]},{"teal":1451,"source":"contracts/ARC11550Data.algo.ts:245","pc":[1517,1518]},{"teal":1455,"source":"contracts/ARC11550Data.algo.ts:246","pc":[1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581]},{"teal":1456,"source":"contracts/ARC11550Data.algo.ts:246","pc":[1582,1583]},{"teal":1460,"source":"contracts/ARC11550Data.algo.ts:247","pc":[1584,1585,1586]},{"teal":1461,"source":"contracts/ARC11550Data.algo.ts:247","pc":[1587,1588]},{"teal":1464,"source":"contracts/ARC11550Data.algo.ts:244","pc":[1589]},{"teal":1465,"source":"contracts/ARC11550Data.algo.ts:244","pc":[1590,1591]},{"teal":1468,"source":"contracts/ARC11550Data.algo.ts:244","pc":[1592]},{"teal":1472,"source":"contracts/ARC11550Data.algo.ts:250","pc":[1593,1594]},{"teal":1473,"source":"contracts/ARC11550Data.algo.ts:250","pc":[1595,1596]},{"teal":1477,"source":"contracts/ARC11550Data.algo.ts:252","pc":[1597]},{"teal":1478,"source":"contracts/ARC11550Data.algo.ts:252","pc":[1598]},{"teal":1479,"source":"contracts/ARC11550Data.algo.ts:252","pc":[1599]},{"teal":1480,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1600,1601]},{"teal":1481,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1602,1603]},{"teal":1482,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1604]},{"teal":1483,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1605]},{"teal":1484,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1606,1607]},{"teal":1485,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1608]},{"teal":1486,"source":"contracts/ARC11550Data.algo.ts:252","pc":[1609]},{"teal":1487,"source":"contracts/ARC11550Data.algo.ts:252","pc":[1610]},{"teal":1488,"source":"contracts/ARC11550Data.algo.ts:252","pc":[1611]},{"teal":1489,"source":"contracts/ARC11550Data.algo.ts:252","pc":[1612]},{"teal":1490,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1613,1614]},{"teal":1491,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1615,1616]},{"teal":1492,"source":"contracts/ARC11550Data.algo.ts:237","pc":[1617]},{"teal":1496,"source":"contracts/ARC11550Data.algo.ts:254","pc":[1618,1619]},{"teal":1497,"source":"contracts/ARC11550Data.algo.ts:254","pc":[1620,1621]},{"teal":1498,"source":"contracts/ARC11550Data.algo.ts:254","pc":[1622]},{"teal":1499,"source":"contracts/ARC11550Data.algo.ts:254","pc":[1623]},{"teal":1500,"source":"contracts/ARC11550Data.algo.ts:254","pc":[1624,1625]},{"teal":1501,"source":"contracts/ARC11550Data.algo.ts:254","pc":[1626]},{"teal":1505,"source":"contracts/ARC11550Data.algo.ts:256","pc":[1627,1628]},{"teal":1506,"source":"contracts/ARC11550Data.algo.ts:256","pc":[1629]},{"teal":1507,"source":"contracts/ARC11550Data.algo.ts:256","pc":[1630,1631]},{"teal":1508,"source":"contracts/ARC11550Data.algo.ts:256","pc":[1632,1633,1634]},{"teal":1509,"source":"contracts/ARC11550Data.algo.ts:256","pc":[1635]},{"teal":1510,"source":"contracts/ARC11550Data.algo.ts:256","pc":[1636,1637]},{"teal":1514,"source":"contracts/ARC11550Data.algo.ts:258","pc":[1638]},{"teal":1515,"source":"contracts/ARC11550Data.algo.ts:258","pc":[1639,1640]},{"teal":1516,"source":"contracts/ARC11550Data.algo.ts:258","pc":[1641]},{"teal":1517,"source":"contracts/ARC11550Data.algo.ts:258","pc":[1642]},{"teal":1518,"source":"contracts/ARC11550Data.algo.ts:258","pc":[1643]},{"teal":1519,"source":"contracts/ARC11550Data.algo.ts:258","pc":[1644]},{"teal":1523,"source":"contracts/ARC11550Data.algo.ts:259","pc":[1645]},{"teal":1524,"source":"contracts/ARC11550Data.algo.ts:259","pc":[1646,1647]},{"teal":1525,"source":"contracts/ARC11550Data.algo.ts:259","pc":[1648]},{"teal":1526,"source":"contracts/ARC11550Data.algo.ts:259","pc":[1649,1650]},{"teal":1527,"source":"contracts/ARC11550Data.algo.ts:259","pc":[1651,1652,1653]},{"teal":1528,"source":"contracts/ARC11550Data.algo.ts:259","pc":[1654]},{"teal":1529,"source":"contracts/ARC11550Data.algo.ts:259","pc":[1655]},{"teal":1530,"source":"contracts/ARC11550Data.algo.ts:259","pc":[1656]},{"teal":1534,"source":"contracts/ARC11550Data.algo.ts:261","pc":[1657,1658]},{"teal":1537,"source":"contracts/ARC11550Data.algo.ts:236","pc":[1659,1660]},{"teal":1540,"source":"contracts/ARC11550Data.algo.ts:236","pc":[1661,1662]},{"teal":1541,"source":"contracts/ARC11550Data.algo.ts:236","pc":[1663]},{"teal":1544,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1664,1665,1666,1667,1668,1669]},{"teal":1545,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1670,1671,1672]},{"teal":1546,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1673,1674,1675,1676]},{"teal":1549,"source":"contracts/ARC11550Data.algo.ts:63","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[1677]},{"teal":1552,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1678,1679,1680,1681,1682,1683]},{"teal":1553,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1684,1685,1686,1687,1688,1689]},{"teal":1554,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1690,1691,1692,1693,1694,1695]},{"teal":1555,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1696,1697,1698,1699,1700,1701]},{"teal":1556,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1702,1703,1704,1705,1706,1707]},{"teal":1557,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1708,1709,1710,1711,1712,1713]},{"teal":1558,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1714,1715,1716,1717,1718,1719]},{"teal":1559,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1720,1721,1722,1723,1724,1725]},{"teal":1560,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1726,1727,1728,1729,1730,1731]},{"teal":1561,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1732,1733,1734,1735,1736,1737]},{"teal":1562,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1738,1739,1740,1741,1742,1743]},{"teal":1563,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1744,1745,1746,1747,1748,1749]},{"teal":1564,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1750,1751,1752,1753,1754,1755]},{"teal":1565,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1756,1757,1758,1759,1760,1761]},{"teal":1566,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1762,1763,1764]},{"teal":1567,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794]},{"teal":1570,"source":"contracts/ARC11550Data.algo.ts:63","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[1795]},{"teal":1573,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1796,1797]},{"teal":1574,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1798]},{"teal":1575,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1799,1800]},{"teal":1576,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1801]},{"teal":1577,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1802,1803,1804]},{"teal":1578,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1805,1806]},{"teal":1579,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1807]},{"teal":1580,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1808,1809]},{"teal":1581,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1810]},{"teal":1582,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1811,1812]},{"teal":1583,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1813,1814,1815]},{"teal":1586,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1816,1817]},{"teal":1587,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1818,1819]},{"teal":1588,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1820]},{"teal":1589,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1821]},{"teal":1590,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1822,1823]},{"teal":1593,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1824]},{"teal":1594,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1825,1826]},{"teal":1595,"source":"contracts/ARC11550Data.algo.ts:63","pc":[1827]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiANAAgBUCAoSHAGEBg4YCYJAAQVH3x1AWIBYQFjAXABbQxjb2xsZWN0aW9uSWQLdHJhbnNmZXJBcHAxGBQhCAsxGQiNDAYwAAAAAAAAAAAAAAYiAAAAAAAAAAAAAAA2GgEXiAACJEOKAQAnCIv/Z4kpNhoCFzYaAUkVIQQSRIgABRZQsCRDigIBKEknB2SMACcHZCQIJwdMZ4AIAAAAAAAAAACL/hZQi/9QjAEnBIsAFlCLAb+LAIwARgGJKTYaAReIAAUWULAkQ4oBASIjJwSL/xZQTgK6F4kpNhoBiAAEULAkQ4oBAScGi/9QvkSJKTYaAkkVIQQSRDYaAReIAAUWULAkQ4oCASqL/xaL/lBQvkQXiSk2GgEXiAAEULAkQ4oBAScFi/8WUL5EiSmIAAUWULAkQ4oAAScIZIkpNhoBF4gABRZQsCRDigEBgVgjJwWL/xZQTgK6F4kpNhoBVwIAiAAOSRUjChZXBgJMUFCwJEOKAQEoRwMojAAijAGLAYv/FSEFCgxBAESL/zX/IosBIQULCCIINP9MI1gXjAKL/zX/IosBIQULCCMINP9MIQRYjAOLACqLAhaLA1BQvkQXFlCMAIsBJAiMAUL/sIsAjABGA4kpNhoBVwIAiAAPSRUhDAoWVwYCTFBQsCRDigEBKEcCKIwAIowBiwGL/xUjCgxBACiL/zX/IosBIwsINP9MI1gXjAKLACcFiwIWUL5EUIwAiwEkCIwBQv/NiwCMAEYCiTYaAlcCADYaAYgAAiRDigIAMQAhCyEEJwWL/zX/NP9XAAgXFlBOAroSRCcGi/9QvUxIQQAOJwaL/1C+RDX/NP8iU0QnBov/UL5ENf8kSTX7NP80/08CWUk1/kk0/0xZJAuBAgg1/TT/IjT+Uov+SRUWVwYCTFBJNfw0/zT+NP0INP8VUlBQNf+IBEQ0/ycGi/9QSbxITL+JNhoCSRUhBRJENhoBSRUhBhJEiAACJEOKAgAxACELIQQnBYv/V0AIFxZQTgK6EkQri/8BUIv+v4k2GgFXAgCIAAIkQ4oBAChJIowAiwCL/xUhBwoMQQA3iwCMAYv/Nf8iiwEhBwsIIQYINP9MIQVYi/81/yKLASEHCwgiCDT/TCEGWIj/kosAJAiMAEL/vYk2GgJXAgA2GgFJFSEEEkSIAAIkQ4oCAChHBTINJwhkEkQijACLAIv+FSUKDEECA4sAjAGL/jX/IosBJQsIIwg0/0whBFiL/xNBAM2L/jX/IosBJQsIIwg0/0whBFiL/1CL/jX/IosBJQsIIgg0/0wjWBcWUAGMAiuLAlC9TEhEK4sCUIwDMgeMBCEEIyuLAlBOAroXiwQPRCMjK4sCUE4CuheL/jX/IosBJQsIIQYINP9MI1gXDElBABuLBCEKIyuLAlBOAroXCSEJIyuLAlBOAroXDxBBABsjIiMriwJQTgK6FxaLA04CuyEKiwQWiwNOArsjSSMriwJQTgK6F4v+Nf8iiwElCwghBgg0/0wjWBcJFosDTgK7Kov+Nf8iiwElCwgiCDT/TCNYFxaL/jX/IosBJQsIIwg0/0whBFhQUL5EF4v+Nf8iiwElCwghBgg0/0wjWBcJKov+Nf8iiwElCwgiCDT/TCNYFxaL/jX/IosBJQsIIwg0/0whBFhQUEwWv4v+Nf8iiwElCwgiCDT/TCNYFxaL/jX/IosBJQsIIQUINP9MIQRYUIwFKosFUL1MSBRBAAcqiwVQI7lIKov+Nf8iiwElCwgiCDT/TCNYFxaL/jX/IosBJQsIIQUINP9MIQRYUFC+RBeL/jX/IosBJQsIIQYINP9MI1gXCCqL/jX/IosBJQsIIgg0/0wjWBcWi/41/yKLASULCCEFCDT/TCEEWFBQTBa/iwAkCIwAQv3yiSk2GgJJFSEMEkQ2GgEXiAAFFlCwJEOKAgEoRwInBIv/FlCMADEAIQkhBCcEi/8WUE4CuhJEIyMnBIv/FlBOAroXIiMnBIv/FlBOAroXD0SxIQiyEIAENG+eCbIagQWyGYA9CjEYFIEGCzEZCI0MAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALAIgAA4EBQ4oAAImABDRvngk2GgCOAf/pALIegAEKsh8isgGztD2MASJJIycEi/8WUE4CuhckCBaLAE4CuycFiwEWUIv+v4sBFov+VzggUIwCKosCUCO5SCqLAlCL/lcoCBcWv4sBjABGAomABJc7YW82GgCOAfnSAIAExpVx+IAEKKWXZoAEmona/oAE0ErLwoAEoKyUPIAEwU5o2YAERWnn+IAEZd2HF4AEXmDiF4AE+O/R84AEox5VzYAE2CrkXYAEIaheG4AEv4AD1TYaAI4O+W75uvnX+e36Evoq+jr6WPrT+zL7yvwC/Fn+jAA0/BU0/QxAAAs0/BU0/SQ1+UIACDT9NPwVIjX5CTX6iQ==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Params = {
  name: Uint8Array,
  symbol: Uint8Array,
  total: bigint,
  decimals: bigint,
  manager: string,
  transferHookApp: bigint
}


/**
 * Converts the ABI tuple representation of a Params to the struct representation
 */
export function ParamsFromTuple(abiTuple: [Uint8Array, Uint8Array, bigint, bigint, string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Params, APP_SPEC.structs) as Params
}

export type IdAndAddress = {
  tokenId: bigint,
  address: string
}


/**
 * Converts the ABI tuple representation of a IdAndAddress to the struct representation
 */
export function IdAndAddressFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.IdAndAddress, APP_SPEC.structs) as IdAndAddress
}

export type Metadata = {
  mutable: boolean,
  data: Uint8Array
}


/**
 * Converts the ABI tuple representation of a Metadata to the struct representation
 */
export function MetadataFromTuple(abiTuple: [boolean, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Metadata, APP_SPEC.structs) as Metadata
}

export type MetadataKey = {
  id: bigint,
  key: Uint8Array
}


/**
 * Converts the ABI tuple representation of a MetadataKey to the struct representation
 */
export function MetadataKeyFromTuple(abiTuple: [bigint, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.MetadataKey, APP_SPEC.structs) as MetadataKey
}

export type Allowance = {
  amount: bigint,
  remainingAmount: bigint,
  cooldown: bigint,
  lastUsed: bigint,
  expirationTimestamp: bigint
}


/**
 * Converts the ABI tuple representation of a Allowance to the struct representation
 */
export function AllowanceFromTuple(abiTuple: [bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Allowance, APP_SPEC.structs) as Allowance
}

export type Collection = {
  minted: bigint,
  mintCap: bigint,
  manager: string
}


/**
 * Converts the ABI tuple representation of a Collection to the struct representation
 */
export function CollectionFromTuple(abiTuple: [bigint, bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Collection, APP_SPEC.structs) as Collection
}

export type AllowanceKey = {
  holder: string,
  sender: string,
  tokenId: bigint
}


/**
 * Converts the ABI tuple representation of a AllowanceKey to the struct representation
 */
export function AllowanceKeyFromTuple(abiTuple: [string, string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AllowanceKey, APP_SPEC.structs) as AllowanceKey
}

/**
 * The argument types for the Arc11550Data contract
 */
export type Arc11550DataArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(uint64)void': {
      transferApp: bigint | number
    }
    'arc11550_newCollection(address,uint64)uint64': {
      manager: string
      mintCap: bigint | number
    }
    'arc11550_collection_minted(uint64)uint64': {
      id: bigint | number
    }
    'arc11550_metadata((uint64,byte[]))(bool,byte[])': {
      key: MetadataKey
    }
    'arc11550_balanceOf(uint64,address)uint64': {
      id: bigint | number
      account: string
    }
    'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)': {
      id: bigint | number
    }
    'arc11550_transferApp()uint64': Record<string, never>
    'arc11550_transferHookApp(uint64)uint64': {
      id: bigint | number
    }
    'arc11550_balancesOf((uint64,address)[])uint64[]': {
      idAndAddrs: [bigint | number, string][]
    }
    'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]': {
      ids: bigint[] | number[]
    }
    'arc11550_setMetadata((uint64,byte[]),byte[])void': {
      key: MetadataKey
      data: Uint8Array
    }
    'arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void': {
      allowanceKey: AllowanceKey
      allowance: Allowance
    }
    'arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void': {
      allowances: [[string, string, bigint | number], [bigint | number, bigint | number, bigint | number, bigint | number, bigint | number]][]
    }
    'doTransfers(address,(uint64,address,address,uint64)[])void': {
      sender: string
      transfers: [bigint | number, string, string, bigint | number][]
    }
    'arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64': {
      collectionId: bigint | number
      params: Params
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(uint64)void': [transferApp: bigint | number]
    'arc11550_newCollection(address,uint64)uint64': [manager: string, mintCap: bigint | number]
    'arc11550_collection_minted(uint64)uint64': [id: bigint | number]
    'arc11550_metadata((uint64,byte[]))(bool,byte[])': [key: MetadataKey]
    'arc11550_balanceOf(uint64,address)uint64': [id: bigint | number, account: string]
    'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)': [id: bigint | number]
    'arc11550_transferApp()uint64': []
    'arc11550_transferHookApp(uint64)uint64': [id: bigint | number]
    'arc11550_balancesOf((uint64,address)[])uint64[]': [idAndAddrs: [bigint | number, string][]]
    'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]': [ids: bigint[] | number[]]
    'arc11550_setMetadata((uint64,byte[]),byte[])void': [key: MetadataKey, data: Uint8Array]
    'arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void': [allowanceKey: AllowanceKey, allowance: Allowance]
    'arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void': [allowances: [[string, string, bigint | number], [bigint | number, bigint | number, bigint | number, bigint | number, bigint | number]][]]
    'doTransfers(address,(uint64,address,address,uint64)[])void': [sender: string, transfers: [bigint | number, string, string, bigint | number][]]
    'arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64': [collectionId: bigint | number, params: Params]
  }
}

/**
 * The return type for each method
 */
export type Arc11550DataReturns = {
  'createApplication(uint64)void': void
  'arc11550_newCollection(address,uint64)uint64': bigint
  'arc11550_collection_minted(uint64)uint64': bigint
  'arc11550_metadata((uint64,byte[]))(bool,byte[])': Metadata
  'arc11550_balanceOf(uint64,address)uint64': bigint
  'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)': Params
  'arc11550_transferApp()uint64': bigint
  'arc11550_transferHookApp(uint64)uint64': bigint
  'arc11550_balancesOf((uint64,address)[])uint64[]': bigint[]
  'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]': [Uint8Array, Uint8Array, bigint, bigint, string, bigint][]
  'arc11550_setMetadata((uint64,byte[]),byte[])void': void
  'arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void': void
  'arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void': void
  'doTransfers(address,(uint64,address,address,uint64)[])void': void
  'arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64': bigint
}

/**
 * Defines the types of available calls and state of the Arc11550Data smart contract.
 */
export type Arc11550DataTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64)void' | 'createApplication', {
      argsObj: Arc11550DataArgs['obj']['createApplication(uint64)void']
      argsTuple: Arc11550DataArgs['tuple']['createApplication(uint64)void']
      returns: Arc11550DataReturns['createApplication(uint64)void']
    }>
    & Record<'arc11550_newCollection(address,uint64)uint64' | 'arc11550_newCollection', {
      argsObj: Arc11550DataArgs['obj']['arc11550_newCollection(address,uint64)uint64']
      argsTuple: Arc11550DataArgs['tuple']['arc11550_newCollection(address,uint64)uint64']
      returns: Arc11550DataReturns['arc11550_newCollection(address,uint64)uint64']
    }>
    & Record<'arc11550_collection_minted(uint64)uint64' | 'arc11550_collection_minted', {
      argsObj: Arc11550DataArgs['obj']['arc11550_collection_minted(uint64)uint64']
      argsTuple: Arc11550DataArgs['tuple']['arc11550_collection_minted(uint64)uint64']
      returns: Arc11550DataReturns['arc11550_collection_minted(uint64)uint64']
    }>
    & Record<'arc11550_metadata((uint64,byte[]))(bool,byte[])' | 'arc11550_metadata', {
      argsObj: Arc11550DataArgs['obj']['arc11550_metadata((uint64,byte[]))(bool,byte[])']
      argsTuple: Arc11550DataArgs['tuple']['arc11550_metadata((uint64,byte[]))(bool,byte[])']
      returns: Arc11550DataReturns['arc11550_metadata((uint64,byte[]))(bool,byte[])']
    }>
    & Record<'arc11550_balanceOf(uint64,address)uint64' | 'arc11550_balanceOf', {
      argsObj: Arc11550DataArgs['obj']['arc11550_balanceOf(uint64,address)uint64']
      argsTuple: Arc11550DataArgs['tuple']['arc11550_balanceOf(uint64,address)uint64']
      returns: Arc11550DataReturns['arc11550_balanceOf(uint64,address)uint64']
    }>
    & Record<'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)' | 'arc11550_params', {
      argsObj: Arc11550DataArgs['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)']
      argsTuple: Arc11550DataArgs['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)']
      returns: Arc11550DataReturns['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)']
    }>
    & Record<'arc11550_transferApp()uint64' | 'arc11550_transferApp', {
      argsObj: Arc11550DataArgs['obj']['arc11550_transferApp()uint64']
      argsTuple: Arc11550DataArgs['tuple']['arc11550_transferApp()uint64']
      returns: Arc11550DataReturns['arc11550_transferApp()uint64']
    }>
    & Record<'arc11550_transferHookApp(uint64)uint64' | 'arc11550_transferHookApp', {
      argsObj: Arc11550DataArgs['obj']['arc11550_transferHookApp(uint64)uint64']
      argsTuple: Arc11550DataArgs['tuple']['arc11550_transferHookApp(uint64)uint64']
      returns: Arc11550DataReturns['arc11550_transferHookApp(uint64)uint64']
    }>
    & Record<'arc11550_balancesOf((uint64,address)[])uint64[]' | 'arc11550_balancesOf', {
      argsObj: Arc11550DataArgs['obj']['arc11550_balancesOf((uint64,address)[])uint64[]']
      argsTuple: Arc11550DataArgs['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']
      returns: Arc11550DataReturns['arc11550_balancesOf((uint64,address)[])uint64[]']
    }>
    & Record<'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]' | 'arc11550_mulitpleParams', {
      argsObj: Arc11550DataArgs['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]']
      argsTuple: Arc11550DataArgs['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]']
      returns: Arc11550DataReturns['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]']
    }>
    & Record<'arc11550_setMetadata((uint64,byte[]),byte[])void' | 'arc11550_setMetadata', {
      argsObj: Arc11550DataArgs['obj']['arc11550_setMetadata((uint64,byte[]),byte[])void']
      argsTuple: Arc11550DataArgs['tuple']['arc11550_setMetadata((uint64,byte[]),byte[])void']
      returns: Arc11550DataReturns['arc11550_setMetadata((uint64,byte[]),byte[])void']
    }>
    & Record<'arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void' | 'arc11550_setAllowance', {
      argsObj: Arc11550DataArgs['obj']['arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void']
      argsTuple: Arc11550DataArgs['tuple']['arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void']
      returns: Arc11550DataReturns['arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void']
    }>
    & Record<'arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void' | 'arc11550_setAllowances', {
      argsObj: Arc11550DataArgs['obj']['arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void']
      argsTuple: Arc11550DataArgs['tuple']['arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void']
      returns: Arc11550DataReturns['arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void']
    }>
    & Record<'doTransfers(address,(uint64,address,address,uint64)[])void' | 'doTransfers', {
      argsObj: Arc11550DataArgs['obj']['doTransfers(address,(uint64,address,address,uint64)[])void']
      argsTuple: Arc11550DataArgs['tuple']['doTransfers(address,(uint64,address,address,uint64)[])void']
      returns: Arc11550DataReturns['doTransfers(address,(uint64,address,address,uint64)[])void']
    }>
    & Record<'arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64' | 'arc11550_mint', {
      argsObj: Arc11550DataArgs['obj']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64']
      argsTuple: Arc11550DataArgs['tuple']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64']
      returns: Arc11550DataReturns['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        transferApp: bigint
        collectionId: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        params: Map<bigint | number, Params>
        balances: Map<IdAndAddress, bigint>
        tokenMetadata: Map<MetadataKey, Metadata>
        collectionMetadata: Map<MetadataKey, Metadata>
        allowances: Map<Uint8Array, Allowance>
        collections: Map<bigint | number, Collection>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Arc11550DataSignatures = keyof Arc11550DataTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Arc11550DataNonVoidMethodSignatures = keyof Arc11550DataTypes['methods'] extends infer T ? T extends keyof Arc11550DataTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Arc11550Data smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Arc11550DataSignatures> = Arc11550DataTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc11550Data smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc11550DataSignatures> = Arc11550DataTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = Arc11550DataTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = Arc11550DataTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Arc11550DataCreateCallParams =
  | Expand<CallParams<Arc11550DataArgs['obj']['createApplication(uint64)void'] | Arc11550DataArgs['tuple']['createApplication(uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<Arc11550DataArgs['obj']['createApplication(uint64)void'] | Arc11550DataArgs['tuple']['createApplication(uint64)void']> & {method: 'createApplication(uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Arc11550DataDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Arc11550DataCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc11550Data smart contract
 */
export abstract class Arc11550DataParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends Arc11550DataCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(uint64)void':
            return Arc11550DataParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ARC11550Data smart contract using the createApplication(uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<Arc11550DataArgs['obj']['createApplication(uint64)void'] | Arc11550DataArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.transferApp],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the arc11550_newCollection(address,uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550NewCollection(params: CallParams<Arc11550DataArgs['obj']['arc11550_newCollection(address,uint64)uint64'] | Arc11550DataArgs['tuple']['arc11550_newCollection(address,uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_newCollection(address,uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.manager, params.args.mintCap],
    }
  }
  /**
   * Constructs a no op call for the arc11550_collection_minted(uint64)uint64 ABI method
   *
  * ***************
  Getter Methods
  ***************

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550CollectionMinted(params: CallParams<Arc11550DataArgs['obj']['arc11550_collection_minted(uint64)uint64'] | Arc11550DataArgs['tuple']['arc11550_collection_minted(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_collection_minted(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id],
    }
  }
  /**
   * Constructs a no op call for the arc11550_metadata((uint64,byte[]))(bool,byte[]) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Metadata(params: CallParams<Arc11550DataArgs['obj']['arc11550_metadata((uint64,byte[]))(bool,byte[])'] | Arc11550DataArgs['tuple']['arc11550_metadata((uint64,byte[]))(bool,byte[])']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_metadata((uint64,byte[]))(bool,byte[])' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
  /**
   * Constructs a no op call for the arc11550_balanceOf(uint64,address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550BalanceOf(params: CallParams<Arc11550DataArgs['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550DataArgs['tuple']['arc11550_balanceOf(uint64,address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_balanceOf(uint64,address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id, params.args.account],
    }
  }
  /**
   * Constructs a no op call for the arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Params(params: CallParams<Arc11550DataArgs['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)'] | Arc11550DataArgs['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id],
    }
  }
  /**
   * Constructs a no op call for the arc11550_transferApp()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550TransferApp(params: CallParams<Arc11550DataArgs['obj']['arc11550_transferApp()uint64'] | Arc11550DataArgs['tuple']['arc11550_transferApp()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_transferApp()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc11550_transferHookApp(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550TransferHookApp(params: CallParams<Arc11550DataArgs['obj']['arc11550_transferHookApp(uint64)uint64'] | Arc11550DataArgs['tuple']['arc11550_transferHookApp(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_transferHookApp(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id],
    }
  }
  /**
   * Constructs a no op call for the arc11550_balancesOf((uint64,address)[])uint64[] ABI method
   *
  * ********************
  Multi Getter Methods
  ********************

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550BalancesOf(params: CallParams<Arc11550DataArgs['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550DataArgs['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_balancesOf((uint64,address)[])uint64[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.idAndAddrs],
    }
  }
  /**
   * Constructs a no op call for the arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550MulitpleParams(params: CallParams<Arc11550DataArgs['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]'] | Arc11550DataArgs['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.ids],
    }
  }
  /**
   * Constructs a no op call for the arc11550_setMetadata((uint64,byte[]),byte[])void ABI method
   *
  * ***************
  Setter methods
  ***************

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550SetMetadata(params: CallParams<Arc11550DataArgs['obj']['arc11550_setMetadata((uint64,byte[]),byte[])void'] | Arc11550DataArgs['tuple']['arc11550_setMetadata((uint64,byte[]),byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_setMetadata((uint64,byte[]),byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550SetAllowance(params: CallParams<Arc11550DataArgs['obj']['arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void'] | Arc11550DataArgs['tuple']['arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.allowanceKey, params.args.allowance],
    }
  }
  /**
   * Constructs a no op call for the arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void ABI method
   *
  * ********************
  Multi Setter Methods
  ********************

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550SetAllowances(params: CallParams<Arc11550DataArgs['obj']['arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void'] | Arc11550DataArgs['tuple']['arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.allowances],
    }
  }
  /**
   * Constructs a no op call for the doTransfers(address,(uint64,address,address,uint64)[])void ABI method
   *
  * *********************
  Transfer/Mint Methods
  *********************

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static doTransfers(params: CallParams<Arc11550DataArgs['obj']['doTransfers(address,(uint64,address,address,uint64)[])void'] | Arc11550DataArgs['tuple']['doTransfers(address,(uint64,address,address,uint64)[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'doTransfers(address,(uint64,address,address,uint64)[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.sender, params.args.transfers],
    }
  }
  /**
   * Constructs a no op call for the arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Mint(params: CallParams<Arc11550DataArgs['obj']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64'] | Arc11550DataArgs['tuple']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.collectionId, params.args.params],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ARC11550Data smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Arc11550DataFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Arc11550DataFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Arc11550DataClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Arc11550DataClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ARC11550Data smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Arc11550DataDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? Arc11550DataParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (Arc11550DataCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new Arc11550DataClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Data smart contract using the createApplication(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<Arc11550DataArgs['obj']['createApplication(uint64)void'] | Arc11550DataArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(Arc11550DataParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Data smart contract using the createApplication(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<Arc11550DataArgs['obj']['createApplication(uint64)void'] | Arc11550DataArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(Arc11550DataParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Data smart contract using an ABI method call using the createApplication(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<Arc11550DataArgs['obj']['createApplication(uint64)void'] | Arc11550DataArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(Arc11550DataParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | Arc11550DataReturns['createApplication(uint64)void']) }, appClient: new Arc11550DataClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ARC11550Data smart contract
 */
export class Arc11550DataClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Arc11550DataClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Arc11550Data app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Arc11550DataClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Arc11550DataNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Arc11550DataClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Arc11550DataClient> {
    return new Arc11550DataClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Arc11550DataClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Arc11550DataClient> {
    return new Arc11550DataClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Data smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_newCollection(address,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550NewCollection: (params: CallParams<Arc11550DataArgs['obj']['arc11550_newCollection(address,uint64)uint64'] | Arc11550DataArgs['tuple']['arc11550_newCollection(address,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.arc11550NewCollection(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_collection_minted(uint64)uint64` ABI method.
     *
    * ***************
    Getter Methods
    ***************

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550CollectionMinted: (params: CallParams<Arc11550DataArgs['obj']['arc11550_collection_minted(uint64)uint64'] | Arc11550DataArgs['tuple']['arc11550_collection_minted(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.arc11550CollectionMinted(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_metadata((uint64,byte[]))(bool,byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Metadata: (params: CallParams<Arc11550DataArgs['obj']['arc11550_metadata((uint64,byte[]))(bool,byte[])'] | Arc11550DataArgs['tuple']['arc11550_metadata((uint64,byte[]))(bool,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.arc11550Metadata(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_balanceOf(uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550BalanceOf: (params: CallParams<Arc11550DataArgs['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550DataArgs['tuple']['arc11550_balanceOf(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.arc11550BalanceOf(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Params: (params: CallParams<Arc11550DataArgs['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)'] | Arc11550DataArgs['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.arc11550Params(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_transferApp()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550TransferApp: (params: CallParams<Arc11550DataArgs['obj']['arc11550_transferApp()uint64'] | Arc11550DataArgs['tuple']['arc11550_transferApp()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.arc11550TransferApp(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_transferHookApp(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550TransferHookApp: (params: CallParams<Arc11550DataArgs['obj']['arc11550_transferHookApp(uint64)uint64'] | Arc11550DataArgs['tuple']['arc11550_transferHookApp(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.arc11550TransferHookApp(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_balancesOf((uint64,address)[])uint64[]` ABI method.
     *
    * ********************
    Multi Getter Methods
    ********************

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550BalancesOf: (params: CallParams<Arc11550DataArgs['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550DataArgs['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.arc11550BalancesOf(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550MulitpleParams: (params: CallParams<Arc11550DataArgs['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]'] | Arc11550DataArgs['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.arc11550MulitpleParams(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_setMetadata((uint64,byte[]),byte[])void` ABI method.
     *
    * ***************
    Setter methods
    ***************

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550SetMetadata: (params: CallParams<Arc11550DataArgs['obj']['arc11550_setMetadata((uint64,byte[]),byte[])void'] | Arc11550DataArgs['tuple']['arc11550_setMetadata((uint64,byte[]),byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.arc11550SetMetadata(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550SetAllowance: (params: CallParams<Arc11550DataArgs['obj']['arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void'] | Arc11550DataArgs['tuple']['arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.arc11550SetAllowance(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void` ABI method.
     *
    * ********************
    Multi Setter Methods
    ********************

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550SetAllowances: (params: CallParams<Arc11550DataArgs['obj']['arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void'] | Arc11550DataArgs['tuple']['arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.arc11550SetAllowances(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `doTransfers(address,(uint64,address,address,uint64)[])void` ABI method.
     *
    * *********************
    Transfer/Mint Methods
    *********************

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    doTransfers: (params: CallParams<Arc11550DataArgs['obj']['doTransfers(address,(uint64,address,address,uint64)[])void'] | Arc11550DataArgs['tuple']['doTransfers(address,(uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.doTransfers(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Mint: (params: CallParams<Arc11550DataArgs['obj']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64'] | Arc11550DataArgs['tuple']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.arc11550Mint(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Data smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_newCollection(address,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550NewCollection: (params: CallParams<Arc11550DataArgs['obj']['arc11550_newCollection(address,uint64)uint64'] | Arc11550DataArgs['tuple']['arc11550_newCollection(address,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.arc11550NewCollection(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_collection_minted(uint64)uint64` ABI method.
     *
    * ***************
    Getter Methods
    ***************

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550CollectionMinted: (params: CallParams<Arc11550DataArgs['obj']['arc11550_collection_minted(uint64)uint64'] | Arc11550DataArgs['tuple']['arc11550_collection_minted(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.arc11550CollectionMinted(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_metadata((uint64,byte[]))(bool,byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Metadata: (params: CallParams<Arc11550DataArgs['obj']['arc11550_metadata((uint64,byte[]))(bool,byte[])'] | Arc11550DataArgs['tuple']['arc11550_metadata((uint64,byte[]))(bool,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.arc11550Metadata(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_balanceOf(uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550BalanceOf: (params: CallParams<Arc11550DataArgs['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550DataArgs['tuple']['arc11550_balanceOf(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.arc11550BalanceOf(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Params: (params: CallParams<Arc11550DataArgs['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)'] | Arc11550DataArgs['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.arc11550Params(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_transferApp()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550TransferApp: (params: CallParams<Arc11550DataArgs['obj']['arc11550_transferApp()uint64'] | Arc11550DataArgs['tuple']['arc11550_transferApp()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.arc11550TransferApp(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_transferHookApp(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550TransferHookApp: (params: CallParams<Arc11550DataArgs['obj']['arc11550_transferHookApp(uint64)uint64'] | Arc11550DataArgs['tuple']['arc11550_transferHookApp(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.arc11550TransferHookApp(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_balancesOf((uint64,address)[])uint64[]` ABI method.
     *
    * ********************
    Multi Getter Methods
    ********************

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550BalancesOf: (params: CallParams<Arc11550DataArgs['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550DataArgs['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.arc11550BalancesOf(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550MulitpleParams: (params: CallParams<Arc11550DataArgs['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]'] | Arc11550DataArgs['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.arc11550MulitpleParams(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_setMetadata((uint64,byte[]),byte[])void` ABI method.
     *
    * ***************
    Setter methods
    ***************

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550SetMetadata: (params: CallParams<Arc11550DataArgs['obj']['arc11550_setMetadata((uint64,byte[]),byte[])void'] | Arc11550DataArgs['tuple']['arc11550_setMetadata((uint64,byte[]),byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.arc11550SetMetadata(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550SetAllowance: (params: CallParams<Arc11550DataArgs['obj']['arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void'] | Arc11550DataArgs['tuple']['arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.arc11550SetAllowance(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void` ABI method.
     *
    * ********************
    Multi Setter Methods
    ********************

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550SetAllowances: (params: CallParams<Arc11550DataArgs['obj']['arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void'] | Arc11550DataArgs['tuple']['arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.arc11550SetAllowances(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `doTransfers(address,(uint64,address,address,uint64)[])void` ABI method.
     *
    * *********************
    Transfer/Mint Methods
    *********************

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    doTransfers: (params: CallParams<Arc11550DataArgs['obj']['doTransfers(address,(uint64,address,address,uint64)[])void'] | Arc11550DataArgs['tuple']['doTransfers(address,(uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.doTransfers(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Mint: (params: CallParams<Arc11550DataArgs['obj']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64'] | Arc11550DataArgs['tuple']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.arc11550Mint(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Data smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_newCollection(address,uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550NewCollection: async (params: CallParams<Arc11550DataArgs['obj']['arc11550_newCollection(address,uint64)uint64'] | Arc11550DataArgs['tuple']['arc11550_newCollection(address,uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.arc11550NewCollection(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['arc11550_newCollection(address,uint64)uint64'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_collection_minted(uint64)uint64` ABI method.
     *
    * ***************
    Getter Methods
    ***************

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550CollectionMinted: async (params: CallParams<Arc11550DataArgs['obj']['arc11550_collection_minted(uint64)uint64'] | Arc11550DataArgs['tuple']['arc11550_collection_minted(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.arc11550CollectionMinted(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['arc11550_collection_minted(uint64)uint64'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_metadata((uint64,byte[]))(bool,byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Metadata: async (params: CallParams<Arc11550DataArgs['obj']['arc11550_metadata((uint64,byte[]))(bool,byte[])'] | Arc11550DataArgs['tuple']['arc11550_metadata((uint64,byte[]))(bool,byte[])']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.arc11550Metadata(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['arc11550_metadata((uint64,byte[]))(bool,byte[])'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_balanceOf(uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550BalanceOf: async (params: CallParams<Arc11550DataArgs['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550DataArgs['tuple']['arc11550_balanceOf(uint64,address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.arc11550BalanceOf(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['arc11550_balanceOf(uint64,address)uint64'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Params: async (params: CallParams<Arc11550DataArgs['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)'] | Arc11550DataArgs['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.arc11550Params(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_transferApp()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550TransferApp: async (params: CallParams<Arc11550DataArgs['obj']['arc11550_transferApp()uint64'] | Arc11550DataArgs['tuple']['arc11550_transferApp()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.arc11550TransferApp(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['arc11550_transferApp()uint64'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_transferHookApp(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550TransferHookApp: async (params: CallParams<Arc11550DataArgs['obj']['arc11550_transferHookApp(uint64)uint64'] | Arc11550DataArgs['tuple']['arc11550_transferHookApp(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.arc11550TransferHookApp(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['arc11550_transferHookApp(uint64)uint64'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_balancesOf((uint64,address)[])uint64[]` ABI method.
     *
    * ********************
    Multi Getter Methods
    ********************

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550BalancesOf: async (params: CallParams<Arc11550DataArgs['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550DataArgs['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.arc11550BalancesOf(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['arc11550_balancesOf((uint64,address)[])uint64[]'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550MulitpleParams: async (params: CallParams<Arc11550DataArgs['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]'] | Arc11550DataArgs['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.arc11550MulitpleParams(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_setMetadata((uint64,byte[]),byte[])void` ABI method.
     *
    * ***************
    Setter methods
    ***************

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550SetMetadata: async (params: CallParams<Arc11550DataArgs['obj']['arc11550_setMetadata((uint64,byte[]),byte[])void'] | Arc11550DataArgs['tuple']['arc11550_setMetadata((uint64,byte[]),byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.arc11550SetMetadata(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['arc11550_setMetadata((uint64,byte[]),byte[])void'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550SetAllowance: async (params: CallParams<Arc11550DataArgs['obj']['arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void'] | Arc11550DataArgs['tuple']['arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.arc11550SetAllowance(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void` ABI method.
     *
    * ********************
    Multi Setter Methods
    ********************

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550SetAllowances: async (params: CallParams<Arc11550DataArgs['obj']['arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void'] | Arc11550DataArgs['tuple']['arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.arc11550SetAllowances(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `doTransfers(address,(uint64,address,address,uint64)[])void` ABI method.
     *
    * *********************
    Transfer/Mint Methods
    *********************

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    doTransfers: async (params: CallParams<Arc11550DataArgs['obj']['doTransfers(address,(uint64,address,address,uint64)[])void'] | Arc11550DataArgs['tuple']['doTransfers(address,(uint64,address,address,uint64)[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.doTransfers(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['doTransfers(address,(uint64,address,address,uint64)[])void'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Mint: async (params: CallParams<Arc11550DataArgs['obj']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64'] | Arc11550DataArgs['tuple']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.arc11550Mint(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Arc11550DataClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ARC11550Data app
   */
  state = {
    /**
     * Methods to access global state for the current ARC11550Data app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          transferApp: result.transferApp,
          collectionId: result.collectionId,
        }
      },
      /**
       * Get the current value of the transferApp key in global state
       */
      transferApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("transferApp")) as bigint | undefined },
      /**
       * Get the current value of the collectionId key in global state
       */
      collectionId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("collectionId")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current ARC11550Data app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the params map in box state
       */
      params: {
        /**
         * Get all current values of the params map in box state
         */
        getMap: async (): Promise<Map<bigint, Params>> => { return (await this.appClient.state.box.getMap("params")) as Map<bigint, Params> },
        /**
         * Get a current value of the params map by key from box state
         */
        value: async (key: bigint | number): Promise<Params | undefined> => { return await this.appClient.state.box.getMapValue("params", key) as Params | undefined },
      },
      /**
       * Get values from the balances map in box state
       */
      balances: {
        /**
         * Get all current values of the balances map in box state
         */
        getMap: async (): Promise<Map<IdAndAddress, bigint>> => { return (await this.appClient.state.box.getMap("balances")) as Map<IdAndAddress, bigint> },
        /**
         * Get a current value of the balances map by key from box state
         */
        value: async (key: IdAndAddress): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("balances", key) as bigint | undefined },
      },
      /**
       * Get values from the tokenMetadata map in box state
       */
      tokenMetadata: {
        /**
         * Get all current values of the tokenMetadata map in box state
         */
        getMap: async (): Promise<Map<MetadataKey, Metadata>> => { return (await this.appClient.state.box.getMap("tokenMetadata")) as Map<MetadataKey, Metadata> },
        /**
         * Get a current value of the tokenMetadata map by key from box state
         */
        value: async (key: MetadataKey): Promise<Metadata | undefined> => { return await this.appClient.state.box.getMapValue("tokenMetadata", key) as Metadata | undefined },
      },
      /**
       * Get values from the collectionMetadata map in box state
       */
      collectionMetadata: {
        /**
         * Get all current values of the collectionMetadata map in box state
         */
        getMap: async (): Promise<Map<MetadataKey, Metadata>> => { return (await this.appClient.state.box.getMap("collectionMetadata")) as Map<MetadataKey, Metadata> },
        /**
         * Get a current value of the collectionMetadata map by key from box state
         */
        value: async (key: MetadataKey): Promise<Metadata | undefined> => { return await this.appClient.state.box.getMapValue("collectionMetadata", key) as Metadata | undefined },
      },
      /**
       * Get values from the allowances map in box state
       */
      allowances: {
        /**
         * Get all current values of the allowances map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, Allowance>> => { return (await this.appClient.state.box.getMap("allowances")) as Map<Uint8Array, Allowance> },
        /**
         * Get a current value of the allowances map by key from box state
         */
        value: async (key: Uint8Array): Promise<Allowance | undefined> => { return await this.appClient.state.box.getMapValue("allowances", key) as Allowance | undefined },
      },
      /**
       * Get values from the collections map in box state
       */
      collections: {
        /**
         * Get all current values of the collections map in box state
         */
        getMap: async (): Promise<Map<bigint, Collection>> => { return (await this.appClient.state.box.getMap("collections")) as Map<bigint, Collection> },
        /**
         * Get a current value of the collections map by key from box state
         */
        value: async (key: bigint | number): Promise<Collection | undefined> => { return await this.appClient.state.box.getMapValue("collections", key) as Collection | undefined },
      },
    },
  }

  public newGroup(): Arc11550DataComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a arc11550_newCollection(address,uint64)uint64 method call against the ARC11550Data contract
       */
      arc11550NewCollection(params: CallParams<Arc11550DataArgs['obj']['arc11550_newCollection(address,uint64)uint64'] | Arc11550DataArgs['tuple']['arc11550_newCollection(address,uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550NewCollection(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_newCollection(address,uint64)uint64', v))
        return this
      },
      /**
       * Add a arc11550_collection_minted(uint64)uint64 method call against the ARC11550Data contract
       */
      arc11550CollectionMinted(params: CallParams<Arc11550DataArgs['obj']['arc11550_collection_minted(uint64)uint64'] | Arc11550DataArgs['tuple']['arc11550_collection_minted(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550CollectionMinted(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_collection_minted(uint64)uint64', v))
        return this
      },
      /**
       * Add a arc11550_metadata((uint64,byte[]))(bool,byte[]) method call against the ARC11550Data contract
       */
      arc11550Metadata(params: CallParams<Arc11550DataArgs['obj']['arc11550_metadata((uint64,byte[]))(bool,byte[])'] | Arc11550DataArgs['tuple']['arc11550_metadata((uint64,byte[]))(bool,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Metadata(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_metadata((uint64,byte[]))(bool,byte[])', v))
        return this
      },
      /**
       * Add a arc11550_balanceOf(uint64,address)uint64 method call against the ARC11550Data contract
       */
      arc11550BalanceOf(params: CallParams<Arc11550DataArgs['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550DataArgs['tuple']['arc11550_balanceOf(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550BalanceOf(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_balanceOf(uint64,address)uint64', v))
        return this
      },
      /**
       * Add a arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64) method call against the ARC11550Data contract
       */
      arc11550Params(params: CallParams<Arc11550DataArgs['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)'] | Arc11550DataArgs['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Params(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)', v))
        return this
      },
      /**
       * Add a arc11550_transferApp()uint64 method call against the ARC11550Data contract
       */
      arc11550TransferApp(params: CallParams<Arc11550DataArgs['obj']['arc11550_transferApp()uint64'] | Arc11550DataArgs['tuple']['arc11550_transferApp()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550TransferApp(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_transferApp()uint64', v))
        return this
      },
      /**
       * Add a arc11550_transferHookApp(uint64)uint64 method call against the ARC11550Data contract
       */
      arc11550TransferHookApp(params: CallParams<Arc11550DataArgs['obj']['arc11550_transferHookApp(uint64)uint64'] | Arc11550DataArgs['tuple']['arc11550_transferHookApp(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550TransferHookApp(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_transferHookApp(uint64)uint64', v))
        return this
      },
      /**
       * Add a arc11550_balancesOf((uint64,address)[])uint64[] method call against the ARC11550Data contract
       */
      arc11550BalancesOf(params: CallParams<Arc11550DataArgs['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550DataArgs['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550BalancesOf(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_balancesOf((uint64,address)[])uint64[]', v))
        return this
      },
      /**
       * Add a arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[] method call against the ARC11550Data contract
       */
      arc11550MulitpleParams(params: CallParams<Arc11550DataArgs['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]'] | Arc11550DataArgs['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550MulitpleParams(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]', v))
        return this
      },
      /**
       * Add a arc11550_setMetadata((uint64,byte[]),byte[])void method call against the ARC11550Data contract
       */
      arc11550SetMetadata(params: CallParams<Arc11550DataArgs['obj']['arc11550_setMetadata((uint64,byte[]),byte[])void'] | Arc11550DataArgs['tuple']['arc11550_setMetadata((uint64,byte[]),byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550SetMetadata(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void method call against the ARC11550Data contract
       */
      arc11550SetAllowance(params: CallParams<Arc11550DataArgs['obj']['arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void'] | Arc11550DataArgs['tuple']['arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550SetAllowance(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void method call against the ARC11550Data contract
       */
      arc11550SetAllowances(params: CallParams<Arc11550DataArgs['obj']['arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void'] | Arc11550DataArgs['tuple']['arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550SetAllowances(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a doTransfers(address,(uint64,address,address,uint64)[])void method call against the ARC11550Data contract
       */
      doTransfers(params: CallParams<Arc11550DataArgs['obj']['doTransfers(address,(uint64,address,address,uint64)[])void'] | Arc11550DataArgs['tuple']['doTransfers(address,(uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.doTransfers(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64 method call against the ARC11550Data contract
       */
      arc11550Mint(params: CallParams<Arc11550DataArgs['obj']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64'] | Arc11550DataArgs['tuple']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Mint(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64', v))
        return this
      },
      /**
       * Add a clear state call to the ARC11550Data contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Arc11550DataComposer
  }
}
export type Arc11550DataComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc11550_newCollection(address,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550NewCollection(params?: CallParams<Arc11550DataArgs['obj']['arc11550_newCollection(address,uint64)uint64'] | Arc11550DataArgs['tuple']['arc11550_newCollection(address,uint64)uint64']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['arc11550_newCollection(address,uint64)uint64'] | undefined]>

  /**
   * Calls the arc11550_collection_minted(uint64)uint64 ABI method.
   *
  * ***************
  Getter Methods
  ***************

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550CollectionMinted(params?: CallParams<Arc11550DataArgs['obj']['arc11550_collection_minted(uint64)uint64'] | Arc11550DataArgs['tuple']['arc11550_collection_minted(uint64)uint64']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['arc11550_collection_minted(uint64)uint64'] | undefined]>

  /**
   * Calls the arc11550_metadata((uint64,byte[]))(bool,byte[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Metadata(params?: CallParams<Arc11550DataArgs['obj']['arc11550_metadata((uint64,byte[]))(bool,byte[])'] | Arc11550DataArgs['tuple']['arc11550_metadata((uint64,byte[]))(bool,byte[])']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['arc11550_metadata((uint64,byte[]))(bool,byte[])'] | undefined]>

  /**
   * Calls the arc11550_balanceOf(uint64,address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550BalanceOf(params?: CallParams<Arc11550DataArgs['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550DataArgs['tuple']['arc11550_balanceOf(uint64,address)uint64']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['arc11550_balanceOf(uint64,address)uint64'] | undefined]>

  /**
   * Calls the arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Params(params?: CallParams<Arc11550DataArgs['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)'] | Arc11550DataArgs['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)'] | undefined]>

  /**
   * Calls the arc11550_transferApp()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550TransferApp(params?: CallParams<Arc11550DataArgs['obj']['arc11550_transferApp()uint64'] | Arc11550DataArgs['tuple']['arc11550_transferApp()uint64']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['arc11550_transferApp()uint64'] | undefined]>

  /**
   * Calls the arc11550_transferHookApp(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550TransferHookApp(params?: CallParams<Arc11550DataArgs['obj']['arc11550_transferHookApp(uint64)uint64'] | Arc11550DataArgs['tuple']['arc11550_transferHookApp(uint64)uint64']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['arc11550_transferHookApp(uint64)uint64'] | undefined]>

  /**
   * Calls the arc11550_balancesOf((uint64,address)[])uint64[] ABI method.
   *
  * ********************
  Multi Getter Methods
  ********************

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550BalancesOf(params?: CallParams<Arc11550DataArgs['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550DataArgs['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['arc11550_balancesOf((uint64,address)[])uint64[]'] | undefined]>

  /**
   * Calls the arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550MulitpleParams(params?: CallParams<Arc11550DataArgs['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]'] | Arc11550DataArgs['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]'] | undefined]>

  /**
   * Calls the arc11550_setMetadata((uint64,byte[]),byte[])void ABI method.
   *
  * ***************
  Setter methods
  ***************

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550SetMetadata(params?: CallParams<Arc11550DataArgs['obj']['arc11550_setMetadata((uint64,byte[]),byte[])void'] | Arc11550DataArgs['tuple']['arc11550_setMetadata((uint64,byte[]),byte[])void']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['arc11550_setMetadata((uint64,byte[]),byte[])void'] | undefined]>

  /**
   * Calls the arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550SetAllowance(params?: CallParams<Arc11550DataArgs['obj']['arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void'] | Arc11550DataArgs['tuple']['arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void'] | undefined]>

  /**
   * Calls the arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void ABI method.
   *
  * ********************
  Multi Setter Methods
  ********************

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550SetAllowances(params?: CallParams<Arc11550DataArgs['obj']['arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void'] | Arc11550DataArgs['tuple']['arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void'] | undefined]>

  /**
   * Calls the doTransfers(address,(uint64,address,address,uint64)[])void ABI method.
   *
  * *********************
  Transfer/Mint Methods
  *********************

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  doTransfers(params?: CallParams<Arc11550DataArgs['obj']['doTransfers(address,(uint64,address,address,uint64)[])void'] | Arc11550DataArgs['tuple']['doTransfers(address,(uint64,address,address,uint64)[])void']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['doTransfers(address,(uint64,address,address,uint64)[])void'] | undefined]>

  /**
   * Calls the arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Mint(params?: CallParams<Arc11550DataArgs['obj']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64'] | Arc11550DataArgs['tuple']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ARC11550Data smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Arc11550DataComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc11550DataComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc11550DataComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Arc11550DataComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Arc11550DataComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Arc11550DataComposerResults<TReturns>>
}
export type Arc11550DataComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


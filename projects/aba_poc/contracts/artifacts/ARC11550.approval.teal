#pragma version 10
intcblock 0 80 8 1 32 40 88 72 6
bytecblock 0x 0x62 0x151f7c75 0x6e6578744964 0x6d 0x70 0x7472616e73666572486f6f6b417070

// This TEAL was generated by TEALScript v0.106.3
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 8 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(uint64)void
*abi_route_createApplication:
	// app: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64)void
	callsub createApplication
	intc 3 // 1
	return

// createApplication(app: AppID): void
createApplication:
	proto 1 0

	// contracts/ARC11550.algo.ts:55
	// this.transferHookApp.value = app
	bytec 6 //  "transferHookApp"
	frame_dig -1 // app: AppID
	app_global_put

	// contracts/ARC11550.algo.ts:56
	// this.nextId.value = 0
	bytec 3 //  "nextId"
	intc 0 // 0
	app_global_put
	retsub

// arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64
*abi_route_arc11550_mint:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// params: (byte[32],byte[8],uint64,uint64,address)
	txna ApplicationArgs 1
	dup
	len
	intc 6 // 88
	==

	// argument 0 (params) for arc11550_mint must be a (byte[32],byte[8],uint64,uint64,address)
	assert

	// execute arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64
	callsub arc11550_mint
	itob
	concat
	log
	intc 3 // 1
	return

// arc11550_mint(params: Params): uint64
arc11550_mint:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts/ARC11550.algo.ts:60
	// assert(this.txn.sender === this.minter.value)
	txn Sender
	pushbytes 0x6d696e746572 // "minter"
	app_global_get
	==
	assert

	// contracts/ARC11550.algo.ts:61
	// this.params(this.nextId.value).value = params
	bytec 5 //  "p"
	bytec 3 //  "nextId"
	app_global_get
	itob
	concat
	frame_dig -1 // params: Params
	box_put

	// contracts/ARC11550.algo.ts:63
	// id = this.nextId.value
	bytec 3 //  "nextId"
	app_global_get
	frame_bury 0 // id: uint64

	// contracts/ARC11550.algo.ts:64
	// this.nextId.value += 1
	bytec 3 //  "nextId"
	app_global_get
	intc 3 // 1
	+
	bytec 3 //  "nextId"
	swap
	app_global_put

	// contracts/ARC11550.algo.ts:66
	// return id;
	frame_dig 0 // id: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64
*abi_route_arc11550_multiMint:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// params: (byte[32],byte[8],uint64,uint64,address)[]
	txna ApplicationArgs 1
	extract 2 0

	// execute arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64
	callsub arc11550_multiMint
	itob
	concat
	log
	intc 3 // 1
	return

// arc11550_multiMint(params: Params[]): uint64
arc11550_multiMint:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts/ARC11550.algo.ts:70
	// firstId = this.nextId.value
	bytec 3 //  "nextId"
	app_global_get
	frame_bury 0 // firstId: uint64

	// contracts/ARC11550.algo.ts:71
	// for (let i = 0; i < params.length; i += 1)
	intc 0 // 0
	frame_bury 1 // i: uint64

*for_0:
	// contracts/ARC11550.algo.ts:71
	// i < params.length
	frame_dig 1 // i: uint64
	frame_dig -1 // params: Params[]
	len
	intc 6 // 88
	/
	<
	bz *for_0_end

	// contracts/ARC11550.algo.ts:72
	// this.arc11550_mint(params[i])
	frame_dig -1 // params: Params[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 6 // 88
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 6 // 88
	extract3
	callsub arc11550_mint

*for_0_continue:
	// contracts/ARC11550.algo.ts:71
	// i += 1
	frame_dig 1 // i: uint64
	intc 3 // 1
	+
	frame_bury 1 // i: uint64
	b *for_0

*for_0_end:
	// contracts/ARC11550.algo.ts:75
	// return firstId;
	frame_dig 0 // firstId: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// arc11550_metadata((uint64,string))(bool,byte[])
*abi_route_arc11550_metadata:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// key: (uint64,string)
	txna ApplicationArgs 1

	// execute arc11550_metadata((uint64,string))(bool,byte[])
	callsub arc11550_metadata
	concat
	log
	intc 3 // 1
	return

// arc11550_metadata(key: MetadataKey): Metadata
arc11550_metadata:
	proto 1 1

	// contracts/ARC11550.algo.ts:79
	// return this.metadata(key).value;
	bytec 4 //  "m"
	frame_dig -1 // key: MetadataKey
	concat
	box_get

	// box value does not exist: this.metadata(key).value
	assert
	retsub

// arc11550_setMetadata((uint64,string),byte[])void
*abi_route_arc11550_setMetadata:
	// data: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// key: (uint64,string)
	txna ApplicationArgs 1

	// execute arc11550_setMetadata((uint64,string),byte[])void
	callsub arc11550_setMetadata
	intc 3 // 1
	return

// arc11550_setMetadata(key: MetadataKey, data: bytes): void
arc11550_setMetadata:
	proto 2 0

	// contracts/ARC11550.algo.ts:94
	// assert(this.txn.sender === this.params(key.id).value.manager)
	txn Sender
	pushint 56 // headOffset
	intc 4 // 32
	bytec 5 //  "p"
	frame_dig -1 // key: MetadataKey
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	==
	assert

	// *if0_condition
	// contracts/ARC11550.algo.ts:96
	// this.metadata(key).exists
	bytec 4 //  "m"
	frame_dig -1 // key: MetadataKey
	concat
	box_len
	swap
	pop
	bz *if0_end

	// *if0_consequent
	// contracts/ARC11550.algo.ts:97
	// assert(this.metadata(key).value.mutable)
	bytec 4 //  "m"
	frame_dig -1 // key: MetadataKey
	concat
	box_get

	// box value does not exist: this.metadata(key).value
	assert
	store 255 // full array
	load 255 // full array
	intc 0 // 0
	getbit
	assert

*if0_end:
	// contracts/ARC11550.algo.ts:100
	// this.metadata(key).value.data = data
	bytec 4 //  "m"
	frame_dig -1 // key: MetadataKey
	concat
	box_get

	// box value does not exist: this.metadata(key).value
	assert
	store 255 // full array
	intc 3 // 1
	dup
	store 251 // element head offset
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup
	store 254 // element start
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 3 //  get type length
	* // multiply by type length
	pushint 2
	+ // add two for length
	store 253 // element length
	load 255 // full array
	intc 0 // 0
	load 254 // element start
	substring3
	frame_dig -2 // data: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	dup
	store 252 // new element
	load 255 // full array
	load 254 // element start
	load 253 // element length
	+ // get end of Element
	load 255 // full array
	len
	substring3
	concat
	concat
	store 255 // full array
	callsub *get_length_difference
	load 255 // full array
	bytec 4 //  "m"
	frame_dig -1 // key: MetadataKey
	concat
	dup
	box_del
	pop
	swap
	box_put
	retsub

// arc11550_balanceOf(uint64,address)uint64
*abi_route_arc11550_balanceOf:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// account: address
	txna ApplicationArgs 2
	dup
	len
	intc 4 // 32
	==

	// argument 0 (account) for arc11550_balanceOf must be a address
	assert

	// id: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc11550_balanceOf(uint64,address)uint64
	callsub arc11550_balanceOf
	itob
	concat
	log
	intc 3 // 1
	return

// arc11550_balanceOf(id: Id, account: Address): uint64
arc11550_balanceOf:
	proto 2 1

	// contracts/ARC11550.algo.ts:111
	// return this.balances({ id: id, address: account }).value;
	bytec 1 //  "b"
	frame_dig -1 // id: Id
	itob
	frame_dig -2 // account: Address
	concat
	concat
	box_get

	// box value does not exist: this.balances({ id: id, address: account }).value
	assert
	btoi
	retsub

// arc11550_balancesOf((uint64,address)[])uint64[]
*abi_route_arc11550_balancesOf:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// idAndAddrs: (uint64,address)[]
	txna ApplicationArgs 1
	extract 2 0

	// execute arc11550_balancesOf((uint64,address)[])uint64[]
	callsub arc11550_balancesOf
	dup
	len
	intc 2 // 8
	/
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 3 // 1
	return

// arc11550_balancesOf(idAndAddrs: IdAndAddress[]): uint64[]
arc11550_balancesOf:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// contracts/ARC11550.algo.ts:115
	// balances: uint64[] = []
	bytec 0 // 0x
	frame_bury 0 // balances: uint64[]

	// contracts/ARC11550.algo.ts:116
	// for (let i = 0; i < idAndAddrs.length; i += 1)
	intc 0 // 0
	frame_bury 1 // i: uint64

*for_1:
	// contracts/ARC11550.algo.ts:116
	// i < idAndAddrs.length
	frame_dig 1 // i: uint64
	frame_dig -1 // idAndAddrs: IdAndAddress[]
	len
	intc 5 // 40
	/
	<
	bz *for_1_end

	// contracts/ARC11550.algo.ts:117
	// id = idAndAddrs[i].id
	frame_dig -1 // idAndAddrs: IdAndAddress[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 5 // 40
	* // acc * typeLength
	+
	intc 0 //  headOffset
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	frame_bury 2 // id: uint64

	// contracts/ARC11550.algo.ts:118
	// addr = idAndAddrs[i].address
	frame_dig -1 // idAndAddrs: IdAndAddress[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 5 // 40
	* // acc * typeLength
	+
	intc 2 //  headOffset
	+
	load 255 // full array
	swap
	intc 4 // 32
	extract3
	frame_bury 3 // addr: address

	// contracts/ARC11550.algo.ts:119
	// balances.push(this.balances({ id: id, address: addr }).value)
	frame_dig 0 // balances: uint64[]
	bytec 1 //  "b"
	frame_dig 2 // id: uint64
	itob
	frame_dig 3 // addr: address
	concat
	concat
	box_get

	// box value does not exist: this.balances({ id: id, address: addr }).value
	assert
	btoi
	itob
	concat
	frame_bury 0 // balances: uint64[]

*for_1_continue:
	// contracts/ARC11550.algo.ts:116
	// i += 1
	frame_dig 1 // i: uint64
	intc 3 // 1
	+
	frame_bury 1 // i: uint64
	b *for_1

*for_1_end:
	// contracts/ARC11550.algo.ts:122
	// return balances;
	frame_dig 0 // balances: uint64[]

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

// arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)
*abi_route_arc11550_params:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// id: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)
	callsub arc11550_params
	concat
	log
	intc 3 // 1
	return

// arc11550_params(id: Id): Params
arc11550_params:
	proto 1 1

	// contracts/ARC11550.algo.ts:126
	// return this.params(id).value;
	bytec 5 //  "p"
	frame_dig -1 // id: Id
	itob
	concat
	box_get

	// box value does not exist: this.params(id).value
	assert
	retsub

// arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]
*abi_route_arc11550_mulitpleParams:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// ids: uint64[]
	txna ApplicationArgs 1
	extract 2 0

	// execute arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]
	callsub arc11550_mulitpleParams
	dup
	len
	intc 6 // 88
	/
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 3 // 1
	return

// arc11550_mulitpleParams(ids: Id[]): Params[]
arc11550_mulitpleParams:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts/ARC11550.algo.ts:130
	// params: Params[] = []
	bytec 0 // 0x
	frame_bury 0 // params: Params[]

	// contracts/ARC11550.algo.ts:131
	// for (let i = 0; i < ids.length; i += 1)
	intc 0 // 0
	frame_bury 1 // i: uint64

*for_2:
	// contracts/ARC11550.algo.ts:131
	// i < ids.length
	frame_dig 1 // i: uint64
	frame_dig -1 // ids: Id[]
	len
	intc 2 // 8
	/
	<
	bz *for_2_end

	// contracts/ARC11550.algo.ts:132
	// id = ids[i]
	frame_dig -1 // ids: Id[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	frame_bury 2 // id: uint64

	// contracts/ARC11550.algo.ts:133
	// params.push(this.params(id).value)
	frame_dig 0 // params: Params[]
	bytec 5 //  "p"
	frame_dig 2 // id: uint64
	itob
	concat
	box_get

	// box value does not exist: this.params(id).value
	assert
	concat
	frame_bury 0 // params: Params[]

*for_2_continue:
	// contracts/ARC11550.algo.ts:131
	// i += 1
	frame_dig 1 // i: uint64
	intc 3 // 1
	+
	frame_bury 1 // i: uint64
	b *for_2

*for_2_end:
	// contracts/ARC11550.algo.ts:136
	// return params;
	frame_dig 0 // params: Params[]

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// arc11550_transfer((uint64,address,address,uint64)[])void
*abi_route_arc11550_transfer:
	// transfers: (uint64,address,address,uint64)[]
	txna ApplicationArgs 1
	extract 2 0

	// execute arc11550_transfer((uint64,address,address,uint64)[])void
	callsub arc11550_transfer
	intc 3 // 1
	return

// arc11550_transfer(transfers: Transfer[]): void
arc11550_transfer:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// *if1_condition
	// contracts/ARC11550.algo.ts:143
	// this.transferHookApp.value.id != 0
	bytec 6 //  "transferHookApp"
	app_global_get
	intc 0 // 0
	!=
	bz *if1_end

	// *if1_consequent
	// contracts/ARC11550.algo.ts:144
	// assert(
	//         sendMethodCall<typeof ARC11550TransferHook.prototype.approved>({
	//           applicationID: this.transferHookApp.value,
	//           methodArgs: [this.txn.sender, transfers],
	//         })
	//       )
	itxn_begin
	intc 8 //  appl
	itxn_field TypeEnum
	pushbytes 0xb4c17a7b // method "approved(address,(uint64,address,address,uint64)[])bool"
	itxn_field ApplicationArgs

	// contracts/ARC11550.algo.ts:146
	// applicationID: this.transferHookApp.value
	bytec 6 //  "transferHookApp"
	app_global_get
	itxn_field ApplicationID

	// contracts/ARC11550.algo.ts:147
	// methodArgs: [this.txn.sender, transfers]
	txn Sender
	itxn_field ApplicationArgs
	frame_dig -1 // transfers: Transfer[]
	dup
	len
	intc 1 // 80
	/
	itob
	extract 6 2
	swap
	concat
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 3 // 1
	-
	itxnas Logs
	extract 4 0
	intc 0 // 0
	getbit
	assert

	// contracts/ARC11550.algo.ts:151
	// for (let i = 0; i < transfers.length; i += 1)
	intc 0 // 0
	frame_bury 0 // i: uint64

*for_3:
	// contracts/ARC11550.algo.ts:151
	// i < transfers.length
	frame_dig 0 // i: uint64
	frame_dig -1 // transfers: Transfer[]
	len
	intc 1 // 80
	/
	<
	bz *for_3_end
	frame_dig 0 // i: uint64
	frame_bury 1 // accessor: accessor//0//t

	// contracts/ARC11550.algo.ts:153
	// this.balances({ id: t.id, address: t.from }).value -= t.amount
	bytec 1 //  "b"
	frame_dig -1 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 1 // 80
	* // acc * typeLength
	+
	intc 0 //  headOffset
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itob
	frame_dig -1 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 1 // 80
	* // acc * typeLength
	+
	intc 2 //  headOffset
	+
	load 255 // full array
	swap
	intc 4 // 32
	extract3
	concat
	concat
	box_get

	// box value does not exist: this.balances({ id: t.id, address: t.from }).value
	assert
	btoi
	frame_dig -1 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 1 // 80
	* // acc * typeLength
	+
	intc 7 //  headOffset
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	-
	bytec 1 //  "b"
	frame_dig -1 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 1 // 80
	* // acc * typeLength
	+
	intc 0 //  headOffset
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itob
	frame_dig -1 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 1 // 80
	* // acc * typeLength
	+
	intc 2 //  headOffset
	+
	load 255 // full array
	swap
	intc 4 // 32
	extract3
	concat
	concat
	swap
	itob
	box_put

	// contracts/ARC11550.algo.ts:154
	// this.balances({ id: t.id, address: t.to }).value += t.amount
	bytec 1 //  "b"
	frame_dig -1 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 1 // 80
	* // acc * typeLength
	+
	intc 0 //  headOffset
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itob
	frame_dig -1 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 1 // 80
	* // acc * typeLength
	+
	intc 5 //  headOffset
	+
	load 255 // full array
	swap
	intc 4 // 32
	extract3
	concat
	concat
	box_get

	// box value does not exist: this.balances({ id: t.id, address: t.to }).value
	assert
	btoi
	frame_dig -1 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 1 // 80
	* // acc * typeLength
	+
	intc 7 //  headOffset
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	+
	bytec 1 //  "b"
	frame_dig -1 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 1 // 80
	* // acc * typeLength
	+
	intc 0 //  headOffset
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itob
	frame_dig -1 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 1 // 80
	* // acc * typeLength
	+
	intc 5 //  headOffset
	+
	load 255 // full array
	swap
	intc 4 // 32
	extract3
	concat
	concat
	swap
	itob
	box_put

*for_3_continue:
	// contracts/ARC11550.algo.ts:151
	// i += 1
	frame_dig 0 // i: uint64
	intc 3 // 1
	+
	frame_bury 0 // i: uint64
	b *for_3

*for_3_end:
	// contracts/ARC11550.algo.ts:156
	// return;
	retsub

*if1_end:
	// contracts/ARC11550.algo.ts:160
	// for (let i = 0; i < transfers.length; i += 1)
	intc 0 // 0
	frame_bury 2 // i: uint64

*for_4:
	// contracts/ARC11550.algo.ts:160
	// i < transfers.length
	frame_dig 2 // i: uint64
	frame_dig -1 // transfers: Transfer[]
	len
	intc 1 // 80
	/
	<
	bz *for_4_end
	frame_dig 2 // i: uint64
	frame_bury 3 // accessor: accessor//0//t

	// contracts/ARC11550.algo.ts:162
	// assert(t.from === this.txn.sender)
	frame_dig -1 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 3 // saved accessor: accessor//0//t
	intc 1 // 80
	* // acc * typeLength
	+
	intc 2 //  headOffset
	+
	load 255 // full array
	swap
	intc 4 // 32
	extract3
	txn Sender
	==
	assert

	// contracts/ARC11550.algo.ts:163
	// this.balances({ id: t.id, address: t.from }).value -= t.amount
	bytec 1 //  "b"
	frame_dig -1 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 3 // saved accessor: accessor//0//t
	intc 1 // 80
	* // acc * typeLength
	+
	intc 0 //  headOffset
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itob
	frame_dig -1 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 3 // saved accessor: accessor//0//t
	intc 1 // 80
	* // acc * typeLength
	+
	intc 2 //  headOffset
	+
	load 255 // full array
	swap
	intc 4 // 32
	extract3
	concat
	concat
	box_get

	// box value does not exist: this.balances({ id: t.id, address: t.from }).value
	assert
	btoi
	frame_dig -1 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 3 // saved accessor: accessor//0//t
	intc 1 // 80
	* // acc * typeLength
	+
	intc 7 //  headOffset
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	-
	bytec 1 //  "b"
	frame_dig -1 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 3 // saved accessor: accessor//0//t
	intc 1 // 80
	* // acc * typeLength
	+
	intc 0 //  headOffset
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itob
	frame_dig -1 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 3 // saved accessor: accessor//0//t
	intc 1 // 80
	* // acc * typeLength
	+
	intc 2 //  headOffset
	+
	load 255 // full array
	swap
	intc 4 // 32
	extract3
	concat
	concat
	swap
	itob
	box_put

	// contracts/ARC11550.algo.ts:164
	// this.balances({ id: t.id, address: t.to }).value += t.amount
	bytec 1 //  "b"
	frame_dig -1 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 3 // saved accessor: accessor//0//t
	intc 1 // 80
	* // acc * typeLength
	+
	intc 0 //  headOffset
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itob
	frame_dig -1 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 3 // saved accessor: accessor//0//t
	intc 1 // 80
	* // acc * typeLength
	+
	intc 5 //  headOffset
	+
	load 255 // full array
	swap
	intc 4 // 32
	extract3
	concat
	concat
	box_get

	// box value does not exist: this.balances({ id: t.id, address: t.to }).value
	assert
	btoi
	frame_dig -1 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 3 // saved accessor: accessor//0//t
	intc 1 // 80
	* // acc * typeLength
	+
	intc 7 //  headOffset
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	+
	bytec 1 //  "b"
	frame_dig -1 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 3 // saved accessor: accessor//0//t
	intc 1 // 80
	* // acc * typeLength
	+
	intc 0 //  headOffset
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itob
	frame_dig -1 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 3 // saved accessor: accessor//0//t
	intc 1 // 80
	* // acc * typeLength
	+
	intc 5 //  headOffset
	+
	load 255 // full array
	swap
	intc 4 // 32
	extract3
	concat
	concat
	swap
	itob
	box_put

*for_4_continue:
	// contracts/ARC11550.algo.ts:160
	// i += 1
	frame_dig 2 // i: uint64
	intc 3 // 1
	+
	frame_bury 2 // i: uint64
	b *for_4

*for_4_end:
	retsub

*create_NoOp:
	pushbytes 0x973b616f // method "createApplication(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xd393ec53 // method "arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64"
	pushbytes 0x5e05f118 // method "arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64"
	pushbytes 0x3ac23254 // method "arc11550_metadata((uint64,string))(bool,byte[])"
	pushbytes 0xbbb9de67 // method "arc11550_setMetadata((uint64,string),byte[])void"
	pushbytes 0xd04acbc2 // method "arc11550_balanceOf(uint64,address)uint64"
	pushbytes 0x65dd8717 // method "arc11550_balancesOf((uint64,address)[])uint64[]"
	pushbytes 0x51f504be // method "arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)"
	pushbytes 0x2ad2eb55 // method "arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]"
	pushbytes 0x45f022a5 // method "arc11550_transfer((uint64,address,address,uint64)[])void"
	txna ApplicationArgs 0
	match *abi_route_arc11550_mint *abi_route_arc11550_multiMint *abi_route_arc11550_metadata *abi_route_arc11550_setMetadata *abi_route_arc11550_balanceOf *abi_route_arc11550_balancesOf *abi_route_arc11550_params *abi_route_arc11550_mulitpleParams *abi_route_arc11550_transfer

	// this contract does not implement the given ABI method for call NoOp
	err

*get_length_difference:
	load 252 // new element
	len // length of new element
	load 253 // element length
	<
	bnz *swapped_difference
	load 252 // new element
	len // length of new element
	load 253 // element length
	intc 3 // 1
	store 249 // subtract head difference
	b *get_difference

*swapped_difference:
	load 253 // element length
	load 252 // new element
	len // length of new element
	intc 0 // 0
	store 249 // subtract head difference

*get_difference:
	- // get length difference
	store 250 // length difference
	retsub
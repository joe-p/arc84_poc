#pragma version 10
intcblock 0 8 1 80 32 40 72 112 16 24 56 96
bytecblock 0x 0x151f7c75 0x62 0x61 0x63 0x70 0x6d 0x636f6c6c656374696f6e4964 0x7472616e73666572417070 0x746f6b656e4964

// This TEAL was generated by TEALScript v0.106.3
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(uint64)void
*abi_route_createApplication:
	// transferApp: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64)void
	callsub createApplication
	intc 2 // 1
	return

// createApplication(transferApp: AppID): void
createApplication:
	proto 1 0

	// contracts/ARC11550Data.algo.ts:89
	// this.transferApp.value = transferApp
	bytec 8 //  "transferApp"
	frame_dig -1 // transferApp: AppID
	app_global_put
	retsub

// arc11550_newCollection(address,uint64)uint64
*abi_route_arc11550_newCollection:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// mintCap: uint64
	txna ApplicationArgs 2
	btoi

	// manager: address
	txna ApplicationArgs 1
	dup
	len
	intc 4 // 32
	==

	// argument 1 (manager) for arc11550_newCollection must be a address
	assert

	// execute arc11550_newCollection(address,uint64)uint64
	callsub arc11550_newCollection
	itob
	concat
	log
	intc 2 // 1
	return

// arc11550_newCollection(manager: Address, mintCap: uint64): CollectionId
arc11550_newCollection:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts/ARC11550Data.algo.ts:93
	// collectionId = this.collectionId.value
	bytec 7 //  "collectionId"
	app_global_get
	frame_bury 0 // collectionId: uint64

	// contracts/ARC11550Data.algo.ts:94
	// this.collectionId.value += 1
	bytec 7 //  "collectionId"
	app_global_get
	intc 2 // 1
	+
	bytec 7 //  "collectionId"
	swap
	app_global_put

	// contracts/ARC11550Data.algo.ts:96
	// collection: Collection = {
	//       manager: manager,
	//       mintCap: mintCap,
	//       minted: 0,
	//     }
	pushbytes 0x0000000000000000
	frame_dig -2 // mintCap: uint64
	itob
	concat
	frame_dig -1 // manager: Address
	concat
	frame_bury 1 // collection: Collection

	// contracts/ARC11550Data.algo.ts:102
	// this.collections(collectionId).value = collection
	bytec 4 //  "c"
	frame_dig 0 // collectionId: uint64
	itob
	concat
	frame_dig 1 // collection: Collection
	box_put

	// contracts/ARC11550Data.algo.ts:104
	// return collectionId;
	frame_dig 0 // collectionId: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// arc11550_collection_minted(uint64)uint64
*abi_route_arc11550_collection_minted:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// id: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc11550_collection_minted(uint64)uint64
	callsub arc11550_collection_minted
	itob
	concat
	log
	intc 2 // 1
	return

// arc11550_collection_minted(id: CollectionId): uint64
//
// **************
// Getter Methods
// ***************
arc11550_collection_minted:
	proto 1 1

	// contracts/ARC11550Data.algo.ts:112
	// return this.collections(id).value.minted;
	intc 0 // 0
	intc 1 // 8
	bytec 4 //  "c"
	frame_dig -1 // id: CollectionId
	itob
	concat
	cover 2
	box_extract
	btoi
	retsub

// arc11550_metadata((uint64,byte[]))(bool,byte[])
*abi_route_arc11550_metadata:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// key: (uint64,byte[])
	txna ApplicationArgs 1

	// execute arc11550_metadata((uint64,byte[]))(bool,byte[])
	callsub arc11550_metadata
	concat
	log
	intc 2 // 1
	return

// arc11550_metadata(key: MetadataKey): Metadata
arc11550_metadata:
	proto 1 1

	// contracts/ARC11550Data.algo.ts:116
	// return this.tokenMetadata(key).value;
	bytec 6 //  "m"
	frame_dig -1 // key: MetadataKey
	concat
	box_get

	// box value does not exist: this.tokenMetadata(key).value
	assert
	retsub

// arc11550_balanceOf(uint64,address)uint64
*abi_route_arc11550_balanceOf:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// account: address
	txna ApplicationArgs 2
	dup
	len
	intc 4 // 32
	==

	// argument 0 (account) for arc11550_balanceOf must be a address
	assert

	// id: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc11550_balanceOf(uint64,address)uint64
	callsub arc11550_balanceOf
	itob
	concat
	log
	intc 2 // 1
	return

// arc11550_balanceOf(id: TokenId, account: Address): uint64
arc11550_balanceOf:
	proto 2 1

	// contracts/ARC11550Data.algo.ts:120
	// return this.balances({ tokenId: id, address: account }).value;
	bytec 2 //  "b"
	frame_dig -1 // id: TokenId
	itob
	frame_dig -2 // account: Address
	concat
	concat
	box_get

	// box value does not exist: this.balances({ tokenId: id, address: account }).value
	assert
	btoi
	retsub

// arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)
*abi_route_arc11550_params:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// id: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)
	callsub arc11550_params
	concat
	log
	intc 2 // 1
	return

// arc11550_params(id: TokenId): Params
arc11550_params:
	proto 1 1

	// contracts/ARC11550Data.algo.ts:124
	// return this.params(id).value;
	bytec 5 //  "p"
	frame_dig -1 // id: TokenId
	itob
	concat
	box_get

	// box value does not exist: this.params(id).value
	assert
	retsub

// arc11550_transferApp()uint64
*abi_route_arc11550_transferApp:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// execute arc11550_transferApp()uint64
	callsub arc11550_transferApp
	itob
	concat
	log
	intc 2 // 1
	return

// arc11550_transferApp(): AppID
arc11550_transferApp:
	proto 0 1

	// contracts/ARC11550Data.algo.ts:128
	// return this.transferApp.value;
	bytec 8 //  "transferApp"
	app_global_get
	retsub

// arc11550_transferHookApp(uint64)uint64
*abi_route_arc11550_transferHookApp:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// id: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc11550_transferHookApp(uint64)uint64
	callsub arc11550_transferHookApp
	itob
	concat
	log
	intc 2 // 1
	return

// arc11550_transferHookApp(id: TokenId): AppID
arc11550_transferHookApp:
	proto 1 1

	// contracts/ARC11550Data.algo.ts:132
	// return this.params(id).value.transferHookApp;
	pushint 88 // headOffset
	intc 1 // 8
	bytec 5 //  "p"
	frame_dig -1 // id: TokenId
	itob
	concat
	cover 2
	box_extract
	btoi
	retsub

// arc11550_balancesOf((uint64,address)[])uint64[]
*abi_route_arc11550_balancesOf:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// idAndAddrs: (uint64,address)[]
	txna ApplicationArgs 1
	extract 2 0

	// execute arc11550_balancesOf((uint64,address)[])uint64[]
	callsub arc11550_balancesOf
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 2 // 1
	return

// arc11550_balancesOf(idAndAddrs: IdAndAddress[]): uint64[]
//
// *******************
// Multi Getter Methods
// ********************
arc11550_balancesOf:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// contracts/ARC11550Data.algo.ts:140
	// balances: uint64[] = []
	bytec 0 // 0x
	frame_bury 0 // balances: uint64[]

	// contracts/ARC11550Data.algo.ts:141
	// for (let i = 0; i < idAndAddrs.length; i += 1)
	intc 0 // 0
	frame_bury 1 // i: uint64

*for_0:
	// contracts/ARC11550Data.algo.ts:141
	// i < idAndAddrs.length
	frame_dig 1 // i: uint64
	frame_dig -1 // idAndAddrs: IdAndAddress[]
	len
	intc 5 // 40
	/
	<
	bz *for_0_end

	// contracts/ARC11550Data.algo.ts:142
	// id = idAndAddrs[i].tokenId
	frame_dig -1 // idAndAddrs: IdAndAddress[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 5 // 40
	* // acc * typeLength
	+
	intc 0 //  headOffset
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_bury 2 // id: uint64

	// contracts/ARC11550Data.algo.ts:143
	// addr = idAndAddrs[i].address
	frame_dig -1 // idAndAddrs: IdAndAddress[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 5 // 40
	* // acc * typeLength
	+
	intc 1 //  headOffset
	+
	load 255 // full array
	swap
	intc 4 // 32
	extract3
	frame_bury 3 // addr: address

	// contracts/ARC11550Data.algo.ts:144
	// balances.push(this.balances({ tokenId: id, address: addr }).value)
	frame_dig 0 // balances: uint64[]
	bytec 2 //  "b"
	frame_dig 2 // id: uint64
	itob
	frame_dig 3 // addr: address
	concat
	concat
	box_get

	// box value does not exist: this.balances({ tokenId: id, address: addr }).value
	assert
	btoi
	itob
	concat
	frame_bury 0 // balances: uint64[]

*for_0_continue:
	// contracts/ARC11550Data.algo.ts:141
	// i += 1
	frame_dig 1 // i: uint64
	intc 2 // 1
	+
	frame_bury 1 // i: uint64
	b *for_0

*for_0_end:
	// contracts/ARC11550Data.algo.ts:147
	// return balances;
	frame_dig 0 // balances: uint64[]

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

// arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]
*abi_route_arc11550_mulitpleParams:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// ids: uint64[]
	txna ApplicationArgs 1
	extract 2 0

	// execute arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]
	callsub arc11550_mulitpleParams
	dup
	len
	intc 11 // 96
	/
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 2 // 1
	return

// arc11550_mulitpleParams(ids: TokenId[]): Params[]
arc11550_mulitpleParams:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts/ARC11550Data.algo.ts:151
	// params: Params[] = []
	bytec 0 // 0x
	frame_bury 0 // params: Params[]

	// contracts/ARC11550Data.algo.ts:152
	// for (let i = 0; i < ids.length; i += 1)
	intc 0 // 0
	frame_bury 1 // i: uint64

*for_1:
	// contracts/ARC11550Data.algo.ts:152
	// i < ids.length
	frame_dig 1 // i: uint64
	frame_dig -1 // ids: TokenId[]
	len
	intc 1 // 8
	/
	<
	bz *for_1_end

	// contracts/ARC11550Data.algo.ts:153
	// id = ids[i]
	frame_dig -1 // ids: TokenId[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // i: uint64
	intc 1 // 8
	* // acc * typeLength
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	frame_bury 2 // id: uint64

	// contracts/ARC11550Data.algo.ts:154
	// params.push(this.params(id).value)
	frame_dig 0 // params: Params[]
	bytec 5 //  "p"
	frame_dig 2 // id: uint64
	itob
	concat
	box_get

	// box value does not exist: this.params(id).value
	assert
	concat
	frame_bury 0 // params: Params[]

*for_1_continue:
	// contracts/ARC11550Data.algo.ts:152
	// i += 1
	frame_dig 1 // i: uint64
	intc 2 // 1
	+
	frame_bury 1 // i: uint64
	b *for_1

*for_1_end:
	// contracts/ARC11550Data.algo.ts:157
	// return params;
	frame_dig 0 // params: Params[]

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// arc11550_setMetadata((uint64,byte[]),byte[])void
*abi_route_arc11550_setMetadata:
	// data: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// key: (uint64,byte[])
	txna ApplicationArgs 1

	// execute arc11550_setMetadata((uint64,byte[]),byte[])void
	callsub arc11550_setMetadata
	intc 2 // 1
	return

// arc11550_setMetadata(key: MetadataKey, data: bytes): void
//
// **************
// Setter methods
// ***************
arc11550_setMetadata:
	proto 2 0

	// contracts/ARC11550Data.algo.ts:167
	// assert(this.txn.sender === this.params(key.id).value.manager)
	txn Sender
	intc 10 //  headOffset
	intc 4 // 32
	bytec 5 //  "p"
	frame_dig -1 // key: MetadataKey
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	==
	assert

	// *if0_condition
	// contracts/ARC11550Data.algo.ts:169
	// this.tokenMetadata(key).exists
	bytec 6 //  "m"
	frame_dig -1 // key: MetadataKey
	concat
	box_len
	swap
	pop
	bz *if0_end

	// *if0_consequent
	// contracts/ARC11550Data.algo.ts:170
	// assert(this.tokenMetadata(key).value.mutable)
	bytec 6 //  "m"
	frame_dig -1 // key: MetadataKey
	concat
	box_get

	// box value does not exist: this.tokenMetadata(key).value
	assert
	store 255 // full array
	load 255 // full array
	intc 0 // 0
	getbit
	assert

*if0_end:
	// contracts/ARC11550Data.algo.ts:173
	// this.tokenMetadata(key).value.data = data
	bytec 6 //  "m"
	frame_dig -1 // key: MetadataKey
	concat
	box_get

	// box value does not exist: this.tokenMetadata(key).value
	assert
	store 255 // full array
	intc 2 // 1
	dup
	store 251 // element head offset
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup
	store 254 // element start
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 2 //  get type length
	* // multiply by type length
	pushint 2
	+ // add two for length
	store 253 // element length
	load 255 // full array
	intc 0 // 0
	load 254 // element start
	substring3
	frame_dig -2 // data: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	dup
	store 252 // new element
	load 255 // full array
	load 254 // element start
	load 253 // element length
	+ // get end of Element
	load 255 // full array
	len
	substring3
	concat
	concat
	store 255 // full array
	callsub *get_length_difference
	load 255 // full array
	bytec 6 //  "m"
	frame_dig -1 // key: MetadataKey
	concat
	dup
	box_del
	pop
	swap
	box_put
	retsub

// arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void
*abi_route_arc11550_setAllowance:
	// allowance: (uint64,uint64,uint64,uint64,uint64)
	txna ApplicationArgs 2
	dup
	len
	intc 5 // 40
	==

	// argument 0 (allowance) for arc11550_setAllowance must be a (uint64,uint64,uint64,uint64,uint64)
	assert

	// allowanceKey: (address,address,uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 6 // 72
	==

	// argument 1 (allowanceKey) for arc11550_setAllowance must be a (address,address,uint64)
	assert

	// execute arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void
	callsub arc11550_setAllowance
	intc 2 // 1
	return

// arc11550_setAllowance(allowanceKey: AllowanceKey, allowance: Allowance): void
arc11550_setAllowance:
	proto 2 0

	// contracts/ARC11550Data.algo.ts:177
	// assert(this.txn.sender === this.params(allowanceKey.tokenId).value.manager)
	txn Sender
	intc 10 //  headOffset
	intc 4 // 32
	bytec 5 //  "p"
	frame_dig -1 // allowanceKey: AllowanceKey
	extract 64 8
	btoi
	itob
	concat
	cover 2
	box_extract
	==
	assert

	// contracts/ARC11550Data.algo.ts:178
	// this.allowances(sha256(rawBytes(allowanceKey))).value = allowance
	bytec 3 //  "a"
	frame_dig -1 // allowanceKey: AllowanceKey
	sha256
	concat
	frame_dig -2 // allowance: Allowance
	box_put
	retsub

// arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void
*abi_route_arc11550_setAllowances:
	// allowances: ((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[]
	txna ApplicationArgs 1
	extract 2 0

	// execute arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void
	callsub arc11550_setAllowances
	intc 2 // 1
	return

// arc11550_setAllowances(allowances: { key: AllowanceKey; allowance: Allowance }[]): void
//
// *******************
// Multi Setter Methods
// ********************
arc11550_setAllowances:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts/ARC11550Data.algo.ts:186
	// for (let i = 0; i < allowances.length; i += 1)
	intc 0 // 0
	frame_bury 0 // i: uint64

*for_2:
	// contracts/ARC11550Data.algo.ts:186
	// i < allowances.length
	frame_dig 0 // i: uint64
	frame_dig -1 // allowances: { key: AllowanceKey; allowance: Allowance }[]
	len
	intc 7 // 112
	/
	<
	bz *for_2_end
	frame_dig 0 // i: uint64
	frame_bury 1 // accessor: accessor//0//a

	// contracts/ARC11550Data.algo.ts:188
	// this.arc11550_setAllowance(a.key, a.allowance)
	frame_dig -1 // allowances: { key: AllowanceKey; allowance: Allowance }[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//a
	intc 7 // 112
	* // acc * typeLength
	+
	intc 6 //  headOffset
	+
	load 255 // full array
	swap
	intc 5 // 40
	extract3
	frame_dig -1 // allowances: { key: AllowanceKey; allowance: Allowance }[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//a
	intc 7 // 112
	* // acc * typeLength
	+
	intc 0 //  headOffset
	+
	load 255 // full array
	swap
	intc 6 // 72
	extract3
	callsub arc11550_setAllowance

*for_2_continue:
	// contracts/ARC11550Data.algo.ts:186
	// i += 1
	frame_dig 0 // i: uint64
	intc 2 // 1
	+
	frame_bury 0 // i: uint64
	b *for_2

*for_2_end:
	retsub

// doTransfers(address,(uint64,address,address,uint64)[])void
*abi_route_doTransfers:
	// transfers: (uint64,address,address,uint64)[]
	txna ApplicationArgs 2
	extract 2 0

	// sender: address
	txna ApplicationArgs 1
	dup
	len
	intc 4 // 32
	==

	// argument 1 (sender) for doTransfers must be a address
	assert

	// execute doTransfers(address,(uint64,address,address,uint64)[])void
	callsub doTransfers
	intc 2 // 1
	return

// doTransfers(sender: Address, transfers: Transfer[]): void
//
// ********************
// Transfer/Mint Methods
// *********************
doTransfers:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 5

	// contracts/ARC11550Data.algo.ts:199
	// assert(globals.callerApplicationID == this.transferApp.value)
	global CallerApplicationID
	bytec 8 //  "transferApp"
	app_global_get
	==
	assert

	// contracts/ARC11550Data.algo.ts:201
	// for (let i = 0; i < transfers.length; i += 1)
	intc 0 // 0
	frame_bury 0 // i: uint64

*for_3:
	// contracts/ARC11550Data.algo.ts:201
	// i < transfers.length
	frame_dig 0 // i: uint64
	frame_dig -2 // transfers: Transfer[]
	len
	intc 3 // 80
	/
	<
	bz *for_3_end
	frame_dig 0 // i: uint64
	frame_bury 1 // accessor: accessor//0//t

	// *if1_condition
	// contracts/ARC11550Data.algo.ts:204
	// t.from !== sender
	frame_dig -2 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 3 // 80
	* // acc * typeLength
	+
	intc 1 //  headOffset
	+
	load 255 // full array
	swap
	intc 4 // 32
	extract3
	frame_dig -1 // sender: Address
	!=
	bz *if1_end

	// *if1_consequent
	// contracts/ARC11550Data.algo.ts:205
	// key = sha256(
	//           rawBytes({
	//             holder: t.from,
	//             sender: sender,
	//             tokenId: t.tokenId,
	//           } as AllowanceKey)
	//         )
	frame_dig -2 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 3 // 80
	* // acc * typeLength
	+
	intc 1 //  headOffset
	+
	load 255 // full array
	swap
	intc 4 // 32
	extract3
	frame_dig -1 // sender: Address
	concat
	frame_dig -2 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 3 // 80
	* // acc * typeLength
	+
	intc 0 //  headOffset
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	itob
	concat
	sha256
	frame_bury 2 // key: byte[32]

	// contracts/ARC11550Data.algo.ts:213
	// assert(this.allowances(key).exists)
	bytec 3 //  "a"
	frame_dig 2 // key: byte[32]
	concat
	box_len
	swap
	pop
	assert

	// contracts/ARC11550Data.algo.ts:215
	// allowance = this.allowances(key).value
	bytec 3 //  "a"
	frame_dig 2 // key: byte[32]
	concat
	frame_bury 3 // storage key//allowance

	// contracts/ARC11550Data.algo.ts:217
	// currentTime = globals.latestTimestamp
	global LatestTimestamp
	frame_bury 4 // currentTime: uint64

	// contracts/ARC11550Data.algo.ts:218
	// assert(allowance.expirationTimestamp >= currentTime)
	intc 4 //  headOffset
	intc 1 // 8
	bytec 3 //  "a"
	frame_dig 2 // key: byte[32]
	concat
	cover 2
	box_extract
	btoi
	frame_dig 4 // currentTime: uint64
	>=
	assert

	// *if2_condition
	// contracts/ARC11550Data.algo.ts:221
	// allowance.remainingAmount < t.amount && currentTime - allowance.lastUsed >= allowance.cooldown
	intc 1 //  headOffset
	intc 1 // 8
	bytec 3 //  "a"
	frame_dig 2 // key: byte[32]
	concat
	cover 2
	box_extract
	btoi
	frame_dig -2 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 3 // 80
	* // acc * typeLength
	+
	intc 6 //  headOffset
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	<
	dup
	bz *skip_and0
	frame_dig 4 // currentTime: uint64
	intc 9 //  headOffset
	intc 1 // 8
	bytec 3 //  "a"
	frame_dig 2 // key: byte[32]
	concat
	cover 2
	box_extract
	btoi
	-
	intc 8 //  headOffset
	intc 1 // 8
	bytec 3 //  "a"
	frame_dig 2 // key: byte[32]
	concat
	cover 2
	box_extract
	btoi
	>=
	&&

*skip_and0:
	bz *if2_end

	// *if2_consequent
	// contracts/ARC11550Data.algo.ts:222
	// allowance.remainingAmount = allowance.amount
	intc 1 //  headOffset
	intc 0 // 0
	intc 1 // 8
	bytec 3 //  "a"
	frame_dig 2 // key: byte[32]
	concat
	cover 2
	box_extract
	btoi
	itob
	frame_dig 3 // storage key//allowance
	cover 2
	box_replace

	// contracts/ARC11550Data.algo.ts:223
	// allowance.lastUsed = currentTime
	intc 9 //  headOffset
	frame_dig 4 // currentTime: uint64
	itob
	frame_dig 3 // storage key//allowance
	cover 2
	box_replace

*if2_end:
	// contracts/ARC11550Data.algo.ts:226
	// allowance.remainingAmount -= t.amount
	intc 1 //  headOffset
	dup
	intc 1 // 8
	bytec 3 //  "a"
	frame_dig 2 // key: byte[32]
	concat
	cover 2
	box_extract
	btoi
	frame_dig -2 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 3 // 80
	* // acc * typeLength
	+
	intc 6 //  headOffset
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	-
	itob
	frame_dig 3 // storage key//allowance
	cover 2
	box_replace

*if1_end:
	// contracts/ARC11550Data.algo.ts:228
	// this.balances({ tokenId: t.tokenId, address: t.from }).value -= t.amount
	bytec 2 //  "b"
	frame_dig -2 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 3 // 80
	* // acc * typeLength
	+
	intc 0 //  headOffset
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	itob
	frame_dig -2 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 3 // 80
	* // acc * typeLength
	+
	intc 1 //  headOffset
	+
	load 255 // full array
	swap
	intc 4 // 32
	extract3
	concat
	concat
	box_get

	// box value does not exist: this.balances({ tokenId: t.tokenId, address: t.from }).value
	assert
	btoi
	frame_dig -2 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 3 // 80
	* // acc * typeLength
	+
	intc 6 //  headOffset
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	-
	bytec 2 //  "b"
	frame_dig -2 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 3 // 80
	* // acc * typeLength
	+
	intc 0 //  headOffset
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	itob
	frame_dig -2 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 3 // 80
	* // acc * typeLength
	+
	intc 1 //  headOffset
	+
	load 255 // full array
	swap
	intc 4 // 32
	extract3
	concat
	concat
	swap
	itob
	box_put

	// contracts/ARC11550Data.algo.ts:230
	// recvKey: IdAndAddress = { tokenId: t.tokenId, address: t.to }
	frame_dig -2 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 3 // 80
	* // acc * typeLength
	+
	intc 0 //  headOffset
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	itob
	frame_dig -2 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 3 // 80
	* // acc * typeLength
	+
	intc 5 //  headOffset
	+
	load 255 // full array
	swap
	intc 4 // 32
	extract3
	concat
	frame_bury 5 // recvKey: IdAndAddress

	// *if3_condition
	// contracts/ARC11550Data.algo.ts:231
	// !this.balances(recvKey).exists
	bytec 2 //  "b"
	frame_dig 5 // recvKey: IdAndAddress
	concat
	box_len
	swap
	pop
	!
	bz *if3_end

	// *if3_consequent
	// contracts/ARC11550Data.algo.ts:232
	// this.balances(recvKey).create
	bytec 2 //  "b"
	frame_dig 5 // recvKey: IdAndAddress
	concat
	intc 1 // 8
	box_create
	pop

*if3_end:
	// contracts/ARC11550Data.algo.ts:234
	// this.balances({ tokenId: t.tokenId, address: t.to }).value += t.amount
	bytec 2 //  "b"
	frame_dig -2 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 3 // 80
	* // acc * typeLength
	+
	intc 0 //  headOffset
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	itob
	frame_dig -2 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 3 // 80
	* // acc * typeLength
	+
	intc 5 //  headOffset
	+
	load 255 // full array
	swap
	intc 4 // 32
	extract3
	concat
	concat
	box_get

	// box value does not exist: this.balances({ tokenId: t.tokenId, address: t.to }).value
	assert
	btoi
	frame_dig -2 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 3 // 80
	* // acc * typeLength
	+
	intc 6 //  headOffset
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	+
	bytec 2 //  "b"
	frame_dig -2 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 3 // 80
	* // acc * typeLength
	+
	intc 0 //  headOffset
	+
	load 255 // full array
	swap
	intc 1 // 8
	extract3
	btoi
	itob
	frame_dig -2 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 3 // 80
	* // acc * typeLength
	+
	intc 5 //  headOffset
	+
	load 255 // full array
	swap
	intc 4 // 32
	extract3
	concat
	concat
	swap
	itob
	box_put

*for_3_continue:
	// contracts/ARC11550Data.algo.ts:201
	// i += 1
	frame_dig 0 // i: uint64
	intc 2 // 1
	+
	frame_bury 0 // i: uint64
	b *for_3

*for_3_end:
	retsub

// arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64
*abi_route_arc11550_mint:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// params: (byte[32],byte[8],uint64,uint64,address,uint64)
	txna ApplicationArgs 2
	dup
	len
	intc 11 // 96
	==

	// argument 0 (params) for arc11550_mint must be a (byte[32],byte[8],uint64,uint64,address,uint64)
	assert

	// collectionId: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64
	callsub arc11550_mint
	itob
	concat
	log
	intc 2 // 1
	return

// arc11550_mint(collectionId: CollectionId, params: Params): uint64
arc11550_mint:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts/ARC11550Data.algo.ts:239
	// collection = this.collections(collectionId).value
	bytec 4 //  "c"
	frame_dig -1 // collectionId: CollectionId
	itob
	concat
	frame_bury 0 // storage key//collection

	// contracts/ARC11550Data.algo.ts:241
	// assert(this.txn.sender === collection.manager)
	txn Sender
	intc 8 //  headOffset
	intc 4 // 32
	bytec 4 //  "c"
	frame_dig -1 // collectionId: CollectionId
	itob
	concat
	cover 2
	box_extract
	==
	assert

	// contracts/ARC11550Data.algo.ts:242
	// assert(collection.mintCap >= collection.minted)
	intc 1 //  headOffset
	intc 1 // 8
	bytec 4 //  "c"
	frame_dig -1 // collectionId: CollectionId
	itob
	concat
	cover 2
	box_extract
	btoi
	intc 0 // 0
	intc 1 // 8
	bytec 4 //  "c"
	frame_dig -1 // collectionId: CollectionId
	itob
	concat
	cover 2
	box_extract
	btoi
	>=
	assert

	// contracts/ARC11550Data.algo.ts:244
	// id = this.tokenId.value
	bytec 9 //  "tokenId"
	app_global_get
	frame_bury 1 // id: uint64

	// contracts/ARC11550Data.algo.ts:245
	// this.tokenId.value += 1
	bytec 9 //  "tokenId"
	app_global_get
	intc 2 // 1
	+
	bytec 9 //  "tokenId"
	swap
	app_global_put

	// contracts/ARC11550Data.algo.ts:246
	// collection.minted += 1
	intc 0 // 0
	dup
	intc 1 // 8
	bytec 4 //  "c"
	frame_dig -1 // collectionId: CollectionId
	itob
	concat
	cover 2
	box_extract
	btoi
	intc 2 // 1
	+
	itob
	frame_dig 0 // storage key//collection
	cover 2
	box_replace

	// contracts/ARC11550Data.algo.ts:248
	// this.params(id).value = params
	bytec 5 //  "p"
	frame_dig 1 // id: uint64
	itob
	concat
	frame_dig -2 // params: Params
	box_put

	// contracts/ARC11550Data.algo.ts:250
	// key: IdAndAddress = { tokenId: id, address: params.manager }
	frame_dig 1 // id: uint64
	itob
	frame_dig -2 // params: Params
	extract 56 32
	concat
	frame_bury 2 // key: IdAndAddress

	// contracts/ARC11550Data.algo.ts:252
	// this.balances(key).create()
	bytec 2 //  "b"
	frame_dig 2 // key: IdAndAddress
	concat
	intc 1 // 8
	box_create
	pop

	// contracts/ARC11550Data.algo.ts:253
	// this.balances(key).value = params.total
	bytec 2 //  "b"
	frame_dig 2 // key: IdAndAddress
	concat
	frame_dig -2 // params: Params
	extract 40 8
	btoi
	itob
	box_put

	// contracts/ARC11550Data.algo.ts:255
	// return id;
	frame_dig 1 // id: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

*create_NoOp:
	pushbytes 0x973b616f // method "createApplication(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xc69571f8 // method "arc11550_newCollection(address,uint64)uint64"
	pushbytes 0x28a59766 // method "arc11550_collection_minted(uint64)uint64"
	pushbytes 0x9a89dafe // method "arc11550_metadata((uint64,byte[]))(bool,byte[])"
	pushbytes 0xd04acbc2 // method "arc11550_balanceOf(uint64,address)uint64"
	pushbytes 0xa0ac943c // method "arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)"
	pushbytes 0xc14e68d9 // method "arc11550_transferApp()uint64"
	pushbytes 0x4569e7f8 // method "arc11550_transferHookApp(uint64)uint64"
	pushbytes 0x65dd8717 // method "arc11550_balancesOf((uint64,address)[])uint64[]"
	pushbytes 0x5e60e217 // method "arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]"
	pushbytes 0xf8efd1f3 // method "arc11550_setMetadata((uint64,byte[]),byte[])void"
	pushbytes 0xa31e55cd // method "arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void"
	pushbytes 0xd82ae45d // method "arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void"
	pushbytes 0x21a85e1b // method "doTransfers(address,(uint64,address,address,uint64)[])void"
	pushbytes 0xbf8003d5 // method "arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64"
	txna ApplicationArgs 0
	match *abi_route_arc11550_newCollection *abi_route_arc11550_collection_minted *abi_route_arc11550_metadata *abi_route_arc11550_balanceOf *abi_route_arc11550_params *abi_route_arc11550_transferApp *abi_route_arc11550_transferHookApp *abi_route_arc11550_balancesOf *abi_route_arc11550_mulitpleParams *abi_route_arc11550_setMetadata *abi_route_arc11550_setAllowance *abi_route_arc11550_setAllowances *abi_route_doTransfers *abi_route_arc11550_mint

	// this contract does not implement the given ABI method for call NoOp
	err

*get_length_difference:
	load 252 // new element
	len // length of new element
	load 253 // element length
	<
	bnz *swapped_difference
	load 252 // new element
	len // length of new element
	load 253 // element length
	intc 2 // 1
	store 249 // subtract head difference
	b *get_difference

*swapped_difference:
	load 253 // element length
	load 252 // new element
	len // length of new element
	intc 0 // 0
	store 249 // subtract head difference

*get_difference:
	- // get length difference
	store 250 // length difference
	retsub
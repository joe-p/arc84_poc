#pragma version 10
intcblock 0 1 8 6 80 4 32
bytecblock 0x 0x617361 0x617070 0x7472616e73666572417070 0x151f7c75

// This TEAL was generated by TEALScript v0.106.3
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 3 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(uint64)void
*abi_route_createApplication:
	// transferApp: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64)void
	callsub createApplication
	intc 1 // 1
	return

// createApplication(transferApp: AppID): void
createApplication:
	proto 1 0

	// contracts/ARC11550Bridge.algo.ts:15
	// this.transferApp.value = transferApp
	bytec 3 //  "transferApp"
	frame_dig -1 // transferApp: AppID
	app_global_put
	retsub

// optInToAsa(uint64)void
*abi_route_optInToAsa:
	// asa: uint64
	txna ApplicationArgs 1
	btoi

	// execute optInToAsa(uint64)void
	callsub optInToAsa
	intc 1 // 1
	return

// optInToAsa(asa: AssetID): void
optInToAsa:
	proto 1 0

	// contracts/ARC11550Bridge.algo.ts:19
	// sendAssetTransfer({
	//       xferAsset: asa,
	//       assetAmount: 0,
	//       assetReceiver: this.app.address,
	//     })
	itxn_begin
	intc 5 //  axfer
	itxn_field TypeEnum

	// contracts/ARC11550Bridge.algo.ts:20
	// xferAsset: asa
	frame_dig -1 // asa: AssetID
	itxn_field XferAsset

	// contracts/ARC11550Bridge.algo.ts:21
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// contracts/ARC11550Bridge.algo.ts:22
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// asaToArc11550(axfer,address)(uint64,uint64)
*abi_route_asaToArc11550:
	// The ABI return prefix
	bytec 4 // 0x151f7c75

	// receiver: address
	txna ApplicationArgs 1
	dup
	len
	intc 6 // 32
	==

	// argument 0 (receiver) for asaToArc11550 must be a address
	assert

	// axfer: axfer
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 5 //  axfer
	==

	// argument 1 (axfer) for asaToArc11550 must be a axfer transaction
	assert

	// execute asaToArc11550(axfer,address)(uint64,uint64)
	callsub asaToArc11550
	concat
	log
	intc 1 // 1
	return

// asaToArc11550(axfer: AssetTransferTxn, receiver: Address): Arc11550Id
asaToArc11550:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 4

	// contracts/ARC11550Bridge.algo.ts:27
	// verifyAssetTransferTxn(axfer, {
	//       assetReceiver: this.app.address,
	//     })
	// verify assetReceiver
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"axfer","field":"assetReceiver","expected":"this.app.address"}
	assert

	// contracts/ARC11550Bridge.algo.ts:31
	// asa = axfer.xferAsset
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns XferAsset
	frame_bury 0 // asa: uint64

	// contracts/ARC11550Bridge.algo.ts:33
	// assert(asa.clawback === Address.zeroAddress)
	frame_dig 0 // asa: uint64
	asset_params_get AssetClawback
	pop
	global ZeroAddress
	==
	assert

	// *if0_condition
	// contracts/ARC11550Bridge.algo.ts:36
	// !this.asaToArc11550Map(axfer.xferAsset).exists
	bytec 1 //  "asa"
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	box_len
	swap
	pop
	!
	bz *if0_end

	// *if0_consequent
	// contracts/ARC11550Bridge.algo.ts:37
	// sendMethodCall<typeof ARC11550Accounting.prototype.createApplication>({
	//         methodArgs: [this.transferApp.value, 1],
	//       })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x917c48b6 // method "createApplication(uint64,uint64)void"
	itxn_field ApplicationArgs

	// contracts/ARC11550Bridge.algo.ts:38
	// methodArgs: [this.transferApp.value, 1]
	bytec 3 //  "transferApp"
	app_global_get
	itob
	itxn_field ApplicationArgs
	pushbytes 0x0000000000000001
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/ARC11550Bridge.algo.ts:41
	// accountingApp = this.itxn.createdApplicationID
	itxn CreatedApplicationID
	frame_bury 1 // accountingApp: uint64

	// contracts/ARC11550Bridge.algo.ts:43
	// id = sendMethodCall<typeof ARC11550Transfer.prototype.arc11550_mint>({
	//         applicationID: accountingApp,
	//         methodArgs: [
	//           accountingApp,
	//           {
	//             total: asa.total,
	//             decimals: asa.decimals,
	//             manager: this.app.address,
	//             name: asa.name as bytes<32>,
	//             symbol: asa.unitName as bytes<8>,
	//           },
	//         ],
	//       })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x0cc33604 // method "arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64"
	itxn_field ApplicationArgs

	// contracts/ARC11550Bridge.algo.ts:44
	// applicationID: accountingApp
	frame_dig 1 // accountingApp: uint64
	itxn_field ApplicationID

	// contracts/ARC11550Bridge.algo.ts:45
	// methodArgs: [
	//           accountingApp,
	//           {
	//             total: asa.total,
	//             decimals: asa.decimals,
	//             manager: this.app.address,
	//             name: asa.name as bytes<32>,
	//             symbol: asa.unitName as bytes<8>,
	//           },
	//         ]
	frame_dig 1 // accountingApp: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig 0 // asa: uint64
	asset_params_get AssetName
	pop
	pushbytes 0x0000000000000000000000000000000000000000000000000000000000000000
	concat
	dup
	extract 32 0
	bytec 0 // 0x
	b==
	assert
	extract 0 32
	frame_dig 0 // asa: uint64
	asset_params_get AssetUnitName
	pop
	pushbytes 0x0000000000000000
	concat
	dup
	extract 8 0
	bytec 0 // 0x
	b==
	assert
	extract 0 8
	concat
	frame_dig 0 // asa: uint64
	asset_params_get AssetTotal
	pop
	itob
	concat
	frame_dig 0 // asa: uint64
	asset_params_get AssetDecimals
	pop
	itob
	concat
	global CurrentApplicationAddress
	concat
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	btoi
	frame_bury 2 // id: uint64

	// contracts/ARC11550Bridge.algo.ts:57
	// appAndId: Arc11550Id = { accountingApp: accountingApp, id: id }
	frame_dig 2 // id: uint64
	itob
	frame_dig 1 // accountingApp: uint64
	itob
	concat
	frame_bury 3 // appAndId: Arc11550Id

	// contracts/ARC11550Bridge.algo.ts:58
	// this.asaToArc11550Map(asa).value = appAndId
	bytec 1 //  "asa"
	frame_dig 0 // asa: uint64
	itob
	concat
	frame_dig 3 // appAndId: Arc11550Id
	box_put

	// contracts/ARC11550Bridge.algo.ts:59
	// this.arc11550ToAsaMap(appAndId).value = asa
	bytec 2 //  "app"
	frame_dig 3 // appAndId: Arc11550Id
	concat
	frame_dig 0 // asa: uint64
	itob
	box_put

*if0_end:
	// contracts/ARC11550Bridge.algo.ts:62
	// arc11550 = this.asaToArc11550Map(asa).value
	bytec 1 //  "asa"
	frame_dig 0 // asa: uint64
	itob
	concat
	frame_bury 4 // storage key//arc11550

	// contracts/ARC11550Bridge.algo.ts:64
	// sendMethodCall<typeof ARC11550Transfer.prototype.arc11550_transfer>({
	//       applicationID: arc11550.accountingApp,
	//       methodArgs: [
	//         arc11550.accountingApp,
	//         [{ id: arc11550.id, amount: axfer.assetAmount, from: this.app.address, to: receiver }],
	//       ],
	//     })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x61bacfc8 // method "arc11550_transfer(uint64,(uint64,address,address,uint64)[])void"
	itxn_field ApplicationArgs

	// contracts/ARC11550Bridge.algo.ts:65
	// applicationID: arc11550.accountingApp
	intc 2 //  headOffset
	intc 2 // 8
	bytec 1 //  "asa"
	frame_dig 0 // asa: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	itxn_field ApplicationID

	// contracts/ARC11550Bridge.algo.ts:66
	// methodArgs: [
	//         arc11550.accountingApp,
	//         [{ id: arc11550.id, amount: axfer.assetAmount, from: this.app.address, to: receiver }],
	//       ]
	intc 2 //  headOffset
	intc 2 // 8
	bytec 1 //  "asa"
	frame_dig 0 // asa: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	itxn_field ApplicationArgs
	intc 0 // 0
	intc 2 // 8
	bytec 1 //  "asa"
	frame_dig 0 // asa: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	global CurrentApplicationAddress
	concat
	frame_dig -2 // receiver: Address
	concat
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns AssetAmount
	itob
	concat
	dup
	len
	intc 4 // 80
	/
	itob
	extract 6 2
	swap
	concat
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/ARC11550Bridge.algo.ts:72
	// return arc11550;
	frame_dig 4 // storage key//arc11550
	box_get

	// box value does not exist: this.asaToArc11550Map(asa).value
	assert

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 4
	retsub

// arc11550ToAsa(appl,uint64,address)uint64
*abi_route_arc11550ToAsa:
	// The ABI return prefix
	bytec 4 // 0x151f7c75

	// receiver: address
	txna ApplicationArgs 2
	dup
	len
	intc 6 // 32
	==

	// argument 0 (receiver) for arc11550ToAsa must be a address
	assert

	// xferIndex: uint64
	txna ApplicationArgs 1
	btoi

	// xferCall: appl
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 3 //  appl
	==

	// argument 2 (xferCall) for arc11550ToAsa must be a appl transaction
	assert

	// execute arc11550ToAsa(appl,uint64,address)uint64
	callsub arc11550ToAsa
	itob
	concat
	log
	intc 1 // 1
	return

// arc11550ToAsa(xferCall: AppCallTxn, xferIndex: uint64, receiver: Address): AssetID
arc11550ToAsa:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 5

	// contracts/ARC11550Bridge.algo.ts:76
	// xfers: Transfer[] = castBytes<Transfer[]>(xferCall.applicationArgs[1])
	frame_dig -1 // xferCall: AppCallTxn
	gtxns ApplicationArgs 1
	frame_bury 0 // xfers: Transfer[]
	frame_dig -2 // xferIndex: uint64
	frame_bury 1 // accessor: accessor//0//xfer

	// contracts/ARC11550Bridge.algo.ts:79
	// arc11550: Arc11550Id = { accountingApp: xferCall.applicationID, id: xfer.id }
	frame_dig 0 // xfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//xfer
	intc 4 // 80
	* // acc * typeLength
	+
	intc 0 //  headOffset
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itob
	frame_dig -1 // xferCall: AppCallTxn
	gtxns ApplicationID
	itob
	concat
	frame_bury 2 // arc11550: Arc11550Id

	// *if1_condition
	// contracts/ARC11550Bridge.algo.ts:81
	// !this.arc11550ToAsaMap(arc11550).exists
	bytec 2 //  "app"
	frame_dig 2 // arc11550: Arc11550Id
	concat
	box_len
	swap
	pop
	!
	bz *if1_end

	// *if1_consequent
	// contracts/ARC11550Bridge.algo.ts:82
	// params = sendMethodCall<typeof ARC11550Accounting.prototype.arc11550_params>({
	//         applicationID: arc11550.accountingApp,
	//         methodArgs: [xfer.id],
	//       })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x51f504be // method "arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)"
	itxn_field ApplicationArgs

	// contracts/ARC11550Bridge.algo.ts:83
	// applicationID: arc11550.accountingApp
	frame_dig 2 // arc11550: Arc11550Id
	extract 8 8
	btoi
	itxn_field ApplicationID

	// contracts/ARC11550Bridge.algo.ts:84
	// methodArgs: [xfer.id]
	frame_dig 0 // xfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//xfer
	intc 4 // 80
	* // acc * typeLength
	+
	intc 0 //  headOffset
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 3 // params: (byte[32],byte[8],uint64,uint64,address)

	// contracts/ARC11550Bridge.algo.ts:87
	// sendAssetCreation({
	//         configAssetTotal: params.total as uint64,
	//         configAssetDecimals: params.decimals as uint64,
	//         configAssetName: params.name as bytes,
	//         configAssetUnitName: params.symbol as bytes,
	//         configAssetReserve: this.app.address,
	//       })
	itxn_begin
	pushint 3 // acfg
	itxn_field TypeEnum

	// contracts/ARC11550Bridge.algo.ts:88
	// configAssetTotal: params.total as uint64
	frame_dig 3 // params: (byte[32],byte[8],uint64,uint64,address)
	extract 40 8
	btoi
	itxn_field ConfigAssetTotal

	// contracts/ARC11550Bridge.algo.ts:89
	// configAssetDecimals: params.decimals as uint64
	frame_dig 3 // params: (byte[32],byte[8],uint64,uint64,address)
	extract 48 8
	btoi
	itxn_field ConfigAssetDecimals

	// contracts/ARC11550Bridge.algo.ts:90
	// configAssetName: params.name as bytes
	frame_dig 3 // params: (byte[32],byte[8],uint64,uint64,address)
	extract 0 32
	itxn_field ConfigAssetName

	// contracts/ARC11550Bridge.algo.ts:91
	// configAssetUnitName: params.symbol as bytes
	frame_dig 3 // params: (byte[32],byte[8],uint64,uint64,address)
	extract 32 8
	itxn_field ConfigAssetUnitName

	// contracts/ARC11550Bridge.algo.ts:92
	// configAssetReserve: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetReserve

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID

	// contracts/ARC11550Bridge.algo.ts:95
	// asa = this.itxn.createdAssetID
	itxn CreatedAssetID
	frame_bury 4 // asa: uint64

	// contracts/ARC11550Bridge.algo.ts:96
	// this.arc11550ToAsaMap(arc11550).value = asa
	bytec 2 //  "app"
	frame_dig 2 // arc11550: Arc11550Id
	concat
	frame_dig 4 // asa: uint64
	itob
	box_put

	// contracts/ARC11550Bridge.algo.ts:97
	// this.asaToArc11550Map(asa).value = arc11550
	bytec 1 //  "asa"
	frame_dig 4 // asa: uint64
	itob
	concat
	frame_dig 2 // arc11550: Arc11550Id
	box_put

*if1_end:
	// contracts/ARC11550Bridge.algo.ts:100
	// asa = this.arc11550ToAsaMap(arc11550).value
	bytec 2 //  "app"
	frame_dig 2 // arc11550: Arc11550Id
	concat
	box_get

	// box value does not exist: this.arc11550ToAsaMap(arc11550).value
	assert
	btoi
	frame_bury 5 // asa: uint64

	// contracts/ARC11550Bridge.algo.ts:102
	// sendAssetTransfer({ xferAsset: asa, assetReceiver: receiver, assetAmount: xfer.amount })
	itxn_begin
	intc 5 //  axfer
	itxn_field TypeEnum

	// contracts/ARC11550Bridge.algo.ts:102
	// xferAsset: asa
	frame_dig 5 // asa: uint64
	itxn_field XferAsset

	// contracts/ARC11550Bridge.algo.ts:102
	// assetReceiver: receiver
	frame_dig -3 // receiver: Address
	itxn_field AssetReceiver

	// contracts/ARC11550Bridge.algo.ts:102
	// assetAmount: xfer.amount
	frame_dig 0 // xfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//xfer
	intc 4 // 80
	* // acc * typeLength
	+
	pushint 72 // headOffset
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/ARC11550Bridge.algo.ts:104
	// return asa;
	frame_dig 5 // asa: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 5
	retsub

*create_NoOp:
	pushbytes 0x973b616f // method "createApplication(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xb281a56d // method "optInToAsa(uint64)void"
	pushbytes 0x035ed87e // method "asaToArc11550(axfer,address)(uint64,uint64)"
	pushbytes 0x4c2e9145 // method "arc11550ToAsa(appl,uint64,address)uint64"
	txna ApplicationArgs 0
	match *abi_route_optInToAsa *abi_route_asaToArc11550 *abi_route_arc11550ToAsa

	// this contract does not implement the given ABI method for call NoOp
	err
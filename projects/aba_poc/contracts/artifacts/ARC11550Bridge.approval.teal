#pragma version 10
intcblock 0 1 8 6 80 4 32
bytecblock 0x 0x617361 0x617070 0x7472616e73666572417070 0x151f7c75

// This TEAL was generated by TEALScript v0.106.3
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 3 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(uint64)void
*abi_route_createApplication:
	// transferApp: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64)void
	callsub createApplication
	intc 1 // 1
	return

// createApplication(transferApp: AppID): void
createApplication:
	proto 1 0

	// contracts/ARC11550Bridge.algo.ts:15
	// this.transferApp.value = transferApp
	bytec 3 //  "transferApp"
	frame_dig -1 // transferApp: AppID
	app_global_put
	retsub

// optInToAsa(uint64)void
*abi_route_optInToAsa:
	// asa: uint64
	txna ApplicationArgs 1
	btoi

	// execute optInToAsa(uint64)void
	callsub optInToAsa
	intc 1 // 1
	return

// optInToAsa(asa: AssetID): void
optInToAsa:
	proto 1 0

	// contracts/ARC11550Bridge.algo.ts:19
	// sendAssetTransfer({
	//       xferAsset: asa,
	//       assetAmount: 0,
	//       assetReceiver: this.app.address,
	//     })
	itxn_begin
	intc 5 //  axfer
	itxn_field TypeEnum

	// contracts/ARC11550Bridge.algo.ts:20
	// xferAsset: asa
	frame_dig -1 // asa: AssetID
	itxn_field XferAsset

	// contracts/ARC11550Bridge.algo.ts:21
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// contracts/ARC11550Bridge.algo.ts:22
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// asaToArc11550(axfer,address)(uint64,uint64)
*abi_route_asaToArc11550:
	// The ABI return prefix
	bytec 4 // 0x151f7c75

	// receiver: address
	txna ApplicationArgs 1
	dup
	len
	intc 6 // 32
	==

	// argument 0 (receiver) for asaToArc11550 must be a address
	assert

	// axfer: axfer
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 5 //  axfer
	==

	// argument 1 (axfer) for asaToArc11550 must be a axfer transaction
	assert

	// execute asaToArc11550(axfer,address)(uint64,uint64)
	callsub asaToArc11550
	concat
	log
	intc 1 // 1
	return

// asaToArc11550(axfer: AssetTransferTxn, receiver: Address): Arc11550Id
asaToArc11550:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 4

	// contracts/ARC11550Bridge.algo.ts:27
	// verifyAssetTransferTxn(axfer, {
	//       assetReceiver: this.app.address,
	//     })
	// verify assetReceiver
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"axfer","field":"assetReceiver","expected":"this.app.address"}
	assert

	// contracts/ARC11550Bridge.algo.ts:31
	// asa = axfer.xferAsset
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns XferAsset
	frame_bury 0 // asa: uint64

	// contracts/ARC11550Bridge.algo.ts:33
	// assert(asa.clawback === Address.zeroAddress)
	frame_dig 0 // asa: uint64
	asset_params_get AssetClawback
	pop
	global ZeroAddress
	==
	assert

	// *if0_condition
	// contracts/ARC11550Bridge.algo.ts:36
	// !this.asaToArc11550Map(axfer.xferAsset).exists
	bytec 1 //  "asa"
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	box_len
	swap
	pop
	!
	bz *if0_end

	// *if0_consequent
	// contracts/ARC11550Bridge.algo.ts:37
	// sendMethodCall<typeof ARC11550Accounting.prototype.createApplication>({
	//         methodArgs: [this.transferApp.value, 1],
	//         approvalProgram: ARC11550Accounting.approvalProgram(),
	//         clearStateProgram: ARC11550Accounting.clearProgram(),
	//       })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x917c48b6 // method "createApplication(uint64,uint64)void"
	itxn_field ApplicationArgs

	// contracts/ARC11550Bridge.algo.ts:38
	// methodArgs: [this.transferApp.value, 1]
	bytec 3 //  "transferApp"
	app_global_get
	itob
	itxn_field ApplicationArgs
	pushbytes 0x0000000000000001
	itxn_field ApplicationArgs

	// contracts/ARC11550Bridge.algo.ts:39
	// approvalProgram: ARC11550Accounting.approvalProgram()
	pushbytes 0x0a200a0008015020482858103826090004151f7c750162066d696e746564016d01700b7472616e736665724170700161076d696e7443617031181481060b3119088d0c04bd0000000000000000000004af0000000000000000000000361a0217361a011788000224438a020027068bff672b226727088bfe6789298800051650b024438a00012b648929361a0188000450b024438a010127048bff50be4489361a02570200361a0188000224438a020031002109210427058bff35ff34ff5700081716504e02ba124427048bff50bd4c4841000e27048bff50be4435ff34ff22534427048bff50be4435ff244935fb34ff34ff4f02594935fe4934ff4c59240b81020835fd34ff2234fe528bfe4915165706024c504935fc34ff34fe34fd0834ff1552505035ff88045434ff27048bff5049bc484cbf8929361a02491521041244361a01178800051650b024438a02012a8bff168bfe5050be44178929361a0157020088000e4915230a165706024c5050b024438a0101284703288c00228c018b018bff1521060a0c4100448bff35ff228b0121060b08220834ff4c2358178c028bff35ff228b0121060b08230834ff4c2104588c038b002a8b02168b035050be441716508c008b0124088c0142ffb08b008c0046038929361a011788000450b024438a010127058bff1650be448929361a0157020088000f491521070a165706024c5050b024438a0101284702288c00228c018b018bff15230a0c4100288bff35ff228b01230b0834ff4c2358178c028b0027058b021650be44508c008b0124088c0142ffcd8b008c00460289361a02491521081244361a0149152105124488000224438a020031002109210427058bff5740081716504e02ba124427078bff508bfebf89361a0157020088000224438a01002849228c008b008bff1521070a0c4100378b008c018bff35ff228b0121070b0821050834ff4c2108588bff35ff228b0121070b08220834ff4c21055888ff928b0024088c0042ffbd89298800051650b024438a000127066489361a0157020088000224438a0100284702320d2706641244228c008b008bff15250a0c4101ac8b008c018bff35ff228b01250b08230834ff4c2104583100134100b127078bff35ff228b01250b08230834ff4c2104583100508bff35ff228b01250b08220834ff4c2358171650508c02232327078bff35ff228b01250b08230834ff4c2104583100508bff35ff228b01250b08220834ff4c2358171650504e02ba1732070f4422492327078bff35ff228b01250b08230834ff4c2104583100508bff35ff228b01250b08220834ff4c2358171650504e02ba178bff35ff228b01250b0821050834ff4c23581709168b024e02bb2a8bff35ff228b01250b08220834ff4c235817168bff35ff228b01250b08230834ff4c2104585050be44178bff35ff228b01250b0821050834ff4c235817092a8bff35ff228b01250b08220834ff4c235817168bff35ff228b01250b08230834ff4c21045850504c16bf2a8bff35ff228b01250b08220834ff4c235817168bff35ff228b01250b0821060834ff4c2104585050be44178bff35ff228b01250b0821050834ff4c235817082a8bff35ff228b01250b08220834ff4c235817168bff35ff228b01250b0821060834ff4c21045850504c16bf8b0024088c0042fe498929361a014915210712448800051650b024438a010128320d27066412442b648c008b002708640e44310080066d696e74657264124427058b0016508bffbf2b6424082b4c678b008c00898004917c48b6361a008e01fb45008004dd42f5a080043ac232548004bbb9de678004d04acbc2800465dd8717800451f504be80042ad2eb558004d579175d80040f0fa1738004c14e68d9800462b5078b800441057855361a008e0cfafdfb0cfb22fbbafbdffc5afc72fcd1fd09fd60fd70ff430034fc1534fd0c40000b34fc1534fd2435f942000834fd34fc152235f90935fa89
	itxn_field ApprovalProgram

	// contracts/ARC11550Bridge.algo.ts:40
	// clearStateProgram: ARC11550Accounting.clearProgram()
	pushbytes 0x0a
	itxn_field ClearStateProgram

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/ARC11550Bridge.algo.ts:43
	// accountingApp = this.itxn.createdApplicationID
	itxn CreatedApplicationID
	frame_bury 1 // accountingApp: uint64

	// contracts/ARC11550Bridge.algo.ts:45
	// id = sendMethodCall<typeof ARC11550Transfer.prototype.arc11550_mint>({
	//         applicationID: accountingApp,
	//         methodArgs: [
	//           accountingApp,
	//           {
	//             total: asa.total,
	//             decimals: asa.decimals,
	//             manager: this.app.address,
	//             name: asa.name as bytes<32>,
	//             symbol: asa.unitName as bytes<8>,
	//           },
	//         ],
	//       })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x0cc33604 // method "arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64"
	itxn_field ApplicationArgs

	// contracts/ARC11550Bridge.algo.ts:46
	// applicationID: accountingApp
	frame_dig 1 // accountingApp: uint64
	itxn_field ApplicationID

	// contracts/ARC11550Bridge.algo.ts:47
	// methodArgs: [
	//           accountingApp,
	//           {
	//             total: asa.total,
	//             decimals: asa.decimals,
	//             manager: this.app.address,
	//             name: asa.name as bytes<32>,
	//             symbol: asa.unitName as bytes<8>,
	//           },
	//         ]
	frame_dig 1 // accountingApp: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig 0 // asa: uint64
	asset_params_get AssetName
	pop
	pushbytes 0x0000000000000000000000000000000000000000000000000000000000000000
	concat
	dup
	extract 32 0
	bytec 0 // 0x
	b==
	assert
	extract 0 32
	frame_dig 0 // asa: uint64
	asset_params_get AssetUnitName
	pop
	pushbytes 0x0000000000000000
	concat
	dup
	extract 8 0
	bytec 0 // 0x
	b==
	assert
	extract 0 8
	concat
	frame_dig 0 // asa: uint64
	asset_params_get AssetTotal
	pop
	itob
	concat
	frame_dig 0 // asa: uint64
	asset_params_get AssetDecimals
	pop
	itob
	concat
	global CurrentApplicationAddress
	concat
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	btoi
	frame_bury 2 // id: uint64

	// contracts/ARC11550Bridge.algo.ts:59
	// appAndId: Arc11550Id = { accountingApp: accountingApp, id: id }
	frame_dig 2 // id: uint64
	itob
	frame_dig 1 // accountingApp: uint64
	itob
	concat
	frame_bury 3 // appAndId: Arc11550Id

	// contracts/ARC11550Bridge.algo.ts:60
	// this.asaToArc11550Map(asa).value = appAndId
	bytec 1 //  "asa"
	frame_dig 0 // asa: uint64
	itob
	concat
	frame_dig 3 // appAndId: Arc11550Id
	box_put

	// contracts/ARC11550Bridge.algo.ts:61
	// this.arc11550ToAsaMap(appAndId).value = asa
	bytec 2 //  "app"
	frame_dig 3 // appAndId: Arc11550Id
	concat
	frame_dig 0 // asa: uint64
	itob
	box_put

*if0_end:
	// contracts/ARC11550Bridge.algo.ts:64
	// arc11550 = this.asaToArc11550Map(asa).value
	bytec 1 //  "asa"
	frame_dig 0 // asa: uint64
	itob
	concat
	frame_bury 4 // storage key//arc11550

	// contracts/ARC11550Bridge.algo.ts:66
	// sendMethodCall<typeof ARC11550Transfer.prototype.arc11550_transfer>({
	//       applicationID: arc11550.accountingApp,
	//       methodArgs: [
	//         arc11550.accountingApp,
	//         [{ id: arc11550.id, amount: axfer.assetAmount, from: this.app.address, to: receiver }],
	//       ],
	//     })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x61bacfc8 // method "arc11550_transfer(uint64,(uint64,address,address,uint64)[])void"
	itxn_field ApplicationArgs

	// contracts/ARC11550Bridge.algo.ts:67
	// applicationID: arc11550.accountingApp
	intc 2 //  headOffset
	intc 2 // 8
	bytec 1 //  "asa"
	frame_dig 0 // asa: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	itxn_field ApplicationID

	// contracts/ARC11550Bridge.algo.ts:68
	// methodArgs: [
	//         arc11550.accountingApp,
	//         [{ id: arc11550.id, amount: axfer.assetAmount, from: this.app.address, to: receiver }],
	//       ]
	intc 2 //  headOffset
	intc 2 // 8
	bytec 1 //  "asa"
	frame_dig 0 // asa: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	itxn_field ApplicationArgs
	intc 0 // 0
	intc 2 // 8
	bytec 1 //  "asa"
	frame_dig 0 // asa: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	global CurrentApplicationAddress
	concat
	frame_dig -2 // receiver: Address
	concat
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns AssetAmount
	itob
	concat
	dup
	len
	intc 4 // 80
	/
	itob
	extract 6 2
	swap
	concat
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/ARC11550Bridge.algo.ts:74
	// return arc11550;
	frame_dig 4 // storage key//arc11550
	box_get

	// box value does not exist: this.asaToArc11550Map(asa).value
	assert

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 4
	retsub

// arc11550ToAsa(appl,uint64,address)uint64
*abi_route_arc11550ToAsa:
	// The ABI return prefix
	bytec 4 // 0x151f7c75

	// receiver: address
	txna ApplicationArgs 2
	dup
	len
	intc 6 // 32
	==

	// argument 0 (receiver) for arc11550ToAsa must be a address
	assert

	// xferIndex: uint64
	txna ApplicationArgs 1
	btoi

	// xferCall: appl
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 3 //  appl
	==

	// argument 2 (xferCall) for arc11550ToAsa must be a appl transaction
	assert

	// execute arc11550ToAsa(appl,uint64,address)uint64
	callsub arc11550ToAsa
	itob
	concat
	log
	intc 1 // 1
	return

// arc11550ToAsa(xferCall: AppCallTxn, xferIndex: uint64, receiver: Address): AssetID
arc11550ToAsa:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 6

	// contracts/ARC11550Bridge.algo.ts:78
	// xfers: Transfer[] = castBytes<Transfer[]>(xferCall.applicationArgs[2])
	frame_dig -1 // xferCall: AppCallTxn
	gtxns ApplicationArgs 2
	frame_bury 0 // xfers: Transfer[]
	frame_dig -2 // xferIndex: uint64
	frame_bury 1 // accessor: accessor//0//xfer

	// contracts/ARC11550Bridge.algo.ts:80
	// accountingApp = AppID.fromUint64(btoi(xferCall.applicationArgs[1]))
	frame_dig -1 // xferCall: AppCallTxn
	gtxns ApplicationArgs 1
	btoi
	frame_bury 2 // accountingApp: uint64

	// contracts/ARC11550Bridge.algo.ts:83
	// assert(xferCall.applicationID == sendMethodCall<typeof ARC11550Accounting.prototype.arc11550_transferApp>({}))
	frame_dig -1 // xferCall: AppCallTxn
	gtxns ApplicationID
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0xc14e68d9 // method "arc11550_transferApp()uint64"
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	btoi
	==
	assert

	// contracts/ARC11550Bridge.algo.ts:85
	// arc11550: Arc11550Id = { accountingApp: accountingApp, id: xfer.id }
	frame_dig 0 // xfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//xfer
	intc 4 // 80
	* // acc * typeLength
	+
	intc 0 //  headOffset
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itob
	frame_dig 2 // accountingApp: uint64
	itob
	concat
	frame_bury 3 // arc11550: Arc11550Id

	// *if1_condition
	// contracts/ARC11550Bridge.algo.ts:87
	// !this.arc11550ToAsaMap(arc11550).exists
	bytec 2 //  "app"
	frame_dig 3 // arc11550: Arc11550Id
	concat
	box_len
	swap
	pop
	!
	bz *if1_end

	// *if1_consequent
	// contracts/ARC11550Bridge.algo.ts:88
	// params = sendMethodCall<typeof ARC11550Accounting.prototype.arc11550_params>({
	//         applicationID: arc11550.accountingApp,
	//         methodArgs: [xfer.id],
	//       })
	itxn_begin
	intc 3 //  appl
	itxn_field TypeEnum
	pushbytes 0x51f504be // method "arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)"
	itxn_field ApplicationArgs

	// contracts/ARC11550Bridge.algo.ts:89
	// applicationID: arc11550.accountingApp
	frame_dig 3 // arc11550: Arc11550Id
	extract 8 8
	btoi
	itxn_field ApplicationID

	// contracts/ARC11550Bridge.algo.ts:90
	// methodArgs: [xfer.id]
	frame_dig 0 // xfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//xfer
	intc 4 // 80
	* // acc * typeLength
	+
	intc 0 //  headOffset
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 4 // params: (byte[32],byte[8],uint64,uint64,address)

	// contracts/ARC11550Bridge.algo.ts:93
	// sendAssetCreation({
	//         configAssetTotal: params.total as uint64,
	//         configAssetDecimals: params.decimals as uint64,
	//         configAssetName: params.name as bytes,
	//         configAssetUnitName: params.symbol as bytes,
	//         configAssetReserve: this.app.address,
	//       })
	itxn_begin
	pushint 3 // acfg
	itxn_field TypeEnum

	// contracts/ARC11550Bridge.algo.ts:94
	// configAssetTotal: params.total as uint64
	frame_dig 4 // params: (byte[32],byte[8],uint64,uint64,address)
	extract 40 8
	btoi
	itxn_field ConfigAssetTotal

	// contracts/ARC11550Bridge.algo.ts:95
	// configAssetDecimals: params.decimals as uint64
	frame_dig 4 // params: (byte[32],byte[8],uint64,uint64,address)
	extract 48 8
	btoi
	itxn_field ConfigAssetDecimals

	// contracts/ARC11550Bridge.algo.ts:96
	// configAssetName: params.name as bytes
	frame_dig 4 // params: (byte[32],byte[8],uint64,uint64,address)
	extract 0 32
	itxn_field ConfigAssetName

	// contracts/ARC11550Bridge.algo.ts:97
	// configAssetUnitName: params.symbol as bytes
	frame_dig 4 // params: (byte[32],byte[8],uint64,uint64,address)
	extract 32 8
	itxn_field ConfigAssetUnitName

	// contracts/ARC11550Bridge.algo.ts:98
	// configAssetReserve: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetReserve

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID

	// contracts/ARC11550Bridge.algo.ts:101
	// asa = this.itxn.createdAssetID
	itxn CreatedAssetID
	frame_bury 5 // asa: uint64

	// contracts/ARC11550Bridge.algo.ts:102
	// this.arc11550ToAsaMap(arc11550).value = asa
	bytec 2 //  "app"
	frame_dig 3 // arc11550: Arc11550Id
	concat
	frame_dig 5 // asa: uint64
	itob
	box_put

	// contracts/ARC11550Bridge.algo.ts:103
	// this.asaToArc11550Map(asa).value = arc11550
	bytec 1 //  "asa"
	frame_dig 5 // asa: uint64
	itob
	concat
	frame_dig 3 // arc11550: Arc11550Id
	box_put

*if1_end:
	// contracts/ARC11550Bridge.algo.ts:106
	// asa = this.arc11550ToAsaMap(arc11550).value
	bytec 2 //  "app"
	frame_dig 3 // arc11550: Arc11550Id
	concat
	box_get

	// box value does not exist: this.arc11550ToAsaMap(arc11550).value
	assert
	btoi
	frame_bury 6 // asa: uint64

	// contracts/ARC11550Bridge.algo.ts:108
	// sendAssetTransfer({ xferAsset: asa, assetReceiver: receiver, assetAmount: xfer.amount })
	itxn_begin
	intc 5 //  axfer
	itxn_field TypeEnum

	// contracts/ARC11550Bridge.algo.ts:108
	// xferAsset: asa
	frame_dig 6 // asa: uint64
	itxn_field XferAsset

	// contracts/ARC11550Bridge.algo.ts:108
	// assetReceiver: receiver
	frame_dig -3 // receiver: Address
	itxn_field AssetReceiver

	// contracts/ARC11550Bridge.algo.ts:108
	// assetAmount: xfer.amount
	frame_dig 0 // xfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//xfer
	intc 4 // 80
	* // acc * typeLength
	+
	pushint 72 // headOffset
	+
	load 255 // full array
	swap
	intc 2 // 8
	extract3
	btoi
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/ARC11550Bridge.algo.ts:110
	// return asa;
	frame_dig 6 // asa: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 6
	retsub

*create_NoOp:
	pushbytes 0x973b616f // method "createApplication(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xb281a56d // method "optInToAsa(uint64)void"
	pushbytes 0x035ed87e // method "asaToArc11550(axfer,address)(uint64,uint64)"
	pushbytes 0x4c2e9145 // method "arc11550ToAsa(appl,uint64,address)uint64"
	txna ApplicationArgs 0
	match *abi_route_optInToAsa *abi_route_asaToArc11550 *abi_route_arc11550ToAsa

	// this contract does not implement the given ABI method for call NoOp
	err
#pragma version 10
intcblock 1 0 32 48
bytecblock 0x151f7c75 0x00

// This TEAL was generated by TEALScript v0.106.3
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// approveRequest(address,(address,uint64,uint64))bool
*abi_route_approveRequest:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// addrToken: (address,uint64,uint64)
	txna ApplicationArgs 2
	dup
	len
	intc 3 // 48
	==

	// argument 0 (addrToken) for approveRequest must be a (address,uint64,uint64)
	assert

	// sender: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 1 (sender) for approveRequest must be a address
	assert

	// execute approveRequest(address,(address,uint64,uint64))bool
	callsub approveRequest
	bytec 1 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	concat
	log
	intc 0 // 1
	return

// approveRequest(sender: Address, addrToken: AddressToken): boolean
approveRequest:
	proto 2 1

	// contracts/DeclarationRegistry.algo.ts:120
	// return true;
	intc 0 // 1
	retsub

// approveRequestRemoval(address,(address,uint64,uint64))bool
*abi_route_approveRequestRemoval:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// addrToken: (address,uint64,uint64)
	txna ApplicationArgs 2
	dup
	len
	intc 3 // 48
	==

	// argument 0 (addrToken) for approveRequestRemoval must be a (address,uint64,uint64)
	assert

	// sender: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 1 (sender) for approveRequestRemoval must be a address
	assert

	// execute approveRequestRemoval(address,(address,uint64,uint64))bool
	callsub approveRequestRemoval
	bytec 1 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	concat
	log
	intc 0 // 1
	return

// approveRequestRemoval(sender: Address, addrToken: AddressToken): boolean
approveRequestRemoval:
	proto 2 1

	// contracts/DeclarationRegistry.algo.ts:124
	// return true;
	intc 0 // 1
	retsub

// approveDeclaration(address,(address,uint64,uint64))bool
*abi_route_approveDeclaration:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// addrToken: (address,uint64,uint64)
	txna ApplicationArgs 2
	dup
	len
	intc 3 // 48
	==

	// argument 0 (addrToken) for approveDeclaration must be a (address,uint64,uint64)
	assert

	// sender: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 1 (sender) for approveDeclaration must be a address
	assert

	// execute approveDeclaration(address,(address,uint64,uint64))bool
	callsub approveDeclaration
	bytec 1 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	concat
	log
	intc 0 // 1
	return

// approveDeclaration(sender: Address, addrToken: AddressToken): boolean
approveDeclaration:
	proto 2 1

	// contracts/DeclarationRegistry.algo.ts:128
	// return sender === addrToken.addr;
	frame_dig -1 // sender: Address
	frame_dig -2 // addrToken: AddressToken
	extract 0 32
	==
	retsub

// approveDeclarationRemoval(address,(address,uint64,uint64))bool
*abi_route_approveDeclarationRemoval:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// addrToken: (address,uint64,uint64)
	txna ApplicationArgs 2
	dup
	len
	intc 3 // 48
	==

	// argument 0 (addrToken) for approveDeclarationRemoval must be a (address,uint64,uint64)
	assert

	// sender: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 1 (sender) for approveDeclarationRemoval must be a address
	assert

	// execute approveDeclarationRemoval(address,(address,uint64,uint64))bool
	callsub approveDeclarationRemoval
	bytec 1 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	concat
	log
	intc 0 // 1
	return

// approveDeclarationRemoval(sender: Address, addrToken: AddressToken): boolean
approveDeclarationRemoval:
	proto 2 1

	// contracts/DeclarationRegistry.algo.ts:132
	// return sender === addrToken.addr;
	frame_dig -1 // sender: Address
	frame_dig -2 // addrToken: AddressToken
	extract 0 32
	==
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x96470e40 // method "approveRequest(address,(address,uint64,uint64))bool"
	pushbytes 0xf69792d9 // method "approveRequestRemoval(address,(address,uint64,uint64))bool"
	pushbytes 0xe38a69b8 // method "approveDeclaration(address,(address,uint64,uint64))bool"
	pushbytes 0x3c71d501 // method "approveDeclarationRemoval(address,(address,uint64,uint64))bool"
	txna ApplicationArgs 0
	match *abi_route_approveRequest *abi_route_approveRequestRemoval *abi_route_approveDeclaration *abi_route_approveDeclarationRemoval

	// this contract does not implement the given ABI method for call NoOp
	err
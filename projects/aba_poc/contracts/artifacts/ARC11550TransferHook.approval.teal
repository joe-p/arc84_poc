#pragma version 10
intcblock 0 1 32 80
bytecblock 0x

// This TEAL was generated by TEALScript v0.106.3
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// approved(address,(uint64,address,address,uint64)[])bool
*abi_route_approved:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// transfers: (uint64,address,address,uint64)[]
	txna ApplicationArgs 2
	extract 2 0

	// caller: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 1 (caller) for approved must be a address
	assert

	// execute approved(address,(uint64,address,address,uint64)[])bool
	callsub approved
	pushbytes 0x00
	intc 0 // 0
	uncover 2
	setbit
	concat
	log
	intc 1 // 1
	return

// approved(caller: Address, transfers: Transfer[]): boolean
//
// Determines whether a transfer is approved or not. This implementation just ensures the caller is sending from their own address, but
// there are other possibilities such as ERC20-style approvals, whitelists, blacklists, enforced royalties, etc.
approved:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts/ARC11550Transfer.algo.ts:59
	// for (let i = 0; i < transfers.length; i += 1)
	intc 0 // 0
	frame_bury 0 // i: uint64

*for_0:
	// contracts/ARC11550Transfer.algo.ts:59
	// i < transfers.length
	frame_dig 0 // i: uint64
	frame_dig -2 // transfers: Transfer[]
	len
	intc 3 // 80
	/
	<
	bz *for_0_end
	frame_dig 0 // i: uint64
	frame_bury 1 // accessor: accessor//0//t

	// *if0_condition
	// contracts/ARC11550Transfer.algo.ts:61
	// t.from !== caller
	frame_dig -2 // transfers: Transfer[]
	store 255 // full array
	intc 0 //  initial offset
	frame_dig 1 // saved accessor: accessor//0//t
	intc 3 // 80
	* // acc * typeLength
	+
	pushint 8 // headOffset
	+
	load 255 // full array
	swap
	intc 2 // 32
	extract3
	frame_dig -1 // caller: Address
	!=
	bz *if0_end

	// *if0_consequent
	// contracts/ARC11550Transfer.algo.ts:61
	// return false;
	intc 0 // 0
	b *approved*return

*if0_end:

*for_0_continue:
	// contracts/ARC11550Transfer.algo.ts:59
	// i += 1
	frame_dig 0 // i: uint64
	intc 1 // 1
	+
	frame_bury 0 // i: uint64
	b *for_0

*for_0_end:
	// contracts/ARC11550Transfer.algo.ts:64
	// return true;
	intc 1 // 1

*approved*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

*abi_route_createApplication:
	intc 1 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xb4c17a7b // method "approved(address,(uint64,address,address,uint64)[])bool"
	txna ApplicationArgs 0
	match *abi_route_approved

	// this contract does not implement the given ABI method for call NoOp
	err
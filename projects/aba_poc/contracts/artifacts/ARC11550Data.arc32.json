{
  "hints": {
    "createApplication(uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "arc11550_newCollection(address,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_collection_minted(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_metadata((uint64,byte[]))(bool,byte[])": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_balanceOf(uint64,address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_transferApp()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_transferHookApp(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_balancesOf((uint64,address)[])uint64[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address,uint64)[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_setMetadata((uint64,byte[]),byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_setAllowance((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_setAllowances(((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "doTransfers(address,(uint64,address,address,uint64)[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address,uint64))uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "transferApp": {
          "type": "uint64",
          "key": "transferApp"
        },
        "tokenId": {
          "type": "uint64",
          "key": "tokenId"
        },
        "collectionId": {
          "type": "uint64",
          "key": "collectionId"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "ARC11550Data",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "transferApp",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc11550_newCollection",
        "args": [
          {
            "name": "manager",
            "type": "address"
          },
          {
            "name": "mintCap",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "arc11550_collection_minted",
        "desc": "***************\nGetter Methods\n***************",
        "args": [
          {
            "name": "id",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "arc11550_metadata",
        "args": [
          {
            "name": "key",
            "type": "(uint64,byte[])"
          }
        ],
        "returns": {
          "type": "(bool,byte[])"
        }
      },
      {
        "name": "arc11550_balanceOf",
        "args": [
          {
            "name": "id",
            "type": "uint64"
          },
          {
            "name": "account",
            "type": "address"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "arc11550_params",
        "args": [
          {
            "name": "id",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(byte[32],byte[8],uint64,uint64,address,uint64)"
        }
      },
      {
        "name": "arc11550_transferApp",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "arc11550_transferHookApp",
        "args": [
          {
            "name": "id",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "arc11550_balancesOf",
        "desc": "********************\nMulti Getter Methods\n********************",
        "args": [
          {
            "name": "idAndAddrs",
            "type": "(uint64,address)[]"
          }
        ],
        "returns": {
          "type": "uint64[]"
        }
      },
      {
        "name": "arc11550_mulitpleParams",
        "args": [
          {
            "name": "ids",
            "type": "uint64[]"
          }
        ],
        "returns": {
          "type": "(byte[32],byte[8],uint64,uint64,address,uint64)[]"
        }
      },
      {
        "name": "arc11550_setMetadata",
        "desc": "***************\nSetter methods\n***************",
        "args": [
          {
            "name": "key",
            "type": "(uint64,byte[])"
          },
          {
            "name": "data",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc11550_setAllowance",
        "args": [
          {
            "name": "allowanceKey",
            "type": "(address,address,uint64)"
          },
          {
            "name": "allowance",
            "type": "(uint64,uint64,uint64,uint64,uint64)"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc11550_setAllowances",
        "desc": "********************\nMulti Setter Methods\n********************",
        "args": [
          {
            "name": "allowances",
            "type": "((address,address,uint64),(uint64,uint64,uint64,uint64,uint64))[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "doTransfers",
        "desc": "*********************\nTransfer/Mint Methods\n*********************",
        "args": [
          {
            "name": "sender",
            "type": "address"
          },
          {
            "name": "transfers",
            "type": "(uint64,address,address,uint64)[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc11550_mint",
        "args": [
          {
            "name": "collectionId",
            "type": "uint64"
          },
          {
            "name": "params",
            "type": "(byte[32],byte[8],uint64,uint64,address,uint64)"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      }
    ]
  }
}
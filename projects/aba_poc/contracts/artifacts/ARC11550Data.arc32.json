{
  "hints": {
    "createApplication(uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "arc11550_minted()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_metadata((uint64,string))(bool,byte[])": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_setMetadata((uint64,string),byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_balanceOf(uint64,address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_balancesOf((uint64,address)[])uint64[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_approve((address,address,uint64),(uint64,uint64))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_transferApp()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_transferHookApp()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "doTransfers((uint64,address,address,uint64)[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "doMint((byte[32],byte[8],uint64,uint64,address))uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "minted": {
          "type": "uint64",
          "key": "minted"
        },
        "transferApp": {
          "type": "uint64",
          "key": "transferApp"
        },
        "transferHookApp": {
          "type": "uint64",
          "key": "transferHookApp"
        },
        "mintCap": {
          "type": "uint64",
          "key": "mintCap"
        },
        "minter": {
          "type": "bytes",
          "key": "minter"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "ARC11550Data",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "transferApp",
            "type": "uint64"
          },
          {
            "name": "transferHookApp",
            "type": "uint64"
          },
          {
            "name": "mintCap",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc11550_minted",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "arc11550_metadata",
        "args": [
          {
            "name": "key",
            "type": "(uint64,string)"
          }
        ],
        "returns": {
          "type": "(bool,byte[])"
        }
      },
      {
        "name": "arc11550_setMetadata",
        "args": [
          {
            "name": "key",
            "type": "(uint64,string)"
          },
          {
            "name": "data",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc11550_balanceOf",
        "args": [
          {
            "name": "id",
            "type": "uint64"
          },
          {
            "name": "account",
            "type": "address"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "arc11550_balancesOf",
        "args": [
          {
            "name": "idAndAddrs",
            "type": "(uint64,address)[]"
          }
        ],
        "returns": {
          "type": "uint64[]"
        }
      },
      {
        "name": "arc11550_params",
        "args": [
          {
            "name": "id",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(byte[32],byte[8],uint64,uint64,address)"
        }
      },
      {
        "name": "arc11550_mulitpleParams",
        "args": [
          {
            "name": "ids",
            "type": "uint64[]"
          }
        ],
        "returns": {
          "type": "(byte[32],byte[8],uint64,uint64,address)[]"
        }
      },
      {
        "name": "arc11550_approve",
        "args": [
          {
            "name": "allowanceKey",
            "type": "(address,address,uint64)"
          },
          {
            "name": "allowance",
            "type": "(uint64,uint64)"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc11550_setApprovals",
        "args": [
          {
            "name": "allowances",
            "type": "((address,address,uint64),(uint64,uint64))[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc11550_transferApp",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "arc11550_transferHookApp",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "doTransfers",
        "args": [
          {
            "name": "transfers",
            "type": "(uint64,address,address,uint64)[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "doMint",
        "args": [
          {
            "name": "params",
            "type": "(byte[32],byte[8],uint64,uint64,address)"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      }
    ]
  }
}
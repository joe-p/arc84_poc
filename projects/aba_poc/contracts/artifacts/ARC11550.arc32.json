{
  "hints": {
    "createApplication(uint64,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_minted()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_metadata((uint64,string))(bool,byte[])": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_setMetadata((uint64,string),byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_balanceOf(uint64,address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_balancesOf((uint64,address)[])uint64[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_transfer((uint64,address,address,uint64)[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "minted": {
          "type": "uint64",
          "key": "minted"
        },
        "transferHookApp": {
          "type": "uint64",
          "key": "transferHookApp"
        },
        "mintCap": {
          "type": "uint64",
          "key": "mintCap"
        },
        "minter": {
          "type": "bytes",
          "key": "minter"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAwIDgwIDggMSAzMiA0MCA4OCA3MiA2CmJ5dGVjYmxvY2sgMHggMHg2MiAweDE1MWY3Yzc1IDB4NmQ2OTZlNzQ2NTY0IDB4NmQgMHg3MCAweDc0NzI2MTZlNzM2NjY1NzI0ODZmNmY2YjQxNzA3MCAweDZkNjk2ZTc0NDM2MTcwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjEwNi4zCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGdvcmFuZGZvdW5kYXRpb24vVEVBTFNjcmlwdAoKLy8gVGhpcyBjb250cmFjdCBpcyBjb21wbGlhbnQgd2l0aCBhbmQvb3IgaW1wbGVtZW50cyB0aGUgZm9sbG93aW5nIEFSQ3M6IFsgQVJDNCBdCgovLyBUaGUgZm9sbG93aW5nIHRlbiBsaW5lcyBvZiBURUFMIGhhbmRsZSBpbml0aWFsIHByb2dyYW0gZmxvdwovLyBUaGlzIHBhdHRlcm4gaXMgdXNlZCB0byBtYWtlIGl0IGVhc3kgZm9yIGFueW9uZSB0byBwYXJzZSB0aGUgc3RhcnQgb2YgdGhlIHByb2dyYW0gYW5kIGRldGVybWluZSBpZiBhIHNwZWNpZmljIGFjdGlvbiBpcyBhbGxvd2VkCi8vIEhlcmUsIGFjdGlvbiByZWZlcnMgdG8gdGhlIE9uQ29tcGxldGUgaW4gY29tYmluYXRpb24gd2l0aCB3aGV0aGVyIHRoZSBhcHAgaXMgYmVpbmcgY3JlYXRlZCBvciBjYWxsZWQKLy8gRXZlcnkgcG9zc2libGUgYWN0aW9uIGZvciB0aGlzIGNvbnRyYWN0IGlzIHJlcHJlc2VudGVkIGluIHRoZSBzd2l0Y2ggc3RhdGVtZW50Ci8vIElmIHRoZSBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlc3BlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIipOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQppbnRjIDggLy8gNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggKmNhbGxfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKmNyZWF0ZV9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRAoKKk5PVF9JTVBMRU1FTlRFRDoKCS8vIFRoZSByZXF1ZXN0ZWQgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGlzIGNvbnRyYWN0LiBBcmUgeW91IHVzaW5nIHRoZSBjb3JyZWN0IE9uQ29tcGxldGU/IERpZCB5b3Ugc2V0IHlvdXIgYXBwIElEPwoJZXJyCgovLyBjcmVhdGVBcHBsaWNhdGlvbih1aW50NjQsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCS8vIG1pbnRDYXA6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIGFwcDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBjcmVhdGVBcHBsaWNhdGlvbih1aW50NjQsdWludDY0KXZvaWQKCWNhbGxzdWIgY3JlYXRlQXBwbGljYXRpb24KCWludGMgMyAvLyAxCglyZXR1cm4KCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKGFwcDogQXBwSUQsIG1pbnRDYXA6IHVpbnQ2NCk6IHZvaWQKY3JlYXRlQXBwbGljYXRpb246Cglwcm90byAyIDAKCgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czo1OAoJLy8gdGhpcy50cmFuc2Zlckhvb2tBcHAudmFsdWUgPSBhcHAKCWJ5dGVjIDYgLy8gICJ0cmFuc2Zlckhvb2tBcHAiCglmcmFtZV9kaWcgLTEgLy8gYXBwOiBBcHBJRAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czo1OQoJLy8gdGhpcy5taW50ZWQudmFsdWUgPSAwCglieXRlYyAzIC8vICAibWludGVkIgoJaW50YyAwIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL0FSQzExNTUwLmFsZ28udHM6NjAKCS8vIHRoaXMubWludENhcC52YWx1ZSA9IG1pbnRDYXAKCWJ5dGVjIDcgLy8gICJtaW50Q2FwIgoJZnJhbWVfZGlnIC0yIC8vIG1pbnRDYXA6IHVpbnQ2NAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gYXJjMTE1NTBfbWludCgoYnl0ZVszMl0sYnl0ZVs4XSx1aW50NjQsdWludDY0LGFkZHJlc3MpKXVpbnQ2NAoqYWJpX3JvdXRlX2FyYzExNTUwX21pbnQ6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDIgLy8gMHgxNTFmN2M3NQoKCS8vIHBhcmFtczogKGJ5dGVbMzJdLGJ5dGVbOF0sdWludDY0LHVpbnQ2NCxhZGRyZXNzKQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludGMgNiAvLyA4OAoJPT0KCgkvLyBhcmd1bWVudCAwIChwYXJhbXMpIGZvciBhcmMxMTU1MF9taW50IG11c3QgYmUgYSAoYnl0ZVszMl0sYnl0ZVs4XSx1aW50NjQsdWludDY0LGFkZHJlc3MpCglhc3NlcnQKCgkvLyBleGVjdXRlIGFyYzExNTUwX21pbnQoKGJ5dGVbMzJdLGJ5dGVbOF0sdWludDY0LHVpbnQ2NCxhZGRyZXNzKSl1aW50NjQKCWNhbGxzdWIgYXJjMTE1NTBfbWludAoJaXRvYgoJY29uY2F0Cglsb2cKCWludGMgMyAvLyAxCglyZXR1cm4KCi8vIGFyYzExNTUwX21pbnQocGFyYW1zOiBQYXJhbXMpOiB1aW50NjQKYXJjMTE1NTBfbWludDoKCXByb3RvIDEgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CgoJLy8gY29udHJhY3RzL0FSQzExNTUwLmFsZ28udHM6NjQKCS8vIGlkID0gdGhpcy5taW50ZWQudmFsdWUKCWJ5dGVjIDMgLy8gICJtaW50ZWQiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfYnVyeSAwIC8vIGlkOiB1aW50NjQKCgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czo2NQoJLy8gYXNzZXJ0KGlkIDw9IHRoaXMubWludENhcC52YWx1ZSkKCWZyYW1lX2RpZyAwIC8vIGlkOiB1aW50NjQKCWJ5dGVjIDcgLy8gICJtaW50Q2FwIgoJYXBwX2dsb2JhbF9nZXQKCTw9Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czo2NwoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5taW50ZXIudmFsdWUpCgl0eG4gU2VuZGVyCglwdXNoYnl0ZXMgMHg2ZDY5NmU3NDY1NzIgLy8gIm1pbnRlciIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL0FSQzExNTUwLmFsZ28udHM6NjgKCS8vIHRoaXMucGFyYW1zKGlkKS52YWx1ZSA9IHBhcmFtcwoJYnl0ZWMgNSAvLyAgInAiCglmcmFtZV9kaWcgMCAvLyBpZDogdWludDY0CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtMSAvLyBwYXJhbXM6IFBhcmFtcwoJYm94X3B1dAoKCS8vIGNvbnRyYWN0cy9BUkMxMTU1MC5hbGdvLnRzOjcwCgkvLyB0aGlzLm1pbnRlZC52YWx1ZSArPSAxCglieXRlYyAzIC8vICAibWludGVkIgoJYXBwX2dsb2JhbF9nZXQKCWludGMgMyAvLyAxCgkrCglieXRlYyAzIC8vICAibWludGVkIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czo3MQoJLy8gcmV0dXJuIGlkOwoJZnJhbWVfZGlnIDAgLy8gaWQ6IHVpbnQ2NAoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoJcmV0c3ViCgovLyBhcmMxMTU1MF9tdWx0aU1pbnQoKGJ5dGVbMzJdLGJ5dGVbOF0sdWludDY0LHVpbnQ2NCxhZGRyZXNzKVtdKXVpbnQ2NAoqYWJpX3JvdXRlX2FyYzExNTUwX211bHRpTWludDoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMiAvLyAweDE1MWY3Yzc1CgoJLy8gcGFyYW1zOiAoYnl0ZVszMl0sYnl0ZVs4XSx1aW50NjQsdWludDY0LGFkZHJlc3MpW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSBhcmMxMTU1MF9tdWx0aU1pbnQoKGJ5dGVbMzJdLGJ5dGVbOF0sdWludDY0LHVpbnQ2NCxhZGRyZXNzKVtdKXVpbnQ2NAoJY2FsbHN1YiBhcmMxMTU1MF9tdWx0aU1pbnQKCWl0b2IKCWNvbmNhdAoJbG9nCglpbnRjIDMgLy8gMQoJcmV0dXJuCgovLyBhcmMxMTU1MF9tdWx0aU1pbnQocGFyYW1zOiBQYXJhbXNbXSk6IHVpbnQ2NAphcmMxMTU1MF9tdWx0aU1pbnQ6Cglwcm90byAxIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoJZHVwCgoJLy8gY29udHJhY3RzL0FSQzExNTUwLmFsZ28udHM6NzUKCS8vIGZpcnN0SWQgPSB0aGlzLm1pbnRlZC52YWx1ZQoJYnl0ZWMgMyAvLyAgIm1pbnRlZCIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9idXJ5IDAgLy8gZmlyc3RJZDogdWludDY0CgoJLy8gY29udHJhY3RzL0FSQzExNTUwLmFsZ28udHM6NzYKCS8vIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1zLmxlbmd0aDsgaSArPSAxKQoJaW50YyAwIC8vIDAKCWZyYW1lX2J1cnkgMSAvLyBpOiB1aW50NjQKCipmb3JfMDoKCS8vIGNvbnRyYWN0cy9BUkMxMTU1MC5hbGdvLnRzOjc2CgkvLyBpIDwgcGFyYW1zLmxlbmd0aAoJZnJhbWVfZGlnIDEgLy8gaTogdWludDY0CglmcmFtZV9kaWcgLTEgLy8gcGFyYW1zOiBQYXJhbXNbXQoJbGVuCglpbnRjIDYgLy8gODgKCS8KCTwKCWJ6ICpmb3JfMF9lbmQKCgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czo3NwoJLy8gdGhpcy5hcmMxMTU1MF9taW50KHBhcmFtc1tpXSkKCWZyYW1lX2RpZyAtMSAvLyBwYXJhbXM6IFBhcmFtc1tdCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyAwIC8vICBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIDEgLy8gaTogdWludDY0CglpbnRjIDYgLy8gODgKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJaW50YyA2IC8vIDg4CglleHRyYWN0MwoJY2FsbHN1YiBhcmMxMTU1MF9taW50CgoqZm9yXzBfY29udGludWU6CgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czo3NgoJLy8gaSArPSAxCglmcmFtZV9kaWcgMSAvLyBpOiB1aW50NjQKCWludGMgMyAvLyAxCgkrCglmcmFtZV9idXJ5IDEgLy8gaTogdWludDY0CgliICpmb3JfMAoKKmZvcl8wX2VuZDoKCS8vIGNvbnRyYWN0cy9BUkMxMTU1MC5hbGdvLnRzOjgwCgkvLyByZXR1cm4gZmlyc3RJZDsKCWZyYW1lX2RpZyAwIC8vIGZpcnN0SWQ6IHVpbnQ2NAoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDEKCXJldHN1YgoKLy8gYXJjMTE1NTBfbWludGVkKCl1aW50NjQKKmFiaV9yb3V0ZV9hcmMxMTU1MF9taW50ZWQ6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDIgLy8gMHgxNTFmN2M3NQoKCS8vIGV4ZWN1dGUgYXJjMTE1NTBfbWludGVkKCl1aW50NjQKCWNhbGxzdWIgYXJjMTE1NTBfbWludGVkCglpdG9iCgljb25jYXQKCWxvZwoJaW50YyAzIC8vIDEKCXJldHVybgoKLy8gYXJjMTE1NTBfbWludGVkKCk6IHVpbnQ2NAphcmMxMTU1MF9taW50ZWQ6Cglwcm90byAwIDEKCgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czo4NAoJLy8gcmV0dXJuIHRoaXMubWludGVkLnZhbHVlOwoJYnl0ZWMgMyAvLyAgIm1pbnRlZCIKCWFwcF9nbG9iYWxfZ2V0CglyZXRzdWIKCi8vIGFyYzExNTUwX21ldGFkYXRhKCh1aW50NjQsc3RyaW5nKSkoYm9vbCxieXRlW10pCiphYmlfcm91dGVfYXJjMTE1NTBfbWV0YWRhdGE6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDIgLy8gMHgxNTFmN2M3NQoKCS8vIGtleTogKHVpbnQ2NCxzdHJpbmcpCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCgoJLy8gZXhlY3V0ZSBhcmMxMTU1MF9tZXRhZGF0YSgodWludDY0LHN0cmluZykpKGJvb2wsYnl0ZVtdKQoJY2FsbHN1YiBhcmMxMTU1MF9tZXRhZGF0YQoJY29uY2F0Cglsb2cKCWludGMgMyAvLyAxCglyZXR1cm4KCi8vIGFyYzExNTUwX21ldGFkYXRhKGtleTogTWV0YWRhdGFLZXkpOiBNZXRhZGF0YQphcmMxMTU1MF9tZXRhZGF0YToKCXByb3RvIDEgMQoKCS8vIGNvbnRyYWN0cy9BUkMxMTU1MC5hbGdvLnRzOjg4CgkvLyByZXR1cm4gdGhpcy5tZXRhZGF0YShrZXkpLnZhbHVlOwoJYnl0ZWMgNCAvLyAgIm0iCglmcmFtZV9kaWcgLTEgLy8ga2V5OiBNZXRhZGF0YUtleQoJY29uY2F0Cglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLm1ldGFkYXRhKGtleSkudmFsdWUKCWFzc2VydAoJcmV0c3ViCgovLyBhcmMxMTU1MF9zZXRNZXRhZGF0YSgodWludDY0LHN0cmluZyksYnl0ZVtdKXZvaWQKKmFiaV9yb3V0ZV9hcmMxMTU1MF9zZXRNZXRhZGF0YToKCS8vIGRhdGE6IGJ5dGVbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZXh0cmFjdCAyIDAKCgkvLyBrZXk6ICh1aW50NjQsc3RyaW5nKQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoKCS8vIGV4ZWN1dGUgYXJjMTE1NTBfc2V0TWV0YWRhdGEoKHVpbnQ2NCxzdHJpbmcpLGJ5dGVbXSl2b2lkCgljYWxsc3ViIGFyYzExNTUwX3NldE1ldGFkYXRhCglpbnRjIDMgLy8gMQoJcmV0dXJuCgovLyBhcmMxMTU1MF9zZXRNZXRhZGF0YShrZXk6IE1ldGFkYXRhS2V5LCBkYXRhOiBieXRlcyk6IHZvaWQKYXJjMTE1NTBfc2V0TWV0YWRhdGE6Cglwcm90byAyIDAKCgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czoxMDMKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMucGFyYW1zKGtleS5pZCkudmFsdWUubWFuYWdlcikKCXR4biBTZW5kZXIKCXB1c2hpbnQgNTYgLy8gaGVhZE9mZnNldAoJaW50YyA0IC8vIDMyCglieXRlYyA1IC8vICAicCIKCWZyYW1lX2RpZyAtMSAvLyBrZXk6IE1ldGFkYXRhS2V5CglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCAwIDgKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCT09Cglhc3NlcnQKCgkvLyAqaWYwX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL0FSQzExNTUwLmFsZ28udHM6MTA1CgkvLyB0aGlzLm1ldGFkYXRhKGtleSkuZXhpc3RzCglieXRlYyA0IC8vICAibSIKCWZyYW1lX2RpZyAtMSAvLyBrZXk6IE1ldGFkYXRhS2V5Cgljb25jYXQKCWJveF9sZW4KCXN3YXAKCXBvcAoJYnogKmlmMF9lbmQKCgkvLyAqaWYwX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9BUkMxMTU1MC5hbGdvLnRzOjEwNgoJLy8gYXNzZXJ0KHRoaXMubWV0YWRhdGEoa2V5KS52YWx1ZS5tdXRhYmxlKQoJYnl0ZWMgNCAvLyAgIm0iCglmcmFtZV9kaWcgLTEgLy8ga2V5OiBNZXRhZGF0YUtleQoJY29uY2F0Cglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLm1ldGFkYXRhKGtleSkudmFsdWUKCWFzc2VydAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMCAvLyAwCglnZXRiaXQKCWFzc2VydAoKKmlmMF9lbmQ6CgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czoxMDkKCS8vIHRoaXMubWV0YWRhdGEoa2V5KS52YWx1ZS5kYXRhID0gZGF0YQoJYnl0ZWMgNCAvLyAgIm0iCglmcmFtZV9kaWcgLTEgLy8ga2V5OiBNZXRhZGF0YUtleQoJY29uY2F0Cglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLm1ldGFkYXRhKGtleSkudmFsdWUKCWFzc2VydAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMyAvLyAxCglkdXAKCXN0b3JlIDI1MSAvLyBlbGVtZW50IGhlYWQgb2Zmc2V0Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cgl1bmNvdmVyIDIKCWV4dHJhY3RfdWludDE2CglkdXAKCXN0b3JlIDI1NCAvLyBlbGVtZW50IHN0YXJ0CglkdXAgLy8gZHVwbGljYXRlIHN0YXJ0IG9mIGVsZW1lbnQKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWV4dHJhY3RfdWludDE2IC8vIGdldCBudW1iZXIgb2YgZWxlbWVudHMKCWludGMgMyAvLyAgZ2V0IHR5cGUgbGVuZ3RoCgkqIC8vIG11bHRpcGx5IGJ5IHR5cGUgbGVuZ3RoCglwdXNoaW50IDIKCSsgLy8gYWRkIHR3byBmb3IgbGVuZ3RoCglzdG9yZSAyNTMgLy8gZWxlbWVudCBsZW5ndGgKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMCAvLyAwCglsb2FkIDI1NCAvLyBlbGVtZW50IHN0YXJ0CglzdWJzdHJpbmczCglmcmFtZV9kaWcgLTIgLy8gZGF0YTogYnl0ZXMKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CglkdXAKCXN0b3JlIDI1MiAvLyBuZXcgZWxlbWVudAoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTQgLy8gZWxlbWVudCBzdGFydAoJbG9hZCAyNTMgLy8gZWxlbWVudCBsZW5ndGgKCSsgLy8gZ2V0IGVuZCBvZiBFbGVtZW50Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglsZW4KCXN1YnN0cmluZzMKCWNvbmNhdAoJY29uY2F0CglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJY2FsbHN1YiAqZ2V0X2xlbmd0aF9kaWZmZXJlbmNlCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglieXRlYyA0IC8vICAibSIKCWZyYW1lX2RpZyAtMSAvLyBrZXk6IE1ldGFkYXRhS2V5Cgljb25jYXQKCWR1cAoJYm94X2RlbAoJcG9wCglzd2FwCglib3hfcHV0CglyZXRzdWIKCi8vIGFyYzExNTUwX2JhbGFuY2VPZih1aW50NjQsYWRkcmVzcyl1aW50NjQKKmFiaV9yb3V0ZV9hcmMxMTU1MF9iYWxhbmNlT2Y6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDIgLy8gMHgxNTFmN2M3NQoKCS8vIGFjY291bnQ6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnRjIDQgLy8gMzIKCT09CgoJLy8gYXJndW1lbnQgMCAoYWNjb3VudCkgZm9yIGFyYzExNTUwX2JhbGFuY2VPZiBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gaWQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgYXJjMTE1NTBfYmFsYW5jZU9mKHVpbnQ2NCxhZGRyZXNzKXVpbnQ2NAoJY2FsbHN1YiBhcmMxMTU1MF9iYWxhbmNlT2YKCWl0b2IKCWNvbmNhdAoJbG9nCglpbnRjIDMgLy8gMQoJcmV0dXJuCgovLyBhcmMxMTU1MF9iYWxhbmNlT2YoaWQ6IElkLCBhY2NvdW50OiBBZGRyZXNzKTogdWludDY0CmFyYzExNTUwX2JhbGFuY2VPZjoKCXByb3RvIDIgMQoKCS8vIGNvbnRyYWN0cy9BUkMxMTU1MC5hbGdvLnRzOjEyMAoJLy8gcmV0dXJuIHRoaXMuYmFsYW5jZXMoeyBpZDogaWQsIGFkZHJlc3M6IGFjY291bnQgfSkudmFsdWU7CglieXRlYyAxIC8vICAiYiIKCWZyYW1lX2RpZyAtMSAvLyBpZDogSWQKCWl0b2IKCWZyYW1lX2RpZyAtMiAvLyBhY2NvdW50OiBBZGRyZXNzCgljb25jYXQKCWNvbmNhdAoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5iYWxhbmNlcyh7IGlkOiBpZCwgYWRkcmVzczogYWNjb3VudCB9KS52YWx1ZQoJYXNzZXJ0CglidG9pCglyZXRzdWIKCi8vIGFyYzExNTUwX2JhbGFuY2VzT2YoKHVpbnQ2NCxhZGRyZXNzKVtdKXVpbnQ2NFtdCiphYmlfcm91dGVfYXJjMTE1NTBfYmFsYW5jZXNPZjoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMiAvLyAweDE1MWY3Yzc1CgoJLy8gaWRBbmRBZGRyczogKHVpbnQ2NCxhZGRyZXNzKVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgYXJjMTE1NTBfYmFsYW5jZXNPZigodWludDY0LGFkZHJlc3MpW10pdWludDY0W10KCWNhbGxzdWIgYXJjMTE1NTBfYmFsYW5jZXNPZgoJZHVwCglsZW4KCWludGMgMiAvLyA4CgkvCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWxvZwoJaW50YyAzIC8vIDEKCXJldHVybgoKLy8gYXJjMTE1NTBfYmFsYW5jZXNPZihpZEFuZEFkZHJzOiBJZEFuZEFkZHJlc3NbXSk6IHVpbnQ2NFtdCmFyYzExNTUwX2JhbGFuY2VzT2Y6Cglwcm90byAxIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoJZHVwbiAzCgoJLy8gY29udHJhY3RzL0FSQzExNTUwLmFsZ28udHM6MTI0CgkvLyBiYWxhbmNlczogdWludDY0W10gPSBbXQoJYnl0ZWMgMCAvLyAweAoJZnJhbWVfYnVyeSAwIC8vIGJhbGFuY2VzOiB1aW50NjRbXQoKCS8vIGNvbnRyYWN0cy9BUkMxMTU1MC5hbGdvLnRzOjEyNQoJLy8gZm9yIChsZXQgaSA9IDA7IGkgPCBpZEFuZEFkZHJzLmxlbmd0aDsgaSArPSAxKQoJaW50YyAwIC8vIDAKCWZyYW1lX2J1cnkgMSAvLyBpOiB1aW50NjQKCipmb3JfMToKCS8vIGNvbnRyYWN0cy9BUkMxMTU1MC5hbGdvLnRzOjEyNQoJLy8gaSA8IGlkQW5kQWRkcnMubGVuZ3RoCglmcmFtZV9kaWcgMSAvLyBpOiB1aW50NjQKCWZyYW1lX2RpZyAtMSAvLyBpZEFuZEFkZHJzOiBJZEFuZEFkZHJlc3NbXQoJbGVuCglpbnRjIDUgLy8gNDAKCS8KCTwKCWJ6ICpmb3JfMV9lbmQKCgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czoxMjYKCS8vIGlkID0gaWRBbmRBZGRyc1tpXS5pZAoJZnJhbWVfZGlnIC0xIC8vIGlkQW5kQWRkcnM6IElkQW5kQWRkcmVzc1tdCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyAwIC8vICBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIDEgLy8gaTogdWludDY0CglpbnRjIDUgLy8gNDAKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJaW50YyAwIC8vICBoZWFkT2Zmc2V0CgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglpbnRjIDIgLy8gOAoJZXh0cmFjdDMKCWJ0b2kKCWZyYW1lX2J1cnkgMiAvLyBpZDogdWludDY0CgoJLy8gY29udHJhY3RzL0FSQzExNTUwLmFsZ28udHM6MTI3CgkvLyBhZGRyID0gaWRBbmRBZGRyc1tpXS5hZGRyZXNzCglmcmFtZV9kaWcgLTEgLy8gaWRBbmRBZGRyczogSWRBbmRBZGRyZXNzW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDAgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMSAvLyBpOiB1aW50NjQKCWludGMgNSAvLyA0MAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglpbnRjIDIgLy8gIGhlYWRPZmZzZXQKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludGMgNCAvLyAzMgoJZXh0cmFjdDMKCWZyYW1lX2J1cnkgMyAvLyBhZGRyOiBhZGRyZXNzCgoJLy8gY29udHJhY3RzL0FSQzExNTUwLmFsZ28udHM6MTI4CgkvLyBiYWxhbmNlcy5wdXNoKHRoaXMuYmFsYW5jZXMoeyBpZDogaWQsIGFkZHJlc3M6IGFkZHIgfSkudmFsdWUpCglmcmFtZV9kaWcgMCAvLyBiYWxhbmNlczogdWludDY0W10KCWJ5dGVjIDEgLy8gICJiIgoJZnJhbWVfZGlnIDIgLy8gaWQ6IHVpbnQ2NAoJaXRvYgoJZnJhbWVfZGlnIDMgLy8gYWRkcjogYWRkcmVzcwoJY29uY2F0Cgljb25jYXQKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuYmFsYW5jZXMoeyBpZDogaWQsIGFkZHJlc3M6IGFkZHIgfSkudmFsdWUKCWFzc2VydAoJYnRvaQoJaXRvYgoJY29uY2F0CglmcmFtZV9idXJ5IDAgLy8gYmFsYW5jZXM6IHVpbnQ2NFtdCgoqZm9yXzFfY29udGludWU6CgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czoxMjUKCS8vIGkgKz0gMQoJZnJhbWVfZGlnIDEgLy8gaTogdWludDY0CglpbnRjIDMgLy8gMQoJKwoJZnJhbWVfYnVyeSAxIC8vIGk6IHVpbnQ2NAoJYiAqZm9yXzEKCipmb3JfMV9lbmQ6CgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czoxMzEKCS8vIHJldHVybiBiYWxhbmNlczsKCWZyYW1lX2RpZyAwIC8vIGJhbGFuY2VzOiB1aW50NjRbXQoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDMKCXJldHN1YgoKLy8gYXJjMTE1NTBfcGFyYW1zKHVpbnQ2NCkoYnl0ZVszMl0sYnl0ZVs4XSx1aW50NjQsdWludDY0LGFkZHJlc3MpCiphYmlfcm91dGVfYXJjMTE1NTBfcGFyYW1zOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAyIC8vIDB4MTUxZjdjNzUKCgkvLyBpZDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBhcmMxMTU1MF9wYXJhbXModWludDY0KShieXRlWzMyXSxieXRlWzhdLHVpbnQ2NCx1aW50NjQsYWRkcmVzcykKCWNhbGxzdWIgYXJjMTE1NTBfcGFyYW1zCgljb25jYXQKCWxvZwoJaW50YyAzIC8vIDEKCXJldHVybgoKLy8gYXJjMTE1NTBfcGFyYW1zKGlkOiBJZCk6IFBhcmFtcwphcmMxMTU1MF9wYXJhbXM6Cglwcm90byAxIDEKCgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czoxMzUKCS8vIHJldHVybiB0aGlzLnBhcmFtcyhpZCkudmFsdWU7CglieXRlYyA1IC8vICAicCIKCWZyYW1lX2RpZyAtMSAvLyBpZDogSWQKCWl0b2IKCWNvbmNhdAoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5wYXJhbXMoaWQpLnZhbHVlCglhc3NlcnQKCXJldHN1YgoKLy8gYXJjMTE1NTBfbXVsaXRwbGVQYXJhbXModWludDY0W10pKGJ5dGVbMzJdLGJ5dGVbOF0sdWludDY0LHVpbnQ2NCxhZGRyZXNzKVtdCiphYmlfcm91dGVfYXJjMTE1NTBfbXVsaXRwbGVQYXJhbXM6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDIgLy8gMHgxNTFmN2M3NQoKCS8vIGlkczogdWludDY0W10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSBhcmMxMTU1MF9tdWxpdHBsZVBhcmFtcyh1aW50NjRbXSkoYnl0ZVszMl0sYnl0ZVs4XSx1aW50NjQsdWludDY0LGFkZHJlc3MpW10KCWNhbGxzdWIgYXJjMTE1NTBfbXVsaXRwbGVQYXJhbXMKCWR1cAoJbGVuCglpbnRjIDYgLy8gODgKCS8KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNvbmNhdAoJbG9nCglpbnRjIDMgLy8gMQoJcmV0dXJuCgovLyBhcmMxMTU1MF9tdWxpdHBsZVBhcmFtcyhpZHM6IElkW10pOiBQYXJhbXNbXQphcmMxMTU1MF9tdWxpdHBsZVBhcmFtczoKCXByb3RvIDEgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CglkdXBuIDIKCgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czoxMzkKCS8vIHBhcmFtczogUGFyYW1zW10gPSBbXQoJYnl0ZWMgMCAvLyAweAoJZnJhbWVfYnVyeSAwIC8vIHBhcmFtczogUGFyYW1zW10KCgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czoxNDAKCS8vIGZvciAobGV0IGkgPSAwOyBpIDwgaWRzLmxlbmd0aDsgaSArPSAxKQoJaW50YyAwIC8vIDAKCWZyYW1lX2J1cnkgMSAvLyBpOiB1aW50NjQKCipmb3JfMjoKCS8vIGNvbnRyYWN0cy9BUkMxMTU1MC5hbGdvLnRzOjE0MAoJLy8gaSA8IGlkcy5sZW5ndGgKCWZyYW1lX2RpZyAxIC8vIGk6IHVpbnQ2NAoJZnJhbWVfZGlnIC0xIC8vIGlkczogSWRbXQoJbGVuCglpbnRjIDIgLy8gOAoJLwoJPAoJYnogKmZvcl8yX2VuZAoKCS8vIGNvbnRyYWN0cy9BUkMxMTU1MC5hbGdvLnRzOjE0MQoJLy8gaWQgPSBpZHNbaV0KCWZyYW1lX2RpZyAtMSAvLyBpZHM6IElkW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDAgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMSAvLyBpOiB1aW50NjQKCWludGMgMiAvLyA4CgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludGMgMiAvLyA4CglleHRyYWN0MwoJYnRvaQoJZnJhbWVfYnVyeSAyIC8vIGlkOiB1aW50NjQKCgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czoxNDIKCS8vIHBhcmFtcy5wdXNoKHRoaXMucGFyYW1zKGlkKS52YWx1ZSkKCWZyYW1lX2RpZyAwIC8vIHBhcmFtczogUGFyYW1zW10KCWJ5dGVjIDUgLy8gICJwIgoJZnJhbWVfZGlnIDIgLy8gaWQ6IHVpbnQ2NAoJaXRvYgoJY29uY2F0Cglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLnBhcmFtcyhpZCkudmFsdWUKCWFzc2VydAoJY29uY2F0CglmcmFtZV9idXJ5IDAgLy8gcGFyYW1zOiBQYXJhbXNbXQoKKmZvcl8yX2NvbnRpbnVlOgoJLy8gY29udHJhY3RzL0FSQzExNTUwLmFsZ28udHM6MTQwCgkvLyBpICs9IDEKCWZyYW1lX2RpZyAxIC8vIGk6IHVpbnQ2NAoJaW50YyAzIC8vIDEKCSsKCWZyYW1lX2J1cnkgMSAvLyBpOiB1aW50NjQKCWIgKmZvcl8yCgoqZm9yXzJfZW5kOgoJLy8gY29udHJhY3RzL0FSQzExNTUwLmFsZ28udHM6MTQ1CgkvLyByZXR1cm4gcGFyYW1zOwoJZnJhbWVfZGlnIDAgLy8gcGFyYW1zOiBQYXJhbXNbXQoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDIKCXJldHN1YgoKLy8gYXJjMTE1NTBfdHJhbnNmZXIoKHVpbnQ2NCxhZGRyZXNzLGFkZHJlc3MsdWludDY0KVtdKXZvaWQKKmFiaV9yb3V0ZV9hcmMxMTU1MF90cmFuc2ZlcjoKCS8vIHRyYW5zZmVyczogKHVpbnQ2NCxhZGRyZXNzLGFkZHJlc3MsdWludDY0KVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgYXJjMTE1NTBfdHJhbnNmZXIoKHVpbnQ2NCxhZGRyZXNzLGFkZHJlc3MsdWludDY0KVtdKXZvaWQKCWNhbGxzdWIgYXJjMTE1NTBfdHJhbnNmZXIKCWludGMgMyAvLyAxCglyZXR1cm4KCi8vIGFyYzExNTUwX3RyYW5zZmVyKHRyYW5zZmVyczogVHJhbnNmZXJbXSk6IHZvaWQKYXJjMTE1NTBfdHJhbnNmZXI6Cglwcm90byAxIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoJZHVwbiAzCgoJLy8gKmlmMV9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9BUkMxMTU1MC5hbGdvLnRzOjE1MgoJLy8gdGhpcy50cmFuc2Zlckhvb2tBcHAudmFsdWUuaWQgIT0gMAoJYnl0ZWMgNiAvLyAgInRyYW5zZmVySG9va0FwcCIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDAgLy8gMAoJIT0KCWJ6ICppZjFfZW5kCgoJLy8gKmlmMV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czoxNTMKCS8vIGFzc2VydCgKCS8vICAgICAgICAgc2VuZE1ldGhvZENhbGw8dHlwZW9mIEFSQzExNTUwVHJhbnNmZXJIb29rLnByb3RvdHlwZS5hcHByb3ZlZD4oewoJLy8gICAgICAgICAgIGFwcGxpY2F0aW9uSUQ6IHRoaXMudHJhbnNmZXJIb29rQXBwLnZhbHVlLAoJLy8gICAgICAgICAgIG1ldGhvZEFyZ3M6IFt0aGlzLnR4bi5zZW5kZXIsIHRyYW5zZmVyc10sCgkvLyAgICAgICAgIH0pCgkvLyAgICAgICApCglpdHhuX2JlZ2luCglpbnRjIDggLy8gIGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCXB1c2hieXRlcyAweGI0YzE3YTdiIC8vIG1ldGhvZCAiYXBwcm92ZWQoYWRkcmVzcywodWludDY0LGFkZHJlc3MsYWRkcmVzcyx1aW50NjQpW10pYm9vbCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzL0FSQzExNTUwLmFsZ28udHM6MTU1CgkvLyBhcHBsaWNhdGlvbklEOiB0aGlzLnRyYW5zZmVySG9va0FwcC52YWx1ZQoJYnl0ZWMgNiAvLyAgInRyYW5zZmVySG9va0FwcCIKCWFwcF9nbG9iYWxfZ2V0CglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czoxNTYKCS8vIG1ldGhvZEFyZ3M6IFt0aGlzLnR4bi5zZW5kZXIsIHRyYW5zZmVyc10KCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCglmcmFtZV9kaWcgLTEgLy8gdHJhbnNmZXJzOiBUcmFuc2ZlcltdCglkdXAKCWxlbgoJaW50YyAxIC8vIDgwCgkvCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWl0eG4gTnVtTG9ncwoJaW50YyAzIC8vIDEKCS0KCWl0eG5hcyBMb2dzCglleHRyYWN0IDQgMAoJaW50YyAwIC8vIDAKCWdldGJpdAoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL0FSQzExNTUwLmFsZ28udHM6MTYwCgkvLyBmb3IgKGxldCBpID0gMDsgaSA8IHRyYW5zZmVycy5sZW5ndGg7IGkgKz0gMSkKCWludGMgMCAvLyAwCglmcmFtZV9idXJ5IDAgLy8gaTogdWludDY0CgoqZm9yXzM6CgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czoxNjAKCS8vIGkgPCB0cmFuc2ZlcnMubGVuZ3RoCglmcmFtZV9kaWcgMCAvLyBpOiB1aW50NjQKCWZyYW1lX2RpZyAtMSAvLyB0cmFuc2ZlcnM6IFRyYW5zZmVyW10KCWxlbgoJaW50YyAxIC8vIDgwCgkvCgk8CglieiAqZm9yXzNfZW5kCglmcmFtZV9kaWcgMCAvLyBpOiB1aW50NjQKCWZyYW1lX2J1cnkgMSAvLyBhY2Nlc3NvcjogYWNjZXNzb3IvLzAvL3QKCgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czoxNjIKCS8vIHRoaXMuYmFsYW5jZXMoeyBpZDogdC5pZCwgYWRkcmVzczogdC5mcm9tIH0pLnZhbHVlIC09IHQuYW1vdW50CglieXRlYyAxIC8vICAiYiIKCWZyYW1lX2RpZyAtMSAvLyB0cmFuc2ZlcnM6IFRyYW5zZmVyW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDAgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMSAvLyBzYXZlZCBhY2Nlc3NvcjogYWNjZXNzb3IvLzAvL3QKCWludGMgMSAvLyA4MAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglpbnRjIDAgLy8gIGhlYWRPZmZzZXQKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludGMgMiAvLyA4CglleHRyYWN0MwoJYnRvaQoJaXRvYgoJZnJhbWVfZGlnIC0xIC8vIHRyYW5zZmVyczogVHJhbnNmZXJbXQoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMCAvLyAgaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyAxIC8vIHNhdmVkIGFjY2Vzc29yOiBhY2Nlc3Nvci8vMC8vdAoJaW50YyAxIC8vIDgwCgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWludGMgMiAvLyAgaGVhZE9mZnNldAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJaW50YyA0IC8vIDMyCglleHRyYWN0MwoJY29uY2F0Cgljb25jYXQKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuYmFsYW5jZXMoeyBpZDogdC5pZCwgYWRkcmVzczogdC5mcm9tIH0pLnZhbHVlCglhc3NlcnQKCWJ0b2kKCWZyYW1lX2RpZyAtMSAvLyB0cmFuc2ZlcnM6IFRyYW5zZmVyW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDAgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMSAvLyBzYXZlZCBhY2Nlc3NvcjogYWNjZXNzb3IvLzAvL3QKCWludGMgMSAvLyA4MAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglpbnRjIDcgLy8gIGhlYWRPZmZzZXQKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludGMgMiAvLyA4CglleHRyYWN0MwoJYnRvaQoJLQoJYnl0ZWMgMSAvLyAgImIiCglmcmFtZV9kaWcgLTEgLy8gdHJhbnNmZXJzOiBUcmFuc2ZlcltdCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyAwIC8vICBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIDEgLy8gc2F2ZWQgYWNjZXNzb3I6IGFjY2Vzc29yLy8wLy90CglpbnRjIDEgLy8gODAKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJaW50YyAwIC8vICBoZWFkT2Zmc2V0CgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglpbnRjIDIgLy8gOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWZyYW1lX2RpZyAtMSAvLyB0cmFuc2ZlcnM6IFRyYW5zZmVyW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDAgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMSAvLyBzYXZlZCBhY2Nlc3NvcjogYWNjZXNzb3IvLzAvL3QKCWludGMgMSAvLyA4MAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglpbnRjIDIgLy8gIGhlYWRPZmZzZXQKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludGMgNCAvLyAzMgoJZXh0cmFjdDMKCWNvbmNhdAoJY29uY2F0Cglzd2FwCglpdG9iCglib3hfcHV0CgoJLy8gY29udHJhY3RzL0FSQzExNTUwLmFsZ28udHM6MTYzCgkvLyB0aGlzLmJhbGFuY2VzKHsgaWQ6IHQuaWQsIGFkZHJlc3M6IHQudG8gfSkudmFsdWUgKz0gdC5hbW91bnQKCWJ5dGVjIDEgLy8gICJiIgoJZnJhbWVfZGlnIC0xIC8vIHRyYW5zZmVyczogVHJhbnNmZXJbXQoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMCAvLyAgaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyAxIC8vIHNhdmVkIGFjY2Vzc29yOiBhY2Nlc3Nvci8vMC8vdAoJaW50YyAxIC8vIDgwCgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWludGMgMCAvLyAgaGVhZE9mZnNldAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJaW50YyAyIC8vIDgKCWV4dHJhY3QzCglidG9pCglpdG9iCglmcmFtZV9kaWcgLTEgLy8gdHJhbnNmZXJzOiBUcmFuc2ZlcltdCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyAwIC8vICBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIDEgLy8gc2F2ZWQgYWNjZXNzb3I6IGFjY2Vzc29yLy8wLy90CglpbnRjIDEgLy8gODAKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJaW50YyA1IC8vICBoZWFkT2Zmc2V0CgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglpbnRjIDQgLy8gMzIKCWV4dHJhY3QzCgljb25jYXQKCWNvbmNhdAoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5iYWxhbmNlcyh7IGlkOiB0LmlkLCBhZGRyZXNzOiB0LnRvIH0pLnZhbHVlCglhc3NlcnQKCWJ0b2kKCWZyYW1lX2RpZyAtMSAvLyB0cmFuc2ZlcnM6IFRyYW5zZmVyW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDAgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMSAvLyBzYXZlZCBhY2Nlc3NvcjogYWNjZXNzb3IvLzAvL3QKCWludGMgMSAvLyA4MAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglpbnRjIDcgLy8gIGhlYWRPZmZzZXQKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludGMgMiAvLyA4CglleHRyYWN0MwoJYnRvaQoJKwoJYnl0ZWMgMSAvLyAgImIiCglmcmFtZV9kaWcgLTEgLy8gdHJhbnNmZXJzOiBUcmFuc2ZlcltdCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyAwIC8vICBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIDEgLy8gc2F2ZWQgYWNjZXNzb3I6IGFjY2Vzc29yLy8wLy90CglpbnRjIDEgLy8gODAKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJaW50YyAwIC8vICBoZWFkT2Zmc2V0CgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglpbnRjIDIgLy8gOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWZyYW1lX2RpZyAtMSAvLyB0cmFuc2ZlcnM6IFRyYW5zZmVyW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDAgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMSAvLyBzYXZlZCBhY2Nlc3NvcjogYWNjZXNzb3IvLzAvL3QKCWludGMgMSAvLyA4MAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglpbnRjIDUgLy8gIGhlYWRPZmZzZXQKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludGMgNCAvLyAzMgoJZXh0cmFjdDMKCWNvbmNhdAoJY29uY2F0Cglzd2FwCglpdG9iCglib3hfcHV0CgoqZm9yXzNfY29udGludWU6CgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czoxNjAKCS8vIGkgKz0gMQoJZnJhbWVfZGlnIDAgLy8gaTogdWludDY0CglpbnRjIDMgLy8gMQoJKwoJZnJhbWVfYnVyeSAwIC8vIGk6IHVpbnQ2NAoJYiAqZm9yXzMKCipmb3JfM19lbmQ6CgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czoxNjUKCS8vIHJldHVybjsKCXJldHN1YgoKKmlmMV9lbmQ6CgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czoxNjkKCS8vIGZvciAobGV0IGkgPSAwOyBpIDwgdHJhbnNmZXJzLmxlbmd0aDsgaSArPSAxKQoJaW50YyAwIC8vIDAKCWZyYW1lX2J1cnkgMiAvLyBpOiB1aW50NjQKCipmb3JfNDoKCS8vIGNvbnRyYWN0cy9BUkMxMTU1MC5hbGdvLnRzOjE2OQoJLy8gaSA8IHRyYW5zZmVycy5sZW5ndGgKCWZyYW1lX2RpZyAyIC8vIGk6IHVpbnQ2NAoJZnJhbWVfZGlnIC0xIC8vIHRyYW5zZmVyczogVHJhbnNmZXJbXQoJbGVuCglpbnRjIDEgLy8gODAKCS8KCTwKCWJ6ICpmb3JfNF9lbmQKCWZyYW1lX2RpZyAyIC8vIGk6IHVpbnQ2NAoJZnJhbWVfYnVyeSAzIC8vIGFjY2Vzc29yOiBhY2Nlc3Nvci8vMC8vdAoKCS8vIGNvbnRyYWN0cy9BUkMxMTU1MC5hbGdvLnRzOjE3MQoJLy8gYXNzZXJ0KHQuZnJvbSA9PT0gdGhpcy50eG4uc2VuZGVyKQoJZnJhbWVfZGlnIC0xIC8vIHRyYW5zZmVyczogVHJhbnNmZXJbXQoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMCAvLyAgaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyAzIC8vIHNhdmVkIGFjY2Vzc29yOiBhY2Nlc3Nvci8vMC8vdAoJaW50YyAxIC8vIDgwCgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWludGMgMiAvLyAgaGVhZE9mZnNldAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJaW50YyA0IC8vIDMyCglleHRyYWN0MwoJdHhuIFNlbmRlcgoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9BUkMxMTU1MC5hbGdvLnRzOjE3MgoJLy8gdGhpcy5iYWxhbmNlcyh7IGlkOiB0LmlkLCBhZGRyZXNzOiB0LmZyb20gfSkudmFsdWUgLT0gdC5hbW91bnQKCWJ5dGVjIDEgLy8gICJiIgoJZnJhbWVfZGlnIC0xIC8vIHRyYW5zZmVyczogVHJhbnNmZXJbXQoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMCAvLyAgaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyAzIC8vIHNhdmVkIGFjY2Vzc29yOiBhY2Nlc3Nvci8vMC8vdAoJaW50YyAxIC8vIDgwCgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWludGMgMCAvLyAgaGVhZE9mZnNldAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJaW50YyAyIC8vIDgKCWV4dHJhY3QzCglidG9pCglpdG9iCglmcmFtZV9kaWcgLTEgLy8gdHJhbnNmZXJzOiBUcmFuc2ZlcltdCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyAwIC8vICBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIDMgLy8gc2F2ZWQgYWNjZXNzb3I6IGFjY2Vzc29yLy8wLy90CglpbnRjIDEgLy8gODAKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJaW50YyAyIC8vICBoZWFkT2Zmc2V0CgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglpbnRjIDQgLy8gMzIKCWV4dHJhY3QzCgljb25jYXQKCWNvbmNhdAoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy5iYWxhbmNlcyh7IGlkOiB0LmlkLCBhZGRyZXNzOiB0LmZyb20gfSkudmFsdWUKCWFzc2VydAoJYnRvaQoJZnJhbWVfZGlnIC0xIC8vIHRyYW5zZmVyczogVHJhbnNmZXJbXQoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMCAvLyAgaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyAzIC8vIHNhdmVkIGFjY2Vzc29yOiBhY2Nlc3Nvci8vMC8vdAoJaW50YyAxIC8vIDgwCgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWludGMgNyAvLyAgaGVhZE9mZnNldAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJaW50YyAyIC8vIDgKCWV4dHJhY3QzCglidG9pCgktCglieXRlYyAxIC8vICAiYiIKCWZyYW1lX2RpZyAtMSAvLyB0cmFuc2ZlcnM6IFRyYW5zZmVyW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDAgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMyAvLyBzYXZlZCBhY2Nlc3NvcjogYWNjZXNzb3IvLzAvL3QKCWludGMgMSAvLyA4MAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglpbnRjIDAgLy8gIGhlYWRPZmZzZXQKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludGMgMiAvLyA4CglleHRyYWN0MwoJYnRvaQoJaXRvYgoJZnJhbWVfZGlnIC0xIC8vIHRyYW5zZmVyczogVHJhbnNmZXJbXQoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMCAvLyAgaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyAzIC8vIHNhdmVkIGFjY2Vzc29yOiBhY2Nlc3Nvci8vMC8vdAoJaW50YyAxIC8vIDgwCgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWludGMgMiAvLyAgaGVhZE9mZnNldAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJaW50YyA0IC8vIDMyCglleHRyYWN0MwoJY29uY2F0Cgljb25jYXQKCXN3YXAKCWl0b2IKCWJveF9wdXQKCgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czoxNzMKCS8vIHRoaXMuYmFsYW5jZXMoeyBpZDogdC5pZCwgYWRkcmVzczogdC50byB9KS52YWx1ZSArPSB0LmFtb3VudAoJYnl0ZWMgMSAvLyAgImIiCglmcmFtZV9kaWcgLTEgLy8gdHJhbnNmZXJzOiBUcmFuc2ZlcltdCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyAwIC8vICBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIDMgLy8gc2F2ZWQgYWNjZXNzb3I6IGFjY2Vzc29yLy8wLy90CglpbnRjIDEgLy8gODAKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJaW50YyAwIC8vICBoZWFkT2Zmc2V0CgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglpbnRjIDIgLy8gOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWZyYW1lX2RpZyAtMSAvLyB0cmFuc2ZlcnM6IFRyYW5zZmVyW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDAgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMyAvLyBzYXZlZCBhY2Nlc3NvcjogYWNjZXNzb3IvLzAvL3QKCWludGMgMSAvLyA4MAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglpbnRjIDUgLy8gIGhlYWRPZmZzZXQKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludGMgNCAvLyAzMgoJZXh0cmFjdDMKCWNvbmNhdAoJY29uY2F0Cglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmJhbGFuY2VzKHsgaWQ6IHQuaWQsIGFkZHJlc3M6IHQudG8gfSkudmFsdWUKCWFzc2VydAoJYnRvaQoJZnJhbWVfZGlnIC0xIC8vIHRyYW5zZmVyczogVHJhbnNmZXJbXQoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMCAvLyAgaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyAzIC8vIHNhdmVkIGFjY2Vzc29yOiBhY2Nlc3Nvci8vMC8vdAoJaW50YyAxIC8vIDgwCgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWludGMgNyAvLyAgaGVhZE9mZnNldAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJaW50YyAyIC8vIDgKCWV4dHJhY3QzCglidG9pCgkrCglieXRlYyAxIC8vICAiYiIKCWZyYW1lX2RpZyAtMSAvLyB0cmFuc2ZlcnM6IFRyYW5zZmVyW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDAgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMyAvLyBzYXZlZCBhY2Nlc3NvcjogYWNjZXNzb3IvLzAvL3QKCWludGMgMSAvLyA4MAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglpbnRjIDAgLy8gIGhlYWRPZmZzZXQKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludGMgMiAvLyA4CglleHRyYWN0MwoJYnRvaQoJaXRvYgoJZnJhbWVfZGlnIC0xIC8vIHRyYW5zZmVyczogVHJhbnNmZXJbXQoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMCAvLyAgaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyAzIC8vIHNhdmVkIGFjY2Vzc29yOiBhY2Nlc3Nvci8vMC8vdAoJaW50YyAxIC8vIDgwCgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWludGMgNSAvLyAgaGVhZE9mZnNldAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJaW50YyA0IC8vIDMyCglleHRyYWN0MwoJY29uY2F0Cgljb25jYXQKCXN3YXAKCWl0b2IKCWJveF9wdXQKCipmb3JfNF9jb250aW51ZToKCS8vIGNvbnRyYWN0cy9BUkMxMTU1MC5hbGdvLnRzOjE2OQoJLy8gaSArPSAxCglmcmFtZV9kaWcgMiAvLyBpOiB1aW50NjQKCWludGMgMyAvLyAxCgkrCglmcmFtZV9idXJ5IDIgLy8gaTogdWludDY0CgliICpmb3JfNAoKKmZvcl80X2VuZDoKCXJldHN1YgoKKmNyZWF0ZV9Ob09wOgoJcHVzaGJ5dGVzIDB4OTE3YzQ4YjYgLy8gbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbih1aW50NjQsdWludDY0KXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNyZWF0ZSBOb09wCgllcnIKCipjYWxsX05vT3A6CglwdXNoYnl0ZXMgMHhkMzkzZWM1MyAvLyBtZXRob2QgImFyYzExNTUwX21pbnQoKGJ5dGVbMzJdLGJ5dGVbOF0sdWludDY0LHVpbnQ2NCxhZGRyZXNzKSl1aW50NjQiCglwdXNoYnl0ZXMgMHg1ZTA1ZjExOCAvLyBtZXRob2QgImFyYzExNTUwX211bHRpTWludCgoYnl0ZVszMl0sYnl0ZVs4XSx1aW50NjQsdWludDY0LGFkZHJlc3MpW10pdWludDY0IgoJcHVzaGJ5dGVzIDB4ZGQ0MmY1YTAgLy8gbWV0aG9kICJhcmMxMTU1MF9taW50ZWQoKXVpbnQ2NCIKCXB1c2hieXRlcyAweDNhYzIzMjU0IC8vIG1ldGhvZCAiYXJjMTE1NTBfbWV0YWRhdGEoKHVpbnQ2NCxzdHJpbmcpKShib29sLGJ5dGVbXSkiCglwdXNoYnl0ZXMgMHhiYmI5ZGU2NyAvLyBtZXRob2QgImFyYzExNTUwX3NldE1ldGFkYXRhKCh1aW50NjQsc3RyaW5nKSxieXRlW10pdm9pZCIKCXB1c2hieXRlcyAweGQwNGFjYmMyIC8vIG1ldGhvZCAiYXJjMTE1NTBfYmFsYW5jZU9mKHVpbnQ2NCxhZGRyZXNzKXVpbnQ2NCIKCXB1c2hieXRlcyAweDY1ZGQ4NzE3IC8vIG1ldGhvZCAiYXJjMTE1NTBfYmFsYW5jZXNPZigodWludDY0LGFkZHJlc3MpW10pdWludDY0W10iCglwdXNoYnl0ZXMgMHg1MWY1MDRiZSAvLyBtZXRob2QgImFyYzExNTUwX3BhcmFtcyh1aW50NjQpKGJ5dGVbMzJdLGJ5dGVbOF0sdWludDY0LHVpbnQ2NCxhZGRyZXNzKSIKCXB1c2hieXRlcyAweDJhZDJlYjU1IC8vIG1ldGhvZCAiYXJjMTE1NTBfbXVsaXRwbGVQYXJhbXModWludDY0W10pKGJ5dGVbMzJdLGJ5dGVbOF0sdWludDY0LHVpbnQ2NCxhZGRyZXNzKVtdIgoJcHVzaGJ5dGVzIDB4NDVmMDIyYTUgLy8gbWV0aG9kICJhcmMxMTU1MF90cmFuc2ZlcigodWludDY0LGFkZHJlc3MsYWRkcmVzcyx1aW50NjQpW10pdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfYXJjMTE1NTBfbWludCAqYWJpX3JvdXRlX2FyYzExNTUwX211bHRpTWludCAqYWJpX3JvdXRlX2FyYzExNTUwX21pbnRlZCAqYWJpX3JvdXRlX2FyYzExNTUwX21ldGFkYXRhICphYmlfcm91dGVfYXJjMTE1NTBfc2V0TWV0YWRhdGEgKmFiaV9yb3V0ZV9hcmMxMTU1MF9iYWxhbmNlT2YgKmFiaV9yb3V0ZV9hcmMxMTU1MF9iYWxhbmNlc09mICphYmlfcm91dGVfYXJjMTE1NTBfcGFyYW1zICphYmlfcm91dGVfYXJjMTE1NTBfbXVsaXRwbGVQYXJhbXMgKmFiaV9yb3V0ZV9hcmMxMTU1MF90cmFuc2ZlcgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjYWxsIE5vT3AKCWVycgoKKmdldF9sZW5ndGhfZGlmZmVyZW5jZToKCWxvYWQgMjUyIC8vIG5ldyBlbGVtZW50CglsZW4gLy8gbGVuZ3RoIG9mIG5ldyBlbGVtZW50Cglsb2FkIDI1MyAvLyBlbGVtZW50IGxlbmd0aAoJPAoJYm56ICpzd2FwcGVkX2RpZmZlcmVuY2UKCWxvYWQgMjUyIC8vIG5ldyBlbGVtZW50CglsZW4gLy8gbGVuZ3RoIG9mIG5ldyBlbGVtZW50Cglsb2FkIDI1MyAvLyBlbGVtZW50IGxlbmd0aAoJaW50YyAzIC8vIDEKCXN0b3JlIDI0OSAvLyBzdWJ0cmFjdCBoZWFkIGRpZmZlcmVuY2UKCWIgKmdldF9kaWZmZXJlbmNlCgoqc3dhcHBlZF9kaWZmZXJlbmNlOgoJbG9hZCAyNTMgLy8gZWxlbWVudCBsZW5ndGgKCWxvYWQgMjUyIC8vIG5ldyBlbGVtZW50CglsZW4gLy8gbGVuZ3RoIG9mIG5ldyBlbGVtZW50CglpbnRjIDAgLy8gMAoJc3RvcmUgMjQ5IC8vIHN1YnRyYWN0IGhlYWQgZGlmZmVyZW5jZQoKKmdldF9kaWZmZXJlbmNlOgoJLSAvLyBnZXQgbGVuZ3RoIGRpZmZlcmVuY2UKCXN0b3JlIDI1MCAvLyBsZW5ndGggZGlmZmVyZW5jZQoJcmV0c3Vi",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "ARC11550",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          },
          {
            "name": "mintCap",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc11550_mint",
        "args": [
          {
            "name": "params",
            "type": "(byte[32],byte[8],uint64,uint64,address)"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "arc11550_multiMint",
        "args": [
          {
            "name": "params",
            "type": "(byte[32],byte[8],uint64,uint64,address)[]"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "arc11550_minted",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "arc11550_metadata",
        "args": [
          {
            "name": "key",
            "type": "(uint64,string)"
          }
        ],
        "returns": {
          "type": "(bool,byte[])"
        }
      },
      {
        "name": "arc11550_setMetadata",
        "args": [
          {
            "name": "key",
            "type": "(uint64,string)"
          },
          {
            "name": "data",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc11550_balanceOf",
        "args": [
          {
            "name": "id",
            "type": "uint64"
          },
          {
            "name": "account",
            "type": "address"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "arc11550_balancesOf",
        "args": [
          {
            "name": "idAndAddrs",
            "type": "(uint64,address)[]"
          }
        ],
        "returns": {
          "type": "uint64[]"
        }
      },
      {
        "name": "arc11550_params",
        "args": [
          {
            "name": "id",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(byte[32],byte[8],uint64,uint64,address)"
        }
      },
      {
        "name": "arc11550_mulitpleParams",
        "args": [
          {
            "name": "ids",
            "type": "uint64[]"
          }
        ],
        "returns": {
          "type": "(byte[32],byte[8],uint64,uint64,address)[]"
        }
      },
      {
        "name": "arc11550_transfer",
        "args": [
          {
            "name": "transfers",
            "type": "(uint64,address,address,uint64)[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}
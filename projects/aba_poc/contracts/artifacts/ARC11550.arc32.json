{
  "hints": {
    "createApplication(uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "arc11550_name(uint64)byte[32]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_symbol(uint64)byte[8]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_decimals(uint64)uint32": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_totalSupply(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_balanceOf(uint64,address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_transfer((uint64,address,address,uint64)[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "nextId": {
          "type": "uint64",
          "key": "nextId"
        },
        "transferHookApp": {
          "type": "uint64",
          "key": "transferHookApp"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "ARC11550",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc11550_name",
        "args": [
          {
            "name": "id",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "byte[32]"
        }
      },
      {
        "name": "arc11550_symbol",
        "args": [
          {
            "name": "id",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "byte[8]"
        }
      },
      {
        "name": "arc11550_decimals",
        "args": [
          {
            "name": "id",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint32"
        }
      },
      {
        "name": "arc11550_totalSupply",
        "args": [
          {
            "name": "id",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "arc11550_balanceOf",
        "args": [
          {
            "name": "id",
            "type": "uint64"
          },
          {
            "name": "account",
            "type": "address"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "arc11550_params",
        "args": [
          {
            "name": "id",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(byte[32],byte[8],uint64,uint32)"
        }
      },
      {
        "name": "arc11550_transfer",
        "args": [
          {
            "name": "transfers",
            "type": "(uint64,address,address,uint64)[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}
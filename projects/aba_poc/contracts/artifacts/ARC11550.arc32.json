{
  "hints": {
    "createApplication(uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "arc1150_mint((byte[32],byte[8],uint64,uint32,address))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_metadata((uint64,string))(bool,byte[])": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_setMetadata((uint64,string),byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_balanceOf(uint64,address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550_transfer((uint64,address,address,uint64)[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "nextId": {
          "type": "uint64",
          "key": "nextId"
        },
        "transferHookApp": {
          "type": "uint64",
          "key": "transferHookApp"
        },
        "minter": {
          "type": "bytes",
          "key": "minter"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "ARC11550",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "app",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc1150_mint",
        "args": [
          {
            "name": "params",
            "type": "(byte[32],byte[8],uint64,uint32,address)"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc11550_metadata",
        "args": [
          {
            "name": "key",
            "type": "(uint64,string)"
          }
        ],
        "returns": {
          "type": "(bool,byte[])"
        }
      },
      {
        "name": "arc11550_setMetadata",
        "args": [
          {
            "name": "key",
            "type": "(uint64,string)"
          },
          {
            "name": "data",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc11550_balanceOf",
        "args": [
          {
            "name": "id",
            "type": "uint64"
          },
          {
            "name": "account",
            "type": "address"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "arc11550_params",
        "args": [
          {
            "name": "id",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(byte[32],byte[8],uint64,uint32,address)"
        }
      },
      {
        "name": "arc11550_transfer",
        "args": [
          {
            "name": "transfers",
            "type": "(uint64,address,address,uint64)[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}
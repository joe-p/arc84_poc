{
  "hints": {
    "declare((address,uint64,uint64))bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "request((address,uint64,uint64))bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeDeclaration((address,uint64,uint64))bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeRequest((address,uint64,uint64))bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "isRequested((address,uint64,uint64))bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "isDeclared((address,uint64,uint64))bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "DeclarationRegistry",
    "desc": "",
    "methods": [
      {
        "name": "declare",
        "desc": "Declare the given ARC11550 token for the given address. If an approval app has been defined for the address, that app is called to ensure the\ndeclaration is allowed. If an approval app has not be defined, the transaction sender must match the declaration address",
        "args": [
          {
            "name": "addrToken",
            "type": "(address,uint64,uint64)"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "request",
        "desc": "Declare the given ARC11550 token for the given address. If an approval app has been added for the user, that app is called to ensure the\ndeclaration is allowed",
        "args": [
          {
            "name": "addrToken",
            "type": "(address,uint64,uint64)"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "removeDeclaration",
        "args": [
          {
            "name": "addrToken",
            "type": "(address,uint64,uint64)"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "removeRequest",
        "args": [
          {
            "name": "addrToken",
            "type": "(address,uint64,uint64)"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "isRequested",
        "args": [
          {
            "name": "addrToken",
            "type": "(address,uint64,uint64)"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "isDeclared",
        "args": [
          {
            "name": "addrToken",
            "type": "(address,uint64,uint64)"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}
#pragma version 10
intcblock 1 48 0
bytecblock 0x72 0x61 0x151f7c75 0x00 0x

// This TEAL was generated by TEALScript v0.106.3
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// declare((address,uint64,uint64))void
*abi_route_declare:
	// addrApp: (address,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 1 // 48
	==

	// argument 0 (addrApp) for declare must be a (address,uint64,uint64)
	assert

	// execute declare((address,uint64,uint64))void
	callsub declare
	intc 0 // 1
	return

// declare(addrApp: AddressAsset): void
//
// Declare the given ARC11550 asset for the given address. If an approval app has been defined for the address, that app is called to ensure the
// declaration is allowed. If an approval app has not be defined, the transaction sender must match the declaration address
declare:
	proto 1 0

	// *if0_condition
	// contracts/DeclarationRegistry.algo.ts:26
	// this.declarations(addrApp).exists
	frame_dig -1 // addrApp: AddressAsset
	box_len
	swap
	pop
	bz *if0_end

	// *if0_consequent
	// contracts/DeclarationRegistry.algo.ts:27
	// return;
	retsub

*if0_end:
	// *if1_condition
	// contracts/DeclarationRegistry.algo.ts:30
	// this.approvalApps(addrApp).exists
	bytec 1 //  "a"
	frame_dig -1 // addrApp: AddressAsset
	concat
	box_len
	swap
	pop
	bz *if1_else

	// *if1_consequent
	b *if1_end

*if1_else:
	// contracts/DeclarationRegistry.algo.ts:33
	// assert(this.txn.sender == addrApp.addr)
	txn Sender
	frame_dig -1 // addrApp: AddressAsset
	extract 0 32
	==
	assert

*if1_end:
	// contracts/DeclarationRegistry.algo.ts:36
	// this.declarations(addrApp).value = '' as bytes<0>
	frame_dig -1 // addrApp: AddressAsset
	bytec 4 //  ""
	box_put
	retsub

// request((address,uint64,uint64))void
*abi_route_request:
	// addrApp: (address,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 1 // 48
	==

	// argument 0 (addrApp) for request must be a (address,uint64,uint64)
	assert

	// execute request((address,uint64,uint64))void
	callsub request
	intc 0 // 1
	return

// request(addrApp: AddressAsset): void
//
// Declare the given ARC11550 asset for the given address. If an approval app has been added for the user, that app is called to ensure the
// declaration is allowed
request:
	proto 1 0

	// *if2_condition
	// contracts/DeclarationRegistry.algo.ts:42
	// this.requests(addrApp).exists
	bytec 0 //  "r"
	frame_dig -1 // addrApp: AddressAsset
	concat
	box_len
	swap
	pop
	bz *if2_end

	// *if2_consequent
	// contracts/DeclarationRegistry.algo.ts:43
	// return;
	retsub

*if2_end:
	// *if3_condition
	// contracts/DeclarationRegistry.algo.ts:46
	// this.approvalApps(addrApp).exists
	bytec 1 //  "a"
	frame_dig -1 // addrApp: AddressAsset
	concat
	box_len
	swap
	pop
	bz *if3_end

// *if3_consequent
*if3_end:
	// contracts/DeclarationRegistry.algo.ts:50
	// this.requests(addrApp).value = '' as bytes<0>
	bytec 0 //  "r"
	frame_dig -1 // addrApp: AddressAsset
	concat
	bytec 4 //  ""
	box_put
	retsub

// removeDeclaration((address,uint64,uint64))void
*abi_route_removeDeclaration:
	// addrApp: (address,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 1 // 48
	==

	// argument 0 (addrApp) for removeDeclaration must be a (address,uint64,uint64)
	assert

	// execute removeDeclaration((address,uint64,uint64))void
	callsub removeDeclaration
	intc 0 // 1
	return

// removeDeclaration(addrApp: AddressAsset): void
removeDeclaration:
	proto 1 0

	// *if4_condition
	// contracts/DeclarationRegistry.algo.ts:54
	// this.approvalApps(addrApp).exists
	bytec 1 //  "a"
	frame_dig -1 // addrApp: AddressAsset
	concat
	box_len
	swap
	pop
	bz *if4_else

	// *if4_consequent
	b *if4_end

*if4_else:
	// contracts/DeclarationRegistry.algo.ts:57
	// assert(this.txn.sender == addrApp.addr)
	txn Sender
	frame_dig -1 // addrApp: AddressAsset
	extract 0 32
	==
	assert

*if4_end:
	// contracts/DeclarationRegistry.algo.ts:60
	// this.declarations(addrApp).delete()
	frame_dig -1 // addrApp: AddressAsset
	box_del
	retsub

// removeRequest((address,uint64,uint64))void
*abi_route_removeRequest:
	// addrApp: (address,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 1 // 48
	==

	// argument 0 (addrApp) for removeRequest must be a (address,uint64,uint64)
	assert

	// execute removeRequest((address,uint64,uint64))void
	callsub removeRequest
	intc 0 // 1
	return

// removeRequest(addrApp: AddressAsset): void
removeRequest:
	proto 1 0

	// *if5_condition
	// contracts/DeclarationRegistry.algo.ts:64
	// this.approvalApps(addrApp).exists
	bytec 1 //  "a"
	frame_dig -1 // addrApp: AddressAsset
	concat
	box_len
	swap
	pop
	bz *if5_else

	// *if5_consequent
	b *if5_end

*if5_else:
	// contracts/DeclarationRegistry.algo.ts:67
	// assert(this.txn.sender == addrApp.addr)
	txn Sender
	frame_dig -1 // addrApp: AddressAsset
	extract 0 32
	==
	assert

*if5_end:
	// contracts/DeclarationRegistry.algo.ts:70
	// this.requests(addrApp).delete()
	bytec 0 //  "r"
	frame_dig -1 // addrApp: AddressAsset
	concat
	box_del
	retsub

// isRequested((address,uint64,uint64))bool
*abi_route_isRequested:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// addrApp: (address,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 1 // 48
	==

	// argument 0 (addrApp) for isRequested must be a (address,uint64,uint64)
	assert

	// execute isRequested((address,uint64,uint64))bool
	callsub isRequested
	bytec 3 // 0x00
	intc 2 // 0
	uncover 2
	setbit
	concat
	log
	intc 0 // 1
	return

// isRequested(addrApp: AddressAsset): boolean
isRequested:
	proto 1 1

	// contracts/DeclarationRegistry.algo.ts:74
	// return this.requests(addrApp).exists;
	bytec 0 //  "r"
	frame_dig -1 // addrApp: AddressAsset
	concat
	box_len
	swap
	pop
	retsub

// isDeclared((address,uint64,uint64))bool
*abi_route_isDeclared:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// addrApp: (address,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 1 // 48
	==

	// argument 0 (addrApp) for isDeclared must be a (address,uint64,uint64)
	assert

	// execute isDeclared((address,uint64,uint64))bool
	callsub isDeclared
	bytec 3 // 0x00
	intc 2 // 0
	uncover 2
	setbit
	concat
	log
	intc 0 // 1
	return

// isDeclared(addrApp: AddressAsset): boolean
isDeclared:
	proto 1 1

	// contracts/DeclarationRegistry.algo.ts:78
	// return this.requests(addrApp).exists;
	bytec 0 //  "r"
	frame_dig -1 // addrApp: AddressAsset
	concat
	box_len
	swap
	pop
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x4c01bdc1 // method "declare((address,uint64,uint64))void"
	pushbytes 0xb98f9e0e // method "request((address,uint64,uint64))void"
	pushbytes 0x436d7b0e // method "removeDeclaration((address,uint64,uint64))void"
	pushbytes 0x9a3c0efb // method "removeRequest((address,uint64,uint64))void"
	pushbytes 0x65828116 // method "isRequested((address,uint64,uint64))bool"
	pushbytes 0x19242dfe // method "isDeclared((address,uint64,uint64))bool"
	txna ApplicationArgs 0
	match *abi_route_declare *abi_route_request *abi_route_removeDeclaration *abi_route_removeRequest *abi_route_isRequested *abi_route_isDeclared

	// this contract does not implement the given ABI method for call NoOp
	err
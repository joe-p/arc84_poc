{
  "hints": {
    "createApplication(uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "optInToAsa(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "asaToArc11550(axfer,address)(uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc11550ToAsa(appl,uint64,address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "transferApp": {
          "type": "uint64",
          "key": "transferApp"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "ARC11550Bridge",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "transferApp",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optInToAsa",
        "args": [
          {
            "name": "asa",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "asaToArc11550",
        "args": [
          {
            "name": "axfer",
            "type": "axfer"
          },
          {
            "name": "receiver",
            "type": "address"
          }
        ],
        "returns": {
          "type": "(uint64,uint64)"
        }
      },
      {
        "name": "arc11550ToAsa",
        "args": [
          {
            "name": "xferCall",
            "type": "appl"
          },
          {
            "name": "xferIndex",
            "type": "uint64"
          },
          {
            "name": "receiver",
            "type": "address"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      }
    ]
  }
}
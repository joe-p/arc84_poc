/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ARC200Bridge","desc":"","methods":[{"name":"optInToAsa","args":[{"name":"asa","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"asaToArc200","args":[{"name":"axfer","type":"axfer"},{"name":"receiver","type":"address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc200ToAsa","args":[{"name":"app","type":"uint64"},{"name":"amount","type":"uint64"},{"name":"receiver","type":"address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":0,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"asaToArc200Map":{"keyType":"uint64","valueType":"uint64","prefix":"YXNh"},"arc200ToAsaMap":{"keyType":"uint64","valueType":"uint64","prefix":"YXBw"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[0]},{"teal":2,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[1,2,3,4,5,6,7]},{"teal":3,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]},{"teal":15,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[24,25]},{"teal":16,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[26]},{"teal":17,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[27]},{"teal":18,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[28]},{"teal":19,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[29,30]},{"teal":20,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[31]},{"teal":21,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57]},{"teal":25,"source":"contracts/ARC200Bridge.algo.ts:16","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[58]},{"teal":30,"source":"contracts/ARC200Bridge.algo.ts:20","pc":[59,60,61]},{"teal":31,"source":"contracts/ARC200Bridge.algo.ts:20","pc":[62]},{"teal":34,"source":"contracts/ARC200Bridge.algo.ts:20","pc":[63,64,65]},{"teal":35,"source":"contracts/ARC200Bridge.algo.ts:20","pc":[66]},{"teal":36,"source":"contracts/ARC200Bridge.algo.ts:20","pc":[67]},{"teal":40,"source":"contracts/ARC200Bridge.algo.ts:20","pc":[68,69,70]},{"teal":48,"source":"contracts/ARC200Bridge.algo.ts:21","pc":[71]},{"teal":49,"source":"contracts/ARC200Bridge.algo.ts:21","pc":[72]},{"teal":50,"source":"contracts/ARC200Bridge.algo.ts:21","pc":[73,74]},{"teal":54,"source":"contracts/ARC200Bridge.algo.ts:22","pc":[75,76]},{"teal":55,"source":"contracts/ARC200Bridge.algo.ts:22","pc":[77,78]},{"teal":59,"source":"contracts/ARC200Bridge.algo.ts:23","pc":[79]},{"teal":60,"source":"contracts/ARC200Bridge.algo.ts:23","pc":[80,81]},{"teal":64,"source":"contracts/ARC200Bridge.algo.ts:24","pc":[82,83]},{"teal":65,"source":"contracts/ARC200Bridge.algo.ts:24","pc":[84,85]},{"teal":68,"source":"contracts/ARC200Bridge.algo.ts:21","pc":[86]},{"teal":69,"source":"contracts/ARC200Bridge.algo.ts:21","pc":[87,88]},{"teal":72,"source":"contracts/ARC200Bridge.algo.ts:21","pc":[89]},{"teal":73,"source":"contracts/ARC200Bridge.algo.ts:20","pc":[90]},{"teal":78,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[91]},{"teal":81,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[92,93,94]},{"teal":82,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[95]},{"teal":83,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[96]},{"teal":84,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[97,98]},{"teal":85,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[99]},{"teal":88,"source":"contracts/ARC200Bridge.algo.ts:28","errorMessage":"argument 0 (receiver) for asaToArc200 must be a address","pc":[100]},{"teal":91,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[101,102]},{"teal":92,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[103]},{"teal":93,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[104]},{"teal":94,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[105]},{"teal":95,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[106,107]},{"teal":96,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[108]},{"teal":97,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[109]},{"teal":100,"source":"contracts/ARC200Bridge.algo.ts:28","errorMessage":"argument 1 (axfer) for asaToArc200 must be a axfer transaction","pc":[110]},{"teal":103,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[111,112,113]},{"teal":104,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[114]},{"teal":105,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[115]},{"teal":106,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[116]},{"teal":107,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[117]},{"teal":108,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[118]},{"teal":112,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[119,120,121]},{"teal":115,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[122]},{"teal":116,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[123,124]},{"teal":123,"source":"contracts/ARC200Bridge.algo.ts:29","pc":[125,126]},{"teal":124,"source":"contracts/ARC200Bridge.algo.ts:30","pc":[127,128]},{"teal":125,"source":"contracts/ARC200Bridge.algo.ts:30","pc":[129,130]},{"teal":126,"source":"contracts/ARC200Bridge.algo.ts:30","pc":[131]},{"teal":129,"source":"contracts/ARC200Bridge.algo.ts:30","errorMessage":"transaction verification failed: {\"txn\":\"axfer\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}","pc":[132]},{"teal":133,"source":"contracts/ARC200Bridge.algo.ts:33","pc":[133,134]},{"teal":134,"source":"contracts/ARC200Bridge.algo.ts:33","pc":[135,136]},{"teal":135,"source":"contracts/ARC200Bridge.algo.ts:33","pc":[137,138]},{"teal":140,"source":"contracts/ARC200Bridge.algo.ts:36","pc":[139]},{"teal":141,"source":"contracts/ARC200Bridge.algo.ts:36","pc":[140,141]},{"teal":142,"source":"contracts/ARC200Bridge.algo.ts:36","pc":[142,143]},{"teal":143,"source":"contracts/ARC200Bridge.algo.ts:36","pc":[144]},{"teal":144,"source":"contracts/ARC200Bridge.algo.ts:36","pc":[145]},{"teal":145,"source":"contracts/ARC200Bridge.algo.ts:36","pc":[146]},{"teal":146,"source":"contracts/ARC200Bridge.algo.ts:36","pc":[147]},{"teal":147,"source":"contracts/ARC200Bridge.algo.ts:36","pc":[148]},{"teal":148,"source":"contracts/ARC200Bridge.algo.ts:36","pc":[149]},{"teal":149,"source":"contracts/ARC200Bridge.algo.ts:36","pc":[150,151,152]},{"teal":163,"source":"contracts/ARC200Bridge.algo.ts:37","pc":[153]},{"teal":164,"source":"contracts/ARC200Bridge.algo.ts:37","pc":[154]},{"teal":165,"source":"contracts/ARC200Bridge.algo.ts:37","pc":[155,156]},{"teal":166,"source":"contracts/ARC200Bridge.algo.ts:37","pc":[157,158,159,160,161,162]},{"teal":167,"source":"contracts/ARC200Bridge.algo.ts:37","pc":[163,164]},{"teal":178,"source":"contracts/ARC200Bridge.algo.ts:39","pc":[165,166,167,168,169,170,171,172,173,174]},{"teal":179,"source":"contracts/ARC200Bridge.algo.ts:39","pc":[175,176]},{"teal":180,"source":"contracts/ARC200Bridge.algo.ts:39","pc":[177,178]},{"teal":181,"source":"contracts/ARC200Bridge.algo.ts:39","pc":[179]},{"teal":182,"source":"contracts/ARC200Bridge.algo.ts:39","pc":[180]},{"teal":183,"source":"contracts/ARC200Bridge.algo.ts:39","pc":[181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214]},{"teal":184,"source":"contracts/ARC200Bridge.algo.ts:39","pc":[215]},{"teal":185,"source":"contracts/ARC200Bridge.algo.ts:39","pc":[216]},{"teal":186,"source":"contracts/ARC200Bridge.algo.ts:39","pc":[217,218,219]},{"teal":187,"source":"contracts/ARC200Bridge.algo.ts:39","pc":[220]},{"teal":188,"source":"contracts/ARC200Bridge.algo.ts:39","pc":[221]},{"teal":189,"source":"contracts/ARC200Bridge.algo.ts:39","pc":[222]},{"teal":190,"source":"contracts/ARC200Bridge.algo.ts:39","pc":[223,224,225]},{"teal":191,"source":"contracts/ARC200Bridge.algo.ts:39","pc":[226,227]},{"teal":192,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[228,229,230,231]},{"teal":193,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[232,233]},{"teal":194,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[234,235]},{"teal":195,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[236]},{"teal":196,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[237]},{"teal":197,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[238,239,240,241,242,243,244,245,246,247]},{"teal":198,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[248]},{"teal":199,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[249]},{"teal":200,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[250,251,252]},{"teal":201,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[253]},{"teal":202,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[254]},{"teal":203,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[255]},{"teal":204,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[256,257,258]},{"teal":205,"source":"contracts/ARC200Bridge.algo.ts:41","pc":[259,260]},{"teal":206,"source":"contracts/ARC200Bridge.algo.ts:43","pc":[261,262]},{"teal":207,"source":"contracts/ARC200Bridge.algo.ts:43","pc":[263,264]},{"teal":208,"source":"contracts/ARC200Bridge.algo.ts:43","pc":[265]},{"teal":209,"source":"contracts/ARC200Bridge.algo.ts:43","pc":[266]},{"teal":210,"source":"contracts/ARC200Bridge.algo.ts:43","pc":[267,268,269]},{"teal":211,"source":"contracts/ARC200Bridge.algo.ts:43","pc":[270,271]},{"teal":212,"source":"contracts/ARC200Bridge.algo.ts:44","pc":[272,273]},{"teal":213,"source":"contracts/ARC200Bridge.algo.ts:44","pc":[274,275]},{"teal":214,"source":"contracts/ARC200Bridge.algo.ts:44","pc":[276]},{"teal":215,"source":"contracts/ARC200Bridge.algo.ts:44","pc":[277]},{"teal":216,"source":"contracts/ARC200Bridge.algo.ts:44","pc":[278,279]},{"teal":219,"source":"contracts/ARC200Bridge.algo.ts:37","pc":[280]},{"teal":220,"source":"contracts/ARC200Bridge.algo.ts:37","pc":[281,282]},{"teal":223,"source":"contracts/ARC200Bridge.algo.ts:37","pc":[283]},{"teal":227,"source":"contracts/ARC200Bridge.algo.ts:48","pc":[284,285]},{"teal":228,"source":"contracts/ARC200Bridge.algo.ts:48","pc":[286,287]},{"teal":232,"source":"contracts/ARC200Bridge.algo.ts:50","pc":[288]},{"teal":233,"source":"contracts/ARC200Bridge.algo.ts:50","pc":[289,290]},{"teal":234,"source":"contracts/ARC200Bridge.algo.ts:50","pc":[291]},{"teal":235,"source":"contracts/ARC200Bridge.algo.ts:50","pc":[292]},{"teal":236,"source":"contracts/ARC200Bridge.algo.ts:50","pc":[293,294]},{"teal":237,"source":"contracts/ARC200Bridge.algo.ts:50","pc":[295]},{"teal":238,"source":"contracts/ARC200Bridge.algo.ts:50","pc":[296]},{"teal":242,"source":"contracts/ARC200Bridge.algo.ts:51","pc":[297]},{"teal":243,"source":"contracts/ARC200Bridge.algo.ts:51","pc":[298,299]},{"teal":244,"source":"contracts/ARC200Bridge.algo.ts:51","pc":[300]},{"teal":245,"source":"contracts/ARC200Bridge.algo.ts:51","pc":[301]},{"teal":246,"source":"contracts/ARC200Bridge.algo.ts:51","pc":[302,303]},{"teal":247,"source":"contracts/ARC200Bridge.algo.ts:51","pc":[304]},{"teal":248,"source":"contracts/ARC200Bridge.algo.ts:51","pc":[305]},{"teal":253,"source":"contracts/ARC200Bridge.algo.ts:54","pc":[306]},{"teal":254,"source":"contracts/ARC200Bridge.algo.ts:54","pc":[307,308]},{"teal":255,"source":"contracts/ARC200Bridge.algo.ts:54","pc":[309]},{"teal":256,"source":"contracts/ARC200Bridge.algo.ts:54","pc":[310]},{"teal":257,"source":"contracts/ARC200Bridge.algo.ts:54","pc":[311]},{"teal":260,"source":"contracts/ARC200Bridge.algo.ts:54","errorMessage":"box value does not exist: this.asaToArc200Map(asa).value","pc":[312]},{"teal":261,"source":"contracts/ARC200Bridge.algo.ts:54","pc":[313]},{"teal":262,"source":"contracts/ARC200Bridge.algo.ts:54","pc":[314,315]},{"teal":269,"source":"contracts/ARC200Bridge.algo.ts:56","pc":[316]},{"teal":270,"source":"contracts/ARC200Bridge.algo.ts:56","pc":[317]},{"teal":271,"source":"contracts/ARC200Bridge.algo.ts:56","pc":[318,319]},{"teal":272,"source":"contracts/ARC200Bridge.algo.ts:56","pc":[320,321,322,323,324,325]},{"teal":273,"source":"contracts/ARC200Bridge.algo.ts:56","pc":[326,327]},{"teal":277,"source":"contracts/ARC200Bridge.algo.ts:57","pc":[328,329]},{"teal":278,"source":"contracts/ARC200Bridge.algo.ts:57","pc":[330,331]},{"teal":282,"source":"contracts/ARC200Bridge.algo.ts:58","pc":[332,333]},{"teal":283,"source":"contracts/ARC200Bridge.algo.ts:58","pc":[334,335]},{"teal":284,"source":"contracts/ARC200Bridge.algo.ts:58","pc":[336,337]},{"teal":285,"source":"contracts/ARC200Bridge.algo.ts:58","pc":[338,339]},{"teal":286,"source":"contracts/ARC200Bridge.algo.ts:58","pc":[340]},{"teal":287,"source":"contracts/ARC200Bridge.algo.ts:58","pc":[341,342]},{"teal":290,"source":"contracts/ARC200Bridge.algo.ts:56","pc":[343]},{"teal":291,"source":"contracts/ARC200Bridge.algo.ts:56","pc":[344,345]},{"teal":294,"source":"contracts/ARC200Bridge.algo.ts:56","pc":[346]},{"teal":295,"source":"contracts/ARC200Bridge.algo.ts:56","pc":[347,348]},{"teal":296,"source":"contracts/ARC200Bridge.algo.ts:56","pc":[349]},{"teal":297,"source":"contracts/ARC200Bridge.algo.ts:56","pc":[350]},{"teal":298,"source":"contracts/ARC200Bridge.algo.ts:56","pc":[351,352]},{"teal":299,"source":"contracts/ARC200Bridge.algo.ts:56","pc":[353,354,355]},{"teal":300,"source":"contracts/ARC200Bridge.algo.ts:56","pc":[356]},{"teal":301,"source":"contracts/ARC200Bridge.algo.ts:56","pc":[357]},{"teal":302,"source":"contracts/ARC200Bridge.algo.ts:56","pc":[358,359]},{"teal":306,"source":"contracts/ARC200Bridge.algo.ts:61","pc":[360,361]},{"teal":307,"source":"contracts/ARC200Bridge.algo.ts:61","pc":[362]},{"teal":311,"source":"contracts/ARC200Bridge.algo.ts:63","pc":[363,364]},{"teal":314,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[365,366]},{"teal":317,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[367,368]},{"teal":318,"source":"contracts/ARC200Bridge.algo.ts:28","pc":[369]},{"teal":322,"source":"contracts/ARC200Bridge.algo.ts:67","pc":[370,371,372]},{"teal":331,"source":"contracts/ARC200Bridge.algo.ts:69","pc":[373]},{"teal":332,"source":"contracts/ARC200Bridge.algo.ts:69","pc":[374]},{"teal":333,"source":"contracts/ARC200Bridge.algo.ts:69","pc":[375,376]},{"teal":334,"source":"contracts/ARC200Bridge.algo.ts:69","pc":[377,378,379,380,381,382]},{"teal":335,"source":"contracts/ARC200Bridge.algo.ts:69","pc":[383,384]},{"teal":339,"source":"contracts/ARC200Bridge.algo.ts:69","pc":[385,386]},{"teal":340,"source":"contracts/ARC200Bridge.algo.ts:69","pc":[387,388]},{"teal":343,"source":"contracts/ARC200Bridge.algo.ts:69","pc":[389]},{"teal":344,"source":"contracts/ARC200Bridge.algo.ts:69","pc":[390,391]},{"teal":347,"source":"contracts/ARC200Bridge.algo.ts:69","pc":[392]},{"teal":348,"source":"contracts/ARC200Bridge.algo.ts:69","pc":[393,394]},{"teal":349,"source":"contracts/ARC200Bridge.algo.ts:69","pc":[395]},{"teal":350,"source":"contracts/ARC200Bridge.algo.ts:69","pc":[396]},{"teal":351,"source":"contracts/ARC200Bridge.algo.ts:69","pc":[397,398]},{"teal":352,"source":"contracts/ARC200Bridge.algo.ts:69","pc":[399,400,401]},{"teal":356,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[402]},{"teal":357,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[403]},{"teal":358,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[404,405]},{"teal":359,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[406,407,408,409,410,411]},{"teal":360,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[412,413]},{"teal":364,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[414,415]},{"teal":365,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[416,417]},{"teal":368,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[418]},{"teal":369,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[419,420]},{"teal":372,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[421]},{"teal":373,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[422,423]},{"teal":374,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[424]},{"teal":375,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[425]},{"teal":376,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[426,427]},{"teal":377,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[428,429,430]},{"teal":378,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[431]},{"teal":379,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[432]},{"teal":380,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[433,434,435]},{"teal":381,"source":"contracts/ARC200Bridge.algo.ts:72","pc":[436]},{"teal":385,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[437]},{"teal":386,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[438]},{"teal":387,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[439,440]},{"teal":388,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[441,442,443,444,445,446]},{"teal":389,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[447,448]},{"teal":393,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[449,450]},{"teal":394,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[451,452]},{"teal":397,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[453]},{"teal":398,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[454,455]},{"teal":401,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[456]},{"teal":402,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[457,458]},{"teal":403,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[459]},{"teal":404,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[460]},{"teal":405,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[461,462]},{"teal":406,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[463,464,465]},{"teal":407,"source":"contracts/ARC200Bridge.algo.ts:70","pc":[466]},{"teal":411,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[467]},{"teal":412,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[468]},{"teal":413,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[469,470]},{"teal":414,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[471,472,473,474,475,476]},{"teal":415,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[477,478]},{"teal":419,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[479,480]},{"teal":420,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[481,482]},{"teal":423,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[483]},{"teal":424,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[484,485]},{"teal":427,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[486]},{"teal":428,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[487,488]},{"teal":429,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[489]},{"teal":430,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[490]},{"teal":431,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[491,492]},{"teal":432,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[493,494,495]},{"teal":433,"source":"contracts/ARC200Bridge.algo.ts:71","pc":[496]},{"teal":434,"source":"contracts/ARC200Bridge.algo.ts:67","pc":[497]},{"teal":439,"source":"contracts/ARC200Bridge.algo.ts:76","pc":[498]},{"teal":442,"source":"contracts/ARC200Bridge.algo.ts:76","pc":[499,500,501]},{"teal":443,"source":"contracts/ARC200Bridge.algo.ts:76","pc":[502]},{"teal":444,"source":"contracts/ARC200Bridge.algo.ts:76","pc":[503]},{"teal":445,"source":"contracts/ARC200Bridge.algo.ts:76","pc":[504,505]},{"teal":446,"source":"contracts/ARC200Bridge.algo.ts:76","pc":[506]},{"teal":449,"source":"contracts/ARC200Bridge.algo.ts:76","errorMessage":"argument 0 (receiver) for arc200ToAsa must be a address","pc":[507]},{"teal":452,"source":"contracts/ARC200Bridge.algo.ts:76","pc":[508,509,510]},{"teal":453,"source":"contracts/ARC200Bridge.algo.ts:76","pc":[511]},{"teal":456,"source":"contracts/ARC200Bridge.algo.ts:76","pc":[512,513,514]},{"teal":457,"source":"contracts/ARC200Bridge.algo.ts:76","pc":[515]},{"teal":460,"source":"contracts/ARC200Bridge.algo.ts:76","pc":[516,517,518]},{"teal":461,"source":"contracts/ARC200Bridge.algo.ts:76","pc":[519]},{"teal":462,"source":"contracts/ARC200Bridge.algo.ts:76","pc":[520]},{"teal":463,"source":"contracts/ARC200Bridge.algo.ts:76","pc":[521]},{"teal":464,"source":"contracts/ARC200Bridge.algo.ts:76","pc":[522]},{"teal":465,"source":"contracts/ARC200Bridge.algo.ts:76","pc":[523]},{"teal":469,"source":"contracts/ARC200Bridge.algo.ts:76","pc":[524,525,526]},{"teal":472,"source":"contracts/ARC200Bridge.algo.ts:76","pc":[527]},{"teal":473,"source":"contracts/ARC200Bridge.algo.ts:76","pc":[528,529]},{"teal":478,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[530]},{"teal":479,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[531,532]},{"teal":480,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[533]},{"teal":481,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[534]},{"teal":482,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[535]},{"teal":483,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[536]},{"teal":484,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[537]},{"teal":485,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[538]},{"teal":486,"source":"contracts/ARC200Bridge.algo.ts:77","pc":[539,540,541]},{"teal":491,"source":"contracts/ARC200Bridge.algo.ts:78","pc":[542,543]},{"teal":492,"source":"contracts/ARC200Bridge.algo.ts:78","pc":[544,545,546]},{"teal":493,"source":"contracts/ARC200Bridge.algo.ts:78","pc":[547,548]},{"teal":503,"source":"contracts/ARC200Bridge.algo.ts:79","pc":[549]},{"teal":504,"source":"contracts/ARC200Bridge.algo.ts:79","pc":[550,551]},{"teal":505,"source":"contracts/ARC200Bridge.algo.ts:79","pc":[552,553]},{"teal":509,"source":"contracts/ARC200Bridge.algo.ts:80","pc":[554,555]},{"teal":510,"source":"contracts/ARC200Bridge.algo.ts:80","pc":[556,557,558]},{"teal":511,"source":"contracts/ARC200Bridge.algo.ts:80","pc":[559]},{"teal":512,"source":"contracts/ARC200Bridge.algo.ts:80","pc":[560]},{"teal":513,"source":"contracts/ARC200Bridge.algo.ts:80","pc":[561,562]},{"teal":514,"source":"contracts/ARC200Bridge.algo.ts:80","pc":[563]},{"teal":517,"source":"contracts/ARC200Bridge.algo.ts:80","errorMessage":"params.total as uint64 overflowed 64 bits","pc":[564]},{"teal":518,"source":"contracts/ARC200Bridge.algo.ts:80","pc":[565,566,567]},{"teal":519,"source":"contracts/ARC200Bridge.algo.ts:80","pc":[568]},{"teal":520,"source":"contracts/ARC200Bridge.algo.ts:80","pc":[569,570]},{"teal":524,"source":"contracts/ARC200Bridge.algo.ts:81","pc":[571,572]},{"teal":525,"source":"contracts/ARC200Bridge.algo.ts:81","pc":[573,574,575]},{"teal":526,"source":"contracts/ARC200Bridge.algo.ts:81","pc":[576]},{"teal":527,"source":"contracts/ARC200Bridge.algo.ts:81","pc":[577,578]},{"teal":531,"source":"contracts/ARC200Bridge.algo.ts:82","pc":[579,580]},{"teal":532,"source":"contracts/ARC200Bridge.algo.ts:82","pc":[581,582,583]},{"teal":533,"source":"contracts/ARC200Bridge.algo.ts:82","pc":[584,585]},{"teal":537,"source":"contracts/ARC200Bridge.algo.ts:83","pc":[586,587]},{"teal":538,"source":"contracts/ARC200Bridge.algo.ts:83","pc":[588,589,590]},{"teal":539,"source":"contracts/ARC200Bridge.algo.ts:83","pc":[591,592]},{"teal":543,"source":"contracts/ARC200Bridge.algo.ts:84","pc":[593,594]},{"teal":544,"source":"contracts/ARC200Bridge.algo.ts:84","pc":[595,596]},{"teal":547,"source":"contracts/ARC200Bridge.algo.ts:79","pc":[597]},{"teal":548,"source":"contracts/ARC200Bridge.algo.ts:79","pc":[598,599]},{"teal":551,"source":"contracts/ARC200Bridge.algo.ts:79","pc":[600]},{"teal":552,"source":"contracts/ARC200Bridge.algo.ts:79","pc":[601,602]},{"teal":556,"source":"contracts/ARC200Bridge.algo.ts:87","pc":[603,604]},{"teal":557,"source":"contracts/ARC200Bridge.algo.ts:87","pc":[605,606]},{"teal":561,"source":"contracts/ARC200Bridge.algo.ts:88","pc":[607]},{"teal":562,"source":"contracts/ARC200Bridge.algo.ts:88","pc":[608,609]},{"teal":563,"source":"contracts/ARC200Bridge.algo.ts:88","pc":[610]},{"teal":564,"source":"contracts/ARC200Bridge.algo.ts:88","pc":[611]},{"teal":565,"source":"contracts/ARC200Bridge.algo.ts:88","pc":[612,613]},{"teal":566,"source":"contracts/ARC200Bridge.algo.ts:88","pc":[614]},{"teal":567,"source":"contracts/ARC200Bridge.algo.ts:88","pc":[615]},{"teal":571,"source":"contracts/ARC200Bridge.algo.ts:89","pc":[616]},{"teal":572,"source":"contracts/ARC200Bridge.algo.ts:89","pc":[617,618]},{"teal":573,"source":"contracts/ARC200Bridge.algo.ts:89","pc":[619]},{"teal":574,"source":"contracts/ARC200Bridge.algo.ts:89","pc":[620]},{"teal":575,"source":"contracts/ARC200Bridge.algo.ts:89","pc":[621,622]},{"teal":576,"source":"contracts/ARC200Bridge.algo.ts:89","pc":[623]},{"teal":577,"source":"contracts/ARC200Bridge.algo.ts:89","pc":[624]},{"teal":582,"source":"contracts/ARC200Bridge.algo.ts:92","pc":[625]},{"teal":583,"source":"contracts/ARC200Bridge.algo.ts:92","pc":[626,627]},{"teal":584,"source":"contracts/ARC200Bridge.algo.ts:92","pc":[628]},{"teal":585,"source":"contracts/ARC200Bridge.algo.ts:92","pc":[629]},{"teal":586,"source":"contracts/ARC200Bridge.algo.ts:92","pc":[630]},{"teal":589,"source":"contracts/ARC200Bridge.algo.ts:92","errorMessage":"box value does not exist: this.arc200ToAsaMap(app).value","pc":[631]},{"teal":590,"source":"contracts/ARC200Bridge.algo.ts:92","pc":[632]},{"teal":591,"source":"contracts/ARC200Bridge.algo.ts:92","pc":[633,634]},{"teal":598,"source":"contracts/ARC200Bridge.algo.ts:95","pc":[635]},{"teal":599,"source":"contracts/ARC200Bridge.algo.ts:95","pc":[636]},{"teal":600,"source":"contracts/ARC200Bridge.algo.ts:95","pc":[637,638]},{"teal":601,"source":"contracts/ARC200Bridge.algo.ts:95","pc":[639,640,641,642,643,644]},{"teal":602,"source":"contracts/ARC200Bridge.algo.ts:95","pc":[645,646]},{"teal":606,"source":"contracts/ARC200Bridge.algo.ts:96","pc":[647,648]},{"teal":607,"source":"contracts/ARC200Bridge.algo.ts:96","pc":[649,650]},{"teal":611,"source":"contracts/ARC200Bridge.algo.ts:97","pc":[651,652]},{"teal":612,"source":"contracts/ARC200Bridge.algo.ts:97","pc":[653,654]},{"teal":613,"source":"contracts/ARC200Bridge.algo.ts:97","pc":[655,656]},{"teal":614,"source":"contracts/ARC200Bridge.algo.ts:97","pc":[657,658]},{"teal":615,"source":"contracts/ARC200Bridge.algo.ts:97","pc":[659,660]},{"teal":616,"source":"contracts/ARC200Bridge.algo.ts:97","pc":[661]},{"teal":617,"source":"contracts/ARC200Bridge.algo.ts:97","pc":[662,663]},{"teal":620,"source":"contracts/ARC200Bridge.algo.ts:95","pc":[664]},{"teal":621,"source":"contracts/ARC200Bridge.algo.ts:95","pc":[665,666]},{"teal":624,"source":"contracts/ARC200Bridge.algo.ts:95","pc":[667]},{"teal":625,"source":"contracts/ARC200Bridge.algo.ts:95","pc":[668,669]},{"teal":626,"source":"contracts/ARC200Bridge.algo.ts:95","pc":[670]},{"teal":627,"source":"contracts/ARC200Bridge.algo.ts:95","pc":[671]},{"teal":628,"source":"contracts/ARC200Bridge.algo.ts:95","pc":[672,673]},{"teal":629,"source":"contracts/ARC200Bridge.algo.ts:95","pc":[674,675,676]},{"teal":630,"source":"contracts/ARC200Bridge.algo.ts:95","pc":[677]},{"teal":631,"source":"contracts/ARC200Bridge.algo.ts:95","pc":[678]},{"teal":632,"source":"contracts/ARC200Bridge.algo.ts:95","pc":[679,680]},{"teal":636,"source":"contracts/ARC200Bridge.algo.ts:100","pc":[681,682]},{"teal":637,"source":"contracts/ARC200Bridge.algo.ts:100","pc":[683]},{"teal":641,"source":"contracts/ARC200Bridge.algo.ts:102","pc":[684]},{"teal":642,"source":"contracts/ARC200Bridge.algo.ts:102","pc":[685]},{"teal":643,"source":"contracts/ARC200Bridge.algo.ts:102","pc":[686,687]},{"teal":647,"source":"contracts/ARC200Bridge.algo.ts:102","pc":[688,689]},{"teal":648,"source":"contracts/ARC200Bridge.algo.ts:102","pc":[690,691]},{"teal":652,"source":"contracts/ARC200Bridge.algo.ts:102","pc":[692,693]},{"teal":653,"source":"contracts/ARC200Bridge.algo.ts:102","pc":[694,695]},{"teal":657,"source":"contracts/ARC200Bridge.algo.ts:102","pc":[696,697]},{"teal":658,"source":"contracts/ARC200Bridge.algo.ts:102","pc":[698,699]},{"teal":661,"source":"contracts/ARC200Bridge.algo.ts:102","pc":[700]},{"teal":662,"source":"contracts/ARC200Bridge.algo.ts:102","pc":[701,702]},{"teal":665,"source":"contracts/ARC200Bridge.algo.ts:102","pc":[703]},{"teal":669,"source":"contracts/ARC200Bridge.algo.ts:104","pc":[704,705]},{"teal":672,"source":"contracts/ARC200Bridge.algo.ts:76","pc":[706,707]},{"teal":675,"source":"contracts/ARC200Bridge.algo.ts:76","pc":[708,709]},{"teal":676,"source":"contracts/ARC200Bridge.algo.ts:76","pc":[710]},{"teal":679,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[711]},{"teal":680,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[712]},{"teal":683,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[713,714,715,716,717,718]},{"teal":684,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[719,720,721]},{"teal":685,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[722,723,724,725]},{"teal":688,"source":"contracts/ARC200Bridge.algo.ts:16","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[726]},{"teal":691,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[727,728,729,730,731,732]},{"teal":692,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[733,734,735,736,737,738]},{"teal":693,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[739,740,741,742,743,744]},{"teal":694,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[745,746,747]},{"teal":695,"source":"contracts/ARC200Bridge.algo.ts:16","pc":[748,749,750,751,752,753,754,755]},{"teal":698,"source":"contracts/ARC200Bridge.algo.ts:16","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[756]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAFAAEGBCAmBAADYXNhA2FwcAQVH3x1MRgUJAsxGQiNDAKdAAAAAAAAAAAAAAKPAAAAAAAAAAAAAAA2GgEXiAACI0OKAQCxJbIQi/+yESKyEjIKshQisgGziSs2GgFJFSEEEkQxFiMJSTgQJRJEiAAFFlCwI0OKAgEoRwOL/zgUMgoSRIv/OBGMACmL/zgRFlC9TEgUQQCZsSSyEIAEhSn3g7IagAhCcmlkZ2VkIIsAcQNIUIAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQSVcgACioRFcAILIagAJCLYsAcQNIUIAIAAAAAAAAAABQSVcIACioRFcACLIaiwBxAUgWVwcBshqLAHEASBayGiKyAbO0PYwBKYsAFlCLARa/KosBFlCLABa/KYsAFlC+RBeMArEkshCABNpwJbmyGosCshiL/rIai/84EhayGiKyAbO0OyMJxTpXBAAiU4wDiwNEiwKMAEYDiYoBAbEkshCABOyZYEGyGov/shgisgGztDsjCcU6VwQAsSSyEIAEhOwT1bIai/+yGCKyAbO0OyMJxTpXBAAXFlcHAVCxJLIQgARlfRPsshqL/7IYIrIBs7Q7IwnFOlcEAFCxJLIQgAS2rholshqL/7IYIrIBs7Q7IwnFOlcEAFCJKzYaA0kVIQQSRDYaAhc2GgEXiAAFFlCwI0OKAwEoRwMqi/8WUL1MSBRBAFOL/4j/T4wAsYEDshCLAFcAIEmTgUAORFcYCBeyIosAVyABF7IjiwBXISCyJosAV0EIsiUyCrIqIrIBs7Q8tDyMASqL/xZQiwEWvymLARZQi/8WvyqL/xZQvkQXjAKxJLIQgARKlo+PshqL/7IYMQCyGjIKshqL/hayGiKyAbO0OyMJxTpXBAAiU4wDiwNEsSWyEIsCshGL/bIUi/6yEiKyAbOLAowARgOJI0OABLhEezY2GgCOAf/xAIAEsoGlbYAEWb0zt4AE+SsMUjYaAI4D/Uf9Z/7+AA==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Arc200Bridge contract
 */
export type Arc200BridgeArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'optInToAsa(uint64)void': {
      asa: bigint | number
    }
    'asaToArc200(axfer,address)uint64': {
      axfer: AppMethodCallTransactionArgument
      receiver: string
    }
    'arc200ToAsa(uint64,uint64,address)uint64': {
      app: bigint | number
      amount: bigint | number
      receiver: string
    }
    'createApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'optInToAsa(uint64)void': [asa: bigint | number]
    'asaToArc200(axfer,address)uint64': [axfer: AppMethodCallTransactionArgument, receiver: string]
    'arc200ToAsa(uint64,uint64,address)uint64': [app: bigint | number, amount: bigint | number, receiver: string]
    'createApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type Arc200BridgeReturns = {
  'optInToAsa(uint64)void': void
  'asaToArc200(axfer,address)uint64': bigint
  'arc200ToAsa(uint64,uint64,address)uint64': bigint
  'createApplication()void': void
}

/**
 * Defines the types of available calls and state of the Arc200Bridge smart contract.
 */
export type Arc200BridgeTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'optInToAsa(uint64)void' | 'optInToAsa', {
      argsObj: Arc200BridgeArgs['obj']['optInToAsa(uint64)void']
      argsTuple: Arc200BridgeArgs['tuple']['optInToAsa(uint64)void']
      returns: Arc200BridgeReturns['optInToAsa(uint64)void']
    }>
    & Record<'asaToArc200(axfer,address)uint64' | 'asaToArc200', {
      argsObj: Arc200BridgeArgs['obj']['asaToArc200(axfer,address)uint64']
      argsTuple: Arc200BridgeArgs['tuple']['asaToArc200(axfer,address)uint64']
      returns: Arc200BridgeReturns['asaToArc200(axfer,address)uint64']
    }>
    & Record<'arc200ToAsa(uint64,uint64,address)uint64' | 'arc200ToAsa', {
      argsObj: Arc200BridgeArgs['obj']['arc200ToAsa(uint64,uint64,address)uint64']
      argsTuple: Arc200BridgeArgs['tuple']['arc200ToAsa(uint64,uint64,address)uint64']
      returns: Arc200BridgeReturns['arc200ToAsa(uint64,uint64,address)uint64']
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: Arc200BridgeArgs['obj']['createApplication()void']
      argsTuple: Arc200BridgeArgs['tuple']['createApplication()void']
      returns: Arc200BridgeReturns['createApplication()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    box: {
      keys: {}
      maps: {
        asaToArc200Map: Map<bigint | number, bigint>
        arc200ToAsaMap: Map<bigint | number, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Arc200BridgeSignatures = keyof Arc200BridgeTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Arc200BridgeNonVoidMethodSignatures = keyof Arc200BridgeTypes['methods'] extends infer T ? T extends keyof Arc200BridgeTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Arc200Bridge smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Arc200BridgeSignatures> = Arc200BridgeTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc200Bridge smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc200BridgeSignatures> = Arc200BridgeTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = Arc200BridgeTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Arc200BridgeCreateCallParams =
  | Expand<CallParams<Arc200BridgeArgs['obj']['createApplication()void'] | Arc200BridgeArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<Arc200BridgeArgs['obj']['createApplication()void'] | Arc200BridgeArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Arc200BridgeDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Arc200BridgeCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc200Bridge smart contract
 */
export abstract class Arc200BridgeParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends Arc200BridgeCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return Arc200BridgeParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ARC200Bridge smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<Arc200BridgeArgs['obj']['createApplication()void'] | Arc200BridgeArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the optInToAsa(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToAsa(params: CallParams<Arc200BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc200BridgeArgs['tuple']['optInToAsa(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optInToAsa(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asa],
    }
  }
  /**
   * Constructs a no op call for the asaToArc200(axfer,address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static asaToArc200(params: CallParams<Arc200BridgeArgs['obj']['asaToArc200(axfer,address)uint64'] | Arc200BridgeArgs['tuple']['asaToArc200(axfer,address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'asaToArc200(axfer,address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.axfer, params.args.receiver],
    }
  }
  /**
   * Constructs a no op call for the arc200ToAsa(uint64,uint64,address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200ToAsa(params: CallParams<Arc200BridgeArgs['obj']['arc200ToAsa(uint64,uint64,address)uint64'] | Arc200BridgeArgs['tuple']['arc200ToAsa(uint64,uint64,address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200ToAsa(uint64,uint64,address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.app, params.args.amount, params.args.receiver],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ARC200Bridge smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Arc200BridgeFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Arc200BridgeFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Arc200BridgeClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Arc200BridgeClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ARC200Bridge smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Arc200BridgeDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? Arc200BridgeParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (Arc200BridgeCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new Arc200BridgeClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC200Bridge smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<Arc200BridgeArgs['obj']['createApplication()void'] | Arc200BridgeArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(Arc200BridgeParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC200Bridge smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<Arc200BridgeArgs['obj']['createApplication()void'] | Arc200BridgeArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(Arc200BridgeParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC200Bridge smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<Arc200BridgeArgs['obj']['createApplication()void'] | Arc200BridgeArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(Arc200BridgeParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | Arc200BridgeReturns['createApplication()void']) }, appClient: new Arc200BridgeClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ARC200Bridge smart contract
 */
export class Arc200BridgeClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Arc200BridgeClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Arc200Bridge app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Arc200BridgeClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Arc200BridgeNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Arc200BridgeClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Arc200BridgeClient> {
    return new Arc200BridgeClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Arc200BridgeClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Arc200BridgeClient> {
    return new Arc200BridgeClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ARC200Bridge smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC200Bridge smart contract using the `optInToAsa(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToAsa: (params: CallParams<Arc200BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc200BridgeArgs['tuple']['optInToAsa(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc200BridgeParamsFactory.optInToAsa(params))
    },

    /**
     * Makes a call to the ARC200Bridge smart contract using the `asaToArc200(axfer,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    asaToArc200: (params: CallParams<Arc200BridgeArgs['obj']['asaToArc200(axfer,address)uint64'] | Arc200BridgeArgs['tuple']['asaToArc200(axfer,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc200BridgeParamsFactory.asaToArc200(params))
    },

    /**
     * Makes a call to the ARC200Bridge smart contract using the `arc200ToAsa(uint64,uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc200ToAsa: (params: CallParams<Arc200BridgeArgs['obj']['arc200ToAsa(uint64,uint64,address)uint64'] | Arc200BridgeArgs['tuple']['arc200ToAsa(uint64,uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc200BridgeParamsFactory.arc200ToAsa(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ARC200Bridge smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC200Bridge smart contract using the `optInToAsa(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToAsa: (params: CallParams<Arc200BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc200BridgeArgs['tuple']['optInToAsa(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc200BridgeParamsFactory.optInToAsa(params))
    },

    /**
     * Makes a call to the ARC200Bridge smart contract using the `asaToArc200(axfer,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    asaToArc200: (params: CallParams<Arc200BridgeArgs['obj']['asaToArc200(axfer,address)uint64'] | Arc200BridgeArgs['tuple']['asaToArc200(axfer,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc200BridgeParamsFactory.asaToArc200(params))
    },

    /**
     * Makes a call to the ARC200Bridge smart contract using the `arc200ToAsa(uint64,uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc200ToAsa: (params: CallParams<Arc200BridgeArgs['obj']['arc200ToAsa(uint64,uint64,address)uint64'] | Arc200BridgeArgs['tuple']['arc200ToAsa(uint64,uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc200BridgeParamsFactory.arc200ToAsa(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ARC200Bridge smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC200Bridge smart contract using the `optInToAsa(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToAsa: async (params: CallParams<Arc200BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc200BridgeArgs['tuple']['optInToAsa(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc200BridgeParamsFactory.optInToAsa(params))
      return {...result, return: result.return as unknown as (undefined | Arc200BridgeReturns['optInToAsa(uint64)void'])}
    },

    /**
     * Makes a call to the ARC200Bridge smart contract using the `asaToArc200(axfer,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    asaToArc200: async (params: CallParams<Arc200BridgeArgs['obj']['asaToArc200(axfer,address)uint64'] | Arc200BridgeArgs['tuple']['asaToArc200(axfer,address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc200BridgeParamsFactory.asaToArc200(params))
      return {...result, return: result.return as unknown as (undefined | Arc200BridgeReturns['asaToArc200(axfer,address)uint64'])}
    },

    /**
     * Makes a call to the ARC200Bridge smart contract using the `arc200ToAsa(uint64,uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc200ToAsa: async (params: CallParams<Arc200BridgeArgs['obj']['arc200ToAsa(uint64,uint64,address)uint64'] | Arc200BridgeArgs['tuple']['arc200ToAsa(uint64,uint64,address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc200BridgeParamsFactory.arc200ToAsa(params))
      return {...result, return: result.return as unknown as (undefined | Arc200BridgeReturns['arc200ToAsa(uint64,uint64,address)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Arc200BridgeClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ARC200Bridge app
   */
  state = {
    /**
     * Methods to access box state for the current ARC200Bridge app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the asaToArc200Map map in box state
       */
      asaToArc200Map: {
        /**
         * Get all current values of the asaToArc200Map map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("asaToArc200Map")) as Map<bigint, bigint> },
        /**
         * Get a current value of the asaToArc200Map map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("asaToArc200Map", key) as bigint | undefined },
      },
      /**
       * Get values from the arc200ToAsaMap map in box state
       */
      arc200ToAsaMap: {
        /**
         * Get all current values of the arc200ToAsaMap map in box state
         */
        getMap: async (): Promise<Map<bigint, bigint>> => { return (await this.appClient.state.box.getMap("arc200ToAsaMap")) as Map<bigint, bigint> },
        /**
         * Get a current value of the arc200ToAsaMap map by key from box state
         */
        value: async (key: bigint | number): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("arc200ToAsaMap", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): Arc200BridgeComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a optInToAsa(uint64)void method call against the ARC200Bridge contract
       */
      optInToAsa(params: CallParams<Arc200BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc200BridgeArgs['tuple']['optInToAsa(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToAsa(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a asaToArc200(axfer,address)uint64 method call against the ARC200Bridge contract
       */
      asaToArc200(params: CallParams<Arc200BridgeArgs['obj']['asaToArc200(axfer,address)uint64'] | Arc200BridgeArgs['tuple']['asaToArc200(axfer,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.asaToArc200(params)))
        resultMappers.push((v) => client.decodeReturnValue('asaToArc200(axfer,address)uint64', v))
        return this
      },
      /**
       * Add a arc200ToAsa(uint64,uint64,address)uint64 method call against the ARC200Bridge contract
       */
      arc200ToAsa(params: CallParams<Arc200BridgeArgs['obj']['arc200ToAsa(uint64,uint64,address)uint64'] | Arc200BridgeArgs['tuple']['arc200ToAsa(uint64,uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200ToAsa(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200ToAsa(uint64,uint64,address)uint64', v))
        return this
      },
      /**
       * Add a clear state call to the ARC200Bridge contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Arc200BridgeComposer
  }
}
export type Arc200BridgeComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the optInToAsa(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsa(params?: CallParams<Arc200BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc200BridgeArgs['tuple']['optInToAsa(uint64)void']>): Arc200BridgeComposer<[...TReturns, Arc200BridgeReturns['optInToAsa(uint64)void'] | undefined]>

  /**
   * Calls the asaToArc200(axfer,address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  asaToArc200(params?: CallParams<Arc200BridgeArgs['obj']['asaToArc200(axfer,address)uint64'] | Arc200BridgeArgs['tuple']['asaToArc200(axfer,address)uint64']>): Arc200BridgeComposer<[...TReturns, Arc200BridgeReturns['asaToArc200(axfer,address)uint64'] | undefined]>

  /**
   * Calls the arc200ToAsa(uint64,uint64,address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200ToAsa(params?: CallParams<Arc200BridgeArgs['obj']['arc200ToAsa(uint64,uint64,address)uint64'] | Arc200BridgeArgs['tuple']['arc200ToAsa(uint64,uint64,address)uint64']>): Arc200BridgeComposer<[...TReturns, Arc200BridgeReturns['arc200ToAsa(uint64,uint64,address)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ARC200Bridge smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Arc200BridgeComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc200BridgeComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc200BridgeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Arc200BridgeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Arc200BridgeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Arc200BridgeComposerResults<TReturns>>
}
export type Arc200BridgeComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


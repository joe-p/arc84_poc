/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"DeclarationRegistry","desc":"","methods":[{"name":"declare","desc":"Declare the given ARC11550 asset for the given address. If an approval app has been defined for the address, that app is called to ensure the\ndeclaration is allowed. If an approval app has not be defined, the transaction sender must match the declaration address","args":[{"name":"addrApp","type":"(address,uint64,uint64)","struct":"AddressAsset"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"request","desc":"Declare the given ARC11550 asset for the given address. If an approval app has been added for the user, that app is called to ensure the\ndeclaration is allowed","args":[{"name":"addrApp","type":"(address,uint64,uint64)","struct":"AddressAsset"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"removeDeclaration","args":[{"name":"addrApp","type":"(address,uint64,uint64)","struct":"AddressAsset"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"removeRequest","args":[{"name":"addrApp","type":"(address,uint64,uint64)","struct":"AddressAsset"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"isRequested","args":[{"name":"addrApp","type":"(address,uint64,uint64)","struct":"AddressAsset"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]}},{"name":"isDeclared","args":[{"name":"addrApp","type":"(address,uint64,uint64)","struct":"AddressAsset"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]}},{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}}],"arcs":[4,56],"structs":{"AddressAsset":[{"name":"addr","type":"address"},{"name":"app","type":"uint64"},{"name":"id","type":"uint64"}]},"state":{"schema":{"global":{"bytes":0,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"declarations":{"keyType":"AddressAsset","valueType":"byte[0]"},"requests":{"keyType":"AddressAsset","valueType":"byte[0]","prefix":"cg=="},"approvalApps":{"keyType":"AddressAsset","valueType":"uint64","prefix":"YQ=="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/DeclarationRegistry.algo.ts:11","pc":[0]},{"teal":2,"source":"contracts/DeclarationRegistry.algo.ts:11","pc":[1,2,3,4,5]},{"teal":3,"source":"contracts/DeclarationRegistry.algo.ts:11","pc":[6,7,8,9,10,11,12,13,14,15,16,17,18,19]},{"teal":15,"source":"contracts/DeclarationRegistry.algo.ts:11","pc":[20,21]},{"teal":16,"source":"contracts/DeclarationRegistry.algo.ts:11","pc":[22]},{"teal":17,"source":"contracts/DeclarationRegistry.algo.ts:11","pc":[23,24]},{"teal":18,"source":"contracts/DeclarationRegistry.algo.ts:11","pc":[25]},{"teal":19,"source":"contracts/DeclarationRegistry.algo.ts:11","pc":[26,27]},{"teal":20,"source":"contracts/DeclarationRegistry.algo.ts:11","pc":[28]},{"teal":21,"source":"contracts/DeclarationRegistry.algo.ts:11","pc":[29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54]},{"teal":25,"source":"contracts/DeclarationRegistry.algo.ts:11","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[55]},{"teal":30,"source":"contracts/DeclarationRegistry.algo.ts:25","pc":[56,57,58]},{"teal":31,"source":"contracts/DeclarationRegistry.algo.ts:25","pc":[59]},{"teal":32,"source":"contracts/DeclarationRegistry.algo.ts:25","pc":[60]},{"teal":33,"source":"contracts/DeclarationRegistry.algo.ts:25","pc":[61]},{"teal":34,"source":"contracts/DeclarationRegistry.algo.ts:25","pc":[62]},{"teal":37,"source":"contracts/DeclarationRegistry.algo.ts:25","errorMessage":"argument 0 (addrApp) for declare must be a (address,uint64,uint64)","pc":[63]},{"teal":40,"source":"contracts/DeclarationRegistry.algo.ts:25","pc":[64,65,66]},{"teal":41,"source":"contracts/DeclarationRegistry.algo.ts:25","pc":[67]},{"teal":42,"source":"contracts/DeclarationRegistry.algo.ts:25","pc":[68]},{"teal":49,"source":"contracts/DeclarationRegistry.algo.ts:25","pc":[69,70,71]},{"teal":54,"source":"contracts/DeclarationRegistry.algo.ts:26","pc":[72,73]},{"teal":55,"source":"contracts/DeclarationRegistry.algo.ts:26","pc":[74]},{"teal":56,"source":"contracts/DeclarationRegistry.algo.ts:26","pc":[75]},{"teal":57,"source":"contracts/DeclarationRegistry.algo.ts:26","pc":[76]},{"teal":58,"source":"contracts/DeclarationRegistry.algo.ts:26","pc":[77,78,79]},{"teal":63,"source":"contracts/DeclarationRegistry.algo.ts:27","pc":[80]},{"teal":69,"source":"contracts/DeclarationRegistry.algo.ts:30","pc":[81]},{"teal":70,"source":"contracts/DeclarationRegistry.algo.ts:30","pc":[82,83]},{"teal":71,"source":"contracts/DeclarationRegistry.algo.ts:30","pc":[84]},{"teal":72,"source":"contracts/DeclarationRegistry.algo.ts:30","pc":[85]},{"teal":73,"source":"contracts/DeclarationRegistry.algo.ts:30","pc":[86]},{"teal":74,"source":"contracts/DeclarationRegistry.algo.ts:30","pc":[87]},{"teal":75,"source":"contracts/DeclarationRegistry.algo.ts:30","pc":[88,89,90]},{"teal":78,"source":"contracts/DeclarationRegistry.algo.ts:30","pc":[91,92,93]},{"teal":83,"source":"contracts/DeclarationRegistry.algo.ts:33","pc":[94,95]},{"teal":84,"source":"contracts/DeclarationRegistry.algo.ts:33","pc":[96,97]},{"teal":85,"source":"contracts/DeclarationRegistry.algo.ts:33","pc":[98,99,100]},{"teal":86,"source":"contracts/DeclarationRegistry.algo.ts:33","pc":[101]},{"teal":87,"source":"contracts/DeclarationRegistry.algo.ts:33","pc":[102]},{"teal":92,"source":"contracts/DeclarationRegistry.algo.ts:36","pc":[103,104]},{"teal":93,"source":"contracts/DeclarationRegistry.algo.ts:36","pc":[105,106]},{"teal":94,"source":"contracts/DeclarationRegistry.algo.ts:36","pc":[107]},{"teal":95,"source":"contracts/DeclarationRegistry.algo.ts:25","pc":[108]},{"teal":100,"source":"contracts/DeclarationRegistry.algo.ts:41","pc":[109,110,111]},{"teal":101,"source":"contracts/DeclarationRegistry.algo.ts:41","pc":[112]},{"teal":102,"source":"contracts/DeclarationRegistry.algo.ts:41","pc":[113]},{"teal":103,"source":"contracts/DeclarationRegistry.algo.ts:41","pc":[114]},{"teal":104,"source":"contracts/DeclarationRegistry.algo.ts:41","pc":[115]},{"teal":107,"source":"contracts/DeclarationRegistry.algo.ts:41","errorMessage":"argument 0 (addrApp) for request must be a (address,uint64,uint64)","pc":[116]},{"teal":110,"source":"contracts/DeclarationRegistry.algo.ts:41","pc":[117,118,119]},{"teal":111,"source":"contracts/DeclarationRegistry.algo.ts:41","pc":[120]},{"teal":112,"source":"contracts/DeclarationRegistry.algo.ts:41","pc":[121]},{"teal":119,"source":"contracts/DeclarationRegistry.algo.ts:41","pc":[122,123,124]},{"teal":124,"source":"contracts/DeclarationRegistry.algo.ts:42","pc":[125]},{"teal":125,"source":"contracts/DeclarationRegistry.algo.ts:42","pc":[126,127]},{"teal":126,"source":"contracts/DeclarationRegistry.algo.ts:42","pc":[128]},{"teal":127,"source":"contracts/DeclarationRegistry.algo.ts:42","pc":[129]},{"teal":128,"source":"contracts/DeclarationRegistry.algo.ts:42","pc":[130]},{"teal":129,"source":"contracts/DeclarationRegistry.algo.ts:42","pc":[131]},{"teal":130,"source":"contracts/DeclarationRegistry.algo.ts:42","pc":[132,133,134]},{"teal":135,"source":"contracts/DeclarationRegistry.algo.ts:43","pc":[135]},{"teal":141,"source":"contracts/DeclarationRegistry.algo.ts:46","pc":[136]},{"teal":142,"source":"contracts/DeclarationRegistry.algo.ts:46","pc":[137,138]},{"teal":143,"source":"contracts/DeclarationRegistry.algo.ts:46","pc":[139]},{"teal":144,"source":"contracts/DeclarationRegistry.algo.ts:46","pc":[140]},{"teal":145,"source":"contracts/DeclarationRegistry.algo.ts:46","pc":[141]},{"teal":146,"source":"contracts/DeclarationRegistry.algo.ts:46","pc":[142]},{"teal":147,"source":"contracts/DeclarationRegistry.algo.ts:46","pc":[143,144,145]},{"teal":153,"source":"contracts/DeclarationRegistry.algo.ts:50","pc":[146]},{"teal":154,"source":"contracts/DeclarationRegistry.algo.ts:50","pc":[147,148]},{"teal":155,"source":"contracts/DeclarationRegistry.algo.ts:50","pc":[149]},{"teal":156,"source":"contracts/DeclarationRegistry.algo.ts:50","pc":[150,151]},{"teal":157,"source":"contracts/DeclarationRegistry.algo.ts:50","pc":[152]},{"teal":158,"source":"contracts/DeclarationRegistry.algo.ts:41","pc":[153]},{"teal":163,"source":"contracts/DeclarationRegistry.algo.ts:53","pc":[154,155,156]},{"teal":164,"source":"contracts/DeclarationRegistry.algo.ts:53","pc":[157]},{"teal":165,"source":"contracts/DeclarationRegistry.algo.ts:53","pc":[158]},{"teal":166,"source":"contracts/DeclarationRegistry.algo.ts:53","pc":[159]},{"teal":167,"source":"contracts/DeclarationRegistry.algo.ts:53","pc":[160]},{"teal":170,"source":"contracts/DeclarationRegistry.algo.ts:53","errorMessage":"argument 0 (addrApp) for removeDeclaration must be a (address,uint64,uint64)","pc":[161]},{"teal":173,"source":"contracts/DeclarationRegistry.algo.ts:53","pc":[162,163,164]},{"teal":174,"source":"contracts/DeclarationRegistry.algo.ts:53","pc":[165]},{"teal":175,"source":"contracts/DeclarationRegistry.algo.ts:53","pc":[166]},{"teal":179,"source":"contracts/DeclarationRegistry.algo.ts:53","pc":[167,168,169]},{"teal":184,"source":"contracts/DeclarationRegistry.algo.ts:54","pc":[170]},{"teal":185,"source":"contracts/DeclarationRegistry.algo.ts:54","pc":[171,172]},{"teal":186,"source":"contracts/DeclarationRegistry.algo.ts:54","pc":[173]},{"teal":187,"source":"contracts/DeclarationRegistry.algo.ts:54","pc":[174]},{"teal":188,"source":"contracts/DeclarationRegistry.algo.ts:54","pc":[175]},{"teal":189,"source":"contracts/DeclarationRegistry.algo.ts:54","pc":[176]},{"teal":190,"source":"contracts/DeclarationRegistry.algo.ts:54","pc":[177,178,179]},{"teal":193,"source":"contracts/DeclarationRegistry.algo.ts:54","pc":[180,181,182]},{"teal":198,"source":"contracts/DeclarationRegistry.algo.ts:57","pc":[183,184]},{"teal":199,"source":"contracts/DeclarationRegistry.algo.ts:57","pc":[185,186]},{"teal":200,"source":"contracts/DeclarationRegistry.algo.ts:57","pc":[187,188,189]},{"teal":201,"source":"contracts/DeclarationRegistry.algo.ts:57","pc":[190]},{"teal":202,"source":"contracts/DeclarationRegistry.algo.ts:57","pc":[191]},{"teal":207,"source":"contracts/DeclarationRegistry.algo.ts:60","pc":[192,193]},{"teal":208,"source":"contracts/DeclarationRegistry.algo.ts:60","pc":[194]},{"teal":209,"source":"contracts/DeclarationRegistry.algo.ts:53","pc":[195]},{"teal":214,"source":"contracts/DeclarationRegistry.algo.ts:63","pc":[196,197,198]},{"teal":215,"source":"contracts/DeclarationRegistry.algo.ts:63","pc":[199]},{"teal":216,"source":"contracts/DeclarationRegistry.algo.ts:63","pc":[200]},{"teal":217,"source":"contracts/DeclarationRegistry.algo.ts:63","pc":[201]},{"teal":218,"source":"contracts/DeclarationRegistry.algo.ts:63","pc":[202]},{"teal":221,"source":"contracts/DeclarationRegistry.algo.ts:63","errorMessage":"argument 0 (addrApp) for removeRequest must be a (address,uint64,uint64)","pc":[203]},{"teal":224,"source":"contracts/DeclarationRegistry.algo.ts:63","pc":[204,205,206]},{"teal":225,"source":"contracts/DeclarationRegistry.algo.ts:63","pc":[207]},{"teal":226,"source":"contracts/DeclarationRegistry.algo.ts:63","pc":[208]},{"teal":230,"source":"contracts/DeclarationRegistry.algo.ts:63","pc":[209,210,211]},{"teal":235,"source":"contracts/DeclarationRegistry.algo.ts:64","pc":[212]},{"teal":236,"source":"contracts/DeclarationRegistry.algo.ts:64","pc":[213,214]},{"teal":237,"source":"contracts/DeclarationRegistry.algo.ts:64","pc":[215]},{"teal":238,"source":"contracts/DeclarationRegistry.algo.ts:64","pc":[216]},{"teal":239,"source":"contracts/DeclarationRegistry.algo.ts:64","pc":[217]},{"teal":240,"source":"contracts/DeclarationRegistry.algo.ts:64","pc":[218]},{"teal":241,"source":"contracts/DeclarationRegistry.algo.ts:64","pc":[219,220,221]},{"teal":244,"source":"contracts/DeclarationRegistry.algo.ts:64","pc":[222,223,224]},{"teal":249,"source":"contracts/DeclarationRegistry.algo.ts:67","pc":[225,226]},{"teal":250,"source":"contracts/DeclarationRegistry.algo.ts:67","pc":[227,228]},{"teal":251,"source":"contracts/DeclarationRegistry.algo.ts:67","pc":[229,230,231]},{"teal":252,"source":"contracts/DeclarationRegistry.algo.ts:67","pc":[232]},{"teal":253,"source":"contracts/DeclarationRegistry.algo.ts:67","pc":[233]},{"teal":258,"source":"contracts/DeclarationRegistry.algo.ts:70","pc":[234]},{"teal":259,"source":"contracts/DeclarationRegistry.algo.ts:70","pc":[235,236]},{"teal":260,"source":"contracts/DeclarationRegistry.algo.ts:70","pc":[237]},{"teal":261,"source":"contracts/DeclarationRegistry.algo.ts:70","pc":[238]},{"teal":262,"source":"contracts/DeclarationRegistry.algo.ts:63","pc":[239]},{"teal":267,"source":"contracts/DeclarationRegistry.algo.ts:73","pc":[240]},{"teal":270,"source":"contracts/DeclarationRegistry.algo.ts:73","pc":[241,242,243]},{"teal":271,"source":"contracts/DeclarationRegistry.algo.ts:73","pc":[244]},{"teal":272,"source":"contracts/DeclarationRegistry.algo.ts:73","pc":[245]},{"teal":273,"source":"contracts/DeclarationRegistry.algo.ts:73","pc":[246]},{"teal":274,"source":"contracts/DeclarationRegistry.algo.ts:73","pc":[247]},{"teal":277,"source":"contracts/DeclarationRegistry.algo.ts:73","errorMessage":"argument 0 (addrApp) for isRequested must be a (address,uint64,uint64)","pc":[248]},{"teal":280,"source":"contracts/DeclarationRegistry.algo.ts:73","pc":[249,250,251]},{"teal":281,"source":"contracts/DeclarationRegistry.algo.ts:73","pc":[252]},{"teal":282,"source":"contracts/DeclarationRegistry.algo.ts:73","pc":[253]},{"teal":283,"source":"contracts/DeclarationRegistry.algo.ts:73","pc":[254,255]},{"teal":284,"source":"contracts/DeclarationRegistry.algo.ts:73","pc":[256]},{"teal":285,"source":"contracts/DeclarationRegistry.algo.ts:73","pc":[257]},{"teal":286,"source":"contracts/DeclarationRegistry.algo.ts:73","pc":[258]},{"teal":287,"source":"contracts/DeclarationRegistry.algo.ts:73","pc":[259]},{"teal":288,"source":"contracts/DeclarationRegistry.algo.ts:73","pc":[260]},{"teal":292,"source":"contracts/DeclarationRegistry.algo.ts:73","pc":[261,262,263]},{"teal":296,"source":"contracts/DeclarationRegistry.algo.ts:74","pc":[264]},{"teal":297,"source":"contracts/DeclarationRegistry.algo.ts:74","pc":[265,266]},{"teal":298,"source":"contracts/DeclarationRegistry.algo.ts:74","pc":[267]},{"teal":299,"source":"contracts/DeclarationRegistry.algo.ts:74","pc":[268]},{"teal":300,"source":"contracts/DeclarationRegistry.algo.ts:74","pc":[269]},{"teal":301,"source":"contracts/DeclarationRegistry.algo.ts:74","pc":[270]},{"teal":302,"source":"contracts/DeclarationRegistry.algo.ts:73","pc":[271]},{"teal":307,"source":"contracts/DeclarationRegistry.algo.ts:77","pc":[272]},{"teal":310,"source":"contracts/DeclarationRegistry.algo.ts:77","pc":[273,274,275]},{"teal":311,"source":"contracts/DeclarationRegistry.algo.ts:77","pc":[276]},{"teal":312,"source":"contracts/DeclarationRegistry.algo.ts:77","pc":[277]},{"teal":313,"source":"contracts/DeclarationRegistry.algo.ts:77","pc":[278]},{"teal":314,"source":"contracts/DeclarationRegistry.algo.ts:77","pc":[279]},{"teal":317,"source":"contracts/DeclarationRegistry.algo.ts:77","errorMessage":"argument 0 (addrApp) for isDeclared must be a (address,uint64,uint64)","pc":[280]},{"teal":320,"source":"contracts/DeclarationRegistry.algo.ts:77","pc":[281,282,283]},{"teal":321,"source":"contracts/DeclarationRegistry.algo.ts:77","pc":[284]},{"teal":322,"source":"contracts/DeclarationRegistry.algo.ts:77","pc":[285]},{"teal":323,"source":"contracts/DeclarationRegistry.algo.ts:77","pc":[286,287]},{"teal":324,"source":"contracts/DeclarationRegistry.algo.ts:77","pc":[288]},{"teal":325,"source":"contracts/DeclarationRegistry.algo.ts:77","pc":[289]},{"teal":326,"source":"contracts/DeclarationRegistry.algo.ts:77","pc":[290]},{"teal":327,"source":"contracts/DeclarationRegistry.algo.ts:77","pc":[291]},{"teal":328,"source":"contracts/DeclarationRegistry.algo.ts:77","pc":[292]},{"teal":332,"source":"contracts/DeclarationRegistry.algo.ts:77","pc":[293,294,295]},{"teal":336,"source":"contracts/DeclarationRegistry.algo.ts:78","pc":[296]},{"teal":337,"source":"contracts/DeclarationRegistry.algo.ts:78","pc":[297,298]},{"teal":338,"source":"contracts/DeclarationRegistry.algo.ts:78","pc":[299]},{"teal":339,"source":"contracts/DeclarationRegistry.algo.ts:78","pc":[300]},{"teal":340,"source":"contracts/DeclarationRegistry.algo.ts:78","pc":[301]},{"teal":341,"source":"contracts/DeclarationRegistry.algo.ts:78","pc":[302]},{"teal":342,"source":"contracts/DeclarationRegistry.algo.ts:77","pc":[303]},{"teal":345,"source":"contracts/DeclarationRegistry.algo.ts:11","pc":[304]},{"teal":346,"source":"contracts/DeclarationRegistry.algo.ts:11","pc":[305]},{"teal":349,"source":"contracts/DeclarationRegistry.algo.ts:11","pc":[306,307,308,309,310,311]},{"teal":350,"source":"contracts/DeclarationRegistry.algo.ts:11","pc":[312,313,314]},{"teal":351,"source":"contracts/DeclarationRegistry.algo.ts:11","pc":[315,316,317,318]},{"teal":354,"source":"contracts/DeclarationRegistry.algo.ts:11","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[319]},{"teal":357,"source":"contracts/DeclarationRegistry.algo.ts:11","pc":[320,321,322,323,324,325]},{"teal":358,"source":"contracts/DeclarationRegistry.algo.ts:11","pc":[326,327,328,329,330,331]},{"teal":359,"source":"contracts/DeclarationRegistry.algo.ts:11","pc":[332,333,334,335,336,337]},{"teal":360,"source":"contracts/DeclarationRegistry.algo.ts:11","pc":[338,339,340,341,342,343]},{"teal":361,"source":"contracts/DeclarationRegistry.algo.ts:11","pc":[344,345,346,347,348,349]},{"teal":362,"source":"contracts/DeclarationRegistry.algo.ts:11","pc":[350,351,352,353,354,355]},{"teal":363,"source":"contracts/DeclarationRegistry.algo.ts:11","pc":[356,357,358]},{"teal":364,"source":"contracts/DeclarationRegistry.algo.ts:11","pc":[359,360,361,362,363,364,365,366,367,368,369,370,371,372]},{"teal":367,"source":"contracts/DeclarationRegistry.algo.ts:11","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[373]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiADATAAJgUBcgFhBBUffHUBAAAxGBSBBgsxGQiNDAEJAAAAAAAAAAAAAAD7AAAAAAAAAAAAAAA2GgFJFSMSRIgAAiJDigEAi/+9TEhBAAGJKYv/UL1MSEEAA0IACTEAi/9XACASRIv/JwS/iTYaAUkVIxJEiAACIkOKAQAoi/9QvUxIQQABiSmL/1C9TEhBAAAoi/9QJwS/iTYaAUkVIxJEiAACIkOKAQApi/9QvUxIQQADQgAJMQCL/1cAIBJEi/+8iTYaAUkVIxJEiAACIkOKAQApi/9QvUxIQQADQgAJMQCL/1cAIBJEKIv/ULyJKjYaAUkVIxJEiAAJKyRPAlRQsCJDigEBKIv/UL1MSIkqNhoBSRUjEkSIAAkrJE8CVFCwIkOKAQEoi/9QvUxIiSJDgAS4RHs2NhoAjgH/8QCABEwBvcGABLmPng6ABENtew6ABJo8DvuABGWCgRaABBkkLf42GgCOBv7D/vj/Jf9P/3v/mwA=","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type AddressAsset = {
  addr: string,
  app: bigint,
  id: bigint
}


/**
 * Converts the ABI tuple representation of a AddressAsset to the struct representation
 */
export function AddressAssetFromTuple(abiTuple: [string, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AddressAsset, APP_SPEC.structs) as AddressAsset
}

/**
 * The argument types for the DeclarationRegistry contract
 */
export type DeclarationRegistryArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'declare((address,uint64,uint64))void': {
      addrApp: AddressAsset
    }
    'request((address,uint64,uint64))void': {
      addrApp: AddressAsset
    }
    'removeDeclaration((address,uint64,uint64))void': {
      addrApp: AddressAsset
    }
    'removeRequest((address,uint64,uint64))void': {
      addrApp: AddressAsset
    }
    'isRequested((address,uint64,uint64))bool': {
      addrApp: AddressAsset
    }
    'isDeclared((address,uint64,uint64))bool': {
      addrApp: AddressAsset
    }
    'createApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'declare((address,uint64,uint64))void': [addrApp: AddressAsset]
    'request((address,uint64,uint64))void': [addrApp: AddressAsset]
    'removeDeclaration((address,uint64,uint64))void': [addrApp: AddressAsset]
    'removeRequest((address,uint64,uint64))void': [addrApp: AddressAsset]
    'isRequested((address,uint64,uint64))bool': [addrApp: AddressAsset]
    'isDeclared((address,uint64,uint64))bool': [addrApp: AddressAsset]
    'createApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type DeclarationRegistryReturns = {
  'declare((address,uint64,uint64))void': void
  'request((address,uint64,uint64))void': void
  'removeDeclaration((address,uint64,uint64))void': void
  'removeRequest((address,uint64,uint64))void': void
  'isRequested((address,uint64,uint64))bool': boolean
  'isDeclared((address,uint64,uint64))bool': boolean
  'createApplication()void': void
}

/**
 * Defines the types of available calls and state of the DeclarationRegistry smart contract.
 */
export type DeclarationRegistryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'declare((address,uint64,uint64))void' | 'declare', {
      argsObj: DeclarationRegistryArgs['obj']['declare((address,uint64,uint64))void']
      argsTuple: DeclarationRegistryArgs['tuple']['declare((address,uint64,uint64))void']
      returns: DeclarationRegistryReturns['declare((address,uint64,uint64))void']
    }>
    & Record<'request((address,uint64,uint64))void' | 'request', {
      argsObj: DeclarationRegistryArgs['obj']['request((address,uint64,uint64))void']
      argsTuple: DeclarationRegistryArgs['tuple']['request((address,uint64,uint64))void']
      returns: DeclarationRegistryReturns['request((address,uint64,uint64))void']
    }>
    & Record<'removeDeclaration((address,uint64,uint64))void' | 'removeDeclaration', {
      argsObj: DeclarationRegistryArgs['obj']['removeDeclaration((address,uint64,uint64))void']
      argsTuple: DeclarationRegistryArgs['tuple']['removeDeclaration((address,uint64,uint64))void']
      returns: DeclarationRegistryReturns['removeDeclaration((address,uint64,uint64))void']
    }>
    & Record<'removeRequest((address,uint64,uint64))void' | 'removeRequest', {
      argsObj: DeclarationRegistryArgs['obj']['removeRequest((address,uint64,uint64))void']
      argsTuple: DeclarationRegistryArgs['tuple']['removeRequest((address,uint64,uint64))void']
      returns: DeclarationRegistryReturns['removeRequest((address,uint64,uint64))void']
    }>
    & Record<'isRequested((address,uint64,uint64))bool' | 'isRequested', {
      argsObj: DeclarationRegistryArgs['obj']['isRequested((address,uint64,uint64))bool']
      argsTuple: DeclarationRegistryArgs['tuple']['isRequested((address,uint64,uint64))bool']
      returns: DeclarationRegistryReturns['isRequested((address,uint64,uint64))bool']
    }>
    & Record<'isDeclared((address,uint64,uint64))bool' | 'isDeclared', {
      argsObj: DeclarationRegistryArgs['obj']['isDeclared((address,uint64,uint64))bool']
      argsTuple: DeclarationRegistryArgs['tuple']['isDeclared((address,uint64,uint64))bool']
      returns: DeclarationRegistryReturns['isDeclared((address,uint64,uint64))bool']
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: DeclarationRegistryArgs['obj']['createApplication()void']
      argsTuple: DeclarationRegistryArgs['tuple']['createApplication()void']
      returns: DeclarationRegistryReturns['createApplication()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    box: {
      keys: {}
      maps: {
        declarations: Map<AddressAsset, Uint8Array>
        requests: Map<AddressAsset, Uint8Array>
        approvalApps: Map<AddressAsset, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type DeclarationRegistrySignatures = keyof DeclarationRegistryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type DeclarationRegistryNonVoidMethodSignatures = keyof DeclarationRegistryTypes['methods'] extends infer T ? T extends keyof DeclarationRegistryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the DeclarationRegistry smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends DeclarationRegistrySignatures> = DeclarationRegistryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DeclarationRegistry smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DeclarationRegistrySignatures> = DeclarationRegistryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = DeclarationRegistryTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type DeclarationRegistryCreateCallParams =
  | Expand<CallParams<DeclarationRegistryArgs['obj']['createApplication()void'] | DeclarationRegistryArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<DeclarationRegistryArgs['obj']['createApplication()void'] | DeclarationRegistryArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type DeclarationRegistryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: DeclarationRegistryCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the DeclarationRegistry smart contract
 */
export abstract class DeclarationRegistryParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends DeclarationRegistryCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return DeclarationRegistryParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the DeclarationRegistry smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<DeclarationRegistryArgs['obj']['createApplication()void'] | DeclarationRegistryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the declare((address,uint64,uint64))void ABI method
   *
  * Declare the given ARC11550 asset for the given address. If an approval app has been defined for the address, that app is called to ensure the
  declaration is allowed. If an approval app has not be defined, the transaction sender must match the declaration address

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static declare(params: CallParams<DeclarationRegistryArgs['obj']['declare((address,uint64,uint64))void'] | DeclarationRegistryArgs['tuple']['declare((address,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'declare((address,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.addrApp],
    }
  }
  /**
   * Constructs a no op call for the request((address,uint64,uint64))void ABI method
   *
  * Declare the given ARC11550 asset for the given address. If an approval app has been added for the user, that app is called to ensure the
  declaration is allowed

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static request(params: CallParams<DeclarationRegistryArgs['obj']['request((address,uint64,uint64))void'] | DeclarationRegistryArgs['tuple']['request((address,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'request((address,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.addrApp],
    }
  }
  /**
   * Constructs a no op call for the removeDeclaration((address,uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeDeclaration(params: CallParams<DeclarationRegistryArgs['obj']['removeDeclaration((address,uint64,uint64))void'] | DeclarationRegistryArgs['tuple']['removeDeclaration((address,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removeDeclaration((address,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.addrApp],
    }
  }
  /**
   * Constructs a no op call for the removeRequest((address,uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeRequest(params: CallParams<DeclarationRegistryArgs['obj']['removeRequest((address,uint64,uint64))void'] | DeclarationRegistryArgs['tuple']['removeRequest((address,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removeRequest((address,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.addrApp],
    }
  }
  /**
   * Constructs a no op call for the isRequested((address,uint64,uint64))bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isRequested(params: CallParams<DeclarationRegistryArgs['obj']['isRequested((address,uint64,uint64))bool'] | DeclarationRegistryArgs['tuple']['isRequested((address,uint64,uint64))bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'isRequested((address,uint64,uint64))bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.addrApp],
    }
  }
  /**
   * Constructs a no op call for the isDeclared((address,uint64,uint64))bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static isDeclared(params: CallParams<DeclarationRegistryArgs['obj']['isDeclared((address,uint64,uint64))bool'] | DeclarationRegistryArgs['tuple']['isDeclared((address,uint64,uint64))bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'isDeclared((address,uint64,uint64))bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.addrApp],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the DeclarationRegistry smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class DeclarationRegistryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `DeclarationRegistryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new DeclarationRegistryClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new DeclarationRegistryClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the DeclarationRegistry smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: DeclarationRegistryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? DeclarationRegistryParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (DeclarationRegistryCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new DeclarationRegistryClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DeclarationRegistry smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<DeclarationRegistryArgs['obj']['createApplication()void'] | DeclarationRegistryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(DeclarationRegistryParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DeclarationRegistry smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<DeclarationRegistryArgs['obj']['createApplication()void'] | DeclarationRegistryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(DeclarationRegistryParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the DeclarationRegistry smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<DeclarationRegistryArgs['obj']['createApplication()void'] | DeclarationRegistryArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(DeclarationRegistryParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | DeclarationRegistryReturns['createApplication()void']) }, appClient: new DeclarationRegistryClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the DeclarationRegistry smart contract
 */
export class DeclarationRegistryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `DeclarationRegistryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the DeclarationRegistry app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `DeclarationRegistryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends DeclarationRegistryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `DeclarationRegistryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<DeclarationRegistryClient> {
    return new DeclarationRegistryClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `DeclarationRegistryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<DeclarationRegistryClient> {
    return new DeclarationRegistryClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the DeclarationRegistry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the DeclarationRegistry smart contract using the `declare((address,uint64,uint64))void` ABI method.
     *
    * Declare the given ARC11550 asset for the given address. If an approval app has been defined for the address, that app is called to ensure the
    declaration is allowed. If an approval app has not be defined, the transaction sender must match the declaration address

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    declare: (params: CallParams<DeclarationRegistryArgs['obj']['declare((address,uint64,uint64))void'] | DeclarationRegistryArgs['tuple']['declare((address,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DeclarationRegistryParamsFactory.declare(params))
    },

    /**
     * Makes a call to the DeclarationRegistry smart contract using the `request((address,uint64,uint64))void` ABI method.
     *
    * Declare the given ARC11550 asset for the given address. If an approval app has been added for the user, that app is called to ensure the
    declaration is allowed

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    request: (params: CallParams<DeclarationRegistryArgs['obj']['request((address,uint64,uint64))void'] | DeclarationRegistryArgs['tuple']['request((address,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DeclarationRegistryParamsFactory.request(params))
    },

    /**
     * Makes a call to the DeclarationRegistry smart contract using the `removeDeclaration((address,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeDeclaration: (params: CallParams<DeclarationRegistryArgs['obj']['removeDeclaration((address,uint64,uint64))void'] | DeclarationRegistryArgs['tuple']['removeDeclaration((address,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DeclarationRegistryParamsFactory.removeDeclaration(params))
    },

    /**
     * Makes a call to the DeclarationRegistry smart contract using the `removeRequest((address,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeRequest: (params: CallParams<DeclarationRegistryArgs['obj']['removeRequest((address,uint64,uint64))void'] | DeclarationRegistryArgs['tuple']['removeRequest((address,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DeclarationRegistryParamsFactory.removeRequest(params))
    },

    /**
     * Makes a call to the DeclarationRegistry smart contract using the `isRequested((address,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    isRequested: (params: CallParams<DeclarationRegistryArgs['obj']['isRequested((address,uint64,uint64))bool'] | DeclarationRegistryArgs['tuple']['isRequested((address,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DeclarationRegistryParamsFactory.isRequested(params))
    },

    /**
     * Makes a call to the DeclarationRegistry smart contract using the `isDeclared((address,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    isDeclared: (params: CallParams<DeclarationRegistryArgs['obj']['isDeclared((address,uint64,uint64))bool'] | DeclarationRegistryArgs['tuple']['isDeclared((address,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(DeclarationRegistryParamsFactory.isDeclared(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the DeclarationRegistry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the DeclarationRegistry smart contract using the `declare((address,uint64,uint64))void` ABI method.
     *
    * Declare the given ARC11550 asset for the given address. If an approval app has been defined for the address, that app is called to ensure the
    declaration is allowed. If an approval app has not be defined, the transaction sender must match the declaration address

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    declare: (params: CallParams<DeclarationRegistryArgs['obj']['declare((address,uint64,uint64))void'] | DeclarationRegistryArgs['tuple']['declare((address,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DeclarationRegistryParamsFactory.declare(params))
    },

    /**
     * Makes a call to the DeclarationRegistry smart contract using the `request((address,uint64,uint64))void` ABI method.
     *
    * Declare the given ARC11550 asset for the given address. If an approval app has been added for the user, that app is called to ensure the
    declaration is allowed

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    request: (params: CallParams<DeclarationRegistryArgs['obj']['request((address,uint64,uint64))void'] | DeclarationRegistryArgs['tuple']['request((address,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DeclarationRegistryParamsFactory.request(params))
    },

    /**
     * Makes a call to the DeclarationRegistry smart contract using the `removeDeclaration((address,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeDeclaration: (params: CallParams<DeclarationRegistryArgs['obj']['removeDeclaration((address,uint64,uint64))void'] | DeclarationRegistryArgs['tuple']['removeDeclaration((address,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DeclarationRegistryParamsFactory.removeDeclaration(params))
    },

    /**
     * Makes a call to the DeclarationRegistry smart contract using the `removeRequest((address,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeRequest: (params: CallParams<DeclarationRegistryArgs['obj']['removeRequest((address,uint64,uint64))void'] | DeclarationRegistryArgs['tuple']['removeRequest((address,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DeclarationRegistryParamsFactory.removeRequest(params))
    },

    /**
     * Makes a call to the DeclarationRegistry smart contract using the `isRequested((address,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    isRequested: (params: CallParams<DeclarationRegistryArgs['obj']['isRequested((address,uint64,uint64))bool'] | DeclarationRegistryArgs['tuple']['isRequested((address,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DeclarationRegistryParamsFactory.isRequested(params))
    },

    /**
     * Makes a call to the DeclarationRegistry smart contract using the `isDeclared((address,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    isDeclared: (params: CallParams<DeclarationRegistryArgs['obj']['isDeclared((address,uint64,uint64))bool'] | DeclarationRegistryArgs['tuple']['isDeclared((address,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(DeclarationRegistryParamsFactory.isDeclared(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the DeclarationRegistry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the DeclarationRegistry smart contract using the `declare((address,uint64,uint64))void` ABI method.
     *
    * Declare the given ARC11550 asset for the given address. If an approval app has been defined for the address, that app is called to ensure the
    declaration is allowed. If an approval app has not be defined, the transaction sender must match the declaration address

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    declare: async (params: CallParams<DeclarationRegistryArgs['obj']['declare((address,uint64,uint64))void'] | DeclarationRegistryArgs['tuple']['declare((address,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DeclarationRegistryParamsFactory.declare(params))
      return {...result, return: result.return as unknown as (undefined | DeclarationRegistryReturns['declare((address,uint64,uint64))void'])}
    },

    /**
     * Makes a call to the DeclarationRegistry smart contract using the `request((address,uint64,uint64))void` ABI method.
     *
    * Declare the given ARC11550 asset for the given address. If an approval app has been added for the user, that app is called to ensure the
    declaration is allowed

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    request: async (params: CallParams<DeclarationRegistryArgs['obj']['request((address,uint64,uint64))void'] | DeclarationRegistryArgs['tuple']['request((address,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DeclarationRegistryParamsFactory.request(params))
      return {...result, return: result.return as unknown as (undefined | DeclarationRegistryReturns['request((address,uint64,uint64))void'])}
    },

    /**
     * Makes a call to the DeclarationRegistry smart contract using the `removeDeclaration((address,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeDeclaration: async (params: CallParams<DeclarationRegistryArgs['obj']['removeDeclaration((address,uint64,uint64))void'] | DeclarationRegistryArgs['tuple']['removeDeclaration((address,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DeclarationRegistryParamsFactory.removeDeclaration(params))
      return {...result, return: result.return as unknown as (undefined | DeclarationRegistryReturns['removeDeclaration((address,uint64,uint64))void'])}
    },

    /**
     * Makes a call to the DeclarationRegistry smart contract using the `removeRequest((address,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeRequest: async (params: CallParams<DeclarationRegistryArgs['obj']['removeRequest((address,uint64,uint64))void'] | DeclarationRegistryArgs['tuple']['removeRequest((address,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DeclarationRegistryParamsFactory.removeRequest(params))
      return {...result, return: result.return as unknown as (undefined | DeclarationRegistryReturns['removeRequest((address,uint64,uint64))void'])}
    },

    /**
     * Makes a call to the DeclarationRegistry smart contract using the `isRequested((address,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    isRequested: async (params: CallParams<DeclarationRegistryArgs['obj']['isRequested((address,uint64,uint64))bool'] | DeclarationRegistryArgs['tuple']['isRequested((address,uint64,uint64))bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DeclarationRegistryParamsFactory.isRequested(params))
      return {...result, return: result.return as unknown as (undefined | DeclarationRegistryReturns['isRequested((address,uint64,uint64))bool'])}
    },

    /**
     * Makes a call to the DeclarationRegistry smart contract using the `isDeclared((address,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    isDeclared: async (params: CallParams<DeclarationRegistryArgs['obj']['isDeclared((address,uint64,uint64))bool'] | DeclarationRegistryArgs['tuple']['isDeclared((address,uint64,uint64))bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(DeclarationRegistryParamsFactory.isDeclared(params))
      return {...result, return: result.return as unknown as (undefined | DeclarationRegistryReturns['isDeclared((address,uint64,uint64))bool'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new DeclarationRegistryClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current DeclarationRegistry app
   */
  state = {
    /**
     * Methods to access box state for the current DeclarationRegistry app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the declarations map in box state
       */
      declarations: {
        /**
         * Get all current values of the declarations map in box state
         */
        getMap: async (): Promise<Map<AddressAsset, Uint8Array>> => { return (await this.appClient.state.box.getMap("declarations")) as Map<AddressAsset, Uint8Array> },
        /**
         * Get a current value of the declarations map by key from box state
         */
        value: async (key: AddressAsset): Promise<Uint8Array | undefined> => { return await this.appClient.state.box.getMapValue("declarations", key) as Uint8Array | undefined },
      },
      /**
       * Get values from the requests map in box state
       */
      requests: {
        /**
         * Get all current values of the requests map in box state
         */
        getMap: async (): Promise<Map<AddressAsset, Uint8Array>> => { return (await this.appClient.state.box.getMap("requests")) as Map<AddressAsset, Uint8Array> },
        /**
         * Get a current value of the requests map by key from box state
         */
        value: async (key: AddressAsset): Promise<Uint8Array | undefined> => { return await this.appClient.state.box.getMapValue("requests", key) as Uint8Array | undefined },
      },
      /**
       * Get values from the approvalApps map in box state
       */
      approvalApps: {
        /**
         * Get all current values of the approvalApps map in box state
         */
        getMap: async (): Promise<Map<AddressAsset, bigint>> => { return (await this.appClient.state.box.getMap("approvalApps")) as Map<AddressAsset, bigint> },
        /**
         * Get a current value of the approvalApps map by key from box state
         */
        value: async (key: AddressAsset): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("approvalApps", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): DeclarationRegistryComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a declare((address,uint64,uint64))void method call against the DeclarationRegistry contract
       */
      declare(params: CallParams<DeclarationRegistryArgs['obj']['declare((address,uint64,uint64))void'] | DeclarationRegistryArgs['tuple']['declare((address,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.declare(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a request((address,uint64,uint64))void method call against the DeclarationRegistry contract
       */
      request(params: CallParams<DeclarationRegistryArgs['obj']['request((address,uint64,uint64))void'] | DeclarationRegistryArgs['tuple']['request((address,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.request(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a removeDeclaration((address,uint64,uint64))void method call against the DeclarationRegistry contract
       */
      removeDeclaration(params: CallParams<DeclarationRegistryArgs['obj']['removeDeclaration((address,uint64,uint64))void'] | DeclarationRegistryArgs['tuple']['removeDeclaration((address,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeDeclaration(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a removeRequest((address,uint64,uint64))void method call against the DeclarationRegistry contract
       */
      removeRequest(params: CallParams<DeclarationRegistryArgs['obj']['removeRequest((address,uint64,uint64))void'] | DeclarationRegistryArgs['tuple']['removeRequest((address,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeRequest(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a isRequested((address,uint64,uint64))bool method call against the DeclarationRegistry contract
       */
      isRequested(params: CallParams<DeclarationRegistryArgs['obj']['isRequested((address,uint64,uint64))bool'] | DeclarationRegistryArgs['tuple']['isRequested((address,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isRequested(params)))
        resultMappers.push((v) => client.decodeReturnValue('isRequested((address,uint64,uint64))bool', v))
        return this
      },
      /**
       * Add a isDeclared((address,uint64,uint64))bool method call against the DeclarationRegistry contract
       */
      isDeclared(params: CallParams<DeclarationRegistryArgs['obj']['isDeclared((address,uint64,uint64))bool'] | DeclarationRegistryArgs['tuple']['isDeclared((address,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.isDeclared(params)))
        resultMappers.push((v) => client.decodeReturnValue('isDeclared((address,uint64,uint64))bool', v))
        return this
      },
      /**
       * Add a clear state call to the DeclarationRegistry contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as DeclarationRegistryComposer
  }
}
export type DeclarationRegistryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the declare((address,uint64,uint64))void ABI method.
   *
  * Declare the given ARC11550 asset for the given address. If an approval app has been defined for the address, that app is called to ensure the
  declaration is allowed. If an approval app has not be defined, the transaction sender must match the declaration address

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  declare(params?: CallParams<DeclarationRegistryArgs['obj']['declare((address,uint64,uint64))void'] | DeclarationRegistryArgs['tuple']['declare((address,uint64,uint64))void']>): DeclarationRegistryComposer<[...TReturns, DeclarationRegistryReturns['declare((address,uint64,uint64))void'] | undefined]>

  /**
   * Calls the request((address,uint64,uint64))void ABI method.
   *
  * Declare the given ARC11550 asset for the given address. If an approval app has been added for the user, that app is called to ensure the
  declaration is allowed

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  request(params?: CallParams<DeclarationRegistryArgs['obj']['request((address,uint64,uint64))void'] | DeclarationRegistryArgs['tuple']['request((address,uint64,uint64))void']>): DeclarationRegistryComposer<[...TReturns, DeclarationRegistryReturns['request((address,uint64,uint64))void'] | undefined]>

  /**
   * Calls the removeDeclaration((address,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeDeclaration(params?: CallParams<DeclarationRegistryArgs['obj']['removeDeclaration((address,uint64,uint64))void'] | DeclarationRegistryArgs['tuple']['removeDeclaration((address,uint64,uint64))void']>): DeclarationRegistryComposer<[...TReturns, DeclarationRegistryReturns['removeDeclaration((address,uint64,uint64))void'] | undefined]>

  /**
   * Calls the removeRequest((address,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeRequest(params?: CallParams<DeclarationRegistryArgs['obj']['removeRequest((address,uint64,uint64))void'] | DeclarationRegistryArgs['tuple']['removeRequest((address,uint64,uint64))void']>): DeclarationRegistryComposer<[...TReturns, DeclarationRegistryReturns['removeRequest((address,uint64,uint64))void'] | undefined]>

  /**
   * Calls the isRequested((address,uint64,uint64))bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isRequested(params?: CallParams<DeclarationRegistryArgs['obj']['isRequested((address,uint64,uint64))bool'] | DeclarationRegistryArgs['tuple']['isRequested((address,uint64,uint64))bool']>): DeclarationRegistryComposer<[...TReturns, DeclarationRegistryReturns['isRequested((address,uint64,uint64))bool'] | undefined]>

  /**
   * Calls the isDeclared((address,uint64,uint64))bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  isDeclared(params?: CallParams<DeclarationRegistryArgs['obj']['isDeclared((address,uint64,uint64))bool'] | DeclarationRegistryArgs['tuple']['isDeclared((address,uint64,uint64))bool']>): DeclarationRegistryComposer<[...TReturns, DeclarationRegistryReturns['isDeclared((address,uint64,uint64))bool'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the DeclarationRegistry smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): DeclarationRegistryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): DeclarationRegistryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<DeclarationRegistryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<DeclarationRegistryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<DeclarationRegistryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<DeclarationRegistryComposerResults<TReturns>>
}
export type DeclarationRegistryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


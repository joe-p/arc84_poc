/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ARC200","desc":"","methods":[{"name":"createApplication","args":[{"name":"name","type":"byte[32]"},{"name":"symbol","type":"byte[8]"},{"name":"decimals","type":"uint8"},{"name":"total","type":"uint256"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"arc200_name","args":[],"returns":{"type":"byte[32]"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc200_symbol","args":[],"returns":{"type":"byte[8]"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc200_decimals","args":[],"returns":{"type":"uint8"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc200_totalSupply","args":[],"returns":{"type":"uint256"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc200_balanceOf","args":[{"name":"account","type":"address"}],"returns":{"type":"uint256"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc200_transferFrom","args":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"amount","type":"uint256"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc200_transfer","args":[{"name":"to","type":"address"},{"name":"amount","type":"uint256"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc200_approve","args":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc200_allowance","args":[{"name":"owner","type":"address"},{"name":"sender","type":"address"}],"returns":{"type":"uint256"},"actions":{"create":[],"call":["NoOp"]}}],"events":[{"name":"arc200_Transfer","args":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"desc":""},{"name":"arc200_Approval","args":[{"name":"owner","type":"address"},{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"desc":""}],"arcs":[4,56],"structs":{"Approval":[{"name":"owner","type":"address"},{"name":"spender","type":"address"}]},"state":{"schema":{"global":{"bytes":4,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{"name":{"key":"bmFtZQ==","keyType":"AVMBytes","valueType":"byte[32]"},"symbol":{"key":"c3ltYm9s","keyType":"AVMBytes","valueType":"byte[8]"},"decimals":{"key":"ZGVjaW1hbHM=","keyType":"AVMBytes","valueType":"uint8"},"totalSupply":{"key":"dG90YWxTdXBwbHk=","keyType":"AVMBytes","valueType":"uint256"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"balances":{"keyType":"address","valueType":"uint256"},"allowances":{"keyType":"Approval","valueType":"uint256"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/ARC200.algo.ts:8","pc":[0]},{"teal":2,"source":"contracts/ARC200.algo.ts:8","pc":[1,2,3,4,5,6,7,8]},{"teal":3,"source":"contracts/ARC200.algo.ts:8","pc":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84]},{"teal":15,"source":"contracts/ARC200.algo.ts:8","pc":[85,86]},{"teal":16,"source":"contracts/ARC200.algo.ts:8","pc":[87]},{"teal":17,"source":"contracts/ARC200.algo.ts:8","pc":[88,89]},{"teal":18,"source":"contracts/ARC200.algo.ts:8","pc":[90]},{"teal":19,"source":"contracts/ARC200.algo.ts:8","pc":[91,92]},{"teal":20,"source":"contracts/ARC200.algo.ts:8","pc":[93]},{"teal":21,"source":"contracts/ARC200.algo.ts:8","pc":[94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119]},{"teal":25,"source":"contracts/ARC200.algo.ts:8","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[120]},{"teal":30,"source":"contracts/ARC200.algo.ts:33","pc":[121,122,123]},{"teal":31,"source":"contracts/ARC200.algo.ts:33","pc":[124]},{"teal":32,"source":"contracts/ARC200.algo.ts:33","pc":[125]},{"teal":33,"source":"contracts/ARC200.algo.ts:33","pc":[126]},{"teal":34,"source":"contracts/ARC200.algo.ts:33","pc":[127]},{"teal":37,"source":"contracts/ARC200.algo.ts:33","errorMessage":"argument 0 (total) for createApplication must be a uint256","pc":[128]},{"teal":40,"source":"contracts/ARC200.algo.ts:33","pc":[129,130,131]},{"teal":41,"source":"contracts/ARC200.algo.ts:33","pc":[132]},{"teal":42,"source":"contracts/ARC200.algo.ts:33","pc":[133]},{"teal":43,"source":"contracts/ARC200.algo.ts:33","pc":[134]},{"teal":44,"source":"contracts/ARC200.algo.ts:33","pc":[135]},{"teal":47,"source":"contracts/ARC200.algo.ts:33","errorMessage":"argument 1 (decimals) for createApplication must be a uint8","pc":[136]},{"teal":48,"source":"contracts/ARC200.algo.ts:33","pc":[137]},{"teal":51,"source":"contracts/ARC200.algo.ts:33","pc":[138,139,140]},{"teal":52,"source":"contracts/ARC200.algo.ts:33","pc":[141]},{"teal":53,"source":"contracts/ARC200.algo.ts:33","pc":[142]},{"teal":54,"source":"contracts/ARC200.algo.ts:33","pc":[143,144]},{"teal":55,"source":"contracts/ARC200.algo.ts:33","pc":[145]},{"teal":58,"source":"contracts/ARC200.algo.ts:33","errorMessage":"argument 2 (symbol) for createApplication must be a byte[8]","pc":[146]},{"teal":61,"source":"contracts/ARC200.algo.ts:33","pc":[147,148,149]},{"teal":62,"source":"contracts/ARC200.algo.ts:33","pc":[150]},{"teal":63,"source":"contracts/ARC200.algo.ts:33","pc":[151]},{"teal":64,"source":"contracts/ARC200.algo.ts:33","pc":[152]},{"teal":65,"source":"contracts/ARC200.algo.ts:33","pc":[153]},{"teal":68,"source":"contracts/ARC200.algo.ts:33","errorMessage":"argument 3 (name) for createApplication must be a byte[32]","pc":[154]},{"teal":71,"source":"contracts/ARC200.algo.ts:33","pc":[155,156,157]},{"teal":72,"source":"contracts/ARC200.algo.ts:33","pc":[158]},{"teal":73,"source":"contracts/ARC200.algo.ts:33","pc":[159]},{"teal":77,"source":"contracts/ARC200.algo.ts:33","pc":[160,161,162]},{"teal":81,"source":"contracts/ARC200.algo.ts:34","pc":[163,164]},{"teal":82,"source":"contracts/ARC200.algo.ts:34","pc":[165,166]},{"teal":83,"source":"contracts/ARC200.algo.ts:34","pc":[167]},{"teal":87,"source":"contracts/ARC200.algo.ts:35","pc":[168,169]},{"teal":88,"source":"contracts/ARC200.algo.ts:35","pc":[170,171]},{"teal":89,"source":"contracts/ARC200.algo.ts:35","pc":[172]},{"teal":93,"source":"contracts/ARC200.algo.ts:36","pc":[173,174]},{"teal":94,"source":"contracts/ARC200.algo.ts:36","pc":[175,176]},{"teal":95,"source":"contracts/ARC200.algo.ts:36","pc":[177]},{"teal":96,"source":"contracts/ARC200.algo.ts:36","pc":[178,179,180]},{"teal":97,"source":"contracts/ARC200.algo.ts:36","pc":[181]},{"teal":101,"source":"contracts/ARC200.algo.ts:37","pc":[182]},{"teal":102,"source":"contracts/ARC200.algo.ts:37","pc":[183,184]},{"teal":103,"source":"contracts/ARC200.algo.ts:37","pc":[185]},{"teal":107,"source":"contracts/ARC200.algo.ts:38","pc":[186,187]},{"teal":108,"source":"contracts/ARC200.algo.ts:38","pc":[188,189]},{"teal":109,"source":"contracts/ARC200.algo.ts:38","pc":[190]},{"teal":110,"source":"contracts/ARC200.algo.ts:33","pc":[191]},{"teal":115,"source":"contracts/ARC200.algo.ts:41","pc":[192]},{"teal":118,"source":"contracts/ARC200.algo.ts:41","pc":[193,194,195]},{"teal":119,"source":"contracts/ARC200.algo.ts:41","pc":[196]},{"teal":120,"source":"contracts/ARC200.algo.ts:41","pc":[197]},{"teal":121,"source":"contracts/ARC200.algo.ts:41","pc":[198]},{"teal":122,"source":"contracts/ARC200.algo.ts:41","pc":[199]},{"teal":126,"source":"contracts/ARC200.algo.ts:41","pc":[200,201,202]},{"teal":130,"source":"contracts/ARC200.algo.ts:42","pc":[203,204]},{"teal":131,"source":"contracts/ARC200.algo.ts:42","pc":[205]},{"teal":132,"source":"contracts/ARC200.algo.ts:41","pc":[206]},{"teal":137,"source":"contracts/ARC200.algo.ts:45","pc":[207]},{"teal":140,"source":"contracts/ARC200.algo.ts:45","pc":[208,209,210]},{"teal":141,"source":"contracts/ARC200.algo.ts:45","pc":[211]},{"teal":142,"source":"contracts/ARC200.algo.ts:45","pc":[212]},{"teal":143,"source":"contracts/ARC200.algo.ts:45","pc":[213]},{"teal":144,"source":"contracts/ARC200.algo.ts:45","pc":[214]},{"teal":148,"source":"contracts/ARC200.algo.ts:45","pc":[215,216,217]},{"teal":152,"source":"contracts/ARC200.algo.ts:46","pc":[218,219]},{"teal":153,"source":"contracts/ARC200.algo.ts:46","pc":[220]},{"teal":154,"source":"contracts/ARC200.algo.ts:45","pc":[221]},{"teal":159,"source":"contracts/ARC200.algo.ts:49","pc":[222]},{"teal":162,"source":"contracts/ARC200.algo.ts:49","pc":[223,224,225]},{"teal":163,"source":"contracts/ARC200.algo.ts:49","pc":[226]},{"teal":164,"source":"contracts/ARC200.algo.ts:49","pc":[227]},{"teal":165,"source":"contracts/ARC200.algo.ts:49","pc":[228]},{"teal":166,"source":"contracts/ARC200.algo.ts:49","pc":[229,230]},{"teal":167,"source":"contracts/ARC200.algo.ts:49","pc":[231]},{"teal":170,"source":"contracts/ARC200.algo.ts:49","errorMessage":"arc200_decimals return value overflowed 8 bits","pc":[232]},{"teal":171,"source":"contracts/ARC200.algo.ts:49","pc":[233,234,235]},{"teal":172,"source":"contracts/ARC200.algo.ts:49","pc":[236]},{"teal":173,"source":"contracts/ARC200.algo.ts:49","pc":[237]},{"teal":174,"source":"contracts/ARC200.algo.ts:49","pc":[238]},{"teal":175,"source":"contracts/ARC200.algo.ts:49","pc":[239]},{"teal":179,"source":"contracts/ARC200.algo.ts:49","pc":[240,241,242]},{"teal":183,"source":"contracts/ARC200.algo.ts:50","pc":[243,244]},{"teal":184,"source":"contracts/ARC200.algo.ts:50","pc":[245]},{"teal":185,"source":"contracts/ARC200.algo.ts:50","pc":[246]},{"teal":186,"source":"contracts/ARC200.algo.ts:49","pc":[247]},{"teal":191,"source":"contracts/ARC200.algo.ts:53","pc":[248]},{"teal":194,"source":"contracts/ARC200.algo.ts:53","pc":[249,250,251]},{"teal":195,"source":"contracts/ARC200.algo.ts:53","pc":[252]},{"teal":196,"source":"contracts/ARC200.algo.ts:53","pc":[253]},{"teal":197,"source":"contracts/ARC200.algo.ts:53","pc":[254]},{"teal":198,"source":"contracts/ARC200.algo.ts:53","pc":[255]},{"teal":201,"source":"contracts/ARC200.algo.ts:53","errorMessage":"arc200_totalSupply return value overflowed 256 bits","pc":[256]},{"teal":202,"source":"contracts/ARC200.algo.ts:53","pc":[257]},{"teal":203,"source":"contracts/ARC200.algo.ts:53","pc":[258]},{"teal":204,"source":"contracts/ARC200.algo.ts:53","pc":[259]},{"teal":205,"source":"contracts/ARC200.algo.ts:53","pc":[260]},{"teal":206,"source":"contracts/ARC200.algo.ts:53","pc":[261]},{"teal":207,"source":"contracts/ARC200.algo.ts:53","pc":[262]},{"teal":208,"source":"contracts/ARC200.algo.ts:53","pc":[263]},{"teal":209,"source":"contracts/ARC200.algo.ts:53","pc":[264]},{"teal":210,"source":"contracts/ARC200.algo.ts:53","pc":[265]},{"teal":211,"source":"contracts/ARC200.algo.ts:53","pc":[266]},{"teal":212,"source":"contracts/ARC200.algo.ts:53","pc":[267]},{"teal":213,"source":"contracts/ARC200.algo.ts:53","pc":[268]},{"teal":214,"source":"contracts/ARC200.algo.ts:53","pc":[269]},{"teal":218,"source":"contracts/ARC200.algo.ts:53","pc":[270,271,272]},{"teal":222,"source":"contracts/ARC200.algo.ts:54","pc":[273]},{"teal":223,"source":"contracts/ARC200.algo.ts:54","pc":[274]},{"teal":224,"source":"contracts/ARC200.algo.ts:53","pc":[275]},{"teal":229,"source":"contracts/ARC200.algo.ts:57","pc":[276]},{"teal":232,"source":"contracts/ARC200.algo.ts:57","pc":[277,278,279]},{"teal":233,"source":"contracts/ARC200.algo.ts:57","pc":[280]},{"teal":234,"source":"contracts/ARC200.algo.ts:57","pc":[281]},{"teal":235,"source":"contracts/ARC200.algo.ts:57","pc":[282]},{"teal":236,"source":"contracts/ARC200.algo.ts:57","pc":[283]},{"teal":239,"source":"contracts/ARC200.algo.ts:57","errorMessage":"argument 0 (account) for arc200_balanceOf must be a address","pc":[284]},{"teal":242,"source":"contracts/ARC200.algo.ts:57","pc":[285,286,287]},{"teal":243,"source":"contracts/ARC200.algo.ts:57","pc":[288]},{"teal":244,"source":"contracts/ARC200.algo.ts:57","pc":[289]},{"teal":245,"source":"contracts/ARC200.algo.ts:57","pc":[290]},{"teal":246,"source":"contracts/ARC200.algo.ts:57","pc":[291]},{"teal":249,"source":"contracts/ARC200.algo.ts:57","errorMessage":"arc200_balanceOf return value overflowed 256 bits","pc":[292]},{"teal":250,"source":"contracts/ARC200.algo.ts:57","pc":[293]},{"teal":251,"source":"contracts/ARC200.algo.ts:57","pc":[294]},{"teal":252,"source":"contracts/ARC200.algo.ts:57","pc":[295]},{"teal":253,"source":"contracts/ARC200.algo.ts:57","pc":[296]},{"teal":254,"source":"contracts/ARC200.algo.ts:57","pc":[297]},{"teal":255,"source":"contracts/ARC200.algo.ts:57","pc":[298]},{"teal":256,"source":"contracts/ARC200.algo.ts:57","pc":[299]},{"teal":257,"source":"contracts/ARC200.algo.ts:57","pc":[300]},{"teal":258,"source":"contracts/ARC200.algo.ts:57","pc":[301]},{"teal":259,"source":"contracts/ARC200.algo.ts:57","pc":[302]},{"teal":260,"source":"contracts/ARC200.algo.ts:57","pc":[303]},{"teal":261,"source":"contracts/ARC200.algo.ts:57","pc":[304]},{"teal":262,"source":"contracts/ARC200.algo.ts:57","pc":[305]},{"teal":266,"source":"contracts/ARC200.algo.ts:57","pc":[306,307,308]},{"teal":270,"source":"contracts/ARC200.algo.ts:58","pc":[309,310]},{"teal":271,"source":"contracts/ARC200.algo.ts:58","pc":[311]},{"teal":274,"source":"contracts/ARC200.algo.ts:58","errorMessage":"box value does not exist: this.balances(account).value","pc":[312]},{"teal":275,"source":"contracts/ARC200.algo.ts:57","pc":[313]},{"teal":279,"source":"contracts/ARC200.algo.ts:61","pc":[314,315,316]},{"teal":283,"source":"contracts/ARC200.algo.ts:62","pc":[317,318]},{"teal":284,"source":"contracts/ARC200.algo.ts:62","pc":[319]},{"teal":287,"source":"contracts/ARC200.algo.ts:62","errorMessage":"box value does not exist: this.balances(from).value","pc":[320]},{"teal":288,"source":"contracts/ARC200.algo.ts:62","pc":[321,322]},{"teal":289,"source":"contracts/ARC200.algo.ts:62","pc":[323]},{"teal":290,"source":"contracts/ARC200.algo.ts:62","pc":[324,325]},{"teal":291,"source":"contracts/ARC200.algo.ts:62","pc":[326]},{"teal":292,"source":"contracts/ARC200.algo.ts:62","pc":[327]},{"teal":296,"source":"contracts/ARC200.algo.ts:63","pc":[328,329]},{"teal":297,"source":"contracts/ARC200.algo.ts:63","pc":[330]},{"teal":300,"source":"contracts/ARC200.algo.ts:63","errorMessage":"box value does not exist: this.balances(to).value","pc":[331]},{"teal":301,"source":"contracts/ARC200.algo.ts:63","pc":[332,333]},{"teal":302,"source":"contracts/ARC200.algo.ts:63","pc":[334]},{"teal":303,"source":"contracts/ARC200.algo.ts:63","pc":[335,336]},{"teal":304,"source":"contracts/ARC200.algo.ts:63","pc":[337]},{"teal":305,"source":"contracts/ARC200.algo.ts:63","pc":[338]},{"teal":309,"source":"contracts/ARC200.algo.ts:64","pc":[339,340,341,342,343,344]},{"teal":310,"source":"contracts/ARC200.algo.ts:64","pc":[345,346]},{"teal":311,"source":"contracts/ARC200.algo.ts:64","pc":[347,348]},{"teal":312,"source":"contracts/ARC200.algo.ts:64","pc":[349]},{"teal":313,"source":"contracts/ARC200.algo.ts:64","pc":[350,351]},{"teal":314,"source":"contracts/ARC200.algo.ts:64","pc":[352]},{"teal":315,"source":"contracts/ARC200.algo.ts:64","pc":[353]},{"teal":316,"source":"contracts/ARC200.algo.ts:64","pc":[354]},{"teal":320,"source":"contracts/ARC200.algo.ts:66","pc":[355]},{"teal":321,"source":"contracts/ARC200.algo.ts:61","pc":[356]},{"teal":326,"source":"contracts/ARC200.algo.ts:69","pc":[357]},{"teal":329,"source":"contracts/ARC200.algo.ts:69","pc":[358,359,360]},{"teal":330,"source":"contracts/ARC200.algo.ts:69","pc":[361]},{"teal":331,"source":"contracts/ARC200.algo.ts:69","pc":[362]},{"teal":332,"source":"contracts/ARC200.algo.ts:69","pc":[363]},{"teal":333,"source":"contracts/ARC200.algo.ts:69","pc":[364]},{"teal":336,"source":"contracts/ARC200.algo.ts:69","errorMessage":"argument 0 (amount) for arc200_transferFrom must be a uint256","pc":[365]},{"teal":339,"source":"contracts/ARC200.algo.ts:69","pc":[366,367,368]},{"teal":340,"source":"contracts/ARC200.algo.ts:69","pc":[369]},{"teal":341,"source":"contracts/ARC200.algo.ts:69","pc":[370]},{"teal":342,"source":"contracts/ARC200.algo.ts:69","pc":[371]},{"teal":343,"source":"contracts/ARC200.algo.ts:69","pc":[372]},{"teal":346,"source":"contracts/ARC200.algo.ts:69","errorMessage":"argument 1 (to) for arc200_transferFrom must be a address","pc":[373]},{"teal":349,"source":"contracts/ARC200.algo.ts:69","pc":[374,375,376]},{"teal":350,"source":"contracts/ARC200.algo.ts:69","pc":[377]},{"teal":351,"source":"contracts/ARC200.algo.ts:69","pc":[378]},{"teal":352,"source":"contracts/ARC200.algo.ts:69","pc":[379]},{"teal":353,"source":"contracts/ARC200.algo.ts:69","pc":[380]},{"teal":356,"source":"contracts/ARC200.algo.ts:69","errorMessage":"argument 2 (from) for arc200_transferFrom must be a address","pc":[381]},{"teal":359,"source":"contracts/ARC200.algo.ts:69","pc":[382,383,384]},{"teal":360,"source":"contracts/ARC200.algo.ts:69","pc":[385]},{"teal":361,"source":"contracts/ARC200.algo.ts:69","pc":[386]},{"teal":362,"source":"contracts/ARC200.algo.ts:69","pc":[387,388]},{"teal":363,"source":"contracts/ARC200.algo.ts:69","pc":[389]},{"teal":364,"source":"contracts/ARC200.algo.ts:69","pc":[390]},{"teal":365,"source":"contracts/ARC200.algo.ts:69","pc":[391]},{"teal":366,"source":"contracts/ARC200.algo.ts:69","pc":[392]},{"teal":367,"source":"contracts/ARC200.algo.ts:69","pc":[393]},{"teal":371,"source":"contracts/ARC200.algo.ts:69","pc":[394,395,396]},{"teal":374,"source":"contracts/ARC200.algo.ts:69","pc":[397,398]},{"teal":378,"source":"contracts/ARC200.algo.ts:70","pc":[399,400]},{"teal":379,"source":"contracts/ARC200.algo.ts:70","pc":[401,402]},{"teal":380,"source":"contracts/ARC200.algo.ts:70","pc":[403]},{"teal":381,"source":"contracts/ARC200.algo.ts:70","pc":[404,405]},{"teal":385,"source":"contracts/ARC200.algo.ts:72","pc":[406,407]},{"teal":386,"source":"contracts/ARC200.algo.ts:72","pc":[408]},{"teal":389,"source":"contracts/ARC200.algo.ts:72","errorMessage":"box value does not exist: this.allowances(approval).value","pc":[409]},{"teal":390,"source":"contracts/ARC200.algo.ts:72","pc":[410,411]},{"teal":391,"source":"contracts/ARC200.algo.ts:72","pc":[412]},{"teal":392,"source":"contracts/ARC200.algo.ts:72","pc":[413]},{"teal":396,"source":"contracts/ARC200.algo.ts:73","pc":[414,415]},{"teal":397,"source":"contracts/ARC200.algo.ts:73","pc":[416]},{"teal":400,"source":"contracts/ARC200.algo.ts:73","errorMessage":"box value does not exist: this.allowances(approval).value","pc":[417]},{"teal":401,"source":"contracts/ARC200.algo.ts:73","pc":[418,419]},{"teal":402,"source":"contracts/ARC200.algo.ts:73","pc":[420]},{"teal":403,"source":"contracts/ARC200.algo.ts:73","pc":[421,422]},{"teal":404,"source":"contracts/ARC200.algo.ts:73","pc":[423]},{"teal":405,"source":"contracts/ARC200.algo.ts:73","pc":[424]},{"teal":409,"source":"contracts/ARC200.algo.ts:75","pc":[425,426]},{"teal":410,"source":"contracts/ARC200.algo.ts:75","pc":[427,428]},{"teal":411,"source":"contracts/ARC200.algo.ts:75","pc":[429,430]},{"teal":412,"source":"contracts/ARC200.algo.ts:75","pc":[431,432,433]},{"teal":415,"source":"contracts/ARC200.algo.ts:69","pc":[434,435]},{"teal":416,"source":"contracts/ARC200.algo.ts:69","pc":[436]},{"teal":421,"source":"contracts/ARC200.algo.ts:78","pc":[437]},{"teal":424,"source":"contracts/ARC200.algo.ts:78","pc":[438,439,440]},{"teal":425,"source":"contracts/ARC200.algo.ts:78","pc":[441]},{"teal":426,"source":"contracts/ARC200.algo.ts:78","pc":[442]},{"teal":427,"source":"contracts/ARC200.algo.ts:78","pc":[443]},{"teal":428,"source":"contracts/ARC200.algo.ts:78","pc":[444]},{"teal":431,"source":"contracts/ARC200.algo.ts:78","errorMessage":"argument 0 (amount) for arc200_transfer must be a uint256","pc":[445]},{"teal":434,"source":"contracts/ARC200.algo.ts:78","pc":[446,447,448]},{"teal":435,"source":"contracts/ARC200.algo.ts:78","pc":[449]},{"teal":436,"source":"contracts/ARC200.algo.ts:78","pc":[450]},{"teal":437,"source":"contracts/ARC200.algo.ts:78","pc":[451]},{"teal":438,"source":"contracts/ARC200.algo.ts:78","pc":[452]},{"teal":441,"source":"contracts/ARC200.algo.ts:78","errorMessage":"argument 1 (to) for arc200_transfer must be a address","pc":[453]},{"teal":444,"source":"contracts/ARC200.algo.ts:78","pc":[454,455,456]},{"teal":445,"source":"contracts/ARC200.algo.ts:78","pc":[457]},{"teal":446,"source":"contracts/ARC200.algo.ts:78","pc":[458]},{"teal":447,"source":"contracts/ARC200.algo.ts:78","pc":[459,460]},{"teal":448,"source":"contracts/ARC200.algo.ts:78","pc":[461]},{"teal":449,"source":"contracts/ARC200.algo.ts:78","pc":[462]},{"teal":450,"source":"contracts/ARC200.algo.ts:78","pc":[463]},{"teal":451,"source":"contracts/ARC200.algo.ts:78","pc":[464]},{"teal":452,"source":"contracts/ARC200.algo.ts:78","pc":[465]},{"teal":456,"source":"contracts/ARC200.algo.ts:78","pc":[466,467,468]},{"teal":460,"source":"contracts/ARC200.algo.ts:79","pc":[469,470]},{"teal":461,"source":"contracts/ARC200.algo.ts:79","pc":[471,472]},{"teal":462,"source":"contracts/ARC200.algo.ts:79","pc":[473,474]},{"teal":463,"source":"contracts/ARC200.algo.ts:79","pc":[475,476,477]},{"teal":464,"source":"contracts/ARC200.algo.ts:78","pc":[478]},{"teal":469,"source":"contracts/ARC200.algo.ts:82","pc":[479]},{"teal":472,"source":"contracts/ARC200.algo.ts:82","pc":[480,481,482]},{"teal":473,"source":"contracts/ARC200.algo.ts:82","pc":[483]},{"teal":474,"source":"contracts/ARC200.algo.ts:82","pc":[484]},{"teal":475,"source":"contracts/ARC200.algo.ts:82","pc":[485]},{"teal":476,"source":"contracts/ARC200.algo.ts:82","pc":[486]},{"teal":479,"source":"contracts/ARC200.algo.ts:82","errorMessage":"argument 0 (value) for arc200_approve must be a uint256","pc":[487]},{"teal":482,"source":"contracts/ARC200.algo.ts:82","pc":[488,489,490]},{"teal":483,"source":"contracts/ARC200.algo.ts:82","pc":[491]},{"teal":484,"source":"contracts/ARC200.algo.ts:82","pc":[492]},{"teal":485,"source":"contracts/ARC200.algo.ts:82","pc":[493]},{"teal":486,"source":"contracts/ARC200.algo.ts:82","pc":[494]},{"teal":489,"source":"contracts/ARC200.algo.ts:82","errorMessage":"argument 1 (spender) for arc200_approve must be a address","pc":[495]},{"teal":492,"source":"contracts/ARC200.algo.ts:82","pc":[496,497,498]},{"teal":493,"source":"contracts/ARC200.algo.ts:82","pc":[499]},{"teal":494,"source":"contracts/ARC200.algo.ts:82","pc":[500]},{"teal":495,"source":"contracts/ARC200.algo.ts:82","pc":[501,502]},{"teal":496,"source":"contracts/ARC200.algo.ts:82","pc":[503]},{"teal":497,"source":"contracts/ARC200.algo.ts:82","pc":[504]},{"teal":498,"source":"contracts/ARC200.algo.ts:82","pc":[505]},{"teal":499,"source":"contracts/ARC200.algo.ts:82","pc":[506]},{"teal":500,"source":"contracts/ARC200.algo.ts:82","pc":[507]},{"teal":504,"source":"contracts/ARC200.algo.ts:82","pc":[508,509,510]},{"teal":507,"source":"contracts/ARC200.algo.ts:82","pc":[511,512]},{"teal":511,"source":"contracts/ARC200.algo.ts:83","pc":[513,514]},{"teal":512,"source":"contracts/ARC200.algo.ts:83","pc":[515,516]},{"teal":513,"source":"contracts/ARC200.algo.ts:83","pc":[517]},{"teal":514,"source":"contracts/ARC200.algo.ts:83","pc":[518,519]},{"teal":519,"source":"contracts/ARC200.algo.ts:84","pc":[520,521]},{"teal":520,"source":"contracts/ARC200.algo.ts:84","pc":[522]},{"teal":521,"source":"contracts/ARC200.algo.ts:84","pc":[523]},{"teal":522,"source":"contracts/ARC200.algo.ts:84","pc":[524]},{"teal":523,"source":"contracts/ARC200.algo.ts:84","pc":[525]},{"teal":524,"source":"contracts/ARC200.algo.ts:84","pc":[526,527,528]},{"teal":529,"source":"contracts/ARC200.algo.ts:85","pc":[529,530]},{"teal":530,"source":"contracts/ARC200.algo.ts:85","pc":[531,532]},{"teal":531,"source":"contracts/ARC200.algo.ts:85","pc":[533]},{"teal":532,"source":"contracts/ARC200.algo.ts:84","pc":[534,535,536]},{"teal":537,"source":"contracts/ARC200.algo.ts:87","pc":[537,538]},{"teal":538,"source":"contracts/ARC200.algo.ts:87","pc":[539]},{"teal":541,"source":"contracts/ARC200.algo.ts:87","errorMessage":"box value does not exist: this.allowances(approval).value","pc":[540]},{"teal":542,"source":"contracts/ARC200.algo.ts:87","pc":[541,542]},{"teal":543,"source":"contracts/ARC200.algo.ts:87","pc":[543]},{"teal":544,"source":"contracts/ARC200.algo.ts:87","pc":[544,545]},{"teal":545,"source":"contracts/ARC200.algo.ts:87","pc":[546]},{"teal":546,"source":"contracts/ARC200.algo.ts:87","pc":[547]},{"teal":551,"source":"contracts/ARC200.algo.ts:90","pc":[548]},{"teal":554,"source":"contracts/ARC200.algo.ts:82","pc":[549,550]},{"teal":555,"source":"contracts/ARC200.algo.ts:82","pc":[551]},{"teal":560,"source":"contracts/ARC200.algo.ts:93","pc":[552]},{"teal":563,"source":"contracts/ARC200.algo.ts:93","pc":[553,554,555]},{"teal":564,"source":"contracts/ARC200.algo.ts:93","pc":[556]},{"teal":565,"source":"contracts/ARC200.algo.ts:93","pc":[557]},{"teal":566,"source":"contracts/ARC200.algo.ts:93","pc":[558]},{"teal":567,"source":"contracts/ARC200.algo.ts:93","pc":[559]},{"teal":570,"source":"contracts/ARC200.algo.ts:93","errorMessage":"argument 0 (sender) for arc200_allowance must be a address","pc":[560]},{"teal":573,"source":"contracts/ARC200.algo.ts:93","pc":[561,562,563]},{"teal":574,"source":"contracts/ARC200.algo.ts:93","pc":[564]},{"teal":575,"source":"contracts/ARC200.algo.ts:93","pc":[565]},{"teal":576,"source":"contracts/ARC200.algo.ts:93","pc":[566]},{"teal":577,"source":"contracts/ARC200.algo.ts:93","pc":[567]},{"teal":580,"source":"contracts/ARC200.algo.ts:93","errorMessage":"argument 1 (owner) for arc200_allowance must be a address","pc":[568]},{"teal":583,"source":"contracts/ARC200.algo.ts:93","pc":[569,570,571]},{"teal":584,"source":"contracts/ARC200.algo.ts:93","pc":[572]},{"teal":585,"source":"contracts/ARC200.algo.ts:93","pc":[573]},{"teal":586,"source":"contracts/ARC200.algo.ts:93","pc":[574]},{"teal":587,"source":"contracts/ARC200.algo.ts:93","pc":[575]},{"teal":590,"source":"contracts/ARC200.algo.ts:93","errorMessage":"arc200_allowance return value overflowed 256 bits","pc":[576]},{"teal":591,"source":"contracts/ARC200.algo.ts:93","pc":[577]},{"teal":592,"source":"contracts/ARC200.algo.ts:93","pc":[578]},{"teal":593,"source":"contracts/ARC200.algo.ts:93","pc":[579]},{"teal":594,"source":"contracts/ARC200.algo.ts:93","pc":[580]},{"teal":595,"source":"contracts/ARC200.algo.ts:93","pc":[581]},{"teal":596,"source":"contracts/ARC200.algo.ts:93","pc":[582]},{"teal":597,"source":"contracts/ARC200.algo.ts:93","pc":[583]},{"teal":598,"source":"contracts/ARC200.algo.ts:93","pc":[584]},{"teal":599,"source":"contracts/ARC200.algo.ts:93","pc":[585]},{"teal":600,"source":"contracts/ARC200.algo.ts:93","pc":[586]},{"teal":601,"source":"contracts/ARC200.algo.ts:93","pc":[587]},{"teal":602,"source":"contracts/ARC200.algo.ts:93","pc":[588]},{"teal":603,"source":"contracts/ARC200.algo.ts:93","pc":[589]},{"teal":607,"source":"contracts/ARC200.algo.ts:93","pc":[590,591,592]},{"teal":611,"source":"contracts/ARC200.algo.ts:94","pc":[593,594]},{"teal":612,"source":"contracts/ARC200.algo.ts:94","pc":[595,596]},{"teal":613,"source":"contracts/ARC200.algo.ts:94","pc":[597]},{"teal":614,"source":"contracts/ARC200.algo.ts:94","pc":[598]},{"teal":617,"source":"contracts/ARC200.algo.ts:94","errorMessage":"box value does not exist: this.allowances({ owner: owner, spender: sender }).value","pc":[599]},{"teal":618,"source":"contracts/ARC200.algo.ts:93","pc":[600]},{"teal":621,"source":"contracts/ARC200.algo.ts:8","pc":[601,602,603,604,605,606]},{"teal":622,"source":"contracts/ARC200.algo.ts:8","pc":[607,608,609]},{"teal":623,"source":"contracts/ARC200.algo.ts:8","pc":[610,611,612,613]},{"teal":626,"source":"contracts/ARC200.algo.ts:8","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[614]},{"teal":629,"source":"contracts/ARC200.algo.ts:8","pc":[615,616,617,618,619,620]},{"teal":630,"source":"contracts/ARC200.algo.ts:8","pc":[621,622,623,624,625,626]},{"teal":631,"source":"contracts/ARC200.algo.ts:8","pc":[627,628,629,630,631,632]},{"teal":632,"source":"contracts/ARC200.algo.ts:8","pc":[633,634,635,636,637,638]},{"teal":633,"source":"contracts/ARC200.algo.ts:8","pc":[639,640,641,642,643,644]},{"teal":634,"source":"contracts/ARC200.algo.ts:8","pc":[645,646,647,648,649,650]},{"teal":635,"source":"contracts/ARC200.algo.ts:8","pc":[651,652,653,654,655,656]},{"teal":636,"source":"contracts/ARC200.algo.ts:8","pc":[657,658,659,660,661,662]},{"teal":637,"source":"contracts/ARC200.algo.ts:8","pc":[663,664,665,666,667,668]},{"teal":638,"source":"contracts/ARC200.algo.ts:8","pc":[669,670,671]},{"teal":639,"source":"contracts/ARC200.algo.ts:8","pc":[672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691]},{"teal":642,"source":"contracts/ARC200.algo.ts:8","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[692]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAFIAGAAgAIJggEFR98dSD//////////////////////////////////////////wEAC3RvdGFsU3VwcGx5CGRlY2ltYWxzBnN5bWJvbARuYW1lADEYFIEGCzEZCI0MAe8AAAAAAAAAAAAAAeEAAAAAAAAAAAAAADYaBEkVIhJENhoDSRUjEkQXNhoCSRUhBBJENhoBSRUiEkSIAAIjQ4oEACcGi/9nJwWL/mcnBIv9FlcHAWcri/xnMQCL/L+JKIgABFCwI0OKAAEnBmSJKIgABFCwI0OKAAEnBWSJKIgADhZJkyEEDkRXBwFQsCNDigABJwRkF4koiAASSZMkDkQprEkVSSIJTFJQsCNDigABK2SJKDYaAUkVIhJEiAASSZMkDkQprEkVSSIJTFJQsCNDigEBi/++RImKAwGL/75Ei/2hi/9Mv4v+vkSL/aCL/ky/gAR5g8Nci/+L/lCL/VBQsCOJKDYaA0kVIhJENhoCSRUiEkQ2GgFJFSISRIgACSolTwJUULAjQ4oDAScHi/8xAFCMAIsAvkSL/adEiwC+RIv9oYsATL+L/Yv+i/+I/4iMAIkoNhoCSRUiEkQ2GgFJFSISRIgACSolTwJUULAjQ4oCAYv+i/8xAIj/XIkoNhoCSRUiEkQ2GgFJFSISRIgACSolTwJUULAjQ4oCAScHMQCL/1CMAIsAvUxIFEEACIsAi/6/QgALiwC+RIv+oIsATL8jjACJKDYaAkkVIhJENhoBSRUiEkSIABJJkyQORCmsSRVJIglMUlCwI0OKAgGL/4v+UL5EiYAEhSn3gzYaAI4B/hMAgARlfRPsgAS2rholgASE7BPVgATsmWBBgASC5XPEgARKlo+PgATacCW5gAS1QiElgAS7sxnzNhoAjgn+DP4b/ir+RP5g/rH/Af8r/3QA","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Approval = {
  owner: string,
  spender: string
}


/**
 * Converts the ABI tuple representation of a Approval to the struct representation
 */
export function ApprovalFromTuple(abiTuple: [string, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Approval, APP_SPEC.structs) as Approval
}

/**
 * The argument types for the Arc200 contract
 */
export type Arc200Args = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(byte[32],byte[8],uint8,uint256)void': {
      name: Uint8Array
      symbol: Uint8Array
      decimals: bigint | number
      total: bigint | number
    }
    'arc200_name()byte[32]': Record<string, never>
    'arc200_symbol()byte[8]': Record<string, never>
    'arc200_decimals()uint8': Record<string, never>
    'arc200_totalSupply()uint256': Record<string, never>
    'arc200_balanceOf(address)uint256': {
      account: string
    }
    'arc200_transferFrom(address,address,uint256)bool': {
      from: string
      to: string
      amount: bigint | number
    }
    'arc200_transfer(address,uint256)bool': {
      to: string
      amount: bigint | number
    }
    'arc200_approve(address,uint256)bool': {
      spender: string
      value: bigint | number
    }
    'arc200_allowance(address,address)uint256': {
      owner: string
      sender: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(byte[32],byte[8],uint8,uint256)void': [name: Uint8Array, symbol: Uint8Array, decimals: bigint | number, total: bigint | number]
    'arc200_name()byte[32]': []
    'arc200_symbol()byte[8]': []
    'arc200_decimals()uint8': []
    'arc200_totalSupply()uint256': []
    'arc200_balanceOf(address)uint256': [account: string]
    'arc200_transferFrom(address,address,uint256)bool': [from: string, to: string, amount: bigint | number]
    'arc200_transfer(address,uint256)bool': [to: string, amount: bigint | number]
    'arc200_approve(address,uint256)bool': [spender: string, value: bigint | number]
    'arc200_allowance(address,address)uint256': [owner: string, sender: string]
  }
}

/**
 * The return type for each method
 */
export type Arc200Returns = {
  'createApplication(byte[32],byte[8],uint8,uint256)void': void
  'arc200_name()byte[32]': Uint8Array
  'arc200_symbol()byte[8]': Uint8Array
  'arc200_decimals()uint8': number
  'arc200_totalSupply()uint256': bigint
  'arc200_balanceOf(address)uint256': bigint
  'arc200_transferFrom(address,address,uint256)bool': boolean
  'arc200_transfer(address,uint256)bool': boolean
  'arc200_approve(address,uint256)bool': boolean
  'arc200_allowance(address,address)uint256': bigint
}

/**
 * Defines the types of available calls and state of the Arc200 smart contract.
 */
export type Arc200Types = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(byte[32],byte[8],uint8,uint256)void' | 'createApplication', {
      argsObj: Arc200Args['obj']['createApplication(byte[32],byte[8],uint8,uint256)void']
      argsTuple: Arc200Args['tuple']['createApplication(byte[32],byte[8],uint8,uint256)void']
      returns: Arc200Returns['createApplication(byte[32],byte[8],uint8,uint256)void']
    }>
    & Record<'arc200_name()byte[32]' | 'arc200_name', {
      argsObj: Arc200Args['obj']['arc200_name()byte[32]']
      argsTuple: Arc200Args['tuple']['arc200_name()byte[32]']
      returns: Arc200Returns['arc200_name()byte[32]']
    }>
    & Record<'arc200_symbol()byte[8]' | 'arc200_symbol', {
      argsObj: Arc200Args['obj']['arc200_symbol()byte[8]']
      argsTuple: Arc200Args['tuple']['arc200_symbol()byte[8]']
      returns: Arc200Returns['arc200_symbol()byte[8]']
    }>
    & Record<'arc200_decimals()uint8' | 'arc200_decimals', {
      argsObj: Arc200Args['obj']['arc200_decimals()uint8']
      argsTuple: Arc200Args['tuple']['arc200_decimals()uint8']
      returns: Arc200Returns['arc200_decimals()uint8']
    }>
    & Record<'arc200_totalSupply()uint256' | 'arc200_totalSupply', {
      argsObj: Arc200Args['obj']['arc200_totalSupply()uint256']
      argsTuple: Arc200Args['tuple']['arc200_totalSupply()uint256']
      returns: Arc200Returns['arc200_totalSupply()uint256']
    }>
    & Record<'arc200_balanceOf(address)uint256' | 'arc200_balanceOf', {
      argsObj: Arc200Args['obj']['arc200_balanceOf(address)uint256']
      argsTuple: Arc200Args['tuple']['arc200_balanceOf(address)uint256']
      returns: Arc200Returns['arc200_balanceOf(address)uint256']
    }>
    & Record<'arc200_transferFrom(address,address,uint256)bool' | 'arc200_transferFrom', {
      argsObj: Arc200Args['obj']['arc200_transferFrom(address,address,uint256)bool']
      argsTuple: Arc200Args['tuple']['arc200_transferFrom(address,address,uint256)bool']
      returns: Arc200Returns['arc200_transferFrom(address,address,uint256)bool']
    }>
    & Record<'arc200_transfer(address,uint256)bool' | 'arc200_transfer', {
      argsObj: Arc200Args['obj']['arc200_transfer(address,uint256)bool']
      argsTuple: Arc200Args['tuple']['arc200_transfer(address,uint256)bool']
      returns: Arc200Returns['arc200_transfer(address,uint256)bool']
    }>
    & Record<'arc200_approve(address,uint256)bool' | 'arc200_approve', {
      argsObj: Arc200Args['obj']['arc200_approve(address,uint256)bool']
      argsTuple: Arc200Args['tuple']['arc200_approve(address,uint256)bool']
      returns: Arc200Returns['arc200_approve(address,uint256)bool']
    }>
    & Record<'arc200_allowance(address,address)uint256' | 'arc200_allowance', {
      argsObj: Arc200Args['obj']['arc200_allowance(address,address)uint256']
      argsTuple: Arc200Args['tuple']['arc200_allowance(address,address)uint256']
      returns: Arc200Returns['arc200_allowance(address,address)uint256']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        name: Uint8Array
        symbol: Uint8Array
        decimals: number
        totalSupply: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        balances: Map<string, bigint>
        allowances: Map<Approval, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Arc200Signatures = keyof Arc200Types['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Arc200NonVoidMethodSignatures = keyof Arc200Types['methods'] extends infer T ? T extends keyof Arc200Types['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Arc200 smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Arc200Signatures> = Arc200Types['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc200 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc200Signatures> = Arc200Types['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = Arc200Types['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = Arc200Types['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Arc200CreateCallParams =
  | Expand<CallParams<Arc200Args['obj']['createApplication(byte[32],byte[8],uint8,uint256)void'] | Arc200Args['tuple']['createApplication(byte[32],byte[8],uint8,uint256)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<Arc200Args['obj']['createApplication(byte[32],byte[8],uint8,uint256)void'] | Arc200Args['tuple']['createApplication(byte[32],byte[8],uint8,uint256)void']> & {method: 'createApplication(byte[32],byte[8],uint8,uint256)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Arc200DeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Arc200CreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc200 smart contract
 */
export abstract class Arc200ParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends Arc200CreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(byte[32],byte[8],uint8,uint256)void':
            return Arc200ParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ARC200 smart contract using the createApplication(byte[32],byte[8],uint8,uint256)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<Arc200Args['obj']['createApplication(byte[32],byte[8],uint8,uint256)void'] | Arc200Args['tuple']['createApplication(byte[32],byte[8],uint8,uint256)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(byte[32],byte[8],uint8,uint256)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.symbol, params.args.decimals, params.args.total],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the arc200_name()byte[32] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Name(params: CallParams<Arc200Args['obj']['arc200_name()byte[32]'] | Arc200Args['tuple']['arc200_name()byte[32]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_name()byte[32]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc200_symbol()byte[8] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Symbol(params: CallParams<Arc200Args['obj']['arc200_symbol()byte[8]'] | Arc200Args['tuple']['arc200_symbol()byte[8]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_symbol()byte[8]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc200_decimals()uint8 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Decimals(params: CallParams<Arc200Args['obj']['arc200_decimals()uint8'] | Arc200Args['tuple']['arc200_decimals()uint8']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_decimals()uint8' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc200_totalSupply()uint256 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200TotalSupply(params: CallParams<Arc200Args['obj']['arc200_totalSupply()uint256'] | Arc200Args['tuple']['arc200_totalSupply()uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_totalSupply()uint256' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc200_balanceOf(address)uint256 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200BalanceOf(params: CallParams<Arc200Args['obj']['arc200_balanceOf(address)uint256'] | Arc200Args['tuple']['arc200_balanceOf(address)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_balanceOf(address)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account],
    }
  }
  /**
   * Constructs a no op call for the arc200_transferFrom(address,address,uint256)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200TransferFrom(params: CallParams<Arc200Args['obj']['arc200_transferFrom(address,address,uint256)bool'] | Arc200Args['tuple']['arc200_transferFrom(address,address,uint256)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_transferFrom(address,address,uint256)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.from, params.args.to, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the arc200_transfer(address,uint256)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Transfer(params: CallParams<Arc200Args['obj']['arc200_transfer(address,uint256)bool'] | Arc200Args['tuple']['arc200_transfer(address,uint256)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_transfer(address,uint256)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.to, params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the arc200_approve(address,uint256)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Approve(params: CallParams<Arc200Args['obj']['arc200_approve(address,uint256)bool'] | Arc200Args['tuple']['arc200_approve(address,uint256)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_approve(address,uint256)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.spender, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the arc200_allowance(address,address)uint256 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc200Allowance(params: CallParams<Arc200Args['obj']['arc200_allowance(address,address)uint256'] | Arc200Args['tuple']['arc200_allowance(address,address)uint256']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc200_allowance(address,address)uint256' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.owner, params.args.sender],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ARC200 smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Arc200Factory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Arc200Factory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Arc200Client(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Arc200Client(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ARC200 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Arc200DeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? Arc200ParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (Arc200CreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new Arc200Client(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC200 smart contract using the createApplication(byte[32],byte[8],uint8,uint256)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<Arc200Args['obj']['createApplication(byte[32],byte[8],uint8,uint256)void'] | Arc200Args['tuple']['createApplication(byte[32],byte[8],uint8,uint256)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(Arc200ParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC200 smart contract using the createApplication(byte[32],byte[8],uint8,uint256)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<Arc200Args['obj']['createApplication(byte[32],byte[8],uint8,uint256)void'] | Arc200Args['tuple']['createApplication(byte[32],byte[8],uint8,uint256)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(Arc200ParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC200 smart contract using an ABI method call using the createApplication(byte[32],byte[8],uint8,uint256)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<Arc200Args['obj']['createApplication(byte[32],byte[8],uint8,uint256)void'] | Arc200Args['tuple']['createApplication(byte[32],byte[8],uint8,uint256)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(Arc200ParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | Arc200Returns['createApplication(byte[32],byte[8],uint8,uint256)void']) }, appClient: new Arc200Client(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ARC200 smart contract
 */
export class Arc200Client {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Arc200Client`
   *
   * @param appClient An `AppClient` instance which has been created with the Arc200 app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Arc200Client`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Arc200NonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Arc200Client` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Arc200Client> {
    return new Arc200Client(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Arc200Client` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Arc200Client> {
    return new Arc200Client(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ARC200 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_name()byte[32]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc200Name: (params: CallParams<Arc200Args['obj']['arc200_name()byte[32]'] | Arc200Args['tuple']['arc200_name()byte[32]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc200ParamsFactory.arc200Name(params))
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_symbol()byte[8]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc200Symbol: (params: CallParams<Arc200Args['obj']['arc200_symbol()byte[8]'] | Arc200Args['tuple']['arc200_symbol()byte[8]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc200ParamsFactory.arc200Symbol(params))
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_decimals()uint8` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc200Decimals: (params: CallParams<Arc200Args['obj']['arc200_decimals()uint8'] | Arc200Args['tuple']['arc200_decimals()uint8']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc200ParamsFactory.arc200Decimals(params))
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_totalSupply()uint256` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc200TotalSupply: (params: CallParams<Arc200Args['obj']['arc200_totalSupply()uint256'] | Arc200Args['tuple']['arc200_totalSupply()uint256']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc200ParamsFactory.arc200TotalSupply(params))
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_balanceOf(address)uint256` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc200BalanceOf: (params: CallParams<Arc200Args['obj']['arc200_balanceOf(address)uint256'] | Arc200Args['tuple']['arc200_balanceOf(address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc200ParamsFactory.arc200BalanceOf(params))
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_transferFrom(address,address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc200TransferFrom: (params: CallParams<Arc200Args['obj']['arc200_transferFrom(address,address,uint256)bool'] | Arc200Args['tuple']['arc200_transferFrom(address,address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc200ParamsFactory.arc200TransferFrom(params))
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_transfer(address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc200Transfer: (params: CallParams<Arc200Args['obj']['arc200_transfer(address,uint256)bool'] | Arc200Args['tuple']['arc200_transfer(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc200ParamsFactory.arc200Transfer(params))
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_approve(address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc200Approve: (params: CallParams<Arc200Args['obj']['arc200_approve(address,uint256)bool'] | Arc200Args['tuple']['arc200_approve(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc200ParamsFactory.arc200Approve(params))
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_allowance(address,address)uint256` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc200Allowance: (params: CallParams<Arc200Args['obj']['arc200_allowance(address,address)uint256'] | Arc200Args['tuple']['arc200_allowance(address,address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc200ParamsFactory.arc200Allowance(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ARC200 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_name()byte[32]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc200Name: (params: CallParams<Arc200Args['obj']['arc200_name()byte[32]'] | Arc200Args['tuple']['arc200_name()byte[32]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200Name(params))
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_symbol()byte[8]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc200Symbol: (params: CallParams<Arc200Args['obj']['arc200_symbol()byte[8]'] | Arc200Args['tuple']['arc200_symbol()byte[8]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200Symbol(params))
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_decimals()uint8` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc200Decimals: (params: CallParams<Arc200Args['obj']['arc200_decimals()uint8'] | Arc200Args['tuple']['arc200_decimals()uint8']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200Decimals(params))
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_totalSupply()uint256` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc200TotalSupply: (params: CallParams<Arc200Args['obj']['arc200_totalSupply()uint256'] | Arc200Args['tuple']['arc200_totalSupply()uint256']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200TotalSupply(params))
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_balanceOf(address)uint256` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc200BalanceOf: (params: CallParams<Arc200Args['obj']['arc200_balanceOf(address)uint256'] | Arc200Args['tuple']['arc200_balanceOf(address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200BalanceOf(params))
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_transferFrom(address,address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc200TransferFrom: (params: CallParams<Arc200Args['obj']['arc200_transferFrom(address,address,uint256)bool'] | Arc200Args['tuple']['arc200_transferFrom(address,address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200TransferFrom(params))
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_transfer(address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc200Transfer: (params: CallParams<Arc200Args['obj']['arc200_transfer(address,uint256)bool'] | Arc200Args['tuple']['arc200_transfer(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200Transfer(params))
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_approve(address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc200Approve: (params: CallParams<Arc200Args['obj']['arc200_approve(address,uint256)bool'] | Arc200Args['tuple']['arc200_approve(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200Approve(params))
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_allowance(address,address)uint256` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc200Allowance: (params: CallParams<Arc200Args['obj']['arc200_allowance(address,address)uint256'] | Arc200Args['tuple']['arc200_allowance(address,address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc200ParamsFactory.arc200Allowance(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ARC200 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_name()byte[32]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc200Name: async (params: CallParams<Arc200Args['obj']['arc200_name()byte[32]'] | Arc200Args['tuple']['arc200_name()byte[32]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Name(params))
      return {...result, return: result.return as unknown as (undefined | Arc200Returns['arc200_name()byte[32]'])}
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_symbol()byte[8]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc200Symbol: async (params: CallParams<Arc200Args['obj']['arc200_symbol()byte[8]'] | Arc200Args['tuple']['arc200_symbol()byte[8]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Symbol(params))
      return {...result, return: result.return as unknown as (undefined | Arc200Returns['arc200_symbol()byte[8]'])}
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_decimals()uint8` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc200Decimals: async (params: CallParams<Arc200Args['obj']['arc200_decimals()uint8'] | Arc200Args['tuple']['arc200_decimals()uint8']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Decimals(params))
      return {...result, return: result.return as unknown as (undefined | Arc200Returns['arc200_decimals()uint8'])}
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_totalSupply()uint256` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc200TotalSupply: async (params: CallParams<Arc200Args['obj']['arc200_totalSupply()uint256'] | Arc200Args['tuple']['arc200_totalSupply()uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200TotalSupply(params))
      return {...result, return: result.return as unknown as (undefined | Arc200Returns['arc200_totalSupply()uint256'])}
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_balanceOf(address)uint256` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc200BalanceOf: async (params: CallParams<Arc200Args['obj']['arc200_balanceOf(address)uint256'] | Arc200Args['tuple']['arc200_balanceOf(address)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200BalanceOf(params))
      return {...result, return: result.return as unknown as (undefined | Arc200Returns['arc200_balanceOf(address)uint256'])}
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_transferFrom(address,address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc200TransferFrom: async (params: CallParams<Arc200Args['obj']['arc200_transferFrom(address,address,uint256)bool'] | Arc200Args['tuple']['arc200_transferFrom(address,address,uint256)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200TransferFrom(params))
      return {...result, return: result.return as unknown as (undefined | Arc200Returns['arc200_transferFrom(address,address,uint256)bool'])}
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_transfer(address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc200Transfer: async (params: CallParams<Arc200Args['obj']['arc200_transfer(address,uint256)bool'] | Arc200Args['tuple']['arc200_transfer(address,uint256)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Transfer(params))
      return {...result, return: result.return as unknown as (undefined | Arc200Returns['arc200_transfer(address,uint256)bool'])}
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_approve(address,uint256)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc200Approve: async (params: CallParams<Arc200Args['obj']['arc200_approve(address,uint256)bool'] | Arc200Args['tuple']['arc200_approve(address,uint256)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Approve(params))
      return {...result, return: result.return as unknown as (undefined | Arc200Returns['arc200_approve(address,uint256)bool'])}
    },

    /**
     * Makes a call to the ARC200 smart contract using the `arc200_allowance(address,address)uint256` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc200Allowance: async (params: CallParams<Arc200Args['obj']['arc200_allowance(address,address)uint256'] | Arc200Args['tuple']['arc200_allowance(address,address)uint256']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc200ParamsFactory.arc200Allowance(params))
      return {...result, return: result.return as unknown as (undefined | Arc200Returns['arc200_allowance(address,address)uint256'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Arc200Client(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ARC200 app
   */
  state = {
    /**
     * Methods to access global state for the current ARC200 app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          name: result.name,
          symbol: result.symbol,
          decimals: result.decimals,
          totalSupply: result.totalSupply,
        }
      },
      /**
       * Get the current value of the name key in global state
       */
      name: async (): Promise<Uint8Array | undefined> => { return (await this.appClient.state.global.getValue("name")) as Uint8Array | undefined },
      /**
       * Get the current value of the symbol key in global state
       */
      symbol: async (): Promise<Uint8Array | undefined> => { return (await this.appClient.state.global.getValue("symbol")) as Uint8Array | undefined },
      /**
       * Get the current value of the decimals key in global state
       */
      decimals: async (): Promise<number | undefined> => { return (await this.appClient.state.global.getValue("decimals")) as number | undefined },
      /**
       * Get the current value of the totalSupply key in global state
       */
      totalSupply: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalSupply")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current ARC200 app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the balances map in box state
       */
      balances: {
        /**
         * Get all current values of the balances map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("balances")) as Map<string, bigint> },
        /**
         * Get a current value of the balances map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("balances", key) as bigint | undefined },
      },
      /**
       * Get values from the allowances map in box state
       */
      allowances: {
        /**
         * Get all current values of the allowances map in box state
         */
        getMap: async (): Promise<Map<Approval, bigint>> => { return (await this.appClient.state.box.getMap("allowances")) as Map<Approval, bigint> },
        /**
         * Get a current value of the allowances map by key from box state
         */
        value: async (key: Approval): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("allowances", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): Arc200Composer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a arc200_name()byte[32] method call against the ARC200 contract
       */
      arc200Name(params: CallParams<Arc200Args['obj']['arc200_name()byte[32]'] | Arc200Args['tuple']['arc200_name()byte[32]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Name(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_name()byte[32]', v))
        return this
      },
      /**
       * Add a arc200_symbol()byte[8] method call against the ARC200 contract
       */
      arc200Symbol(params: CallParams<Arc200Args['obj']['arc200_symbol()byte[8]'] | Arc200Args['tuple']['arc200_symbol()byte[8]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Symbol(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_symbol()byte[8]', v))
        return this
      },
      /**
       * Add a arc200_decimals()uint8 method call against the ARC200 contract
       */
      arc200Decimals(params: CallParams<Arc200Args['obj']['arc200_decimals()uint8'] | Arc200Args['tuple']['arc200_decimals()uint8']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Decimals(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_decimals()uint8', v))
        return this
      },
      /**
       * Add a arc200_totalSupply()uint256 method call against the ARC200 contract
       */
      arc200TotalSupply(params: CallParams<Arc200Args['obj']['arc200_totalSupply()uint256'] | Arc200Args['tuple']['arc200_totalSupply()uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200TotalSupply(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_totalSupply()uint256', v))
        return this
      },
      /**
       * Add a arc200_balanceOf(address)uint256 method call against the ARC200 contract
       */
      arc200BalanceOf(params: CallParams<Arc200Args['obj']['arc200_balanceOf(address)uint256'] | Arc200Args['tuple']['arc200_balanceOf(address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200BalanceOf(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_balanceOf(address)uint256', v))
        return this
      },
      /**
       * Add a arc200_transferFrom(address,address,uint256)bool method call against the ARC200 contract
       */
      arc200TransferFrom(params: CallParams<Arc200Args['obj']['arc200_transferFrom(address,address,uint256)bool'] | Arc200Args['tuple']['arc200_transferFrom(address,address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200TransferFrom(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_transferFrom(address,address,uint256)bool', v))
        return this
      },
      /**
       * Add a arc200_transfer(address,uint256)bool method call against the ARC200 contract
       */
      arc200Transfer(params: CallParams<Arc200Args['obj']['arc200_transfer(address,uint256)bool'] | Arc200Args['tuple']['arc200_transfer(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Transfer(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_transfer(address,uint256)bool', v))
        return this
      },
      /**
       * Add a arc200_approve(address,uint256)bool method call against the ARC200 contract
       */
      arc200Approve(params: CallParams<Arc200Args['obj']['arc200_approve(address,uint256)bool'] | Arc200Args['tuple']['arc200_approve(address,uint256)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Approve(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_approve(address,uint256)bool', v))
        return this
      },
      /**
       * Add a arc200_allowance(address,address)uint256 method call against the ARC200 contract
       */
      arc200Allowance(params: CallParams<Arc200Args['obj']['arc200_allowance(address,address)uint256'] | Arc200Args['tuple']['arc200_allowance(address,address)uint256']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc200Allowance(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc200_allowance(address,address)uint256', v))
        return this
      },
      /**
       * Add a clear state call to the ARC200 contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Arc200Composer
  }
}
export type Arc200Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc200_name()byte[32] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Name(params?: CallParams<Arc200Args['obj']['arc200_name()byte[32]'] | Arc200Args['tuple']['arc200_name()byte[32]']>): Arc200Composer<[...TReturns, Arc200Returns['arc200_name()byte[32]'] | undefined]>

  /**
   * Calls the arc200_symbol()byte[8] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Symbol(params?: CallParams<Arc200Args['obj']['arc200_symbol()byte[8]'] | Arc200Args['tuple']['arc200_symbol()byte[8]']>): Arc200Composer<[...TReturns, Arc200Returns['arc200_symbol()byte[8]'] | undefined]>

  /**
   * Calls the arc200_decimals()uint8 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Decimals(params?: CallParams<Arc200Args['obj']['arc200_decimals()uint8'] | Arc200Args['tuple']['arc200_decimals()uint8']>): Arc200Composer<[...TReturns, Arc200Returns['arc200_decimals()uint8'] | undefined]>

  /**
   * Calls the arc200_totalSupply()uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200TotalSupply(params?: CallParams<Arc200Args['obj']['arc200_totalSupply()uint256'] | Arc200Args['tuple']['arc200_totalSupply()uint256']>): Arc200Composer<[...TReturns, Arc200Returns['arc200_totalSupply()uint256'] | undefined]>

  /**
   * Calls the arc200_balanceOf(address)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200BalanceOf(params?: CallParams<Arc200Args['obj']['arc200_balanceOf(address)uint256'] | Arc200Args['tuple']['arc200_balanceOf(address)uint256']>): Arc200Composer<[...TReturns, Arc200Returns['arc200_balanceOf(address)uint256'] | undefined]>

  /**
   * Calls the arc200_transferFrom(address,address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200TransferFrom(params?: CallParams<Arc200Args['obj']['arc200_transferFrom(address,address,uint256)bool'] | Arc200Args['tuple']['arc200_transferFrom(address,address,uint256)bool']>): Arc200Composer<[...TReturns, Arc200Returns['arc200_transferFrom(address,address,uint256)bool'] | undefined]>

  /**
   * Calls the arc200_transfer(address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Transfer(params?: CallParams<Arc200Args['obj']['arc200_transfer(address,uint256)bool'] | Arc200Args['tuple']['arc200_transfer(address,uint256)bool']>): Arc200Composer<[...TReturns, Arc200Returns['arc200_transfer(address,uint256)bool'] | undefined]>

  /**
   * Calls the arc200_approve(address,uint256)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Approve(params?: CallParams<Arc200Args['obj']['arc200_approve(address,uint256)bool'] | Arc200Args['tuple']['arc200_approve(address,uint256)bool']>): Arc200Composer<[...TReturns, Arc200Returns['arc200_approve(address,uint256)bool'] | undefined]>

  /**
   * Calls the arc200_allowance(address,address)uint256 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc200Allowance(params?: CallParams<Arc200Args['obj']['arc200_allowance(address,address)uint256'] | Arc200Args['tuple']['arc200_allowance(address,address)uint256']>): Arc200Composer<[...TReturns, Arc200Returns['arc200_allowance(address,address)uint256'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ARC200 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Arc200Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc200Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc200ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Arc200ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Arc200ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Arc200ComposerResults<TReturns>>
}
export type Arc200ComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ARC11550Transfer","desc":"","methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"arc11550_mint","args":[{"name":"accountingApp","type":"uint64"},{"name":"params","type":"(byte[32],byte[8],uint64,uint64,address)","struct":"Params"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_transfer","args":[{"name":"accountingApp","type":"uint64"},{"name":"transfers","type":"(uint64,address,address,uint64)[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"AccountAppAndAssetId":[{"name":"accountingApp","type":"uint64"},{"name":"id","type":"uint64"}],"Params":[{"name":"name","type":"byte[32]"},{"name":"symbol","type":"byte[8]"},{"name":"total","type":"uint64"},{"name":"decimals","type":"uint64"},{"name":"manager","type":"address"}]},"state":{"schema":{"global":{"bytes":0,"ints":2},"local":{"bytes":0,"ints":0}},"keys":{"global":{"transferHookApp":{"key":"dHJhbnNmZXJIb29rQXBw","keyType":"AVMBytes","valueType":"uint64"},"universalId":{"key":"dW5pdmVyc2FsSWQ=","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"idMapping":{"keyType":"uint64","valueType":"AccountAppAndAssetId"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/ARC11550Transfer.algo.ts:12","pc":[0]},{"teal":2,"source":"contracts/ARC11550Transfer.algo.ts:12","pc":[1,2,3,4,5,6]},{"teal":3,"source":"contracts/ARC11550Transfer.algo.ts:12","pc":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]},{"teal":15,"source":"contracts/ARC11550Transfer.algo.ts:12","pc":[38,39]},{"teal":16,"source":"contracts/ARC11550Transfer.algo.ts:12","pc":[40]},{"teal":17,"source":"contracts/ARC11550Transfer.algo.ts:12","pc":[41]},{"teal":18,"source":"contracts/ARC11550Transfer.algo.ts:12","pc":[42]},{"teal":19,"source":"contracts/ARC11550Transfer.algo.ts:12","pc":[43,44]},{"teal":20,"source":"contracts/ARC11550Transfer.algo.ts:12","pc":[45]},{"teal":21,"source":"contracts/ARC11550Transfer.algo.ts:12","pc":[46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71]},{"teal":25,"source":"contracts/ARC11550Transfer.algo.ts:12","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[72]},{"teal":30,"source":"contracts/ARC11550Transfer.algo.ts:23","pc":[73,74,75]},{"teal":31,"source":"contracts/ARC11550Transfer.algo.ts:23","pc":[76]},{"teal":32,"source":"contracts/ARC11550Transfer.algo.ts:23","pc":[77]},{"teal":36,"source":"contracts/ARC11550Transfer.algo.ts:23","pc":[78,79,80]},{"teal":40,"source":"contracts/ARC11550Transfer.algo.ts:24","pc":[81]},{"teal":41,"source":"contracts/ARC11550Transfer.algo.ts:24","pc":[82,83]},{"teal":42,"source":"contracts/ARC11550Transfer.algo.ts:24","pc":[84,85]},{"teal":43,"source":"contracts/ARC11550Transfer.algo.ts:24","pc":[86]},{"teal":44,"source":"contracts/ARC11550Transfer.algo.ts:24","pc":[87]},{"teal":45,"source":"contracts/ARC11550Transfer.algo.ts:24","pc":[88]},{"teal":46,"source":"contracts/ARC11550Transfer.algo.ts:24","pc":[89]},{"teal":47,"source":"contracts/ARC11550Transfer.algo.ts:23","pc":[90]},{"teal":52,"source":"contracts/ARC11550Transfer.algo.ts:27","pc":[91,92,93,94,95,96]},{"teal":55,"source":"contracts/ARC11550Transfer.algo.ts:27","pc":[97,98,99]},{"teal":56,"source":"contracts/ARC11550Transfer.algo.ts:27","pc":[100]},{"teal":57,"source":"contracts/ARC11550Transfer.algo.ts:27","pc":[101]},{"teal":58,"source":"contracts/ARC11550Transfer.algo.ts:27","pc":[102,103]},{"teal":59,"source":"contracts/ARC11550Transfer.algo.ts:27","pc":[104]},{"teal":62,"source":"contracts/ARC11550Transfer.algo.ts:27","errorMessage":"argument 0 (params) for arc11550_mint must be a (byte[32],byte[8],uint64,uint64,address)","pc":[105]},{"teal":65,"source":"contracts/ARC11550Transfer.algo.ts:27","pc":[106,107,108]},{"teal":66,"source":"contracts/ARC11550Transfer.algo.ts:27","pc":[109]},{"teal":69,"source":"contracts/ARC11550Transfer.algo.ts:27","pc":[110,111,112]},{"teal":70,"source":"contracts/ARC11550Transfer.algo.ts:27","pc":[113]},{"teal":71,"source":"contracts/ARC11550Transfer.algo.ts:27","pc":[114]},{"teal":72,"source":"contracts/ARC11550Transfer.algo.ts:27","pc":[115]},{"teal":73,"source":"contracts/ARC11550Transfer.algo.ts:27","pc":[116]},{"teal":74,"source":"contracts/ARC11550Transfer.algo.ts:27","pc":[117]},{"teal":78,"source":"contracts/ARC11550Transfer.algo.ts:27","pc":[118,119,120]},{"teal":81,"source":"contracts/ARC11550Transfer.algo.ts:27","pc":[121]},{"teal":82,"source":"contracts/ARC11550Transfer.algo.ts:27","pc":[122]},{"teal":86,"source":"contracts/ARC11550Transfer.algo.ts:28","pc":[123]},{"teal":87,"source":"contracts/ARC11550Transfer.algo.ts:28","pc":[124]},{"teal":88,"source":"contracts/ARC11550Transfer.algo.ts:28","pc":[125,126]},{"teal":92,"source":"contracts/ARC11550Transfer.algo.ts:29","pc":[127]},{"teal":93,"source":"contracts/ARC11550Transfer.algo.ts:29","pc":[128]},{"teal":94,"source":"contracts/ARC11550Transfer.algo.ts:29","pc":[129]},{"teal":95,"source":"contracts/ARC11550Transfer.algo.ts:29","pc":[130]},{"teal":96,"source":"contracts/ARC11550Transfer.algo.ts:29","pc":[131]},{"teal":97,"source":"contracts/ARC11550Transfer.algo.ts:29","pc":[132]},{"teal":98,"source":"contracts/ARC11550Transfer.algo.ts:29","pc":[133]},{"teal":102,"source":"contracts/ARC11550Transfer.algo.ts:31","pc":[134]},{"teal":103,"source":"contracts/ARC11550Transfer.algo.ts:31","pc":[135]},{"teal":104,"source":"contracts/ARC11550Transfer.algo.ts:31","pc":[136,137]},{"teal":105,"source":"contracts/ARC11550Transfer.algo.ts:31","pc":[138,139,140,141,142,143]},{"teal":106,"source":"contracts/ARC11550Transfer.algo.ts:31","pc":[144,145]},{"teal":109,"source":"contracts/ARC11550Transfer.algo.ts:31","pc":[146]},{"teal":110,"source":"contracts/ARC11550Transfer.algo.ts:31","pc":[147,148]},{"teal":113,"source":"contracts/ARC11550Transfer.algo.ts:31","pc":[149]},{"teal":114,"source":"contracts/ARC11550Transfer.algo.ts:31","pc":[150,151]},{"teal":115,"source":"contracts/ARC11550Transfer.algo.ts:31","pc":[152]},{"teal":116,"source":"contracts/ARC11550Transfer.algo.ts:31","pc":[153]},{"teal":117,"source":"contracts/ARC11550Transfer.algo.ts:31","pc":[154,155]},{"teal":118,"source":"contracts/ARC11550Transfer.algo.ts:31","pc":[156,157,158]},{"teal":119,"source":"contracts/ARC11550Transfer.algo.ts:31","pc":[159]},{"teal":120,"source":"contracts/ARC11550Transfer.algo.ts:31","pc":[160,161]},{"teal":124,"source":"contracts/ARC11550Transfer.algo.ts:33","pc":[162,163]},{"teal":125,"source":"contracts/ARC11550Transfer.algo.ts:33","pc":[164]},{"teal":126,"source":"contracts/ARC11550Transfer.algo.ts:33","pc":[165,166]},{"teal":127,"source":"contracts/ARC11550Transfer.algo.ts:33","pc":[167]},{"teal":128,"source":"contracts/ARC11550Transfer.algo.ts:33","pc":[168,169]},{"teal":129,"source":"contracts/ARC11550Transfer.algo.ts:33","pc":[170]},{"teal":130,"source":"contracts/ARC11550Transfer.algo.ts:33","pc":[171]},{"teal":131,"source":"contracts/ARC11550Transfer.algo.ts:33","pc":[172]},{"teal":135,"source":"contracts/ARC11550Transfer.algo.ts:34","pc":[173,174]},{"teal":138,"source":"contracts/ARC11550Transfer.algo.ts:27","pc":[175,176]},{"teal":141,"source":"contracts/ARC11550Transfer.algo.ts:27","pc":[177,178]},{"teal":142,"source":"contracts/ARC11550Transfer.algo.ts:27","pc":[179]},{"teal":147,"source":"contracts/ARC11550Transfer.algo.ts:37","pc":[180,181,182]},{"teal":148,"source":"contracts/ARC11550Transfer.algo.ts:37","pc":[183,184,185]},{"teal":151,"source":"contracts/ARC11550Transfer.algo.ts:37","pc":[186,187,188]},{"teal":152,"source":"contracts/ARC11550Transfer.algo.ts:37","pc":[189]},{"teal":155,"source":"contracts/ARC11550Transfer.algo.ts:37","pc":[190,191,192]},{"teal":156,"source":"contracts/ARC11550Transfer.algo.ts:37","pc":[193]},{"teal":157,"source":"contracts/ARC11550Transfer.algo.ts:37","pc":[194]},{"teal":161,"source":"contracts/ARC11550Transfer.algo.ts:37","pc":[195,196,197]},{"teal":166,"source":"contracts/ARC11550Transfer.algo.ts:39","pc":[198,199,200]},{"teal":167,"source":"contracts/ARC11550Transfer.algo.ts:39","pc":[201]},{"teal":168,"source":"contracts/ARC11550Transfer.algo.ts:39","pc":[202]},{"teal":169,"source":"contracts/ARC11550Transfer.algo.ts:39","pc":[203]},{"teal":170,"source":"contracts/ARC11550Transfer.algo.ts:39","pc":[204]},{"teal":171,"source":"contracts/ARC11550Transfer.algo.ts:39","pc":[205,206,207]},{"teal":181,"source":"contracts/ARC11550Transfer.algo.ts:41","pc":[208]},{"teal":182,"source":"contracts/ARC11550Transfer.algo.ts:41","pc":[209]},{"teal":183,"source":"contracts/ARC11550Transfer.algo.ts:41","pc":[210,211]},{"teal":184,"source":"contracts/ARC11550Transfer.algo.ts:41","pc":[212,213,214,215,216,217]},{"teal":185,"source":"contracts/ARC11550Transfer.algo.ts:41","pc":[218,219]},{"teal":189,"source":"contracts/ARC11550Transfer.algo.ts:42","pc":[220]},{"teal":190,"source":"contracts/ARC11550Transfer.algo.ts:42","pc":[221]},{"teal":191,"source":"contracts/ARC11550Transfer.algo.ts:42","pc":[222,223]},{"teal":195,"source":"contracts/ARC11550Transfer.algo.ts:43","pc":[224,225]},{"teal":196,"source":"contracts/ARC11550Transfer.algo.ts:43","pc":[226,227]},{"teal":197,"source":"contracts/ARC11550Transfer.algo.ts:43","pc":[228,229]},{"teal":198,"source":"contracts/ARC11550Transfer.algo.ts:43","pc":[230]},{"teal":199,"source":"contracts/ARC11550Transfer.algo.ts:43","pc":[231]},{"teal":200,"source":"contracts/ARC11550Transfer.algo.ts:43","pc":[232]},{"teal":201,"source":"contracts/ARC11550Transfer.algo.ts:43","pc":[233]},{"teal":202,"source":"contracts/ARC11550Transfer.algo.ts:43","pc":[234]},{"teal":203,"source":"contracts/ARC11550Transfer.algo.ts:43","pc":[235,236,237]},{"teal":204,"source":"contracts/ARC11550Transfer.algo.ts:43","pc":[238]},{"teal":205,"source":"contracts/ARC11550Transfer.algo.ts:43","pc":[239]},{"teal":206,"source":"contracts/ARC11550Transfer.algo.ts:43","pc":[240,241]},{"teal":209,"source":"contracts/ARC11550Transfer.algo.ts:41","pc":[242]},{"teal":210,"source":"contracts/ARC11550Transfer.algo.ts:41","pc":[243,244]},{"teal":213,"source":"contracts/ARC11550Transfer.algo.ts:41","pc":[245]},{"teal":214,"source":"contracts/ARC11550Transfer.algo.ts:41","pc":[246,247]},{"teal":215,"source":"contracts/ARC11550Transfer.algo.ts:41","pc":[248]},{"teal":216,"source":"contracts/ARC11550Transfer.algo.ts:41","pc":[249]},{"teal":217,"source":"contracts/ARC11550Transfer.algo.ts:41","pc":[250,251]},{"teal":218,"source":"contracts/ARC11550Transfer.algo.ts:41","pc":[252,253,254]},{"teal":219,"source":"contracts/ARC11550Transfer.algo.ts:41","pc":[255]},{"teal":220,"source":"contracts/ARC11550Transfer.algo.ts:41","pc":[256]},{"teal":221,"source":"contracts/ARC11550Transfer.algo.ts:40","pc":[257]},{"teal":229,"source":"contracts/ARC11550Transfer.algo.ts:48","pc":[258]},{"teal":230,"source":"contracts/ARC11550Transfer.algo.ts:48","pc":[259]},{"teal":231,"source":"contracts/ARC11550Transfer.algo.ts:48","pc":[260,261]},{"teal":232,"source":"contracts/ARC11550Transfer.algo.ts:48","pc":[262,263,264,265,266,267]},{"teal":233,"source":"contracts/ARC11550Transfer.algo.ts:48","pc":[268,269]},{"teal":237,"source":"contracts/ARC11550Transfer.algo.ts:49","pc":[270,271]},{"teal":238,"source":"contracts/ARC11550Transfer.algo.ts:49","pc":[272,273]},{"teal":242,"source":"contracts/ARC11550Transfer.algo.ts:50","pc":[274,275]},{"teal":243,"source":"contracts/ARC11550Transfer.algo.ts:50","pc":[276]},{"teal":244,"source":"contracts/ARC11550Transfer.algo.ts:50","pc":[277]},{"teal":245,"source":"contracts/ARC11550Transfer.algo.ts:50","pc":[278]},{"teal":246,"source":"contracts/ARC11550Transfer.algo.ts:50","pc":[279]},{"teal":247,"source":"contracts/ARC11550Transfer.algo.ts:50","pc":[280]},{"teal":248,"source":"contracts/ARC11550Transfer.algo.ts:50","pc":[281,282,283]},{"teal":249,"source":"contracts/ARC11550Transfer.algo.ts:50","pc":[284]},{"teal":250,"source":"contracts/ARC11550Transfer.algo.ts:50","pc":[285]},{"teal":251,"source":"contracts/ARC11550Transfer.algo.ts:50","pc":[286,287]},{"teal":254,"source":"contracts/ARC11550Transfer.algo.ts:48","pc":[288]},{"teal":255,"source":"contracts/ARC11550Transfer.algo.ts:48","pc":[289,290]},{"teal":258,"source":"contracts/ARC11550Transfer.algo.ts:48","pc":[291]},{"teal":259,"source":"contracts/ARC11550Transfer.algo.ts:37","pc":[292]},{"teal":262,"source":"contracts/ARC11550Transfer.algo.ts:12","pc":[293,294,295,296,297,298]},{"teal":263,"source":"contracts/ARC11550Transfer.algo.ts:12","pc":[299,300,301]},{"teal":264,"source":"contracts/ARC11550Transfer.algo.ts:12","pc":[302,303,304,305]},{"teal":267,"source":"contracts/ARC11550Transfer.algo.ts:12","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[306]},{"teal":270,"source":"contracts/ARC11550Transfer.algo.ts:12","pc":[307,308,309,310,311,312]},{"teal":271,"source":"contracts/ARC11550Transfer.algo.ts:12","pc":[313,314,315,316,317,318]},{"teal":272,"source":"contracts/ARC11550Transfer.algo.ts:12","pc":[319,320,321]},{"teal":273,"source":"contracts/ARC11550Transfer.algo.ts:12","pc":[322,323,324,325,326,327]},{"teal":276,"source":"contracts/ARC11550Transfer.algo.ts:12","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[328]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAEAQAGUCYDC3VuaXZlcnNhbElkD3RyYW5zZmVySG9va0FwcAAxGBQkCzEZCI0MAOsAAAAAAAAAAAAAAN0AAAAAAAAAAAAAAIgAAiJDigAAKIECgUCUIglniYAEFR98dTYaAkkVgVgSRDYaAReIAAUWULAiQ4oCASpJKGSMAChkIgkoTGexJLIQgARBBXhVshojsgGztDsiCcU6VwQAF4wBiwAWi/8WiwEWUL+LAYwARgGJNhoCVwIANhoBF4gAAiJDigIANjIAKWVMSEEAMrEkshCABLTBenuyGilkshgxALIai/5JFSUKFlcGAkxQshojsgGztDsiCcU6VwQAI1NEsSSyEIAEYrUHi7Iai/+yGIv+SRUlChZXBgJMULIaI7IBs4mABLhEezY2GgCOAf8XAIAEDMM2BIAEYbrPyDYaAI4C/xP/bAA=","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type AccountAppAndAssetId = {
  accountingApp: bigint,
  id: bigint
}


/**
 * Converts the ABI tuple representation of a AccountAppAndAssetId to the struct representation
 */
export function AccountAppAndAssetIdFromTuple(abiTuple: [bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AccountAppAndAssetId, APP_SPEC.structs) as AccountAppAndAssetId
}

export type Params = {
  name: Uint8Array,
  symbol: Uint8Array,
  total: bigint,
  decimals: bigint,
  manager: string
}


/**
 * Converts the ABI tuple representation of a Params to the struct representation
 */
export function ParamsFromTuple(abiTuple: [Uint8Array, Uint8Array, bigint, bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Params, APP_SPEC.structs) as Params
}

/**
 * The argument types for the Arc11550Transfer contract
 */
export type Arc11550TransferArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64': {
      accountingApp: bigint | number
      params: Params
    }
    'arc11550_transfer(uint64,(uint64,address,address,uint64)[])void': {
      accountingApp: bigint | number
      transfers: [bigint | number, string, string, bigint | number][]
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64': [accountingApp: bigint | number, params: Params]
    'arc11550_transfer(uint64,(uint64,address,address,uint64)[])void': [accountingApp: bigint | number, transfers: [bigint | number, string, string, bigint | number][]]
  }
}

/**
 * The return type for each method
 */
export type Arc11550TransferReturns = {
  'createApplication()void': void
  'arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64': bigint
  'arc11550_transfer(uint64,(uint64,address,address,uint64)[])void': void
}

/**
 * Defines the types of available calls and state of the Arc11550Transfer smart contract.
 */
export type Arc11550TransferTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: Arc11550TransferArgs['obj']['createApplication()void']
      argsTuple: Arc11550TransferArgs['tuple']['createApplication()void']
      returns: Arc11550TransferReturns['createApplication()void']
    }>
    & Record<'arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64' | 'arc11550_mint', {
      argsObj: Arc11550TransferArgs['obj']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64']
      argsTuple: Arc11550TransferArgs['tuple']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64']
      returns: Arc11550TransferReturns['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64']
    }>
    & Record<'arc11550_transfer(uint64,(uint64,address,address,uint64)[])void' | 'arc11550_transfer', {
      argsObj: Arc11550TransferArgs['obj']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void']
      argsTuple: Arc11550TransferArgs['tuple']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void']
      returns: Arc11550TransferReturns['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        transferHookApp: bigint
        universalId: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        idMapping: Map<bigint | number, AccountAppAndAssetId>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Arc11550TransferSignatures = keyof Arc11550TransferTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Arc11550TransferNonVoidMethodSignatures = keyof Arc11550TransferTypes['methods'] extends infer T ? T extends keyof Arc11550TransferTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Arc11550Transfer smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Arc11550TransferSignatures> = Arc11550TransferTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc11550Transfer smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc11550TransferSignatures> = Arc11550TransferTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = Arc11550TransferTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = Arc11550TransferTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Arc11550TransferCreateCallParams =
  | Expand<CallParams<Arc11550TransferArgs['obj']['createApplication()void'] | Arc11550TransferArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<Arc11550TransferArgs['obj']['createApplication()void'] | Arc11550TransferArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Arc11550TransferDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Arc11550TransferCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc11550Transfer smart contract
 */
export abstract class Arc11550TransferParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends Arc11550TransferCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return Arc11550TransferParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ARC11550Transfer smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<Arc11550TransferArgs['obj']['createApplication()void'] | Arc11550TransferArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Mint(params: CallParams<Arc11550TransferArgs['obj']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550TransferArgs['tuple']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.accountingApp, params.args.params],
    }
  }
  /**
   * Constructs a no op call for the arc11550_transfer(uint64,(uint64,address,address,uint64)[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Transfer(params: CallParams<Arc11550TransferArgs['obj']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void'] | Arc11550TransferArgs['tuple']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_transfer(uint64,(uint64,address,address,uint64)[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.accountingApp, params.args.transfers],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ARC11550Transfer smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Arc11550TransferFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Arc11550TransferFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Arc11550TransferClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Arc11550TransferClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ARC11550Transfer smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Arc11550TransferDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? Arc11550TransferParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (Arc11550TransferCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new Arc11550TransferClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Transfer smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<Arc11550TransferArgs['obj']['createApplication()void'] | Arc11550TransferArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(Arc11550TransferParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Transfer smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<Arc11550TransferArgs['obj']['createApplication()void'] | Arc11550TransferArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(Arc11550TransferParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Transfer smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<Arc11550TransferArgs['obj']['createApplication()void'] | Arc11550TransferArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(Arc11550TransferParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | Arc11550TransferReturns['createApplication()void']) }, appClient: new Arc11550TransferClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ARC11550Transfer smart contract
 */
export class Arc11550TransferClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Arc11550TransferClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Arc11550Transfer app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Arc11550TransferClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Arc11550TransferNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Arc11550TransferClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Arc11550TransferClient> {
    return new Arc11550TransferClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Arc11550TransferClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Arc11550TransferClient> {
    return new Arc11550TransferClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Transfer smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Transfer smart contract using the `arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Mint: (params: CallParams<Arc11550TransferArgs['obj']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550TransferArgs['tuple']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550TransferParamsFactory.arc11550Mint(params))
    },

    /**
     * Makes a call to the ARC11550Transfer smart contract using the `arc11550_transfer(uint64,(uint64,address,address,uint64)[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Transfer: (params: CallParams<Arc11550TransferArgs['obj']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void'] | Arc11550TransferArgs['tuple']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550TransferParamsFactory.arc11550Transfer(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Transfer smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Transfer smart contract using the `arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Mint: (params: CallParams<Arc11550TransferArgs['obj']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550TransferArgs['tuple']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550TransferParamsFactory.arc11550Mint(params))
    },

    /**
     * Makes a call to the ARC11550Transfer smart contract using the `arc11550_transfer(uint64,(uint64,address,address,uint64)[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Transfer: (params: CallParams<Arc11550TransferArgs['obj']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void'] | Arc11550TransferArgs['tuple']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550TransferParamsFactory.arc11550Transfer(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Transfer smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Transfer smart contract using the `arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Mint: async (params: CallParams<Arc11550TransferArgs['obj']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550TransferArgs['tuple']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550TransferParamsFactory.arc11550Mint(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550TransferReturns['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64'])}
    },

    /**
     * Makes a call to the ARC11550Transfer smart contract using the `arc11550_transfer(uint64,(uint64,address,address,uint64)[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Transfer: async (params: CallParams<Arc11550TransferArgs['obj']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void'] | Arc11550TransferArgs['tuple']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550TransferParamsFactory.arc11550Transfer(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550TransferReturns['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Arc11550TransferClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ARC11550Transfer app
   */
  state = {
    /**
     * Methods to access global state for the current ARC11550Transfer app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          transferHookApp: result.transferHookApp,
          universalId: result.universalId,
        }
      },
      /**
       * Get the current value of the transferHookApp key in global state
       */
      transferHookApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("transferHookApp")) as bigint | undefined },
      /**
       * Get the current value of the universalId key in global state
       */
      universalId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("universalId")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current ARC11550Transfer app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the idMapping map in box state
       */
      idMapping: {
        /**
         * Get all current values of the idMapping map in box state
         */
        getMap: async (): Promise<Map<bigint, AccountAppAndAssetId>> => { return (await this.appClient.state.box.getMap("idMapping")) as Map<bigint, AccountAppAndAssetId> },
        /**
         * Get a current value of the idMapping map by key from box state
         */
        value: async (key: bigint | number): Promise<AccountAppAndAssetId | undefined> => { return await this.appClient.state.box.getMapValue("idMapping", key) as AccountAppAndAssetId | undefined },
      },
    },
  }

  public newGroup(): Arc11550TransferComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64 method call against the ARC11550Transfer contract
       */
      arc11550Mint(params: CallParams<Arc11550TransferArgs['obj']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550TransferArgs['tuple']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Mint(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64', v))
        return this
      },
      /**
       * Add a arc11550_transfer(uint64,(uint64,address,address,uint64)[])void method call against the ARC11550Transfer contract
       */
      arc11550Transfer(params: CallParams<Arc11550TransferArgs['obj']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void'] | Arc11550TransferArgs['tuple']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Transfer(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the ARC11550Transfer contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Arc11550TransferComposer
  }
}
export type Arc11550TransferComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Mint(params?: CallParams<Arc11550TransferArgs['obj']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550TransferArgs['tuple']['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64']>): Arc11550TransferComposer<[...TReturns, Arc11550TransferReturns['arc11550_mint(uint64,(byte[32],byte[8],uint64,uint64,address))uint64'] | undefined]>

  /**
   * Calls the arc11550_transfer(uint64,(uint64,address,address,uint64)[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Transfer(params?: CallParams<Arc11550TransferArgs['obj']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void'] | Arc11550TransferArgs['tuple']['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void']>): Arc11550TransferComposer<[...TReturns, Arc11550TransferReturns['arc11550_transfer(uint64,(uint64,address,address,uint64)[])void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ARC11550Transfer smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Arc11550TransferComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc11550TransferComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc11550TransferComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Arc11550TransferComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Arc11550TransferComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Arc11550TransferComposerResults<TReturns>>
}
export type Arc11550TransferComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


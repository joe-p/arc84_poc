/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ARC11550TransferHook","desc":"","methods":[{"name":"approved","desc":"Determines whether a transfer is approved or not. This implementation just ensures the caller is sending from their own address, but\nthere are other possibilities such as ERC20-style approvals, whitelists, blacklists, enforced royalties, etc.","args":[{"name":"caller","type":"address"},{"name":"transfers","type":"(uint64,address,address,uint64)[]"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]}},{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":0,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/ARC11550.algo.ts:82","pc":[0]},{"teal":2,"source":"contracts/ARC11550.algo.ts:82","pc":[1,2,3,4,5,6]},{"teal":3,"source":"contracts/ARC11550.algo.ts:82","pc":[7,8,9]},{"teal":15,"source":"contracts/ARC11550.algo.ts:82","pc":[10,11]},{"teal":16,"source":"contracts/ARC11550.algo.ts:82","pc":[12]},{"teal":17,"source":"contracts/ARC11550.algo.ts:82","pc":[13,14]},{"teal":18,"source":"contracts/ARC11550.algo.ts:82","pc":[15]},{"teal":19,"source":"contracts/ARC11550.algo.ts:82","pc":[16,17]},{"teal":20,"source":"contracts/ARC11550.algo.ts:82","pc":[18]},{"teal":21,"source":"contracts/ARC11550.algo.ts:82","pc":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44]},{"teal":25,"source":"contracts/ARC11550.algo.ts:82","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[45]},{"teal":30,"source":"contracts/ARC11550.algo.ts:85","pc":[46,47,48,49,50,51]},{"teal":33,"source":"contracts/ARC11550.algo.ts:85","pc":[52,53,54]},{"teal":34,"source":"contracts/ARC11550.algo.ts:85","pc":[55,56,57]},{"teal":37,"source":"contracts/ARC11550.algo.ts:85","pc":[58,59,60]},{"teal":38,"source":"contracts/ARC11550.algo.ts:85","pc":[61]},{"teal":39,"source":"contracts/ARC11550.algo.ts:85","pc":[62]},{"teal":40,"source":"contracts/ARC11550.algo.ts:85","pc":[63]},{"teal":41,"source":"contracts/ARC11550.algo.ts:85","pc":[64]},{"teal":44,"source":"contracts/ARC11550.algo.ts:85","errorMessage":"argument 1 (caller) for approved must be a address","pc":[65]},{"teal":47,"source":"contracts/ARC11550.algo.ts:85","pc":[66,67,68]},{"teal":48,"source":"contracts/ARC11550.algo.ts:85","pc":[69,70,71]},{"teal":49,"source":"contracts/ARC11550.algo.ts:85","pc":[72]},{"teal":50,"source":"contracts/ARC11550.algo.ts:85","pc":[73,74]},{"teal":51,"source":"contracts/ARC11550.algo.ts:85","pc":[75]},{"teal":52,"source":"contracts/ARC11550.algo.ts:85","pc":[76]},{"teal":53,"source":"contracts/ARC11550.algo.ts:85","pc":[77]},{"teal":54,"source":"contracts/ARC11550.algo.ts:85","pc":[78]},{"teal":55,"source":"contracts/ARC11550.algo.ts:85","pc":[79]},{"teal":62,"source":"contracts/ARC11550.algo.ts:85","pc":[80,81,82]},{"teal":65,"source":"contracts/ARC11550.algo.ts:85","pc":[83]},{"teal":66,"source":"contracts/ARC11550.algo.ts:85","pc":[84]},{"teal":70,"source":"contracts/ARC11550.algo.ts:86","pc":[85]},{"teal":71,"source":"contracts/ARC11550.algo.ts:86","pc":[86,87]},{"teal":76,"source":"contracts/ARC11550.algo.ts:86","pc":[88,89]},{"teal":77,"source":"contracts/ARC11550.algo.ts:86","pc":[90,91]},{"teal":78,"source":"contracts/ARC11550.algo.ts:86","pc":[92]},{"teal":79,"source":"contracts/ARC11550.algo.ts:86","pc":[93]},{"teal":80,"source":"contracts/ARC11550.algo.ts:86","pc":[94]},{"teal":81,"source":"contracts/ARC11550.algo.ts:86","pc":[95]},{"teal":82,"source":"contracts/ARC11550.algo.ts:86","pc":[96,97,98]},{"teal":83,"source":"contracts/ARC11550.algo.ts:87","pc":[99,100]},{"teal":84,"source":"contracts/ARC11550.algo.ts:87","pc":[101,102]},{"teal":89,"source":"contracts/ARC11550.algo.ts:88","pc":[103,104]},{"teal":90,"source":"contracts/ARC11550.algo.ts:88","pc":[105,106]},{"teal":91,"source":"contracts/ARC11550.algo.ts:88","pc":[107]},{"teal":92,"source":"contracts/ARC11550.algo.ts:88","pc":[108,109]},{"teal":93,"source":"contracts/ARC11550.algo.ts:88","pc":[110]},{"teal":94,"source":"contracts/ARC11550.algo.ts:88","pc":[111]},{"teal":95,"source":"contracts/ARC11550.algo.ts:88","pc":[112]},{"teal":96,"source":"contracts/ARC11550.algo.ts:88","pc":[113,114]},{"teal":97,"source":"contracts/ARC11550.algo.ts:88","pc":[115]},{"teal":98,"source":"contracts/ARC11550.algo.ts:88","pc":[116,117]},{"teal":99,"source":"contracts/ARC11550.algo.ts:88","pc":[118]},{"teal":100,"source":"contracts/ARC11550.algo.ts:88","pc":[119]},{"teal":101,"source":"contracts/ARC11550.algo.ts:88","pc":[120]},{"teal":102,"source":"contracts/ARC11550.algo.ts:88","pc":[121,122]},{"teal":103,"source":"contracts/ARC11550.algo.ts:88","pc":[123]},{"teal":104,"source":"contracts/ARC11550.algo.ts:88","pc":[124,125,126]},{"teal":109,"source":"contracts/ARC11550.algo.ts:88","pc":[127]},{"teal":110,"source":"contracts/ARC11550.algo.ts:88","pc":[128,129,130]},{"teal":117,"source":"contracts/ARC11550.algo.ts:86","pc":[131,132]},{"teal":118,"source":"contracts/ARC11550.algo.ts:86","pc":[133]},{"teal":119,"source":"contracts/ARC11550.algo.ts:86","pc":[134]},{"teal":120,"source":"contracts/ARC11550.algo.ts:86","pc":[135,136]},{"teal":121,"source":"contracts/ARC11550.algo.ts:86","pc":[137,138,139]},{"teal":126,"source":"contracts/ARC11550.algo.ts:91","pc":[140]},{"teal":130,"source":"contracts/ARC11550.algo.ts:85","pc":[141,142]},{"teal":133,"source":"contracts/ARC11550.algo.ts:85","pc":[143,144]},{"teal":134,"source":"contracts/ARC11550.algo.ts:85","pc":[145]},{"teal":137,"source":"contracts/ARC11550.algo.ts:82","pc":[146]},{"teal":138,"source":"contracts/ARC11550.algo.ts:82","pc":[147]},{"teal":141,"source":"contracts/ARC11550.algo.ts:82","pc":[148,149,150,151,152,153]},{"teal":142,"source":"contracts/ARC11550.algo.ts:82","pc":[154,155,156]},{"teal":143,"source":"contracts/ARC11550.algo.ts:82","pc":[157,158,159,160]},{"teal":146,"source":"contracts/ARC11550.algo.ts:82","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[161]},{"teal":149,"source":"contracts/ARC11550.algo.ts:82","pc":[162,163,164,165,166,167]},{"teal":150,"source":"contracts/ARC11550.algo.ts:82","pc":[168,169,170]},{"teal":151,"source":"contracts/ARC11550.algo.ts:82","pc":[171,172,173,174]},{"teal":154,"source":"contracts/ARC11550.algo.ts:82","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[175]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAwIDEgMzIgODAKYnl0ZWNibG9jayAweAoKLy8gVGhpcyBURUFMIHdhcyBnZW5lcmF0ZWQgYnkgVEVBTFNjcmlwdCB2MC4xMDYuMwovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXNwZWN0aXZlIGJyYW5jaCB3aWxsIGJlICIqTk9UX0lNUExFTUVOVEVEIiB3aGljaCBqdXN0IGNvbnRhaW5zICJlcnIiCnR4biBBcHBsaWNhdGlvbklECiEKcHVzaGludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqY3JlYXRlX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVECgoqTk9UX0lNUExFTUVOVEVEOgoJLy8gVGhlIHJlcXVlc3RlZCBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoaXMgY29udHJhY3QuIEFyZSB5b3UgdXNpbmcgdGhlIGNvcnJlY3QgT25Db21wbGV0ZT8gRGlkIHlvdSBzZXQgeW91ciBhcHAgSUQ/CgllcnIKCi8vIGFwcHJvdmVkKGFkZHJlc3MsKHVpbnQ2NCxhZGRyZXNzLGFkZHJlc3MsdWludDY0KVtdKWJvb2wKKmFiaV9yb3V0ZV9hcHByb3ZlZDoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJcHVzaGJ5dGVzIDB4MTUxZjdjNzUKCgkvLyB0cmFuc2ZlcnM6ICh1aW50NjQsYWRkcmVzcyxhZGRyZXNzLHVpbnQ2NClbXQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZXh0cmFjdCAyIDAKCgkvLyBjYWxsZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnRjIDIgLy8gMzIKCT09CgoJLy8gYXJndW1lbnQgMSAoY2FsbGVyKSBmb3IgYXBwcm92ZWQgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIGV4ZWN1dGUgYXBwcm92ZWQoYWRkcmVzcywodWludDY0LGFkZHJlc3MsYWRkcmVzcyx1aW50NjQpW10pYm9vbAoJY2FsbHN1YiBhcHByb3ZlZAoJcHVzaGJ5dGVzIDB4MDAKCWludGMgMCAvLyAwCgl1bmNvdmVyIDIKCXNldGJpdAoJY29uY2F0Cglsb2cKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIGFwcHJvdmVkKGNhbGxlcjogQWRkcmVzcywgdHJhbnNmZXJzOiBUcmFuc2ZlcltdKTogYm9vbGVhbgovLwovLyBEZXRlcm1pbmVzIHdoZXRoZXIgYSB0cmFuc2ZlciBpcyBhcHByb3ZlZCBvciBub3QuIFRoaXMgaW1wbGVtZW50YXRpb24ganVzdCBlbnN1cmVzIHRoZSBjYWxsZXIgaXMgc2VuZGluZyBmcm9tIHRoZWlyIG93biBhZGRyZXNzLCBidXQKLy8gdGhlcmUgYXJlIG90aGVyIHBvc3NpYmlsaXRpZXMgc3VjaCBhcyBFUkMyMC1zdHlsZSBhcHByb3ZhbHMsIHdoaXRlbGlzdHMsIGJsYWNrbGlzdHMsIGVuZm9yY2VkIHJveWFsdGllcywgZXRjLgphcHByb3ZlZDoKCXByb3RvIDIgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CglkdXAKCgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czo4NgoJLy8gZm9yIChsZXQgaSA9IDA7IGkgPCB0cmFuc2ZlcnMubGVuZ3RoOyBpICs9IDEpCglpbnRjIDAgLy8gMAoJZnJhbWVfYnVyeSAwIC8vIGk6IHVpbnQ2NAoKKmZvcl8wOgoJLy8gY29udHJhY3RzL0FSQzExNTUwLmFsZ28udHM6ODYKCS8vIGkgPCB0cmFuc2ZlcnMubGVuZ3RoCglmcmFtZV9kaWcgMCAvLyBpOiB1aW50NjQKCWZyYW1lX2RpZyAtMiAvLyB0cmFuc2ZlcnM6IFRyYW5zZmVyW10KCWxlbgoJaW50YyAzIC8vIDgwCgkvCgk8CglieiAqZm9yXzBfZW5kCglmcmFtZV9kaWcgMCAvLyBpOiB1aW50NjQKCWZyYW1lX2J1cnkgMSAvLyBhY2Nlc3NvcjogYWNjZXNzb3IvLzAvL3QKCgkvLyAqaWYwX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL0FSQzExNTUwLmFsZ28udHM6ODgKCS8vIHQuZnJvbSAhPT0gY2FsbGVyCglmcmFtZV9kaWcgLTIgLy8gdHJhbnNmZXJzOiBUcmFuc2ZlcltdCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyAwIC8vICBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIDEgLy8gc2F2ZWQgYWNjZXNzb3I6IGFjY2Vzc29yLy8wLy90CglpbnRjIDMgLy8gODAKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJcHVzaGludCA4IC8vIGhlYWRPZmZzZXQKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludGMgMiAvLyAzMgoJZXh0cmFjdDMKCWZyYW1lX2RpZyAtMSAvLyBjYWxsZXI6IEFkZHJlc3MKCSE9CglieiAqaWYwX2VuZAoKCS8vICppZjBfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL0FSQzExNTUwLmFsZ28udHM6ODgKCS8vIHJldHVybiBmYWxzZTsKCWludGMgMCAvLyAwCgliICphcHByb3ZlZCpyZXR1cm4KCippZjBfZW5kOgoKKmZvcl8wX2NvbnRpbnVlOgoJLy8gY29udHJhY3RzL0FSQzExNTUwLmFsZ28udHM6ODYKCS8vIGkgKz0gMQoJZnJhbWVfZGlnIDAgLy8gaTogdWludDY0CglpbnRjIDEgLy8gMQoJKwoJZnJhbWVfYnVyeSAwIC8vIGk6IHVpbnQ2NAoJYiAqZm9yXzAKCipmb3JfMF9lbmQ6CgkvLyBjb250cmFjdHMvQVJDMTE1NTAuYWxnby50czo5MQoJLy8gcmV0dXJuIHRydWU7CglpbnRjIDEgLy8gMQoKKmFwcHJvdmVkKnJldHVybjoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDEKCXJldHN1YgoKKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCWludGMgMSAvLyAxCglyZXR1cm4KCipjcmVhdGVfTm9PcDoKCXB1c2hieXRlcyAweGI4NDQ3YjM2IC8vIG1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNyZWF0ZSBOb09wCgllcnIKCipjYWxsX05vT3A6CglwdXNoYnl0ZXMgMHhiNGMxN2E3YiAvLyBtZXRob2QgImFwcHJvdmVkKGFkZHJlc3MsKHVpbnQ2NCxhZGRyZXNzLGFkZHJlc3MsdWludDY0KVtdKWJvb2wiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2FwcHJvdmVkCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgTm9PcAoJZXJy","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAEAAEgUCYBADEYFIEGCzEZCI0MAHUAAAAAAAAAAAAAAGcAAAAAAAAAAAAAAIAEFR98dTYaAlcCADYaAUkVJBJEiAALgAEAIk8CVFCwI0OKAgEoSSKMAIsAi/4VJQoMQQApiwCMAYv+Nf8iiwElCwiBCAg0/0wkWIv/E0EABCJCAAqLACMIjABC/8wjjABGAYkjQ4AEuER7NjYaAI4B//EAgAS0wXp7NhoAjgH/fwA=","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Arc11550TransferHook contract
 */
export type Arc11550TransferHookArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'approved(address,(uint64,address,address,uint64)[])bool': {
      caller: string
      transfers: [bigint | number, string, string, bigint | number][]
    }
    'createApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'approved(address,(uint64,address,address,uint64)[])bool': [caller: string, transfers: [bigint | number, string, string, bigint | number][]]
    'createApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type Arc11550TransferHookReturns = {
  'approved(address,(uint64,address,address,uint64)[])bool': boolean
  'createApplication()void': void
}

/**
 * Defines the types of available calls and state of the Arc11550TransferHook smart contract.
 */
export type Arc11550TransferHookTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'approved(address,(uint64,address,address,uint64)[])bool' | 'approved', {
      argsObj: Arc11550TransferHookArgs['obj']['approved(address,(uint64,address,address,uint64)[])bool']
      argsTuple: Arc11550TransferHookArgs['tuple']['approved(address,(uint64,address,address,uint64)[])bool']
      returns: Arc11550TransferHookReturns['approved(address,(uint64,address,address,uint64)[])bool']
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: Arc11550TransferHookArgs['obj']['createApplication()void']
      argsTuple: Arc11550TransferHookArgs['tuple']['createApplication()void']
      returns: Arc11550TransferHookReturns['createApplication()void']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type Arc11550TransferHookSignatures = keyof Arc11550TransferHookTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Arc11550TransferHookNonVoidMethodSignatures = keyof Arc11550TransferHookTypes['methods'] extends infer T ? T extends keyof Arc11550TransferHookTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Arc11550TransferHook smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Arc11550TransferHookSignatures> = Arc11550TransferHookTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc11550TransferHook smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc11550TransferHookSignatures> = Arc11550TransferHookTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type Arc11550TransferHookCreateCallParams =
  | Expand<CallParams<Arc11550TransferHookArgs['obj']['createApplication()void'] | Arc11550TransferHookArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<Arc11550TransferHookArgs['obj']['createApplication()void'] | Arc11550TransferHookArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Arc11550TransferHookDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Arc11550TransferHookCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc11550TransferHook smart contract
 */
export abstract class Arc11550TransferHookParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends Arc11550TransferHookCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return Arc11550TransferHookParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ARC11550TransferHook smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<Arc11550TransferHookArgs['obj']['createApplication()void'] | Arc11550TransferHookArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the approved(address,(uint64,address,address,uint64)[])bool ABI method
   *
  * Determines whether a transfer is approved or not. This implementation just ensures the caller is sending from their own address, but
  there are other possibilities such as ERC20-style approvals, whitelists, blacklists, enforced royalties, etc.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static approved(params: CallParams<Arc11550TransferHookArgs['obj']['approved(address,(uint64,address,address,uint64)[])bool'] | Arc11550TransferHookArgs['tuple']['approved(address,(uint64,address,address,uint64)[])bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'approved(address,(uint64,address,address,uint64)[])bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.caller, params.args.transfers],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ARC11550TransferHook smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Arc11550TransferHookFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Arc11550TransferHookFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Arc11550TransferHookClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Arc11550TransferHookClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ARC11550TransferHook smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Arc11550TransferHookDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? Arc11550TransferHookParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (Arc11550TransferHookCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new Arc11550TransferHookClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550TransferHook smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<Arc11550TransferHookArgs['obj']['createApplication()void'] | Arc11550TransferHookArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(Arc11550TransferHookParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550TransferHook smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<Arc11550TransferHookArgs['obj']['createApplication()void'] | Arc11550TransferHookArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(Arc11550TransferHookParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550TransferHook smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<Arc11550TransferHookArgs['obj']['createApplication()void'] | Arc11550TransferHookArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(Arc11550TransferHookParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | Arc11550TransferHookReturns['createApplication()void']) }, appClient: new Arc11550TransferHookClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ARC11550TransferHook smart contract
 */
export class Arc11550TransferHookClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Arc11550TransferHookClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Arc11550TransferHook app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Arc11550TransferHookClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Arc11550TransferHookNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Arc11550TransferHookClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Arc11550TransferHookClient> {
    return new Arc11550TransferHookClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Arc11550TransferHookClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Arc11550TransferHookClient> {
    return new Arc11550TransferHookClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550TransferHook smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550TransferHook smart contract using the `approved(address,(uint64,address,address,uint64)[])bool` ABI method.
     *
    * Determines whether a transfer is approved or not. This implementation just ensures the caller is sending from their own address, but
    there are other possibilities such as ERC20-style approvals, whitelists, blacklists, enforced royalties, etc.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    approved: (params: CallParams<Arc11550TransferHookArgs['obj']['approved(address,(uint64,address,address,uint64)[])bool'] | Arc11550TransferHookArgs['tuple']['approved(address,(uint64,address,address,uint64)[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550TransferHookParamsFactory.approved(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550TransferHook smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550TransferHook smart contract using the `approved(address,(uint64,address,address,uint64)[])bool` ABI method.
     *
    * Determines whether a transfer is approved or not. This implementation just ensures the caller is sending from their own address, but
    there are other possibilities such as ERC20-style approvals, whitelists, blacklists, enforced royalties, etc.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    approved: (params: CallParams<Arc11550TransferHookArgs['obj']['approved(address,(uint64,address,address,uint64)[])bool'] | Arc11550TransferHookArgs['tuple']['approved(address,(uint64,address,address,uint64)[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550TransferHookParamsFactory.approved(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550TransferHook smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550TransferHook smart contract using the `approved(address,(uint64,address,address,uint64)[])bool` ABI method.
     *
    * Determines whether a transfer is approved or not. This implementation just ensures the caller is sending from their own address, but
    there are other possibilities such as ERC20-style approvals, whitelists, blacklists, enforced royalties, etc.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    approved: async (params: CallParams<Arc11550TransferHookArgs['obj']['approved(address,(uint64,address,address,uint64)[])bool'] | Arc11550TransferHookArgs['tuple']['approved(address,(uint64,address,address,uint64)[])bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550TransferHookParamsFactory.approved(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550TransferHookReturns['approved(address,(uint64,address,address,uint64)[])bool'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Arc11550TransferHookClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ARC11550TransferHook app
   */
  state = {
  }

  public newGroup(): Arc11550TransferHookComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a approved(address,(uint64,address,address,uint64)[])bool method call against the ARC11550TransferHook contract
       */
      approved(params: CallParams<Arc11550TransferHookArgs['obj']['approved(address,(uint64,address,address,uint64)[])bool'] | Arc11550TransferHookArgs['tuple']['approved(address,(uint64,address,address,uint64)[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.approved(params)))
        resultMappers.push((v) => client.decodeReturnValue('approved(address,(uint64,address,address,uint64)[])bool', v))
        return this
      },
      /**
       * Add a clear state call to the ARC11550TransferHook contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Arc11550TransferHookComposer
  }
}
export type Arc11550TransferHookComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the approved(address,(uint64,address,address,uint64)[])bool ABI method.
   *
  * Determines whether a transfer is approved or not. This implementation just ensures the caller is sending from their own address, but
  there are other possibilities such as ERC20-style approvals, whitelists, blacklists, enforced royalties, etc.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approved(params?: CallParams<Arc11550TransferHookArgs['obj']['approved(address,(uint64,address,address,uint64)[])bool'] | Arc11550TransferHookArgs['tuple']['approved(address,(uint64,address,address,uint64)[])bool']>): Arc11550TransferHookComposer<[...TReturns, Arc11550TransferHookReturns['approved(address,(uint64,address,address,uint64)[])bool'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ARC11550TransferHook smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Arc11550TransferHookComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc11550TransferHookComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc11550TransferHookComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Arc11550TransferHookComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Arc11550TransferHookComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Arc11550TransferHookComposerResults<TReturns>>
}
export type Arc11550TransferHookComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


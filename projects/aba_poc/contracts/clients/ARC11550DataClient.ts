/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ARC11550Data","desc":"","methods":[{"name":"createApplication","args":[{"name":"transferApp","type":"uint64"},{"name":"transferHookApp","type":"uint64"},{"name":"mintCap","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"arc11550_minted","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_metadata","args":[{"name":"key","type":"(uint64,string)","struct":"MetadataKey"}],"returns":{"type":"(bool,byte[])","struct":"Metadata"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_setMetadata","args":[{"name":"key","type":"(uint64,string)","struct":"MetadataKey"},{"name":"data","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_balanceOf","args":[{"name":"id","type":"uint64"},{"name":"account","type":"address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_balancesOf","args":[{"name":"idAndAddrs","type":"(uint64,address)[]"}],"returns":{"type":"uint64[]"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_params","args":[{"name":"id","type":"uint64"}],"returns":{"type":"(byte[32],byte[8],uint64,uint64,address)","struct":"Params"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_mulitpleParams","args":[{"name":"ids","type":"uint64[]"}],"returns":{"type":"(byte[32],byte[8],uint64,uint64,address)[]"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_approve","args":[{"name":"allowanceKey","type":"(address,address,uint64)","struct":"AllowanceKey"},{"name":"allowance","type":"(uint64,uint64)","struct":"Allowance"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_setApprovals","args":[{"name":"allowances","type":"((address,address,uint64),(uint64,uint64))[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_transferApp","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_transferHookApp","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"doTransfers","args":[{"name":"transfers","type":"(uint64,address,address,uint64)[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"doMint","args":[{"name":"params","type":"(byte[32],byte[8],uint64,uint64,address)","struct":"Params"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"Params":[{"name":"name","type":"byte[32]"},{"name":"symbol","type":"byte[8]"},{"name":"total","type":"uint64"},{"name":"decimals","type":"uint64"},{"name":"manager","type":"address"}],"IdAndAddress":[{"name":"id","type":"uint64"},{"name":"address","type":"address"}],"Metadata":[{"name":"mutable","type":"bool"},{"name":"data","type":"byte[]"}],"MetadataKey":[{"name":"id","type":"uint64"},{"name":"key","type":"string"}],"Allowance":[{"name":"amount","type":"uint64"},{"name":"untilTimestamp","type":"uint64"}],"AllowanceKey":[{"name":"holder","type":"address"},{"name":"sender","type":"address"},{"name":"id","type":"uint64"}]},"state":{"schema":{"global":{"bytes":1,"ints":4},"local":{"bytes":0,"ints":0}},"keys":{"global":{"minted":{"key":"bWludGVk","keyType":"AVMBytes","valueType":"uint64"},"transferApp":{"key":"dHJhbnNmZXJBcHA=","keyType":"AVMBytes","valueType":"uint64"},"transferHookApp":{"key":"dHJhbnNmZXJIb29rQXBw","keyType":"AVMBytes","valueType":"uint64"},"mintCap":{"key":"bWludENhcA==","keyType":"AVMBytes","valueType":"uint64"},"minter":{"key":"bWludGVy","keyType":"AVMBytes","valueType":"address"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"params":{"keyType":"uint64","valueType":"Params","prefix":"cA=="},"balances":{"keyType":"IdAndAddress","valueType":"uint64","prefix":"Yg=="},"metadata":{"keyType":"MetadataKey","valueType":"Metadata","prefix":"bQ=="},"allowances":{"keyType":"AllowanceKey","valueType":"Allowance","prefix":"YQ=="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/ARC11550Data.algo.ts:46","pc":[0]},{"teal":2,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1,2,3,4,5,6,7,8,9,10,11,12]},{"teal":3,"source":"contracts/ARC11550Data.algo.ts:46","pc":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71]},{"teal":15,"source":"contracts/ARC11550Data.algo.ts:46","pc":[72,73]},{"teal":16,"source":"contracts/ARC11550Data.algo.ts:46","pc":[74]},{"teal":17,"source":"contracts/ARC11550Data.algo.ts:46","pc":[75,76]},{"teal":18,"source":"contracts/ARC11550Data.algo.ts:46","pc":[77]},{"teal":19,"source":"contracts/ARC11550Data.algo.ts:46","pc":[78,79]},{"teal":20,"source":"contracts/ARC11550Data.algo.ts:46","pc":[80]},{"teal":21,"source":"contracts/ARC11550Data.algo.ts:46","pc":[81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106]},{"teal":25,"source":"contracts/ARC11550Data.algo.ts:46","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[107]},{"teal":30,"source":"contracts/ARC11550Data.algo.ts:74","pc":[108,109,110]},{"teal":31,"source":"contracts/ARC11550Data.algo.ts:74","pc":[111]},{"teal":34,"source":"contracts/ARC11550Data.algo.ts:74","pc":[112,113,114]},{"teal":35,"source":"contracts/ARC11550Data.algo.ts:74","pc":[115]},{"teal":38,"source":"contracts/ARC11550Data.algo.ts:74","pc":[116,117,118]},{"teal":39,"source":"contracts/ARC11550Data.algo.ts:74","pc":[119]},{"teal":42,"source":"contracts/ARC11550Data.algo.ts:74","pc":[120,121,122]},{"teal":43,"source":"contracts/ARC11550Data.algo.ts:74","pc":[123]},{"teal":44,"source":"contracts/ARC11550Data.algo.ts:74","pc":[124]},{"teal":48,"source":"contracts/ARC11550Data.algo.ts:74","pc":[125,126,127]},{"teal":52,"source":"contracts/ARC11550Data.algo.ts:75","pc":[128,129]},{"teal":53,"source":"contracts/ARC11550Data.algo.ts:75","pc":[130,131]},{"teal":54,"source":"contracts/ARC11550Data.algo.ts:75","pc":[132]},{"teal":58,"source":"contracts/ARC11550Data.algo.ts:76","pc":[133]},{"teal":59,"source":"contracts/ARC11550Data.algo.ts:76","pc":[134]},{"teal":60,"source":"contracts/ARC11550Data.algo.ts:76","pc":[135]},{"teal":64,"source":"contracts/ARC11550Data.algo.ts:77","pc":[136,137]},{"teal":65,"source":"contracts/ARC11550Data.algo.ts:77","pc":[138,139]},{"teal":66,"source":"contracts/ARC11550Data.algo.ts:77","pc":[140]},{"teal":70,"source":"contracts/ARC11550Data.algo.ts:78","pc":[141,142]},{"teal":71,"source":"contracts/ARC11550Data.algo.ts:78","pc":[143,144]},{"teal":72,"source":"contracts/ARC11550Data.algo.ts:78","pc":[145]},{"teal":73,"source":"contracts/ARC11550Data.algo.ts:74","pc":[146]},{"teal":78,"source":"contracts/ARC11550Data.algo.ts:81","pc":[147]},{"teal":81,"source":"contracts/ARC11550Data.algo.ts:81","pc":[148,149,150]},{"teal":82,"source":"contracts/ARC11550Data.algo.ts:81","pc":[151]},{"teal":83,"source":"contracts/ARC11550Data.algo.ts:81","pc":[152]},{"teal":84,"source":"contracts/ARC11550Data.algo.ts:81","pc":[153]},{"teal":85,"source":"contracts/ARC11550Data.algo.ts:81","pc":[154]},{"teal":86,"source":"contracts/ARC11550Data.algo.ts:81","pc":[155]},{"teal":90,"source":"contracts/ARC11550Data.algo.ts:81","pc":[156,157,158]},{"teal":94,"source":"contracts/ARC11550Data.algo.ts:82","pc":[159]},{"teal":95,"source":"contracts/ARC11550Data.algo.ts:82","pc":[160]},{"teal":96,"source":"contracts/ARC11550Data.algo.ts:81","pc":[161]},{"teal":101,"source":"contracts/ARC11550Data.algo.ts:85","pc":[162]},{"teal":104,"source":"contracts/ARC11550Data.algo.ts:85","pc":[163,164,165]},{"teal":107,"source":"contracts/ARC11550Data.algo.ts:85","pc":[166,167,168]},{"teal":108,"source":"contracts/ARC11550Data.algo.ts:85","pc":[169]},{"teal":109,"source":"contracts/ARC11550Data.algo.ts:85","pc":[170]},{"teal":110,"source":"contracts/ARC11550Data.algo.ts:85","pc":[171]},{"teal":111,"source":"contracts/ARC11550Data.algo.ts:85","pc":[172]},{"teal":115,"source":"contracts/ARC11550Data.algo.ts:85","pc":[173,174,175]},{"teal":119,"source":"contracts/ARC11550Data.algo.ts:86","pc":[176,177]},{"teal":120,"source":"contracts/ARC11550Data.algo.ts:86","pc":[178,179]},{"teal":121,"source":"contracts/ARC11550Data.algo.ts:86","pc":[180]},{"teal":122,"source":"contracts/ARC11550Data.algo.ts:86","pc":[181]},{"teal":125,"source":"contracts/ARC11550Data.algo.ts:86","errorMessage":"box value does not exist: this.metadata(key).value","pc":[182]},{"teal":126,"source":"contracts/ARC11550Data.algo.ts:85","pc":[183]},{"teal":131,"source":"contracts/ARC11550Data.algo.ts:100","pc":[184,185,186]},{"teal":132,"source":"contracts/ARC11550Data.algo.ts:100","pc":[187,188,189]},{"teal":135,"source":"contracts/ARC11550Data.algo.ts:100","pc":[190,191,192]},{"teal":138,"source":"contracts/ARC11550Data.algo.ts:100","pc":[193,194,195]},{"teal":139,"source":"contracts/ARC11550Data.algo.ts:100","pc":[196]},{"teal":140,"source":"contracts/ARC11550Data.algo.ts:100","pc":[197]},{"teal":144,"source":"contracts/ARC11550Data.algo.ts:100","pc":[198,199,200]},{"teal":148,"source":"contracts/ARC11550Data.algo.ts:101","pc":[201,202]},{"teal":149,"source":"contracts/ARC11550Data.algo.ts:101","pc":[203,204]},{"teal":150,"source":"contracts/ARC11550Data.algo.ts:101","pc":[205,206]},{"teal":151,"source":"contracts/ARC11550Data.algo.ts:101","pc":[207,208]},{"teal":152,"source":"contracts/ARC11550Data.algo.ts:101","pc":[209,210]},{"teal":153,"source":"contracts/ARC11550Data.algo.ts:101","pc":[211,212]},{"teal":154,"source":"contracts/ARC11550Data.algo.ts:101","pc":[213,214]},{"teal":155,"source":"contracts/ARC11550Data.algo.ts:101","pc":[215,216,217]},{"teal":156,"source":"contracts/ARC11550Data.algo.ts:101","pc":[218]},{"teal":157,"source":"contracts/ARC11550Data.algo.ts:101","pc":[219]},{"teal":158,"source":"contracts/ARC11550Data.algo.ts:101","pc":[220]},{"teal":159,"source":"contracts/ARC11550Data.algo.ts:101","pc":[221,222]},{"teal":160,"source":"contracts/ARC11550Data.algo.ts:101","pc":[223]},{"teal":161,"source":"contracts/ARC11550Data.algo.ts:101","pc":[224]},{"teal":162,"source":"contracts/ARC11550Data.algo.ts:101","pc":[225]},{"teal":167,"source":"contracts/ARC11550Data.algo.ts:103","pc":[226,227]},{"teal":168,"source":"contracts/ARC11550Data.algo.ts:103","pc":[228,229]},{"teal":169,"source":"contracts/ARC11550Data.algo.ts:103","pc":[230]},{"teal":170,"source":"contracts/ARC11550Data.algo.ts:103","pc":[231]},{"teal":171,"source":"contracts/ARC11550Data.algo.ts:103","pc":[232]},{"teal":172,"source":"contracts/ARC11550Data.algo.ts:103","pc":[233]},{"teal":173,"source":"contracts/ARC11550Data.algo.ts:103","pc":[234,235,236]},{"teal":178,"source":"contracts/ARC11550Data.algo.ts:104","pc":[237,238]},{"teal":179,"source":"contracts/ARC11550Data.algo.ts:104","pc":[239,240]},{"teal":180,"source":"contracts/ARC11550Data.algo.ts:104","pc":[241]},{"teal":181,"source":"contracts/ARC11550Data.algo.ts:104","pc":[242]},{"teal":184,"source":"contracts/ARC11550Data.algo.ts:104","errorMessage":"box value does not exist: this.metadata(key).value","pc":[243]},{"teal":185,"source":"contracts/ARC11550Data.algo.ts:104","pc":[244,245]},{"teal":186,"source":"contracts/ARC11550Data.algo.ts:104","pc":[246,247]},{"teal":187,"source":"contracts/ARC11550Data.algo.ts:104","pc":[248]},{"teal":188,"source":"contracts/ARC11550Data.algo.ts:104","pc":[249]},{"teal":189,"source":"contracts/ARC11550Data.algo.ts:104","pc":[250]},{"teal":194,"source":"contracts/ARC11550Data.algo.ts:107","pc":[251,252]},{"teal":195,"source":"contracts/ARC11550Data.algo.ts:107","pc":[253,254]},{"teal":196,"source":"contracts/ARC11550Data.algo.ts:107","pc":[255]},{"teal":197,"source":"contracts/ARC11550Data.algo.ts:107","pc":[256]},{"teal":200,"source":"contracts/ARC11550Data.algo.ts:107","errorMessage":"box value does not exist: this.metadata(key).value","pc":[257]},{"teal":201,"source":"contracts/ARC11550Data.algo.ts:107","pc":[258,259]},{"teal":202,"source":"contracts/ARC11550Data.algo.ts:107","pc":[260]},{"teal":203,"source":"contracts/ARC11550Data.algo.ts:107","pc":[261]},{"teal":204,"source":"contracts/ARC11550Data.algo.ts:107","pc":[262,263]},{"teal":205,"source":"contracts/ARC11550Data.algo.ts:107","pc":[264,265]},{"teal":206,"source":"contracts/ARC11550Data.algo.ts:107","pc":[266,267]},{"teal":207,"source":"contracts/ARC11550Data.algo.ts:107","pc":[268,269]},{"teal":208,"source":"contracts/ARC11550Data.algo.ts:107","pc":[270]},{"teal":209,"source":"contracts/ARC11550Data.algo.ts:107","pc":[271]},{"teal":210,"source":"contracts/ARC11550Data.algo.ts:107","pc":[272,273]},{"teal":211,"source":"contracts/ARC11550Data.algo.ts:107","pc":[274]},{"teal":212,"source":"contracts/ARC11550Data.algo.ts:107","pc":[275,276]},{"teal":213,"source":"contracts/ARC11550Data.algo.ts:107","pc":[277]},{"teal":214,"source":"contracts/ARC11550Data.algo.ts:107","pc":[278]},{"teal":215,"source":"contracts/ARC11550Data.algo.ts:107","pc":[279]},{"teal":216,"source":"contracts/ARC11550Data.algo.ts:107","pc":[280]},{"teal":217,"source":"contracts/ARC11550Data.algo.ts:107","pc":[281,282]},{"teal":218,"source":"contracts/ARC11550Data.algo.ts:107","pc":[283]},{"teal":219,"source":"contracts/ARC11550Data.algo.ts:107","pc":[284,285]},{"teal":220,"source":"contracts/ARC11550Data.algo.ts:107","pc":[286,287]},{"teal":221,"source":"contracts/ARC11550Data.algo.ts:107","pc":[288]},{"teal":222,"source":"contracts/ARC11550Data.algo.ts:107","pc":[289,290]},{"teal":223,"source":"contracts/ARC11550Data.algo.ts:107","pc":[291]},{"teal":224,"source":"contracts/ARC11550Data.algo.ts:107","pc":[292,293]},{"teal":225,"source":"contracts/ARC11550Data.algo.ts:107","pc":[294]},{"teal":226,"source":"contracts/ARC11550Data.algo.ts:107","pc":[295]},{"teal":227,"source":"contracts/ARC11550Data.algo.ts:107","pc":[296]},{"teal":228,"source":"contracts/ARC11550Data.algo.ts:107","pc":[297,298,299]},{"teal":229,"source":"contracts/ARC11550Data.algo.ts:107","pc":[300]},{"teal":230,"source":"contracts/ARC11550Data.algo.ts:107","pc":[301]},{"teal":231,"source":"contracts/ARC11550Data.algo.ts:107","pc":[302]},{"teal":232,"source":"contracts/ARC11550Data.algo.ts:107","pc":[303,304]},{"teal":233,"source":"contracts/ARC11550Data.algo.ts:107","pc":[305,306]},{"teal":234,"source":"contracts/ARC11550Data.algo.ts:107","pc":[307,308]},{"teal":235,"source":"contracts/ARC11550Data.algo.ts:107","pc":[309,310]},{"teal":236,"source":"contracts/ARC11550Data.algo.ts:107","pc":[311]},{"teal":237,"source":"contracts/ARC11550Data.algo.ts:107","pc":[312,313]},{"teal":238,"source":"contracts/ARC11550Data.algo.ts:107","pc":[314]},{"teal":239,"source":"contracts/ARC11550Data.algo.ts:107","pc":[315]},{"teal":240,"source":"contracts/ARC11550Data.algo.ts:107","pc":[316]},{"teal":241,"source":"contracts/ARC11550Data.algo.ts:107","pc":[317]},{"teal":242,"source":"contracts/ARC11550Data.algo.ts:107","pc":[318,319]},{"teal":243,"source":"contracts/ARC11550Data.algo.ts:107","pc":[320,321,322]},{"teal":244,"source":"contracts/ARC11550Data.algo.ts:107","pc":[323,324]},{"teal":245,"source":"contracts/ARC11550Data.algo.ts:107","pc":[325,326]},{"teal":246,"source":"contracts/ARC11550Data.algo.ts:107","pc":[327,328]},{"teal":247,"source":"contracts/ARC11550Data.algo.ts:107","pc":[329]},{"teal":248,"source":"contracts/ARC11550Data.algo.ts:107","pc":[330]},{"teal":249,"source":"contracts/ARC11550Data.algo.ts:107","pc":[331]},{"teal":250,"source":"contracts/ARC11550Data.algo.ts:107","pc":[332]},{"teal":251,"source":"contracts/ARC11550Data.algo.ts:107","pc":[333]},{"teal":252,"source":"contracts/ARC11550Data.algo.ts:107","pc":[334]},{"teal":253,"source":"contracts/ARC11550Data.algo.ts:100","pc":[335]},{"teal":258,"source":"contracts/ARC11550Data.algo.ts:117","pc":[336]},{"teal":261,"source":"contracts/ARC11550Data.algo.ts:117","pc":[337,338,339]},{"teal":262,"source":"contracts/ARC11550Data.algo.ts:117","pc":[340]},{"teal":263,"source":"contracts/ARC11550Data.algo.ts:117","pc":[341]},{"teal":264,"source":"contracts/ARC11550Data.algo.ts:117","pc":[342,343]},{"teal":265,"source":"contracts/ARC11550Data.algo.ts:117","pc":[344]},{"teal":268,"source":"contracts/ARC11550Data.algo.ts:117","errorMessage":"argument 0 (account) for arc11550_balanceOf must be a address","pc":[345]},{"teal":271,"source":"contracts/ARC11550Data.algo.ts:117","pc":[346,347,348]},{"teal":272,"source":"contracts/ARC11550Data.algo.ts:117","pc":[349]},{"teal":275,"source":"contracts/ARC11550Data.algo.ts:117","pc":[350,351,352]},{"teal":276,"source":"contracts/ARC11550Data.algo.ts:117","pc":[353]},{"teal":277,"source":"contracts/ARC11550Data.algo.ts:117","pc":[354]},{"teal":278,"source":"contracts/ARC11550Data.algo.ts:117","pc":[355]},{"teal":279,"source":"contracts/ARC11550Data.algo.ts:117","pc":[356]},{"teal":280,"source":"contracts/ARC11550Data.algo.ts:117","pc":[357]},{"teal":284,"source":"contracts/ARC11550Data.algo.ts:117","pc":[358,359,360]},{"teal":288,"source":"contracts/ARC11550Data.algo.ts:118","pc":[361]},{"teal":289,"source":"contracts/ARC11550Data.algo.ts:118","pc":[362,363]},{"teal":290,"source":"contracts/ARC11550Data.algo.ts:118","pc":[364]},{"teal":291,"source":"contracts/ARC11550Data.algo.ts:118","pc":[365,366]},{"teal":292,"source":"contracts/ARC11550Data.algo.ts:118","pc":[367]},{"teal":293,"source":"contracts/ARC11550Data.algo.ts:118","pc":[368]},{"teal":294,"source":"contracts/ARC11550Data.algo.ts:118","pc":[369]},{"teal":297,"source":"contracts/ARC11550Data.algo.ts:118","errorMessage":"box value does not exist: this.balances({ id: id, address: account }).value","pc":[370]},{"teal":298,"source":"contracts/ARC11550Data.algo.ts:118","pc":[371]},{"teal":299,"source":"contracts/ARC11550Data.algo.ts:117","pc":[372]},{"teal":304,"source":"contracts/ARC11550Data.algo.ts:121","pc":[373]},{"teal":307,"source":"contracts/ARC11550Data.algo.ts:121","pc":[374,375,376]},{"teal":308,"source":"contracts/ARC11550Data.algo.ts:121","pc":[377,378,379]},{"teal":311,"source":"contracts/ARC11550Data.algo.ts:121","pc":[380,381,382]},{"teal":312,"source":"contracts/ARC11550Data.algo.ts:121","pc":[383]},{"teal":313,"source":"contracts/ARC11550Data.algo.ts:121","pc":[384]},{"teal":314,"source":"contracts/ARC11550Data.algo.ts:121","pc":[385]},{"teal":315,"source":"contracts/ARC11550Data.algo.ts:121","pc":[386]},{"teal":316,"source":"contracts/ARC11550Data.algo.ts:121","pc":[387]},{"teal":317,"source":"contracts/ARC11550Data.algo.ts:121","pc":[388,389,390]},{"teal":318,"source":"contracts/ARC11550Data.algo.ts:121","pc":[391]},{"teal":319,"source":"contracts/ARC11550Data.algo.ts:121","pc":[392]},{"teal":320,"source":"contracts/ARC11550Data.algo.ts:121","pc":[393]},{"teal":321,"source":"contracts/ARC11550Data.algo.ts:121","pc":[394]},{"teal":322,"source":"contracts/ARC11550Data.algo.ts:121","pc":[395]},{"teal":323,"source":"contracts/ARC11550Data.algo.ts:121","pc":[396]},{"teal":327,"source":"contracts/ARC11550Data.algo.ts:121","pc":[397,398,399]},{"teal":330,"source":"contracts/ARC11550Data.algo.ts:121","pc":[400]},{"teal":331,"source":"contracts/ARC11550Data.algo.ts:121","pc":[401,402]},{"teal":335,"source":"contracts/ARC11550Data.algo.ts:122","pc":[403]},{"teal":336,"source":"contracts/ARC11550Data.algo.ts:122","pc":[404,405]},{"teal":340,"source":"contracts/ARC11550Data.algo.ts:123","pc":[406]},{"teal":341,"source":"contracts/ARC11550Data.algo.ts:123","pc":[407,408]},{"teal":346,"source":"contracts/ARC11550Data.algo.ts:123","pc":[409,410]},{"teal":347,"source":"contracts/ARC11550Data.algo.ts:123","pc":[411,412]},{"teal":348,"source":"contracts/ARC11550Data.algo.ts:123","pc":[413]},{"teal":349,"source":"contracts/ARC11550Data.algo.ts:123","pc":[414,415]},{"teal":350,"source":"contracts/ARC11550Data.algo.ts:123","pc":[416]},{"teal":351,"source":"contracts/ARC11550Data.algo.ts:123","pc":[417]},{"teal":352,"source":"contracts/ARC11550Data.algo.ts:123","pc":[418,419,420]},{"teal":356,"source":"contracts/ARC11550Data.algo.ts:124","pc":[421,422]},{"teal":357,"source":"contracts/ARC11550Data.algo.ts:124","pc":[423,424]},{"teal":358,"source":"contracts/ARC11550Data.algo.ts:124","pc":[425]},{"teal":359,"source":"contracts/ARC11550Data.algo.ts:124","pc":[426,427]},{"teal":360,"source":"contracts/ARC11550Data.algo.ts:124","pc":[428,429]},{"teal":361,"source":"contracts/ARC11550Data.algo.ts:124","pc":[430]},{"teal":362,"source":"contracts/ARC11550Data.algo.ts:124","pc":[431]},{"teal":363,"source":"contracts/ARC11550Data.algo.ts:124","pc":[432]},{"teal":364,"source":"contracts/ARC11550Data.algo.ts:124","pc":[433]},{"teal":365,"source":"contracts/ARC11550Data.algo.ts:124","pc":[434,435]},{"teal":366,"source":"contracts/ARC11550Data.algo.ts:124","pc":[436]},{"teal":367,"source":"contracts/ARC11550Data.algo.ts:124","pc":[437]},{"teal":368,"source":"contracts/ARC11550Data.algo.ts:124","pc":[438]},{"teal":369,"source":"contracts/ARC11550Data.algo.ts:124","pc":[439]},{"teal":370,"source":"contracts/ARC11550Data.algo.ts:124","pc":[440,441]},{"teal":374,"source":"contracts/ARC11550Data.algo.ts:125","pc":[442,443]},{"teal":375,"source":"contracts/ARC11550Data.algo.ts:125","pc":[444,445]},{"teal":376,"source":"contracts/ARC11550Data.algo.ts:125","pc":[446]},{"teal":377,"source":"contracts/ARC11550Data.algo.ts:125","pc":[447,448]},{"teal":378,"source":"contracts/ARC11550Data.algo.ts:125","pc":[449,450]},{"teal":379,"source":"contracts/ARC11550Data.algo.ts:125","pc":[451]},{"teal":380,"source":"contracts/ARC11550Data.algo.ts:125","pc":[452]},{"teal":381,"source":"contracts/ARC11550Data.algo.ts:125","pc":[453]},{"teal":382,"source":"contracts/ARC11550Data.algo.ts:125","pc":[454]},{"teal":383,"source":"contracts/ARC11550Data.algo.ts:125","pc":[455,456]},{"teal":384,"source":"contracts/ARC11550Data.algo.ts:125","pc":[457]},{"teal":385,"source":"contracts/ARC11550Data.algo.ts:125","pc":[458,459]},{"teal":386,"source":"contracts/ARC11550Data.algo.ts:125","pc":[460]},{"teal":387,"source":"contracts/ARC11550Data.algo.ts:125","pc":[461,462]},{"teal":391,"source":"contracts/ARC11550Data.algo.ts:126","pc":[463,464]},{"teal":392,"source":"contracts/ARC11550Data.algo.ts:126","pc":[465]},{"teal":393,"source":"contracts/ARC11550Data.algo.ts:126","pc":[466,467]},{"teal":394,"source":"contracts/ARC11550Data.algo.ts:126","pc":[468]},{"teal":395,"source":"contracts/ARC11550Data.algo.ts:126","pc":[469,470]},{"teal":396,"source":"contracts/ARC11550Data.algo.ts:126","pc":[471]},{"teal":397,"source":"contracts/ARC11550Data.algo.ts:126","pc":[472]},{"teal":398,"source":"contracts/ARC11550Data.algo.ts:126","pc":[473]},{"teal":401,"source":"contracts/ARC11550Data.algo.ts:126","errorMessage":"box value does not exist: this.balances({ id: id, address: addr }).value","pc":[474]},{"teal":402,"source":"contracts/ARC11550Data.algo.ts:126","pc":[475]},{"teal":403,"source":"contracts/ARC11550Data.algo.ts:126","pc":[476]},{"teal":404,"source":"contracts/ARC11550Data.algo.ts:126","pc":[477]},{"teal":405,"source":"contracts/ARC11550Data.algo.ts:126","pc":[478,479]},{"teal":410,"source":"contracts/ARC11550Data.algo.ts:123","pc":[480,481]},{"teal":411,"source":"contracts/ARC11550Data.algo.ts:123","pc":[482]},{"teal":412,"source":"contracts/ARC11550Data.algo.ts:123","pc":[483]},{"teal":413,"source":"contracts/ARC11550Data.algo.ts:123","pc":[484,485]},{"teal":414,"source":"contracts/ARC11550Data.algo.ts:123","pc":[486,487,488]},{"teal":419,"source":"contracts/ARC11550Data.algo.ts:129","pc":[489,490]},{"teal":422,"source":"contracts/ARC11550Data.algo.ts:121","pc":[491,492]},{"teal":425,"source":"contracts/ARC11550Data.algo.ts:121","pc":[493,494]},{"teal":426,"source":"contracts/ARC11550Data.algo.ts:121","pc":[495]},{"teal":431,"source":"contracts/ARC11550Data.algo.ts:132","pc":[496]},{"teal":434,"source":"contracts/ARC11550Data.algo.ts:132","pc":[497,498,499]},{"teal":435,"source":"contracts/ARC11550Data.algo.ts:132","pc":[500]},{"teal":438,"source":"contracts/ARC11550Data.algo.ts:132","pc":[501,502,503]},{"teal":439,"source":"contracts/ARC11550Data.algo.ts:132","pc":[504]},{"teal":440,"source":"contracts/ARC11550Data.algo.ts:132","pc":[505]},{"teal":441,"source":"contracts/ARC11550Data.algo.ts:132","pc":[506]},{"teal":442,"source":"contracts/ARC11550Data.algo.ts:132","pc":[507]},{"teal":446,"source":"contracts/ARC11550Data.algo.ts:132","pc":[508,509,510]},{"teal":450,"source":"contracts/ARC11550Data.algo.ts:133","pc":[511,512]},{"teal":451,"source":"contracts/ARC11550Data.algo.ts:133","pc":[513,514]},{"teal":452,"source":"contracts/ARC11550Data.algo.ts:133","pc":[515]},{"teal":453,"source":"contracts/ARC11550Data.algo.ts:133","pc":[516]},{"teal":454,"source":"contracts/ARC11550Data.algo.ts:133","pc":[517]},{"teal":457,"source":"contracts/ARC11550Data.algo.ts:133","errorMessage":"box value does not exist: this.params(id).value","pc":[518]},{"teal":458,"source":"contracts/ARC11550Data.algo.ts:132","pc":[519]},{"teal":463,"source":"contracts/ARC11550Data.algo.ts:136","pc":[520]},{"teal":466,"source":"contracts/ARC11550Data.algo.ts:136","pc":[521,522,523]},{"teal":467,"source":"contracts/ARC11550Data.algo.ts:136","pc":[524,525,526]},{"teal":470,"source":"contracts/ARC11550Data.algo.ts:136","pc":[527,528,529]},{"teal":471,"source":"contracts/ARC11550Data.algo.ts:136","pc":[530]},{"teal":472,"source":"contracts/ARC11550Data.algo.ts:136","pc":[531]},{"teal":473,"source":"contracts/ARC11550Data.algo.ts:136","pc":[532,533]},{"teal":474,"source":"contracts/ARC11550Data.algo.ts:136","pc":[534]},{"teal":475,"source":"contracts/ARC11550Data.algo.ts:136","pc":[535]},{"teal":476,"source":"contracts/ARC11550Data.algo.ts:136","pc":[536,537,538]},{"teal":477,"source":"contracts/ARC11550Data.algo.ts:136","pc":[539]},{"teal":478,"source":"contracts/ARC11550Data.algo.ts:136","pc":[540]},{"teal":479,"source":"contracts/ARC11550Data.algo.ts:136","pc":[541]},{"teal":480,"source":"contracts/ARC11550Data.algo.ts:136","pc":[542]},{"teal":481,"source":"contracts/ARC11550Data.algo.ts:136","pc":[543]},{"teal":482,"source":"contracts/ARC11550Data.algo.ts:136","pc":[544]},{"teal":486,"source":"contracts/ARC11550Data.algo.ts:136","pc":[545,546,547]},{"teal":489,"source":"contracts/ARC11550Data.algo.ts:136","pc":[548]},{"teal":490,"source":"contracts/ARC11550Data.algo.ts:136","pc":[549,550]},{"teal":494,"source":"contracts/ARC11550Data.algo.ts:137","pc":[551]},{"teal":495,"source":"contracts/ARC11550Data.algo.ts:137","pc":[552,553]},{"teal":499,"source":"contracts/ARC11550Data.algo.ts:138","pc":[554]},{"teal":500,"source":"contracts/ARC11550Data.algo.ts:138","pc":[555,556]},{"teal":505,"source":"contracts/ARC11550Data.algo.ts:138","pc":[557,558]},{"teal":506,"source":"contracts/ARC11550Data.algo.ts:138","pc":[559,560]},{"teal":507,"source":"contracts/ARC11550Data.algo.ts:138","pc":[561]},{"teal":508,"source":"contracts/ARC11550Data.algo.ts:138","pc":[562]},{"teal":509,"source":"contracts/ARC11550Data.algo.ts:138","pc":[563]},{"teal":510,"source":"contracts/ARC11550Data.algo.ts:138","pc":[564]},{"teal":511,"source":"contracts/ARC11550Data.algo.ts:138","pc":[565,566,567]},{"teal":515,"source":"contracts/ARC11550Data.algo.ts:139","pc":[568,569]},{"teal":516,"source":"contracts/ARC11550Data.algo.ts:139","pc":[570,571]},{"teal":517,"source":"contracts/ARC11550Data.algo.ts:139","pc":[572]},{"teal":518,"source":"contracts/ARC11550Data.algo.ts:139","pc":[573,574]},{"teal":519,"source":"contracts/ARC11550Data.algo.ts:139","pc":[575]},{"teal":520,"source":"contracts/ARC11550Data.algo.ts:139","pc":[576]},{"teal":521,"source":"contracts/ARC11550Data.algo.ts:139","pc":[577]},{"teal":522,"source":"contracts/ARC11550Data.algo.ts:139","pc":[578,579]},{"teal":523,"source":"contracts/ARC11550Data.algo.ts:139","pc":[580]},{"teal":524,"source":"contracts/ARC11550Data.algo.ts:139","pc":[581]},{"teal":525,"source":"contracts/ARC11550Data.algo.ts:139","pc":[582]},{"teal":526,"source":"contracts/ARC11550Data.algo.ts:139","pc":[583]},{"teal":527,"source":"contracts/ARC11550Data.algo.ts:139","pc":[584,585]},{"teal":531,"source":"contracts/ARC11550Data.algo.ts:140","pc":[586,587]},{"teal":532,"source":"contracts/ARC11550Data.algo.ts:140","pc":[588,589]},{"teal":533,"source":"contracts/ARC11550Data.algo.ts:140","pc":[590,591]},{"teal":534,"source":"contracts/ARC11550Data.algo.ts:140","pc":[592]},{"teal":535,"source":"contracts/ARC11550Data.algo.ts:140","pc":[593]},{"teal":536,"source":"contracts/ARC11550Data.algo.ts:140","pc":[594]},{"teal":539,"source":"contracts/ARC11550Data.algo.ts:140","errorMessage":"box value does not exist: this.params(id).value","pc":[595]},{"teal":540,"source":"contracts/ARC11550Data.algo.ts:140","pc":[596]},{"teal":541,"source":"contracts/ARC11550Data.algo.ts:140","pc":[597,598]},{"teal":546,"source":"contracts/ARC11550Data.algo.ts:138","pc":[599,600]},{"teal":547,"source":"contracts/ARC11550Data.algo.ts:138","pc":[601]},{"teal":548,"source":"contracts/ARC11550Data.algo.ts:138","pc":[602]},{"teal":549,"source":"contracts/ARC11550Data.algo.ts:138","pc":[603,604]},{"teal":550,"source":"contracts/ARC11550Data.algo.ts:138","pc":[605,606,607]},{"teal":555,"source":"contracts/ARC11550Data.algo.ts:143","pc":[608,609]},{"teal":558,"source":"contracts/ARC11550Data.algo.ts:136","pc":[610,611]},{"teal":561,"source":"contracts/ARC11550Data.algo.ts:136","pc":[612,613]},{"teal":562,"source":"contracts/ARC11550Data.algo.ts:136","pc":[614]},{"teal":567,"source":"contracts/ARC11550Data.algo.ts:146","pc":[615,616,617]},{"teal":568,"source":"contracts/ARC11550Data.algo.ts:146","pc":[618]},{"teal":569,"source":"contracts/ARC11550Data.algo.ts:146","pc":[619]},{"teal":570,"source":"contracts/ARC11550Data.algo.ts:146","pc":[620,621]},{"teal":571,"source":"contracts/ARC11550Data.algo.ts:146","pc":[622]},{"teal":574,"source":"contracts/ARC11550Data.algo.ts:146","errorMessage":"argument 0 (allowance) for arc11550_approve must be a (uint64,uint64)","pc":[623]},{"teal":577,"source":"contracts/ARC11550Data.algo.ts:146","pc":[624,625,626]},{"teal":578,"source":"contracts/ARC11550Data.algo.ts:146","pc":[627]},{"teal":579,"source":"contracts/ARC11550Data.algo.ts:146","pc":[628]},{"teal":580,"source":"contracts/ARC11550Data.algo.ts:146","pc":[629,630]},{"teal":581,"source":"contracts/ARC11550Data.algo.ts:146","pc":[631]},{"teal":584,"source":"contracts/ARC11550Data.algo.ts:146","errorMessage":"argument 1 (allowanceKey) for arc11550_approve must be a (address,address,uint64)","pc":[632]},{"teal":587,"source":"contracts/ARC11550Data.algo.ts:146","pc":[633,634,635]},{"teal":588,"source":"contracts/ARC11550Data.algo.ts:146","pc":[636]},{"teal":589,"source":"contracts/ARC11550Data.algo.ts:146","pc":[637]},{"teal":593,"source":"contracts/ARC11550Data.algo.ts:146","pc":[638,639,640]},{"teal":597,"source":"contracts/ARC11550Data.algo.ts:147","pc":[641,642]},{"teal":598,"source":"contracts/ARC11550Data.algo.ts:147","pc":[643,644]},{"teal":599,"source":"contracts/ARC11550Data.algo.ts:147","pc":[645,646]},{"teal":600,"source":"contracts/ARC11550Data.algo.ts:147","pc":[647,648]},{"teal":601,"source":"contracts/ARC11550Data.algo.ts:147","pc":[649,650]},{"teal":602,"source":"contracts/ARC11550Data.algo.ts:147","pc":[651,652,653]},{"teal":603,"source":"contracts/ARC11550Data.algo.ts:147","pc":[654]},{"teal":604,"source":"contracts/ARC11550Data.algo.ts:147","pc":[655]},{"teal":605,"source":"contracts/ARC11550Data.algo.ts:147","pc":[656]},{"teal":606,"source":"contracts/ARC11550Data.algo.ts:147","pc":[657,658]},{"teal":607,"source":"contracts/ARC11550Data.algo.ts:147","pc":[659]},{"teal":608,"source":"contracts/ARC11550Data.algo.ts:147","pc":[660]},{"teal":609,"source":"contracts/ARC11550Data.algo.ts:147","pc":[661]},{"teal":613,"source":"contracts/ARC11550Data.algo.ts:148","pc":[662,663]},{"teal":614,"source":"contracts/ARC11550Data.algo.ts:148","pc":[664,665]},{"teal":615,"source":"contracts/ARC11550Data.algo.ts:148","pc":[666]},{"teal":616,"source":"contracts/ARC11550Data.algo.ts:148","pc":[667,668]},{"teal":617,"source":"contracts/ARC11550Data.algo.ts:148","pc":[669]},{"teal":618,"source":"contracts/ARC11550Data.algo.ts:146","pc":[670]},{"teal":623,"source":"contracts/ARC11550Data.algo.ts:151","pc":[671,672,673]},{"teal":624,"source":"contracts/ARC11550Data.algo.ts:151","pc":[674,675,676]},{"teal":627,"source":"contracts/ARC11550Data.algo.ts:151","pc":[677,678,679]},{"teal":628,"source":"contracts/ARC11550Data.algo.ts:151","pc":[680]},{"teal":629,"source":"contracts/ARC11550Data.algo.ts:151","pc":[681]},{"teal":633,"source":"contracts/ARC11550Data.algo.ts:151","pc":[682,683,684]},{"teal":636,"source":"contracts/ARC11550Data.algo.ts:151","pc":[685]},{"teal":637,"source":"contracts/ARC11550Data.algo.ts:151","pc":[686]},{"teal":641,"source":"contracts/ARC11550Data.algo.ts:152","pc":[687]},{"teal":642,"source":"contracts/ARC11550Data.algo.ts:152","pc":[688,689]},{"teal":647,"source":"contracts/ARC11550Data.algo.ts:152","pc":[690,691]},{"teal":648,"source":"contracts/ARC11550Data.algo.ts:152","pc":[692,693]},{"teal":649,"source":"contracts/ARC11550Data.algo.ts:152","pc":[694]},{"teal":650,"source":"contracts/ARC11550Data.algo.ts:152","pc":[695,696]},{"teal":651,"source":"contracts/ARC11550Data.algo.ts:152","pc":[697]},{"teal":652,"source":"contracts/ARC11550Data.algo.ts:152","pc":[698]},{"teal":653,"source":"contracts/ARC11550Data.algo.ts:152","pc":[699,700,701]},{"teal":654,"source":"contracts/ARC11550Data.algo.ts:153","pc":[702,703]},{"teal":655,"source":"contracts/ARC11550Data.algo.ts:153","pc":[704,705]},{"teal":659,"source":"contracts/ARC11550Data.algo.ts:154","pc":[706,707]},{"teal":660,"source":"contracts/ARC11550Data.algo.ts:154","pc":[708,709]},{"teal":661,"source":"contracts/ARC11550Data.algo.ts:154","pc":[710]},{"teal":662,"source":"contracts/ARC11550Data.algo.ts:154","pc":[711,712]},{"teal":663,"source":"contracts/ARC11550Data.algo.ts:154","pc":[713,714]},{"teal":664,"source":"contracts/ARC11550Data.algo.ts:154","pc":[715]},{"teal":665,"source":"contracts/ARC11550Data.algo.ts:154","pc":[716]},{"teal":666,"source":"contracts/ARC11550Data.algo.ts:154","pc":[717,718]},{"teal":667,"source":"contracts/ARC11550Data.algo.ts:154","pc":[719]},{"teal":668,"source":"contracts/ARC11550Data.algo.ts:154","pc":[720,721]},{"teal":669,"source":"contracts/ARC11550Data.algo.ts:154","pc":[722]},{"teal":670,"source":"contracts/ARC11550Data.algo.ts:154","pc":[723,724]},{"teal":671,"source":"contracts/ARC11550Data.algo.ts:154","pc":[725]},{"teal":672,"source":"contracts/ARC11550Data.algo.ts:154","pc":[726,727]},{"teal":673,"source":"contracts/ARC11550Data.algo.ts:154","pc":[728,729]},{"teal":674,"source":"contracts/ARC11550Data.algo.ts:154","pc":[730]},{"teal":675,"source":"contracts/ARC11550Data.algo.ts:154","pc":[731,732]},{"teal":676,"source":"contracts/ARC11550Data.algo.ts:154","pc":[733,734]},{"teal":677,"source":"contracts/ARC11550Data.algo.ts:154","pc":[735]},{"teal":678,"source":"contracts/ARC11550Data.algo.ts:154","pc":[736]},{"teal":679,"source":"contracts/ARC11550Data.algo.ts:154","pc":[737]},{"teal":680,"source":"contracts/ARC11550Data.algo.ts:154","pc":[738]},{"teal":681,"source":"contracts/ARC11550Data.algo.ts:154","pc":[739,740]},{"teal":682,"source":"contracts/ARC11550Data.algo.ts:154","pc":[741]},{"teal":683,"source":"contracts/ARC11550Data.algo.ts:154","pc":[742,743]},{"teal":684,"source":"contracts/ARC11550Data.algo.ts:154","pc":[744]},{"teal":685,"source":"contracts/ARC11550Data.algo.ts:154","pc":[745,746,747]},{"teal":690,"source":"contracts/ARC11550Data.algo.ts:152","pc":[748,749]},{"teal":691,"source":"contracts/ARC11550Data.algo.ts:152","pc":[750]},{"teal":692,"source":"contracts/ARC11550Data.algo.ts:152","pc":[751]},{"teal":693,"source":"contracts/ARC11550Data.algo.ts:152","pc":[752,753]},{"teal":694,"source":"contracts/ARC11550Data.algo.ts:152","pc":[754,755,756]},{"teal":697,"source":"contracts/ARC11550Data.algo.ts:151","pc":[757]},{"teal":702,"source":"contracts/ARC11550Data.algo.ts:158","pc":[758]},{"teal":705,"source":"contracts/ARC11550Data.algo.ts:158","pc":[759,760,761]},{"teal":706,"source":"contracts/ARC11550Data.algo.ts:158","pc":[762]},{"teal":707,"source":"contracts/ARC11550Data.algo.ts:158","pc":[763]},{"teal":708,"source":"contracts/ARC11550Data.algo.ts:158","pc":[764]},{"teal":709,"source":"contracts/ARC11550Data.algo.ts:158","pc":[765]},{"teal":710,"source":"contracts/ARC11550Data.algo.ts:158","pc":[766]},{"teal":714,"source":"contracts/ARC11550Data.algo.ts:158","pc":[767,768,769]},{"teal":718,"source":"contracts/ARC11550Data.algo.ts:159","pc":[770,771]},{"teal":719,"source":"contracts/ARC11550Data.algo.ts:159","pc":[772]},{"teal":720,"source":"contracts/ARC11550Data.algo.ts:158","pc":[773]},{"teal":725,"source":"contracts/ARC11550Data.algo.ts:162","pc":[774]},{"teal":728,"source":"contracts/ARC11550Data.algo.ts:162","pc":[775,776,777]},{"teal":729,"source":"contracts/ARC11550Data.algo.ts:162","pc":[778]},{"teal":730,"source":"contracts/ARC11550Data.algo.ts:162","pc":[779]},{"teal":731,"source":"contracts/ARC11550Data.algo.ts:162","pc":[780]},{"teal":732,"source":"contracts/ARC11550Data.algo.ts:162","pc":[781]},{"teal":733,"source":"contracts/ARC11550Data.algo.ts:162","pc":[782]},{"teal":737,"source":"contracts/ARC11550Data.algo.ts:162","pc":[783,784,785]},{"teal":741,"source":"contracts/ARC11550Data.algo.ts:163","pc":[786,787]},{"teal":742,"source":"contracts/ARC11550Data.algo.ts:163","pc":[788]},{"teal":743,"source":"contracts/ARC11550Data.algo.ts:162","pc":[789]},{"teal":748,"source":"contracts/ARC11550Data.algo.ts:166","pc":[790,791,792]},{"teal":749,"source":"contracts/ARC11550Data.algo.ts:166","pc":[793,794,795]},{"teal":752,"source":"contracts/ARC11550Data.algo.ts:166","pc":[796,797,798]},{"teal":753,"source":"contracts/ARC11550Data.algo.ts:166","pc":[799]},{"teal":754,"source":"contracts/ARC11550Data.algo.ts:166","pc":[800]},{"teal":758,"source":"contracts/ARC11550Data.algo.ts:166","pc":[801,802,803]},{"teal":761,"source":"contracts/ARC11550Data.algo.ts:166","pc":[804]},{"teal":762,"source":"contracts/ARC11550Data.algo.ts:166","pc":[805,806]},{"teal":766,"source":"contracts/ARC11550Data.algo.ts:167","pc":[807,808]},{"teal":767,"source":"contracts/ARC11550Data.algo.ts:167","pc":[809,810]},{"teal":768,"source":"contracts/ARC11550Data.algo.ts:167","pc":[811]},{"teal":769,"source":"contracts/ARC11550Data.algo.ts:167","pc":[812]},{"teal":770,"source":"contracts/ARC11550Data.algo.ts:167","pc":[813]},{"teal":774,"source":"contracts/ARC11550Data.algo.ts:169","pc":[814]},{"teal":775,"source":"contracts/ARC11550Data.algo.ts:169","pc":[815,816]},{"teal":780,"source":"contracts/ARC11550Data.algo.ts:169","pc":[817,818]},{"teal":781,"source":"contracts/ARC11550Data.algo.ts:169","pc":[819,820]},{"teal":782,"source":"contracts/ARC11550Data.algo.ts:169","pc":[821]},{"teal":783,"source":"contracts/ARC11550Data.algo.ts:169","pc":[822]},{"teal":784,"source":"contracts/ARC11550Data.algo.ts:169","pc":[823]},{"teal":785,"source":"contracts/ARC11550Data.algo.ts:169","pc":[824]},{"teal":786,"source":"contracts/ARC11550Data.algo.ts:169","pc":[825,826,827]},{"teal":787,"source":"contracts/ARC11550Data.algo.ts:170","pc":[828,829]},{"teal":788,"source":"contracts/ARC11550Data.algo.ts:170","pc":[830,831]},{"teal":793,"source":"contracts/ARC11550Data.algo.ts:172","pc":[832,833]},{"teal":794,"source":"contracts/ARC11550Data.algo.ts:172","pc":[834,835]},{"teal":795,"source":"contracts/ARC11550Data.algo.ts:172","pc":[836]},{"teal":796,"source":"contracts/ARC11550Data.algo.ts:172","pc":[837,838]},{"teal":797,"source":"contracts/ARC11550Data.algo.ts:172","pc":[839]},{"teal":798,"source":"contracts/ARC11550Data.algo.ts:172","pc":[840]},{"teal":799,"source":"contracts/ARC11550Data.algo.ts:172","pc":[841]},{"teal":800,"source":"contracts/ARC11550Data.algo.ts:172","pc":[842]},{"teal":801,"source":"contracts/ARC11550Data.algo.ts:172","pc":[843]},{"teal":802,"source":"contracts/ARC11550Data.algo.ts:172","pc":[844,845]},{"teal":803,"source":"contracts/ARC11550Data.algo.ts:172","pc":[846]},{"teal":804,"source":"contracts/ARC11550Data.algo.ts:172","pc":[847,848]},{"teal":805,"source":"contracts/ARC11550Data.algo.ts:172","pc":[849]},{"teal":806,"source":"contracts/ARC11550Data.algo.ts:172","pc":[850,851]},{"teal":807,"source":"contracts/ARC11550Data.algo.ts:172","pc":[852]},{"teal":808,"source":"contracts/ARC11550Data.algo.ts:172","pc":[853,854,855]},{"teal":813,"source":"contracts/ARC11550Data.algo.ts:173","pc":[856,857]},{"teal":814,"source":"contracts/ARC11550Data.algo.ts:173","pc":[858,859]},{"teal":815,"source":"contracts/ARC11550Data.algo.ts:173","pc":[860,861]},{"teal":816,"source":"contracts/ARC11550Data.algo.ts:173","pc":[862]},{"teal":817,"source":"contracts/ARC11550Data.algo.ts:173","pc":[863,864]},{"teal":818,"source":"contracts/ARC11550Data.algo.ts:173","pc":[865]},{"teal":819,"source":"contracts/ARC11550Data.algo.ts:173","pc":[866]},{"teal":820,"source":"contracts/ARC11550Data.algo.ts:173","pc":[867]},{"teal":821,"source":"contracts/ARC11550Data.algo.ts:173","pc":[868]},{"teal":822,"source":"contracts/ARC11550Data.algo.ts:173","pc":[869]},{"teal":823,"source":"contracts/ARC11550Data.algo.ts:173","pc":[870,871]},{"teal":824,"source":"contracts/ARC11550Data.algo.ts:173","pc":[872]},{"teal":825,"source":"contracts/ARC11550Data.algo.ts:173","pc":[873,874]},{"teal":826,"source":"contracts/ARC11550Data.algo.ts:173","pc":[875]},{"teal":827,"source":"contracts/ARC11550Data.algo.ts:173","pc":[876,877]},{"teal":828,"source":"contracts/ARC11550Data.algo.ts:173","pc":[878]},{"teal":829,"source":"contracts/ARC11550Data.algo.ts:173","pc":[879,880]},{"teal":830,"source":"contracts/ARC11550Data.algo.ts:173","pc":[881,882]},{"teal":831,"source":"contracts/ARC11550Data.algo.ts:173","pc":[883]},{"teal":832,"source":"contracts/ARC11550Data.algo.ts:173","pc":[884,885]},{"teal":833,"source":"contracts/ARC11550Data.algo.ts:173","pc":[886]},{"teal":834,"source":"contracts/ARC11550Data.algo.ts:173","pc":[887]},{"teal":835,"source":"contracts/ARC11550Data.algo.ts:173","pc":[888]},{"teal":836,"source":"contracts/ARC11550Data.algo.ts:173","pc":[889]},{"teal":837,"source":"contracts/ARC11550Data.algo.ts:173","pc":[890]},{"teal":838,"source":"contracts/ARC11550Data.algo.ts:173","pc":[891,892]},{"teal":839,"source":"contracts/ARC11550Data.algo.ts:173","pc":[893]},{"teal":840,"source":"contracts/ARC11550Data.algo.ts:173","pc":[894]},{"teal":841,"source":"contracts/ARC11550Data.algo.ts:173","pc":[895]},{"teal":842,"source":"contracts/ARC11550Data.algo.ts:173","pc":[896]},{"teal":843,"source":"contracts/ARC11550Data.algo.ts:173","pc":[897]},{"teal":844,"source":"contracts/ARC11550Data.algo.ts:173","pc":[898]},{"teal":845,"source":"contracts/ARC11550Data.algo.ts:173","pc":[899]},{"teal":846,"source":"contracts/ARC11550Data.algo.ts:173","pc":[900,901]},{"teal":850,"source":"contracts/ARC11550Data.algo.ts:174","pc":[902]},{"teal":851,"source":"contracts/ARC11550Data.algo.ts:174","pc":[903]},{"teal":852,"source":"contracts/ARC11550Data.algo.ts:173","pc":[904,905]},{"teal":856,"source":"contracts/ARC11550Data.algo.ts:173","pc":[906,907]},{"teal":857,"source":"contracts/ARC11550Data.algo.ts:173","pc":[908,909]},{"teal":858,"source":"contracts/ARC11550Data.algo.ts:173","pc":[910]},{"teal":859,"source":"contracts/ARC11550Data.algo.ts:173","pc":[911,912]},{"teal":860,"source":"contracts/ARC11550Data.algo.ts:173","pc":[913]},{"teal":861,"source":"contracts/ARC11550Data.algo.ts:173","pc":[914]},{"teal":862,"source":"contracts/ARC11550Data.algo.ts:173","pc":[915]},{"teal":863,"source":"contracts/ARC11550Data.algo.ts:173","pc":[916]},{"teal":864,"source":"contracts/ARC11550Data.algo.ts:173","pc":[917]},{"teal":865,"source":"contracts/ARC11550Data.algo.ts:173","pc":[918,919]},{"teal":866,"source":"contracts/ARC11550Data.algo.ts:173","pc":[920]},{"teal":867,"source":"contracts/ARC11550Data.algo.ts:173","pc":[921,922]},{"teal":868,"source":"contracts/ARC11550Data.algo.ts:173","pc":[923]},{"teal":872,"source":"contracts/ARC11550Data.algo.ts:173","pc":[924,925]},{"teal":873,"source":"contracts/ARC11550Data.algo.ts:173","pc":[926]},{"teal":877,"source":"contracts/ARC11550Data.algo.ts:173","pc":[927,928]},{"teal":878,"source":"contracts/ARC11550Data.algo.ts:173","pc":[929,930]},{"teal":879,"source":"contracts/ARC11550Data.algo.ts:173","pc":[931]},{"teal":880,"source":"contracts/ARC11550Data.algo.ts:173","pc":[932,933]},{"teal":881,"source":"contracts/ARC11550Data.algo.ts:173","pc":[934]},{"teal":882,"source":"contracts/ARC11550Data.algo.ts:173","pc":[935]},{"teal":883,"source":"contracts/ARC11550Data.algo.ts:173","pc":[936]},{"teal":884,"source":"contracts/ARC11550Data.algo.ts:173","pc":[937]},{"teal":885,"source":"contracts/ARC11550Data.algo.ts:173","pc":[938]},{"teal":886,"source":"contracts/ARC11550Data.algo.ts:173","pc":[939,940]},{"teal":887,"source":"contracts/ARC11550Data.algo.ts:173","pc":[941]},{"teal":888,"source":"contracts/ARC11550Data.algo.ts:173","pc":[942]},{"teal":889,"source":"contracts/ARC11550Data.algo.ts:173","pc":[943]},{"teal":890,"source":"contracts/ARC11550Data.algo.ts:173","pc":[944]},{"teal":891,"source":"contracts/ARC11550Data.algo.ts:173","pc":[945]},{"teal":892,"source":"contracts/ARC11550Data.algo.ts:173","pc":[946]},{"teal":893,"source":"contracts/ARC11550Data.algo.ts:173","pc":[947]},{"teal":894,"source":"contracts/ARC11550Data.algo.ts:173","pc":[948,949]},{"teal":895,"source":"contracts/ARC11550Data.algo.ts:173","pc":[950]},{"teal":896,"source":"contracts/ARC11550Data.algo.ts:174","pc":[951]},{"teal":900,"source":"contracts/ARC11550Data.algo.ts:174","pc":[952,953]},{"teal":901,"source":"contracts/ARC11550Data.algo.ts:174","pc":[954]},{"teal":902,"source":"contracts/ARC11550Data.algo.ts:174","pc":[955]},{"teal":906,"source":"contracts/ARC11550Data.algo.ts:175","pc":[956]},{"teal":907,"source":"contracts/ARC11550Data.algo.ts:175","pc":[957]},{"teal":908,"source":"contracts/ARC11550Data.algo.ts:175","pc":[958]},{"teal":909,"source":"contracts/ARC11550Data.algo.ts:173","pc":[959,960]},{"teal":913,"source":"contracts/ARC11550Data.algo.ts:173","pc":[961,962]},{"teal":914,"source":"contracts/ARC11550Data.algo.ts:173","pc":[963,964]},{"teal":915,"source":"contracts/ARC11550Data.algo.ts:173","pc":[965]},{"teal":916,"source":"contracts/ARC11550Data.algo.ts:173","pc":[966,967]},{"teal":917,"source":"contracts/ARC11550Data.algo.ts:173","pc":[968]},{"teal":918,"source":"contracts/ARC11550Data.algo.ts:173","pc":[969]},{"teal":919,"source":"contracts/ARC11550Data.algo.ts:173","pc":[970]},{"teal":920,"source":"contracts/ARC11550Data.algo.ts:173","pc":[971]},{"teal":921,"source":"contracts/ARC11550Data.algo.ts:173","pc":[972]},{"teal":922,"source":"contracts/ARC11550Data.algo.ts:173","pc":[973,974]},{"teal":923,"source":"contracts/ARC11550Data.algo.ts:173","pc":[975]},{"teal":924,"source":"contracts/ARC11550Data.algo.ts:173","pc":[976,977]},{"teal":925,"source":"contracts/ARC11550Data.algo.ts:173","pc":[978]},{"teal":929,"source":"contracts/ARC11550Data.algo.ts:173","pc":[979,980]},{"teal":930,"source":"contracts/ARC11550Data.algo.ts:173","pc":[981]},{"teal":934,"source":"contracts/ARC11550Data.algo.ts:173","pc":[982,983]},{"teal":935,"source":"contracts/ARC11550Data.algo.ts:173","pc":[984,985]},{"teal":936,"source":"contracts/ARC11550Data.algo.ts:173","pc":[986]},{"teal":937,"source":"contracts/ARC11550Data.algo.ts:173","pc":[987,988]},{"teal":938,"source":"contracts/ARC11550Data.algo.ts:173","pc":[989]},{"teal":939,"source":"contracts/ARC11550Data.algo.ts:173","pc":[990]},{"teal":940,"source":"contracts/ARC11550Data.algo.ts:173","pc":[991]},{"teal":941,"source":"contracts/ARC11550Data.algo.ts:173","pc":[992]},{"teal":942,"source":"contracts/ARC11550Data.algo.ts:173","pc":[993]},{"teal":943,"source":"contracts/ARC11550Data.algo.ts:173","pc":[994,995]},{"teal":944,"source":"contracts/ARC11550Data.algo.ts:173","pc":[996]},{"teal":945,"source":"contracts/ARC11550Data.algo.ts:173","pc":[997]},{"teal":946,"source":"contracts/ARC11550Data.algo.ts:173","pc":[998]},{"teal":947,"source":"contracts/ARC11550Data.algo.ts:173","pc":[999]},{"teal":948,"source":"contracts/ARC11550Data.algo.ts:173","pc":[1000]},{"teal":949,"source":"contracts/ARC11550Data.algo.ts:173","pc":[1001]},{"teal":950,"source":"contracts/ARC11550Data.algo.ts:173","pc":[1002]},{"teal":951,"source":"contracts/ARC11550Data.algo.ts:173","pc":[1003,1004]},{"teal":952,"source":"contracts/ARC11550Data.algo.ts:173","pc":[1005]},{"teal":953,"source":"contracts/ARC11550Data.algo.ts:175","pc":[1006]},{"teal":957,"source":"contracts/ARC11550Data.algo.ts:175","pc":[1007,1008]},{"teal":958,"source":"contracts/ARC11550Data.algo.ts:175","pc":[1009,1010]},{"teal":959,"source":"contracts/ARC11550Data.algo.ts:175","pc":[1011]},{"teal":960,"source":"contracts/ARC11550Data.algo.ts:175","pc":[1012,1013]},{"teal":961,"source":"contracts/ARC11550Data.algo.ts:175","pc":[1014]},{"teal":962,"source":"contracts/ARC11550Data.algo.ts:175","pc":[1015]},{"teal":963,"source":"contracts/ARC11550Data.algo.ts:175","pc":[1016]},{"teal":964,"source":"contracts/ARC11550Data.algo.ts:175","pc":[1017,1018]},{"teal":965,"source":"contracts/ARC11550Data.algo.ts:175","pc":[1019]},{"teal":966,"source":"contracts/ARC11550Data.algo.ts:175","pc":[1020,1021]},{"teal":967,"source":"contracts/ARC11550Data.algo.ts:175","pc":[1022]},{"teal":968,"source":"contracts/ARC11550Data.algo.ts:175","pc":[1023]},{"teal":969,"source":"contracts/ARC11550Data.algo.ts:175","pc":[1024]},{"teal":970,"source":"contracts/ARC11550Data.algo.ts:175","pc":[1025]},{"teal":971,"source":"contracts/ARC11550Data.algo.ts:175","pc":[1026]},{"teal":972,"source":"contracts/ARC11550Data.algo.ts:175","pc":[1027]},{"teal":973,"source":"contracts/ARC11550Data.algo.ts:173","pc":[1028,1029]},{"teal":974,"source":"contracts/ARC11550Data.algo.ts:173","pc":[1030,1031]},{"teal":975,"source":"contracts/ARC11550Data.algo.ts:173","pc":[1032]},{"teal":980,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1033]},{"teal":981,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1034,1035]},{"teal":982,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1036,1037]},{"teal":983,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1038]},{"teal":984,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1039,1040]},{"teal":985,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1041]},{"teal":986,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1042]},{"teal":987,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1043]},{"teal":988,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1044]},{"teal":989,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1045]},{"teal":990,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1046,1047]},{"teal":991,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1048]},{"teal":992,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1049]},{"teal":993,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1050]},{"teal":994,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1051]},{"teal":995,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1052]},{"teal":996,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1053,1054]},{"teal":997,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1055,1056]},{"teal":998,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1057]},{"teal":999,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1058,1059]},{"teal":1000,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1060]},{"teal":1001,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1061]},{"teal":1002,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1062]},{"teal":1003,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1063]},{"teal":1004,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1064]},{"teal":1005,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1065,1066]},{"teal":1006,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1067]},{"teal":1007,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1068,1069]},{"teal":1008,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1070]},{"teal":1009,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1071]},{"teal":1010,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1072]},{"teal":1011,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1073]},{"teal":1014,"source":"contracts/ARC11550Data.algo.ts:177","errorMessage":"box value does not exist: this.balances({ id: t.id, address: t.from }).value","pc":[1074]},{"teal":1015,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1075]},{"teal":1016,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1076,1077]},{"teal":1017,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1078,1079]},{"teal":1018,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1080]},{"teal":1019,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1081,1082]},{"teal":1020,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1083]},{"teal":1021,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1084]},{"teal":1022,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1085]},{"teal":1023,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1086,1087]},{"teal":1024,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1088]},{"teal":1025,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1089,1090]},{"teal":1026,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1091]},{"teal":1027,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1092]},{"teal":1028,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1093]},{"teal":1029,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1094]},{"teal":1030,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1095]},{"teal":1031,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1096]},{"teal":1032,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1097,1098]},{"teal":1033,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1099,1100]},{"teal":1034,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1101]},{"teal":1035,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1102,1103]},{"teal":1036,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1104]},{"teal":1037,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1105]},{"teal":1038,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1106]},{"teal":1039,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1107]},{"teal":1040,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1108]},{"teal":1041,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1109,1110]},{"teal":1042,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1111]},{"teal":1043,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1112]},{"teal":1044,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1113]},{"teal":1045,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1114]},{"teal":1046,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1115]},{"teal":1047,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1116,1117]},{"teal":1048,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1118,1119]},{"teal":1049,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1120]},{"teal":1050,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1121,1122]},{"teal":1051,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1123]},{"teal":1052,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1124]},{"teal":1053,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1125]},{"teal":1054,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1126]},{"teal":1055,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1127]},{"teal":1056,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1128,1129]},{"teal":1057,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1130]},{"teal":1058,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1131,1132]},{"teal":1059,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1133]},{"teal":1060,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1134]},{"teal":1061,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1135]},{"teal":1062,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1136]},{"teal":1063,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1137]},{"teal":1064,"source":"contracts/ARC11550Data.algo.ts:177","pc":[1138]},{"teal":1068,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1139]},{"teal":1069,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1140,1141]},{"teal":1070,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1142,1143]},{"teal":1071,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1144]},{"teal":1072,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1145,1146]},{"teal":1073,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1147]},{"teal":1074,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1148]},{"teal":1075,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1149]},{"teal":1076,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1150]},{"teal":1077,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1151]},{"teal":1078,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1152,1153]},{"teal":1079,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1154]},{"teal":1080,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1155]},{"teal":1081,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1156]},{"teal":1082,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1157]},{"teal":1083,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1158]},{"teal":1084,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1159,1160]},{"teal":1085,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1161,1162]},{"teal":1086,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1163]},{"teal":1087,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1164,1165]},{"teal":1088,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1166]},{"teal":1089,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1167]},{"teal":1090,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1168]},{"teal":1091,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1169,1170]},{"teal":1092,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1171]},{"teal":1093,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1172,1173]},{"teal":1094,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1174]},{"teal":1095,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1175,1176]},{"teal":1096,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1177]},{"teal":1097,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1178]},{"teal":1098,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1179]},{"teal":1099,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1180]},{"teal":1102,"source":"contracts/ARC11550Data.algo.ts:178","errorMessage":"box value does not exist: this.balances({ id: t.id, address: t.to }).value","pc":[1181]},{"teal":1103,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1182]},{"teal":1104,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1183,1184]},{"teal":1105,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1185,1186]},{"teal":1106,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1187]},{"teal":1107,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1188,1189]},{"teal":1108,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1190]},{"teal":1109,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1191]},{"teal":1110,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1192]},{"teal":1111,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1193,1194]},{"teal":1112,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1195]},{"teal":1113,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1196,1197]},{"teal":1114,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1198]},{"teal":1115,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1199]},{"teal":1116,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1200]},{"teal":1117,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1201]},{"teal":1118,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1202]},{"teal":1119,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1203]},{"teal":1120,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1204,1205]},{"teal":1121,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1206,1207]},{"teal":1122,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1208]},{"teal":1123,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1209,1210]},{"teal":1124,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1211]},{"teal":1125,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1212]},{"teal":1126,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1213]},{"teal":1127,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1214]},{"teal":1128,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1215]},{"teal":1129,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1216,1217]},{"teal":1130,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1218]},{"teal":1131,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1219]},{"teal":1132,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1220]},{"teal":1133,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1221]},{"teal":1134,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1222]},{"teal":1135,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1223,1224]},{"teal":1136,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1225,1226]},{"teal":1137,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1227]},{"teal":1138,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1228,1229]},{"teal":1139,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1230]},{"teal":1140,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1231]},{"teal":1141,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1232]},{"teal":1142,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1233,1234]},{"teal":1143,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1235]},{"teal":1144,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1236,1237]},{"teal":1145,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1238]},{"teal":1146,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1239,1240]},{"teal":1147,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1241]},{"teal":1148,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1242]},{"teal":1149,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1243]},{"teal":1150,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1244]},{"teal":1151,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1245]},{"teal":1152,"source":"contracts/ARC11550Data.algo.ts:178","pc":[1246]},{"teal":1157,"source":"contracts/ARC11550Data.algo.ts:169","pc":[1247,1248]},{"teal":1158,"source":"contracts/ARC11550Data.algo.ts:169","pc":[1249]},{"teal":1159,"source":"contracts/ARC11550Data.algo.ts:169","pc":[1250]},{"teal":1160,"source":"contracts/ARC11550Data.algo.ts:169","pc":[1251,1252]},{"teal":1161,"source":"contracts/ARC11550Data.algo.ts:169","pc":[1253,1254,1255]},{"teal":1164,"source":"contracts/ARC11550Data.algo.ts:166","pc":[1256]},{"teal":1169,"source":"contracts/ARC11550Data.algo.ts:182","pc":[1257]},{"teal":1172,"source":"contracts/ARC11550Data.algo.ts:182","pc":[1258,1259,1260]},{"teal":1173,"source":"contracts/ARC11550Data.algo.ts:182","pc":[1261]},{"teal":1174,"source":"contracts/ARC11550Data.algo.ts:182","pc":[1262]},{"teal":1175,"source":"contracts/ARC11550Data.algo.ts:182","pc":[1263,1264]},{"teal":1176,"source":"contracts/ARC11550Data.algo.ts:182","pc":[1265]},{"teal":1179,"source":"contracts/ARC11550Data.algo.ts:182","errorMessage":"argument 0 (params) for doMint must be a (byte[32],byte[8],uint64,uint64,address)","pc":[1266]},{"teal":1182,"source":"contracts/ARC11550Data.algo.ts:182","pc":[1267,1268,1269]},{"teal":1183,"source":"contracts/ARC11550Data.algo.ts:182","pc":[1270]},{"teal":1184,"source":"contracts/ARC11550Data.algo.ts:182","pc":[1271]},{"teal":1185,"source":"contracts/ARC11550Data.algo.ts:182","pc":[1272]},{"teal":1186,"source":"contracts/ARC11550Data.algo.ts:182","pc":[1273]},{"teal":1187,"source":"contracts/ARC11550Data.algo.ts:182","pc":[1274]},{"teal":1191,"source":"contracts/ARC11550Data.algo.ts:182","pc":[1275,1276,1277]},{"teal":1194,"source":"contracts/ARC11550Data.algo.ts:182","pc":[1278]},{"teal":1198,"source":"contracts/ARC11550Data.algo.ts:183","pc":[1279,1280]},{"teal":1199,"source":"contracts/ARC11550Data.algo.ts:183","pc":[1281,1282]},{"teal":1200,"source":"contracts/ARC11550Data.algo.ts:183","pc":[1283]},{"teal":1201,"source":"contracts/ARC11550Data.algo.ts:183","pc":[1284]},{"teal":1202,"source":"contracts/ARC11550Data.algo.ts:183","pc":[1285]},{"teal":1206,"source":"contracts/ARC11550Data.algo.ts:185","pc":[1286]},{"teal":1207,"source":"contracts/ARC11550Data.algo.ts:185","pc":[1287]},{"teal":1208,"source":"contracts/ARC11550Data.algo.ts:185","pc":[1288,1289]},{"teal":1212,"source":"contracts/ARC11550Data.algo.ts:186","pc":[1290,1291]},{"teal":1213,"source":"contracts/ARC11550Data.algo.ts:186","pc":[1292,1293]},{"teal":1214,"source":"contracts/ARC11550Data.algo.ts:186","pc":[1294]},{"teal":1215,"source":"contracts/ARC11550Data.algo.ts:186","pc":[1295]},{"teal":1216,"source":"contracts/ARC11550Data.algo.ts:186","pc":[1296]},{"teal":1220,"source":"contracts/ARC11550Data.algo.ts:187","pc":[1297,1298]},{"teal":1221,"source":"contracts/ARC11550Data.algo.ts:187","pc":[1299,1300,1301,1302,1303,1304,1305,1306]},{"teal":1222,"source":"contracts/ARC11550Data.algo.ts:187","pc":[1307]},{"teal":1223,"source":"contracts/ARC11550Data.algo.ts:187","pc":[1308]},{"teal":1224,"source":"contracts/ARC11550Data.algo.ts:187","pc":[1309]},{"teal":1228,"source":"contracts/ARC11550Data.algo.ts:189","pc":[1310,1311]},{"teal":1229,"source":"contracts/ARC11550Data.algo.ts:189","pc":[1312,1313]},{"teal":1230,"source":"contracts/ARC11550Data.algo.ts:189","pc":[1314]},{"teal":1231,"source":"contracts/ARC11550Data.algo.ts:189","pc":[1315]},{"teal":1232,"source":"contracts/ARC11550Data.algo.ts:189","pc":[1316,1317]},{"teal":1233,"source":"contracts/ARC11550Data.algo.ts:189","pc":[1318]},{"teal":1237,"source":"contracts/ARC11550Data.algo.ts:190","pc":[1319]},{"teal":1238,"source":"contracts/ARC11550Data.algo.ts:190","pc":[1320]},{"teal":1239,"source":"contracts/ARC11550Data.algo.ts:190","pc":[1321]},{"teal":1240,"source":"contracts/ARC11550Data.algo.ts:190","pc":[1322]},{"teal":1241,"source":"contracts/ARC11550Data.algo.ts:190","pc":[1323]},{"teal":1242,"source":"contracts/ARC11550Data.algo.ts:190","pc":[1324]},{"teal":1243,"source":"contracts/ARC11550Data.algo.ts:190","pc":[1325]},{"teal":1247,"source":"contracts/ARC11550Data.algo.ts:192","pc":[1326,1327]},{"teal":1250,"source":"contracts/ARC11550Data.algo.ts:182","pc":[1328,1329]},{"teal":1251,"source":"contracts/ARC11550Data.algo.ts:182","pc":[1330]},{"teal":1254,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1331,1332,1333,1334,1335,1336]},{"teal":1255,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1337,1338,1339]},{"teal":1256,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1340,1341,1342,1343]},{"teal":1259,"source":"contracts/ARC11550Data.algo.ts:46","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[1344]},{"teal":1262,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1345,1346,1347,1348,1349,1350]},{"teal":1263,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1351,1352,1353,1354,1355,1356]},{"teal":1264,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1357,1358,1359,1360,1361,1362]},{"teal":1265,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1363,1364,1365,1366,1367,1368]},{"teal":1266,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1369,1370,1371,1372,1373,1374]},{"teal":1267,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1375,1376,1377,1378,1379,1380]},{"teal":1268,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1381,1382,1383,1384,1385,1386]},{"teal":1269,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1387,1388,1389,1390,1391,1392]},{"teal":1270,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1393,1394,1395,1396,1397,1398]},{"teal":1271,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1399,1400,1401,1402,1403,1404]},{"teal":1272,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1405,1406,1407,1408,1409,1410]},{"teal":1273,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1411,1412,1413,1414,1415,1416]},{"teal":1274,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1417,1418,1419,1420,1421,1422]},{"teal":1275,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1423,1424,1425]},{"teal":1276,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453]},{"teal":1279,"source":"contracts/ARC11550Data.algo.ts:46","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[1454]},{"teal":1282,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1455,1456]},{"teal":1283,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1457]},{"teal":1284,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1458,1459]},{"teal":1285,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1460]},{"teal":1286,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1461,1462,1463]},{"teal":1287,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1464,1465]},{"teal":1288,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1466]},{"teal":1289,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1467,1468]},{"teal":1290,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1469]},{"teal":1291,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1470,1471]},{"teal":1292,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1472,1473,1474]},{"teal":1295,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1475,1476]},{"teal":1296,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1477,1478]},{"teal":1297,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1479]},{"teal":1298,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1480]},{"teal":1299,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1481,1482]},{"teal":1302,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1483]},{"teal":1303,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1484,1485]},{"teal":1304,"source":"contracts/ARC11550Data.algo.ts:46","pc":[1486]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAKAAgBUCBIKFgQOCYKAAQVH3x1AWIGbWludGVkAW0BcAt0cmFuc2ZlckFwcAFhD3RyYW5zZmVySG9va0FwcAdtaW50Q2FwMRgUgQYLMRkIjQwE1gAAAAAAAAAAAAAEyAAAAAAAAAAAAAAANhoDFzYaAhc2GgEXiAACJEOKAwAnBov/ZysiZycJi/1nJwiL/meJKYgABRZQsCRDigABK2SJKTYaAYgABFCwJEOKAQEnBIv/UL5EiTYaAlcCADYaAYgAAiRDigIAMQAhCSEEJwWL/zX/NP9XAAgXFlBOAroSRCcEi/9QvUxIQQAOJwSL/1C+RDX/NP8iU0QnBIv/UL5ENf8kSTX7NP80/08CWUk1/kk0/0xZJAuBAgg1/TT/IjT+Uov+SRUWVwYCTFBJNfw0/zT+NP0INP8VUlBQNf+IBGw0/ycEi/9QSbxITL+JKTYaAkkVIQQSRDYaAReIAAUWULAkQ4oCASqL/xaL/lBQvkQXiSk2GgFXAgCIAA5JFSMKFlcGAkxQULAkQ4oBAShHAyiMACKMAYsBi/8VIQYKDEEARIv/Nf8iiwEhBgsIIgg0/0wjWBeMAov/Nf8iiwEhBgsIIwg0/0whBFiMA4sAKosCFosDUFC+RBcWUIwAiwEkCIwBQv+wiwCMAEYDiSk2GgEXiAAEULAkQ4oBAScFi/8WUL5EiSk2GgFXAgCIAA9JFSEHChZXBgJMUFCwJEOKAQEoRwIojAAijAGLAYv/FSMKDEEAKIv/Nf8iiwEjCwg0/0wjWBeMAosAJwWLAhZQvkRQjACLASQIjAFC/82LAIwARgKJNhoCSRUhCBJENhoBSRUhBRJEiAACJEOKAgAxACEJIQQnBYv/V0AIFxZQTgK6EkQnB4v/UIv+v4k2GgFXAgCIAAIkQ4oBAChJIowAiwCL/xUhBwoMQQA3iwCMAYv/Nf8iiwEhBwsIIQUINP9MIQhYi/81/yKLASEHCwgiCDT/TCEFWIj/kosAJAiMAEL/vYkpiAAFFlCwJEOKAAEnBmSJKYgABRZQsCRDigABJwhkiTYaAVcCAIgAAiRDigEAKEcCMg0nBmQSRCKMAIsAi/8VJQoMQQGsiwCMAYv/Nf8iiwElCwgjCDT/TCEEWDEAE0EAsScHi/81/yKLASULCCMINP9MIQRYMQBQi/81/yKLASULCCIINP9MI1gXFlBQjAIjIycHi/81/yKLASULCCMINP9MIQRYMQBQi/81/yKLASULCCIINP9MI1gXFlBQTgK6FzIHD0QiSSMnB4v/Nf8iiwElCwgjCDT/TCEEWDEAUIv/Nf8iiwElCwgiCDT/TCNYFxZQUE4CuheL/zX/IosBJQsIIQUINP9MI1gXCRaLAk4CuyqL/zX/IosBJQsIIgg0/0wjWBcWi/81/yKLASULCCMINP9MIQRYUFC+RBeL/zX/IosBJQsIIQUINP9MI1gXCSqL/zX/IosBJQsIIgg0/0wjWBcWi/81/yKLASULCCMINP9MIQRYUFBMFr8qi/81/yKLASULCCIINP9MI1gXFov/Nf8iiwElCwghBgg0/0whBFhQUL5EF4v/Nf8iiwElCwghBQg0/0wjWBcIKov/Nf8iiwElCwgiCDT/TCNYFxaL/zX/IosBJQsIIQYINP9MIQRYUFBMFr+LACQIjABC/kmJKTYaAUkVIQcSRIgABRZQsCRDigEBKDINJwZkEkQrZIwAiwAnCWQORDEAgAZtaW50ZXJkEkQnBYsAFlCL/78rZCQIK0xniwCMAImABOHAxNk2GgCOAfssAIAE3UL1oIAEOsIyVIAEu7neZ4AE0ErLwoAEZd2HF4AEUfUEvoAEKtLrVYAE1XkXXYAEDw+hc4AEwU5o2YAECRyit4AEYrUHi4AEQQV4VTYaAI4N+uX69PsK+6L7x/xC/Fr8ufzx/Uj9WP1o/zsANPwVNP0MQAALNPwVNP0kNflCAAg0/TT8FSI1+Qk1+ok=","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Params = {
  name: Uint8Array,
  symbol: Uint8Array,
  total: bigint,
  decimals: bigint,
  manager: string
}


/**
 * Converts the ABI tuple representation of a Params to the struct representation
 */
export function ParamsFromTuple(abiTuple: [Uint8Array, Uint8Array, bigint, bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Params, APP_SPEC.structs) as Params
}

export type IdAndAddress = {
  id: bigint,
  address: string
}


/**
 * Converts the ABI tuple representation of a IdAndAddress to the struct representation
 */
export function IdAndAddressFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.IdAndAddress, APP_SPEC.structs) as IdAndAddress
}

export type Metadata = {
  mutable: boolean,
  data: Uint8Array
}


/**
 * Converts the ABI tuple representation of a Metadata to the struct representation
 */
export function MetadataFromTuple(abiTuple: [boolean, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Metadata, APP_SPEC.structs) as Metadata
}

export type MetadataKey = {
  id: bigint,
  key: string
}


/**
 * Converts the ABI tuple representation of a MetadataKey to the struct representation
 */
export function MetadataKeyFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.MetadataKey, APP_SPEC.structs) as MetadataKey
}

export type Allowance = {
  amount: bigint,
  untilTimestamp: bigint
}


/**
 * Converts the ABI tuple representation of a Allowance to the struct representation
 */
export function AllowanceFromTuple(abiTuple: [bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Allowance, APP_SPEC.structs) as Allowance
}

export type AllowanceKey = {
  holder: string,
  sender: string,
  id: bigint
}


/**
 * Converts the ABI tuple representation of a AllowanceKey to the struct representation
 */
export function AllowanceKeyFromTuple(abiTuple: [string, string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AllowanceKey, APP_SPEC.structs) as AllowanceKey
}

/**
 * The argument types for the Arc11550Data contract
 */
export type Arc11550DataArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(uint64,uint64,uint64)void': {
      transferApp: bigint | number
      transferHookApp: bigint | number
      mintCap: bigint | number
    }
    'arc11550_minted()uint64': Record<string, never>
    'arc11550_metadata((uint64,string))(bool,byte[])': {
      key: MetadataKey
    }
    'arc11550_setMetadata((uint64,string),byte[])void': {
      key: MetadataKey
      data: Uint8Array
    }
    'arc11550_balanceOf(uint64,address)uint64': {
      id: bigint | number
      account: string
    }
    'arc11550_balancesOf((uint64,address)[])uint64[]': {
      idAndAddrs: [bigint | number, string][]
    }
    'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)': {
      id: bigint | number
    }
    'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]': {
      ids: bigint[] | number[]
    }
    'arc11550_approve((address,address,uint64),(uint64,uint64))void': {
      allowanceKey: AllowanceKey
      allowance: Allowance
    }
    'arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void': {
      allowances: [[string, string, bigint | number], [bigint | number, bigint | number]][]
    }
    'arc11550_transferApp()uint64': Record<string, never>
    'arc11550_transferHookApp()uint64': Record<string, never>
    'doTransfers((uint64,address,address,uint64)[])void': {
      transfers: [bigint | number, string, string, bigint | number][]
    }
    'doMint((byte[32],byte[8],uint64,uint64,address))uint64': {
      params: Params
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(uint64,uint64,uint64)void': [transferApp: bigint | number, transferHookApp: bigint | number, mintCap: bigint | number]
    'arc11550_minted()uint64': []
    'arc11550_metadata((uint64,string))(bool,byte[])': [key: MetadataKey]
    'arc11550_setMetadata((uint64,string),byte[])void': [key: MetadataKey, data: Uint8Array]
    'arc11550_balanceOf(uint64,address)uint64': [id: bigint | number, account: string]
    'arc11550_balancesOf((uint64,address)[])uint64[]': [idAndAddrs: [bigint | number, string][]]
    'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)': [id: bigint | number]
    'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]': [ids: bigint[] | number[]]
    'arc11550_approve((address,address,uint64),(uint64,uint64))void': [allowanceKey: AllowanceKey, allowance: Allowance]
    'arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void': [allowances: [[string, string, bigint | number], [bigint | number, bigint | number]][]]
    'arc11550_transferApp()uint64': []
    'arc11550_transferHookApp()uint64': []
    'doTransfers((uint64,address,address,uint64)[])void': [transfers: [bigint | number, string, string, bigint | number][]]
    'doMint((byte[32],byte[8],uint64,uint64,address))uint64': [params: Params]
  }
}

/**
 * The return type for each method
 */
export type Arc11550DataReturns = {
  'createApplication(uint64,uint64,uint64)void': void
  'arc11550_minted()uint64': bigint
  'arc11550_metadata((uint64,string))(bool,byte[])': Metadata
  'arc11550_setMetadata((uint64,string),byte[])void': void
  'arc11550_balanceOf(uint64,address)uint64': bigint
  'arc11550_balancesOf((uint64,address)[])uint64[]': bigint[]
  'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)': Params
  'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]': [Uint8Array, Uint8Array, bigint, bigint, string][]
  'arc11550_approve((address,address,uint64),(uint64,uint64))void': void
  'arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void': void
  'arc11550_transferApp()uint64': bigint
  'arc11550_transferHookApp()uint64': bigint
  'doTransfers((uint64,address,address,uint64)[])void': void
  'doMint((byte[32],byte[8],uint64,uint64,address))uint64': bigint
}

/**
 * Defines the types of available calls and state of the Arc11550Data smart contract.
 */
export type Arc11550DataTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64,uint64,uint64)void' | 'createApplication', {
      argsObj: Arc11550DataArgs['obj']['createApplication(uint64,uint64,uint64)void']
      argsTuple: Arc11550DataArgs['tuple']['createApplication(uint64,uint64,uint64)void']
      returns: Arc11550DataReturns['createApplication(uint64,uint64,uint64)void']
    }>
    & Record<'arc11550_minted()uint64' | 'arc11550_minted', {
      argsObj: Arc11550DataArgs['obj']['arc11550_minted()uint64']
      argsTuple: Arc11550DataArgs['tuple']['arc11550_minted()uint64']
      returns: Arc11550DataReturns['arc11550_minted()uint64']
    }>
    & Record<'arc11550_metadata((uint64,string))(bool,byte[])' | 'arc11550_metadata', {
      argsObj: Arc11550DataArgs['obj']['arc11550_metadata((uint64,string))(bool,byte[])']
      argsTuple: Arc11550DataArgs['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']
      returns: Arc11550DataReturns['arc11550_metadata((uint64,string))(bool,byte[])']
    }>
    & Record<'arc11550_setMetadata((uint64,string),byte[])void' | 'arc11550_setMetadata', {
      argsObj: Arc11550DataArgs['obj']['arc11550_setMetadata((uint64,string),byte[])void']
      argsTuple: Arc11550DataArgs['tuple']['arc11550_setMetadata((uint64,string),byte[])void']
      returns: Arc11550DataReturns['arc11550_setMetadata((uint64,string),byte[])void']
    }>
    & Record<'arc11550_balanceOf(uint64,address)uint64' | 'arc11550_balanceOf', {
      argsObj: Arc11550DataArgs['obj']['arc11550_balanceOf(uint64,address)uint64']
      argsTuple: Arc11550DataArgs['tuple']['arc11550_balanceOf(uint64,address)uint64']
      returns: Arc11550DataReturns['arc11550_balanceOf(uint64,address)uint64']
    }>
    & Record<'arc11550_balancesOf((uint64,address)[])uint64[]' | 'arc11550_balancesOf', {
      argsObj: Arc11550DataArgs['obj']['arc11550_balancesOf((uint64,address)[])uint64[]']
      argsTuple: Arc11550DataArgs['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']
      returns: Arc11550DataReturns['arc11550_balancesOf((uint64,address)[])uint64[]']
    }>
    & Record<'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)' | 'arc11550_params', {
      argsObj: Arc11550DataArgs['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']
      argsTuple: Arc11550DataArgs['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']
      returns: Arc11550DataReturns['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']
    }>
    & Record<'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]' | 'arc11550_mulitpleParams', {
      argsObj: Arc11550DataArgs['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']
      argsTuple: Arc11550DataArgs['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']
      returns: Arc11550DataReturns['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']
    }>
    & Record<'arc11550_approve((address,address,uint64),(uint64,uint64))void' | 'arc11550_approve', {
      argsObj: Arc11550DataArgs['obj']['arc11550_approve((address,address,uint64),(uint64,uint64))void']
      argsTuple: Arc11550DataArgs['tuple']['arc11550_approve((address,address,uint64),(uint64,uint64))void']
      returns: Arc11550DataReturns['arc11550_approve((address,address,uint64),(uint64,uint64))void']
    }>
    & Record<'arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void' | 'arc11550_setApprovals', {
      argsObj: Arc11550DataArgs['obj']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']
      argsTuple: Arc11550DataArgs['tuple']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']
      returns: Arc11550DataReturns['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']
    }>
    & Record<'arc11550_transferApp()uint64' | 'arc11550_transferApp', {
      argsObj: Arc11550DataArgs['obj']['arc11550_transferApp()uint64']
      argsTuple: Arc11550DataArgs['tuple']['arc11550_transferApp()uint64']
      returns: Arc11550DataReturns['arc11550_transferApp()uint64']
    }>
    & Record<'arc11550_transferHookApp()uint64' | 'arc11550_transferHookApp', {
      argsObj: Arc11550DataArgs['obj']['arc11550_transferHookApp()uint64']
      argsTuple: Arc11550DataArgs['tuple']['arc11550_transferHookApp()uint64']
      returns: Arc11550DataReturns['arc11550_transferHookApp()uint64']
    }>
    & Record<'doTransfers((uint64,address,address,uint64)[])void' | 'doTransfers', {
      argsObj: Arc11550DataArgs['obj']['doTransfers((uint64,address,address,uint64)[])void']
      argsTuple: Arc11550DataArgs['tuple']['doTransfers((uint64,address,address,uint64)[])void']
      returns: Arc11550DataReturns['doTransfers((uint64,address,address,uint64)[])void']
    }>
    & Record<'doMint((byte[32],byte[8],uint64,uint64,address))uint64' | 'doMint', {
      argsObj: Arc11550DataArgs['obj']['doMint((byte[32],byte[8],uint64,uint64,address))uint64']
      argsTuple: Arc11550DataArgs['tuple']['doMint((byte[32],byte[8],uint64,uint64,address))uint64']
      returns: Arc11550DataReturns['doMint((byte[32],byte[8],uint64,uint64,address))uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        minted: bigint
        transferApp: bigint
        transferHookApp: bigint
        mintCap: bigint
        minter: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        params: Map<bigint | number, Params>
        balances: Map<IdAndAddress, bigint>
        metadata: Map<MetadataKey, Metadata>
        allowances: Map<AllowanceKey, Allowance>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Arc11550DataSignatures = keyof Arc11550DataTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Arc11550DataNonVoidMethodSignatures = keyof Arc11550DataTypes['methods'] extends infer T ? T extends keyof Arc11550DataTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Arc11550Data smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Arc11550DataSignatures> = Arc11550DataTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc11550Data smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc11550DataSignatures> = Arc11550DataTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = Arc11550DataTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = Arc11550DataTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Arc11550DataCreateCallParams =
  | Expand<CallParams<Arc11550DataArgs['obj']['createApplication(uint64,uint64,uint64)void'] | Arc11550DataArgs['tuple']['createApplication(uint64,uint64,uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<Arc11550DataArgs['obj']['createApplication(uint64,uint64,uint64)void'] | Arc11550DataArgs['tuple']['createApplication(uint64,uint64,uint64)void']> & {method: 'createApplication(uint64,uint64,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Arc11550DataDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Arc11550DataCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc11550Data smart contract
 */
export abstract class Arc11550DataParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends Arc11550DataCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(uint64,uint64,uint64)void':
            return Arc11550DataParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ARC11550Data smart contract using the createApplication(uint64,uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<Arc11550DataArgs['obj']['createApplication(uint64,uint64,uint64)void'] | Arc11550DataArgs['tuple']['createApplication(uint64,uint64,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(uint64,uint64,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.transferApp, params.args.transferHookApp, params.args.mintCap],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the arc11550_minted()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Minted(params: CallParams<Arc11550DataArgs['obj']['arc11550_minted()uint64'] | Arc11550DataArgs['tuple']['arc11550_minted()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_minted()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc11550_metadata((uint64,string))(bool,byte[]) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Metadata(params: CallParams<Arc11550DataArgs['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550DataArgs['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_metadata((uint64,string))(bool,byte[])' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
  /**
   * Constructs a no op call for the arc11550_setMetadata((uint64,string),byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550SetMetadata(params: CallParams<Arc11550DataArgs['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550DataArgs['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_setMetadata((uint64,string),byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc11550_balanceOf(uint64,address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550BalanceOf(params: CallParams<Arc11550DataArgs['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550DataArgs['tuple']['arc11550_balanceOf(uint64,address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_balanceOf(uint64,address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id, params.args.account],
    }
  }
  /**
   * Constructs a no op call for the arc11550_balancesOf((uint64,address)[])uint64[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550BalancesOf(params: CallParams<Arc11550DataArgs['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550DataArgs['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_balancesOf((uint64,address)[])uint64[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.idAndAddrs],
    }
  }
  /**
   * Constructs a no op call for the arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Params(params: CallParams<Arc11550DataArgs['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | Arc11550DataArgs['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id],
    }
  }
  /**
   * Constructs a no op call for the arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550MulitpleParams(params: CallParams<Arc11550DataArgs['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | Arc11550DataArgs['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.ids],
    }
  }
  /**
   * Constructs a no op call for the arc11550_approve((address,address,uint64),(uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Approve(params: CallParams<Arc11550DataArgs['obj']['arc11550_approve((address,address,uint64),(uint64,uint64))void'] | Arc11550DataArgs['tuple']['arc11550_approve((address,address,uint64),(uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_approve((address,address,uint64),(uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.allowanceKey, params.args.allowance],
    }
  }
  /**
   * Constructs a no op call for the arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550SetApprovals(params: CallParams<Arc11550DataArgs['obj']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void'] | Arc11550DataArgs['tuple']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.allowances],
    }
  }
  /**
   * Constructs a no op call for the arc11550_transferApp()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550TransferApp(params: CallParams<Arc11550DataArgs['obj']['arc11550_transferApp()uint64'] | Arc11550DataArgs['tuple']['arc11550_transferApp()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_transferApp()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc11550_transferHookApp()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550TransferHookApp(params: CallParams<Arc11550DataArgs['obj']['arc11550_transferHookApp()uint64'] | Arc11550DataArgs['tuple']['arc11550_transferHookApp()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_transferHookApp()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the doTransfers((uint64,address,address,uint64)[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static doTransfers(params: CallParams<Arc11550DataArgs['obj']['doTransfers((uint64,address,address,uint64)[])void'] | Arc11550DataArgs['tuple']['doTransfers((uint64,address,address,uint64)[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'doTransfers((uint64,address,address,uint64)[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.transfers],
    }
  }
  /**
   * Constructs a no op call for the doMint((byte[32],byte[8],uint64,uint64,address))uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static doMint(params: CallParams<Arc11550DataArgs['obj']['doMint((byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550DataArgs['tuple']['doMint((byte[32],byte[8],uint64,uint64,address))uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'doMint((byte[32],byte[8],uint64,uint64,address))uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.params],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ARC11550Data smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Arc11550DataFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Arc11550DataFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Arc11550DataClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Arc11550DataClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ARC11550Data smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Arc11550DataDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? Arc11550DataParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (Arc11550DataCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new Arc11550DataClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Data smart contract using the createApplication(uint64,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<Arc11550DataArgs['obj']['createApplication(uint64,uint64,uint64)void'] | Arc11550DataArgs['tuple']['createApplication(uint64,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(Arc11550DataParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Data smart contract using the createApplication(uint64,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<Arc11550DataArgs['obj']['createApplication(uint64,uint64,uint64)void'] | Arc11550DataArgs['tuple']['createApplication(uint64,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(Arc11550DataParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Data smart contract using an ABI method call using the createApplication(uint64,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<Arc11550DataArgs['obj']['createApplication(uint64,uint64,uint64)void'] | Arc11550DataArgs['tuple']['createApplication(uint64,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(Arc11550DataParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | Arc11550DataReturns['createApplication(uint64,uint64,uint64)void']) }, appClient: new Arc11550DataClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ARC11550Data smart contract
 */
export class Arc11550DataClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Arc11550DataClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Arc11550Data app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Arc11550DataClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Arc11550DataNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Arc11550DataClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Arc11550DataClient> {
    return new Arc11550DataClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Arc11550DataClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Arc11550DataClient> {
    return new Arc11550DataClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Data smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_minted()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Minted: (params: CallParams<Arc11550DataArgs['obj']['arc11550_minted()uint64'] | Arc11550DataArgs['tuple']['arc11550_minted()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.arc11550Minted(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_metadata((uint64,string))(bool,byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Metadata: (params: CallParams<Arc11550DataArgs['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550DataArgs['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.arc11550Metadata(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_setMetadata((uint64,string),byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550SetMetadata: (params: CallParams<Arc11550DataArgs['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550DataArgs['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.arc11550SetMetadata(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_balanceOf(uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550BalanceOf: (params: CallParams<Arc11550DataArgs['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550DataArgs['tuple']['arc11550_balanceOf(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.arc11550BalanceOf(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_balancesOf((uint64,address)[])uint64[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550BalancesOf: (params: CallParams<Arc11550DataArgs['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550DataArgs['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.arc11550BalancesOf(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Params: (params: CallParams<Arc11550DataArgs['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | Arc11550DataArgs['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.arc11550Params(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550MulitpleParams: (params: CallParams<Arc11550DataArgs['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | Arc11550DataArgs['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.arc11550MulitpleParams(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_approve((address,address,uint64),(uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Approve: (params: CallParams<Arc11550DataArgs['obj']['arc11550_approve((address,address,uint64),(uint64,uint64))void'] | Arc11550DataArgs['tuple']['arc11550_approve((address,address,uint64),(uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.arc11550Approve(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550SetApprovals: (params: CallParams<Arc11550DataArgs['obj']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void'] | Arc11550DataArgs['tuple']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.arc11550SetApprovals(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_transferApp()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550TransferApp: (params: CallParams<Arc11550DataArgs['obj']['arc11550_transferApp()uint64'] | Arc11550DataArgs['tuple']['arc11550_transferApp()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.arc11550TransferApp(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_transferHookApp()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550TransferHookApp: (params: CallParams<Arc11550DataArgs['obj']['arc11550_transferHookApp()uint64'] | Arc11550DataArgs['tuple']['arc11550_transferHookApp()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.arc11550TransferHookApp(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `doTransfers((uint64,address,address,uint64)[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    doTransfers: (params: CallParams<Arc11550DataArgs['obj']['doTransfers((uint64,address,address,uint64)[])void'] | Arc11550DataArgs['tuple']['doTransfers((uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.doTransfers(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `doMint((byte[32],byte[8],uint64,uint64,address))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    doMint: (params: CallParams<Arc11550DataArgs['obj']['doMint((byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550DataArgs['tuple']['doMint((byte[32],byte[8],uint64,uint64,address))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550DataParamsFactory.doMint(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Data smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_minted()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Minted: (params: CallParams<Arc11550DataArgs['obj']['arc11550_minted()uint64'] | Arc11550DataArgs['tuple']['arc11550_minted()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.arc11550Minted(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_metadata((uint64,string))(bool,byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Metadata: (params: CallParams<Arc11550DataArgs['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550DataArgs['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.arc11550Metadata(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_setMetadata((uint64,string),byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550SetMetadata: (params: CallParams<Arc11550DataArgs['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550DataArgs['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.arc11550SetMetadata(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_balanceOf(uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550BalanceOf: (params: CallParams<Arc11550DataArgs['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550DataArgs['tuple']['arc11550_balanceOf(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.arc11550BalanceOf(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_balancesOf((uint64,address)[])uint64[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550BalancesOf: (params: CallParams<Arc11550DataArgs['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550DataArgs['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.arc11550BalancesOf(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Params: (params: CallParams<Arc11550DataArgs['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | Arc11550DataArgs['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.arc11550Params(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550MulitpleParams: (params: CallParams<Arc11550DataArgs['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | Arc11550DataArgs['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.arc11550MulitpleParams(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_approve((address,address,uint64),(uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Approve: (params: CallParams<Arc11550DataArgs['obj']['arc11550_approve((address,address,uint64),(uint64,uint64))void'] | Arc11550DataArgs['tuple']['arc11550_approve((address,address,uint64),(uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.arc11550Approve(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550SetApprovals: (params: CallParams<Arc11550DataArgs['obj']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void'] | Arc11550DataArgs['tuple']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.arc11550SetApprovals(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_transferApp()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550TransferApp: (params: CallParams<Arc11550DataArgs['obj']['arc11550_transferApp()uint64'] | Arc11550DataArgs['tuple']['arc11550_transferApp()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.arc11550TransferApp(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_transferHookApp()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550TransferHookApp: (params: CallParams<Arc11550DataArgs['obj']['arc11550_transferHookApp()uint64'] | Arc11550DataArgs['tuple']['arc11550_transferHookApp()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.arc11550TransferHookApp(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `doTransfers((uint64,address,address,uint64)[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    doTransfers: (params: CallParams<Arc11550DataArgs['obj']['doTransfers((uint64,address,address,uint64)[])void'] | Arc11550DataArgs['tuple']['doTransfers((uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.doTransfers(params))
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `doMint((byte[32],byte[8],uint64,uint64,address))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    doMint: (params: CallParams<Arc11550DataArgs['obj']['doMint((byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550DataArgs['tuple']['doMint((byte[32],byte[8],uint64,uint64,address))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550DataParamsFactory.doMint(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Data smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_minted()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Minted: async (params: CallParams<Arc11550DataArgs['obj']['arc11550_minted()uint64'] | Arc11550DataArgs['tuple']['arc11550_minted()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.arc11550Minted(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['arc11550_minted()uint64'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_metadata((uint64,string))(bool,byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Metadata: async (params: CallParams<Arc11550DataArgs['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550DataArgs['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.arc11550Metadata(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['arc11550_metadata((uint64,string))(bool,byte[])'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_setMetadata((uint64,string),byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550SetMetadata: async (params: CallParams<Arc11550DataArgs['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550DataArgs['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.arc11550SetMetadata(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['arc11550_setMetadata((uint64,string),byte[])void'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_balanceOf(uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550BalanceOf: async (params: CallParams<Arc11550DataArgs['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550DataArgs['tuple']['arc11550_balanceOf(uint64,address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.arc11550BalanceOf(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['arc11550_balanceOf(uint64,address)uint64'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_balancesOf((uint64,address)[])uint64[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550BalancesOf: async (params: CallParams<Arc11550DataArgs['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550DataArgs['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.arc11550BalancesOf(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['arc11550_balancesOf((uint64,address)[])uint64[]'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Params: async (params: CallParams<Arc11550DataArgs['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | Arc11550DataArgs['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.arc11550Params(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550MulitpleParams: async (params: CallParams<Arc11550DataArgs['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | Arc11550DataArgs['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.arc11550MulitpleParams(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_approve((address,address,uint64),(uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Approve: async (params: CallParams<Arc11550DataArgs['obj']['arc11550_approve((address,address,uint64),(uint64,uint64))void'] | Arc11550DataArgs['tuple']['arc11550_approve((address,address,uint64),(uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.arc11550Approve(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['arc11550_approve((address,address,uint64),(uint64,uint64))void'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550SetApprovals: async (params: CallParams<Arc11550DataArgs['obj']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void'] | Arc11550DataArgs['tuple']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.arc11550SetApprovals(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_transferApp()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550TransferApp: async (params: CallParams<Arc11550DataArgs['obj']['arc11550_transferApp()uint64'] | Arc11550DataArgs['tuple']['arc11550_transferApp()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.arc11550TransferApp(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['arc11550_transferApp()uint64'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `arc11550_transferHookApp()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550TransferHookApp: async (params: CallParams<Arc11550DataArgs['obj']['arc11550_transferHookApp()uint64'] | Arc11550DataArgs['tuple']['arc11550_transferHookApp()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.arc11550TransferHookApp(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['arc11550_transferHookApp()uint64'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `doTransfers((uint64,address,address,uint64)[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    doTransfers: async (params: CallParams<Arc11550DataArgs['obj']['doTransfers((uint64,address,address,uint64)[])void'] | Arc11550DataArgs['tuple']['doTransfers((uint64,address,address,uint64)[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.doTransfers(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['doTransfers((uint64,address,address,uint64)[])void'])}
    },

    /**
     * Makes a call to the ARC11550Data smart contract using the `doMint((byte[32],byte[8],uint64,uint64,address))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    doMint: async (params: CallParams<Arc11550DataArgs['obj']['doMint((byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550DataArgs['tuple']['doMint((byte[32],byte[8],uint64,uint64,address))uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550DataParamsFactory.doMint(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550DataReturns['doMint((byte[32],byte[8],uint64,uint64,address))uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Arc11550DataClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ARC11550Data app
   */
  state = {
    /**
     * Methods to access global state for the current ARC11550Data app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          minted: result.minted,
          transferApp: result.transferApp,
          transferHookApp: result.transferHookApp,
          mintCap: result.mintCap,
          minter: result.minter,
        }
      },
      /**
       * Get the current value of the minted key in global state
       */
      minted: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("minted")) as bigint | undefined },
      /**
       * Get the current value of the transferApp key in global state
       */
      transferApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("transferApp")) as bigint | undefined },
      /**
       * Get the current value of the transferHookApp key in global state
       */
      transferHookApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("transferHookApp")) as bigint | undefined },
      /**
       * Get the current value of the mintCap key in global state
       */
      mintCap: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("mintCap")) as bigint | undefined },
      /**
       * Get the current value of the minter key in global state
       */
      minter: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("minter")) as string | undefined },
    },
    /**
     * Methods to access box state for the current ARC11550Data app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the params map in box state
       */
      params: {
        /**
         * Get all current values of the params map in box state
         */
        getMap: async (): Promise<Map<bigint, Params>> => { return (await this.appClient.state.box.getMap("params")) as Map<bigint, Params> },
        /**
         * Get a current value of the params map by key from box state
         */
        value: async (key: bigint | number): Promise<Params | undefined> => { return await this.appClient.state.box.getMapValue("params", key) as Params | undefined },
      },
      /**
       * Get values from the balances map in box state
       */
      balances: {
        /**
         * Get all current values of the balances map in box state
         */
        getMap: async (): Promise<Map<IdAndAddress, bigint>> => { return (await this.appClient.state.box.getMap("balances")) as Map<IdAndAddress, bigint> },
        /**
         * Get a current value of the balances map by key from box state
         */
        value: async (key: IdAndAddress): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("balances", key) as bigint | undefined },
      },
      /**
       * Get values from the metadata map in box state
       */
      metadata: {
        /**
         * Get all current values of the metadata map in box state
         */
        getMap: async (): Promise<Map<MetadataKey, Metadata>> => { return (await this.appClient.state.box.getMap("metadata")) as Map<MetadataKey, Metadata> },
        /**
         * Get a current value of the metadata map by key from box state
         */
        value: async (key: MetadataKey): Promise<Metadata | undefined> => { return await this.appClient.state.box.getMapValue("metadata", key) as Metadata | undefined },
      },
      /**
       * Get values from the allowances map in box state
       */
      allowances: {
        /**
         * Get all current values of the allowances map in box state
         */
        getMap: async (): Promise<Map<AllowanceKey, Allowance>> => { return (await this.appClient.state.box.getMap("allowances")) as Map<AllowanceKey, Allowance> },
        /**
         * Get a current value of the allowances map by key from box state
         */
        value: async (key: AllowanceKey): Promise<Allowance | undefined> => { return await this.appClient.state.box.getMapValue("allowances", key) as Allowance | undefined },
      },
    },
  }

  public newGroup(): Arc11550DataComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a arc11550_minted()uint64 method call against the ARC11550Data contract
       */
      arc11550Minted(params: CallParams<Arc11550DataArgs['obj']['arc11550_minted()uint64'] | Arc11550DataArgs['tuple']['arc11550_minted()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Minted(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_minted()uint64', v))
        return this
      },
      /**
       * Add a arc11550_metadata((uint64,string))(bool,byte[]) method call against the ARC11550Data contract
       */
      arc11550Metadata(params: CallParams<Arc11550DataArgs['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550DataArgs['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Metadata(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_metadata((uint64,string))(bool,byte[])', v))
        return this
      },
      /**
       * Add a arc11550_setMetadata((uint64,string),byte[])void method call against the ARC11550Data contract
       */
      arc11550SetMetadata(params: CallParams<Arc11550DataArgs['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550DataArgs['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550SetMetadata(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc11550_balanceOf(uint64,address)uint64 method call against the ARC11550Data contract
       */
      arc11550BalanceOf(params: CallParams<Arc11550DataArgs['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550DataArgs['tuple']['arc11550_balanceOf(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550BalanceOf(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_balanceOf(uint64,address)uint64', v))
        return this
      },
      /**
       * Add a arc11550_balancesOf((uint64,address)[])uint64[] method call against the ARC11550Data contract
       */
      arc11550BalancesOf(params: CallParams<Arc11550DataArgs['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550DataArgs['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550BalancesOf(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_balancesOf((uint64,address)[])uint64[]', v))
        return this
      },
      /**
       * Add a arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address) method call against the ARC11550Data contract
       */
      arc11550Params(params: CallParams<Arc11550DataArgs['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | Arc11550DataArgs['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Params(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)', v))
        return this
      },
      /**
       * Add a arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[] method call against the ARC11550Data contract
       */
      arc11550MulitpleParams(params: CallParams<Arc11550DataArgs['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | Arc11550DataArgs['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550MulitpleParams(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]', v))
        return this
      },
      /**
       * Add a arc11550_approve((address,address,uint64),(uint64,uint64))void method call against the ARC11550Data contract
       */
      arc11550Approve(params: CallParams<Arc11550DataArgs['obj']['arc11550_approve((address,address,uint64),(uint64,uint64))void'] | Arc11550DataArgs['tuple']['arc11550_approve((address,address,uint64),(uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Approve(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void method call against the ARC11550Data contract
       */
      arc11550SetApprovals(params: CallParams<Arc11550DataArgs['obj']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void'] | Arc11550DataArgs['tuple']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550SetApprovals(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc11550_transferApp()uint64 method call against the ARC11550Data contract
       */
      arc11550TransferApp(params: CallParams<Arc11550DataArgs['obj']['arc11550_transferApp()uint64'] | Arc11550DataArgs['tuple']['arc11550_transferApp()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550TransferApp(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_transferApp()uint64', v))
        return this
      },
      /**
       * Add a arc11550_transferHookApp()uint64 method call against the ARC11550Data contract
       */
      arc11550TransferHookApp(params: CallParams<Arc11550DataArgs['obj']['arc11550_transferHookApp()uint64'] | Arc11550DataArgs['tuple']['arc11550_transferHookApp()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550TransferHookApp(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_transferHookApp()uint64', v))
        return this
      },
      /**
       * Add a doTransfers((uint64,address,address,uint64)[])void method call against the ARC11550Data contract
       */
      doTransfers(params: CallParams<Arc11550DataArgs['obj']['doTransfers((uint64,address,address,uint64)[])void'] | Arc11550DataArgs['tuple']['doTransfers((uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.doTransfers(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a doMint((byte[32],byte[8],uint64,uint64,address))uint64 method call against the ARC11550Data contract
       */
      doMint(params: CallParams<Arc11550DataArgs['obj']['doMint((byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550DataArgs['tuple']['doMint((byte[32],byte[8],uint64,uint64,address))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.doMint(params)))
        resultMappers.push((v) => client.decodeReturnValue('doMint((byte[32],byte[8],uint64,uint64,address))uint64', v))
        return this
      },
      /**
       * Add a clear state call to the ARC11550Data contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Arc11550DataComposer
  }
}
export type Arc11550DataComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc11550_minted()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Minted(params?: CallParams<Arc11550DataArgs['obj']['arc11550_minted()uint64'] | Arc11550DataArgs['tuple']['arc11550_minted()uint64']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['arc11550_minted()uint64'] | undefined]>

  /**
   * Calls the arc11550_metadata((uint64,string))(bool,byte[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Metadata(params?: CallParams<Arc11550DataArgs['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550DataArgs['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['arc11550_metadata((uint64,string))(bool,byte[])'] | undefined]>

  /**
   * Calls the arc11550_setMetadata((uint64,string),byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550SetMetadata(params?: CallParams<Arc11550DataArgs['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550DataArgs['tuple']['arc11550_setMetadata((uint64,string),byte[])void']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['arc11550_setMetadata((uint64,string),byte[])void'] | undefined]>

  /**
   * Calls the arc11550_balanceOf(uint64,address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550BalanceOf(params?: CallParams<Arc11550DataArgs['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550DataArgs['tuple']['arc11550_balanceOf(uint64,address)uint64']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['arc11550_balanceOf(uint64,address)uint64'] | undefined]>

  /**
   * Calls the arc11550_balancesOf((uint64,address)[])uint64[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550BalancesOf(params?: CallParams<Arc11550DataArgs['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550DataArgs['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['arc11550_balancesOf((uint64,address)[])uint64[]'] | undefined]>

  /**
   * Calls the arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Params(params?: CallParams<Arc11550DataArgs['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | Arc11550DataArgs['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | undefined]>

  /**
   * Calls the arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550MulitpleParams(params?: CallParams<Arc11550DataArgs['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | Arc11550DataArgs['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | undefined]>

  /**
   * Calls the arc11550_approve((address,address,uint64),(uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Approve(params?: CallParams<Arc11550DataArgs['obj']['arc11550_approve((address,address,uint64),(uint64,uint64))void'] | Arc11550DataArgs['tuple']['arc11550_approve((address,address,uint64),(uint64,uint64))void']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['arc11550_approve((address,address,uint64),(uint64,uint64))void'] | undefined]>

  /**
   * Calls the arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550SetApprovals(params?: CallParams<Arc11550DataArgs['obj']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void'] | Arc11550DataArgs['tuple']['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['arc11550_setApprovals(((address,address,uint64),(uint64,uint64))[])void'] | undefined]>

  /**
   * Calls the arc11550_transferApp()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550TransferApp(params?: CallParams<Arc11550DataArgs['obj']['arc11550_transferApp()uint64'] | Arc11550DataArgs['tuple']['arc11550_transferApp()uint64']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['arc11550_transferApp()uint64'] | undefined]>

  /**
   * Calls the arc11550_transferHookApp()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550TransferHookApp(params?: CallParams<Arc11550DataArgs['obj']['arc11550_transferHookApp()uint64'] | Arc11550DataArgs['tuple']['arc11550_transferHookApp()uint64']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['arc11550_transferHookApp()uint64'] | undefined]>

  /**
   * Calls the doTransfers((uint64,address,address,uint64)[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  doTransfers(params?: CallParams<Arc11550DataArgs['obj']['doTransfers((uint64,address,address,uint64)[])void'] | Arc11550DataArgs['tuple']['doTransfers((uint64,address,address,uint64)[])void']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['doTransfers((uint64,address,address,uint64)[])void'] | undefined]>

  /**
   * Calls the doMint((byte[32],byte[8],uint64,uint64,address))uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  doMint(params?: CallParams<Arc11550DataArgs['obj']['doMint((byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550DataArgs['tuple']['doMint((byte[32],byte[8],uint64,uint64,address))uint64']>): Arc11550DataComposer<[...TReturns, Arc11550DataReturns['doMint((byte[32],byte[8],uint64,uint64,address))uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ARC11550Data smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Arc11550DataComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc11550DataComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc11550DataComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Arc11550DataComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Arc11550DataComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Arc11550DataComposerResults<TReturns>>
}
export type Arc11550DataComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


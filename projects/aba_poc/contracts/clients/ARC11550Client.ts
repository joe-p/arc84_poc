/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ARC11550","desc":"","methods":[{"name":"createApplication","args":[{"name":"app","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"arc11550_name","args":[{"name":"id","type":"uint64"}],"returns":{"type":"byte[32]"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_symbol","args":[{"name":"id","type":"uint64"}],"returns":{"type":"byte[8]"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_decimals","args":[{"name":"id","type":"uint64"}],"returns":{"type":"uint32"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_totalSupply","args":[{"name":"id","type":"uint64"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_balanceOf","args":[{"name":"id","type":"uint64"},{"name":"account","type":"address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_params","args":[{"name":"id","type":"uint64"}],"returns":{"type":"(byte[32],byte[8],uint64,uint32)","struct":"AssetParams"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_transfer","args":[{"name":"transfers","type":"(uint64,address,address,uint64)[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"AssetParams":[{"name":"name","type":"byte[32]"},{"name":"symbol","type":"byte[8]"},{"name":"total","type":"uint64"},{"name":"decmimals","type":"uint32"}],"IdAndAddress":[{"name":"id","type":"uint64"},{"name":"address","type":"address"}]},"state":{"schema":{"global":{"bytes":0,"ints":2},"local":{"bytes":0,"ints":0}},"keys":{"global":{"nextId":{"key":"bmV4dElk","keyType":"AVMBytes","valueType":"uint64"},"transferHookApp":{"key":"dHJhbnNmZXJIb29rQXBw","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"params":{"keyType":"uint64","valueType":"AssetParams","prefix":"cA=="},"balances":{"keyType":"IdAndAddress","valueType":"uint64","prefix":"Yg=="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/ARC11550.algo.ts:24","pc":[0]},{"teal":2,"source":"contracts/ARC11550.algo.ts:24","pc":[1,2,3,4,5,6,7,8,9,10]},{"teal":3,"source":"contracts/ARC11550.algo.ts:24","pc":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]},{"teal":15,"source":"contracts/ARC11550.algo.ts:24","pc":[39,40]},{"teal":16,"source":"contracts/ARC11550.algo.ts:24","pc":[41]},{"teal":17,"source":"contracts/ARC11550.algo.ts:24","pc":[42,43]},{"teal":18,"source":"contracts/ARC11550.algo.ts:24","pc":[44]},{"teal":19,"source":"contracts/ARC11550.algo.ts:24","pc":[45,46]},{"teal":20,"source":"contracts/ARC11550.algo.ts:24","pc":[47]},{"teal":21,"source":"contracts/ARC11550.algo.ts:24","pc":[48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73]},{"teal":25,"source":"contracts/ARC11550.algo.ts:24","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[74]},{"teal":30,"source":"contracts/ARC11550.algo.ts:37","pc":[75,76,77]},{"teal":31,"source":"contracts/ARC11550.algo.ts:37","pc":[78]},{"teal":34,"source":"contracts/ARC11550.algo.ts:37","pc":[79,80,81]},{"teal":35,"source":"contracts/ARC11550.algo.ts:37","pc":[82]},{"teal":36,"source":"contracts/ARC11550.algo.ts:37","pc":[83]},{"teal":40,"source":"contracts/ARC11550.algo.ts:37","pc":[84,85,86]},{"teal":44,"source":"contracts/ARC11550.algo.ts:38","pc":[87]},{"teal":45,"source":"contracts/ARC11550.algo.ts:38","pc":[88,89]},{"teal":46,"source":"contracts/ARC11550.algo.ts:38","pc":[90]},{"teal":50,"source":"contracts/ARC11550.algo.ts:39","pc":[91,92,93,94,95,96,97,98]},{"teal":51,"source":"contracts/ARC11550.algo.ts:39","pc":[99]},{"teal":52,"source":"contracts/ARC11550.algo.ts:39","pc":[100]},{"teal":53,"source":"contracts/ARC11550.algo.ts:37","pc":[101]},{"teal":58,"source":"contracts/ARC11550.algo.ts:42","pc":[102]},{"teal":61,"source":"contracts/ARC11550.algo.ts:42","pc":[103,104,105]},{"teal":62,"source":"contracts/ARC11550.algo.ts:42","pc":[106]},{"teal":65,"source":"contracts/ARC11550.algo.ts:42","pc":[107,108,109]},{"teal":66,"source":"contracts/ARC11550.algo.ts:42","pc":[110]},{"teal":67,"source":"contracts/ARC11550.algo.ts:42","pc":[111]},{"teal":68,"source":"contracts/ARC11550.algo.ts:42","pc":[112]},{"teal":69,"source":"contracts/ARC11550.algo.ts:42","pc":[113]},{"teal":73,"source":"contracts/ARC11550.algo.ts:42","pc":[114,115,116]},{"teal":77,"source":"contracts/ARC11550.algo.ts:43","pc":[117]},{"teal":78,"source":"contracts/ARC11550.algo.ts:43","pc":[118,119]},{"teal":79,"source":"contracts/ARC11550.algo.ts:43","pc":[120]},{"teal":80,"source":"contracts/ARC11550.algo.ts:43","pc":[121,122]},{"teal":81,"source":"contracts/ARC11550.algo.ts:43","pc":[123]},{"teal":82,"source":"contracts/ARC11550.algo.ts:43","pc":[124]},{"teal":83,"source":"contracts/ARC11550.algo.ts:43","pc":[125,126]},{"teal":84,"source":"contracts/ARC11550.algo.ts:43","pc":[127]},{"teal":85,"source":"contracts/ARC11550.algo.ts:42","pc":[128]},{"teal":90,"source":"contracts/ARC11550.algo.ts:46","pc":[129]},{"teal":93,"source":"contracts/ARC11550.algo.ts:46","pc":[130,131,132]},{"teal":94,"source":"contracts/ARC11550.algo.ts:46","pc":[133]},{"teal":97,"source":"contracts/ARC11550.algo.ts:46","pc":[134,135,136]},{"teal":98,"source":"contracts/ARC11550.algo.ts:46","pc":[137]},{"teal":99,"source":"contracts/ARC11550.algo.ts:46","pc":[138]},{"teal":100,"source":"contracts/ARC11550.algo.ts:46","pc":[139]},{"teal":101,"source":"contracts/ARC11550.algo.ts:46","pc":[140]},{"teal":105,"source":"contracts/ARC11550.algo.ts:46","pc":[141,142,143]},{"teal":109,"source":"contracts/ARC11550.algo.ts:47","pc":[144,145]},{"teal":110,"source":"contracts/ARC11550.algo.ts:47","pc":[146]},{"teal":111,"source":"contracts/ARC11550.algo.ts:47","pc":[147]},{"teal":112,"source":"contracts/ARC11550.algo.ts:47","pc":[148,149]},{"teal":113,"source":"contracts/ARC11550.algo.ts:47","pc":[150]},{"teal":114,"source":"contracts/ARC11550.algo.ts:47","pc":[151]},{"teal":115,"source":"contracts/ARC11550.algo.ts:47","pc":[152,153]},{"teal":116,"source":"contracts/ARC11550.algo.ts:47","pc":[154]},{"teal":117,"source":"contracts/ARC11550.algo.ts:46","pc":[155]},{"teal":122,"source":"contracts/ARC11550.algo.ts:50","pc":[156]},{"teal":125,"source":"contracts/ARC11550.algo.ts:50","pc":[157,158,159]},{"teal":126,"source":"contracts/ARC11550.algo.ts:50","pc":[160]},{"teal":129,"source":"contracts/ARC11550.algo.ts:50","pc":[161,162,163]},{"teal":130,"source":"contracts/ARC11550.algo.ts:50","pc":[164]},{"teal":131,"source":"contracts/ARC11550.algo.ts:50","pc":[165]},{"teal":132,"source":"contracts/ARC11550.algo.ts:50","pc":[166]},{"teal":133,"source":"contracts/ARC11550.algo.ts:50","pc":[167,168]},{"teal":134,"source":"contracts/ARC11550.algo.ts:50","pc":[169]},{"teal":137,"source":"contracts/ARC11550.algo.ts:50","errorMessage":"arc11550_decimals return value overflowed 32 bits","pc":[170]},{"teal":138,"source":"contracts/ARC11550.algo.ts:50","pc":[171,172,173]},{"teal":139,"source":"contracts/ARC11550.algo.ts:50","pc":[174]},{"teal":140,"source":"contracts/ARC11550.algo.ts:50","pc":[175]},{"teal":141,"source":"contracts/ARC11550.algo.ts:50","pc":[176]},{"teal":142,"source":"contracts/ARC11550.algo.ts:50","pc":[177]},{"teal":146,"source":"contracts/ARC11550.algo.ts:50","pc":[178,179,180]},{"teal":150,"source":"contracts/ARC11550.algo.ts:51","pc":[181,182]},{"teal":151,"source":"contracts/ARC11550.algo.ts:51","pc":[183,184]},{"teal":152,"source":"contracts/ARC11550.algo.ts:51","pc":[185]},{"teal":153,"source":"contracts/ARC11550.algo.ts:51","pc":[186,187]},{"teal":154,"source":"contracts/ARC11550.algo.ts:51","pc":[188]},{"teal":155,"source":"contracts/ARC11550.algo.ts:51","pc":[189]},{"teal":156,"source":"contracts/ARC11550.algo.ts:51","pc":[190,191]},{"teal":157,"source":"contracts/ARC11550.algo.ts:51","pc":[192]},{"teal":158,"source":"contracts/ARC11550.algo.ts:51","pc":[193]},{"teal":159,"source":"contracts/ARC11550.algo.ts:50","pc":[194]},{"teal":164,"source":"contracts/ARC11550.algo.ts:54","pc":[195]},{"teal":167,"source":"contracts/ARC11550.algo.ts:54","pc":[196,197,198]},{"teal":168,"source":"contracts/ARC11550.algo.ts:54","pc":[199]},{"teal":171,"source":"contracts/ARC11550.algo.ts:54","pc":[200,201,202]},{"teal":172,"source":"contracts/ARC11550.algo.ts:54","pc":[203]},{"teal":173,"source":"contracts/ARC11550.algo.ts:54","pc":[204]},{"teal":174,"source":"contracts/ARC11550.algo.ts:54","pc":[205]},{"teal":175,"source":"contracts/ARC11550.algo.ts:54","pc":[206]},{"teal":176,"source":"contracts/ARC11550.algo.ts:54","pc":[207]},{"teal":180,"source":"contracts/ARC11550.algo.ts:54","pc":[208,209,210]},{"teal":184,"source":"contracts/ARC11550.algo.ts:55","pc":[211,212]},{"teal":185,"source":"contracts/ARC11550.algo.ts:55","pc":[213]},{"teal":186,"source":"contracts/ARC11550.algo.ts:55","pc":[214]},{"teal":187,"source":"contracts/ARC11550.algo.ts:55","pc":[215,216]},{"teal":188,"source":"contracts/ARC11550.algo.ts:55","pc":[217]},{"teal":189,"source":"contracts/ARC11550.algo.ts:55","pc":[218]},{"teal":190,"source":"contracts/ARC11550.algo.ts:55","pc":[219,220]},{"teal":191,"source":"contracts/ARC11550.algo.ts:55","pc":[221]},{"teal":192,"source":"contracts/ARC11550.algo.ts:55","pc":[222]},{"teal":193,"source":"contracts/ARC11550.algo.ts:54","pc":[223]},{"teal":198,"source":"contracts/ARC11550.algo.ts:58","pc":[224]},{"teal":201,"source":"contracts/ARC11550.algo.ts:58","pc":[225,226,227]},{"teal":202,"source":"contracts/ARC11550.algo.ts:58","pc":[228]},{"teal":203,"source":"contracts/ARC11550.algo.ts:58","pc":[229]},{"teal":204,"source":"contracts/ARC11550.algo.ts:58","pc":[230,231]},{"teal":205,"source":"contracts/ARC11550.algo.ts:58","pc":[232]},{"teal":208,"source":"contracts/ARC11550.algo.ts:58","errorMessage":"argument 0 (account) for arc11550_balanceOf must be a address","pc":[233]},{"teal":211,"source":"contracts/ARC11550.algo.ts:58","pc":[234,235,236]},{"teal":212,"source":"contracts/ARC11550.algo.ts:58","pc":[237]},{"teal":215,"source":"contracts/ARC11550.algo.ts:58","pc":[238,239,240]},{"teal":216,"source":"contracts/ARC11550.algo.ts:58","pc":[241]},{"teal":217,"source":"contracts/ARC11550.algo.ts:58","pc":[242]},{"teal":218,"source":"contracts/ARC11550.algo.ts:58","pc":[243]},{"teal":219,"source":"contracts/ARC11550.algo.ts:58","pc":[244]},{"teal":220,"source":"contracts/ARC11550.algo.ts:58","pc":[245]},{"teal":224,"source":"contracts/ARC11550.algo.ts:58","pc":[246,247,248]},{"teal":228,"source":"contracts/ARC11550.algo.ts:59","pc":[249]},{"teal":229,"source":"contracts/ARC11550.algo.ts:59","pc":[250,251]},{"teal":230,"source":"contracts/ARC11550.algo.ts:59","pc":[252]},{"teal":231,"source":"contracts/ARC11550.algo.ts:59","pc":[253,254]},{"teal":232,"source":"contracts/ARC11550.algo.ts:59","pc":[255]},{"teal":233,"source":"contracts/ARC11550.algo.ts:59","pc":[256]},{"teal":234,"source":"contracts/ARC11550.algo.ts:59","pc":[257]},{"teal":237,"source":"contracts/ARC11550.algo.ts:59","errorMessage":"box value does not exist: this.balances({ id: id, address: account }).value","pc":[258]},{"teal":238,"source":"contracts/ARC11550.algo.ts:59","pc":[259]},{"teal":239,"source":"contracts/ARC11550.algo.ts:58","pc":[260]},{"teal":244,"source":"contracts/ARC11550.algo.ts:62","pc":[261]},{"teal":247,"source":"contracts/ARC11550.algo.ts:62","pc":[262,263,264]},{"teal":248,"source":"contracts/ARC11550.algo.ts:62","pc":[265]},{"teal":251,"source":"contracts/ARC11550.algo.ts:62","pc":[266,267,268]},{"teal":252,"source":"contracts/ARC11550.algo.ts:62","pc":[269]},{"teal":253,"source":"contracts/ARC11550.algo.ts:62","pc":[270]},{"teal":254,"source":"contracts/ARC11550.algo.ts:62","pc":[271]},{"teal":255,"source":"contracts/ARC11550.algo.ts:62","pc":[272]},{"teal":259,"source":"contracts/ARC11550.algo.ts:62","pc":[273,274,275]},{"teal":263,"source":"contracts/ARC11550.algo.ts:63","pc":[276]},{"teal":264,"source":"contracts/ARC11550.algo.ts:63","pc":[277,278]},{"teal":265,"source":"contracts/ARC11550.algo.ts:63","pc":[279]},{"teal":266,"source":"contracts/ARC11550.algo.ts:63","pc":[280]},{"teal":267,"source":"contracts/ARC11550.algo.ts:63","pc":[281]},{"teal":270,"source":"contracts/ARC11550.algo.ts:63","errorMessage":"box value does not exist: this.params(id).value","pc":[282]},{"teal":271,"source":"contracts/ARC11550.algo.ts:62","pc":[283]},{"teal":276,"source":"contracts/ARC11550.algo.ts:66","pc":[284,285,286]},{"teal":277,"source":"contracts/ARC11550.algo.ts:66","pc":[287,288,289]},{"teal":280,"source":"contracts/ARC11550.algo.ts:66","pc":[290,291,292]},{"teal":281,"source":"contracts/ARC11550.algo.ts:66","pc":[293]},{"teal":282,"source":"contracts/ARC11550.algo.ts:66","pc":[294]},{"teal":286,"source":"contracts/ARC11550.algo.ts:66","pc":[295,296,297]},{"teal":289,"source":"contracts/ARC11550.algo.ts:66","pc":[298,299]},{"teal":290,"source":"contracts/ARC11550.algo.ts:66","pc":[300]},{"teal":299,"source":"contracts/ARC11550.algo.ts:68","pc":[301]},{"teal":300,"source":"contracts/ARC11550.algo.ts:68","pc":[302,303]},{"teal":301,"source":"contracts/ARC11550.algo.ts:68","pc":[304,305]},{"teal":302,"source":"contracts/ARC11550.algo.ts:68","pc":[306,307,308,309,310,311]},{"teal":303,"source":"contracts/ARC11550.algo.ts:68","pc":[312,313]},{"teal":307,"source":"contracts/ARC11550.algo.ts:69","pc":[314]},{"teal":308,"source":"contracts/ARC11550.algo.ts:69","pc":[315]},{"teal":309,"source":"contracts/ARC11550.algo.ts:69","pc":[316,317]},{"teal":313,"source":"contracts/ARC11550.algo.ts:70","pc":[318,319]},{"teal":314,"source":"contracts/ARC11550.algo.ts:70","pc":[320,321]},{"teal":315,"source":"contracts/ARC11550.algo.ts:70","pc":[322,323]},{"teal":316,"source":"contracts/ARC11550.algo.ts:70","pc":[324]},{"teal":317,"source":"contracts/ARC11550.algo.ts:70","pc":[325]},{"teal":318,"source":"contracts/ARC11550.algo.ts:70","pc":[326]},{"teal":319,"source":"contracts/ARC11550.algo.ts:70","pc":[327]},{"teal":320,"source":"contracts/ARC11550.algo.ts:70","pc":[328]},{"teal":321,"source":"contracts/ARC11550.algo.ts:70","pc":[329,330,331]},{"teal":322,"source":"contracts/ARC11550.algo.ts:70","pc":[332]},{"teal":323,"source":"contracts/ARC11550.algo.ts:70","pc":[333]},{"teal":324,"source":"contracts/ARC11550.algo.ts:70","pc":[334,335]},{"teal":327,"source":"contracts/ARC11550.algo.ts:68","pc":[336]},{"teal":328,"source":"contracts/ARC11550.algo.ts:68","pc":[337,338]},{"teal":331,"source":"contracts/ARC11550.algo.ts:68","pc":[339]},{"teal":332,"source":"contracts/ARC11550.algo.ts:68","pc":[340,341]},{"teal":333,"source":"contracts/ARC11550.algo.ts:68","pc":[342]},{"teal":334,"source":"contracts/ARC11550.algo.ts:68","pc":[343]},{"teal":335,"source":"contracts/ARC11550.algo.ts:68","pc":[344,345]},{"teal":336,"source":"contracts/ARC11550.algo.ts:68","pc":[346,347,348]},{"teal":337,"source":"contracts/ARC11550.algo.ts:68","pc":[349]},{"teal":338,"source":"contracts/ARC11550.algo.ts:68","pc":[350]},{"teal":339,"source":"contracts/ARC11550.algo.ts:67","pc":[351]},{"teal":343,"source":"contracts/ARC11550.algo.ts:74","pc":[352]},{"teal":344,"source":"contracts/ARC11550.algo.ts:74","pc":[353,354]},{"teal":349,"source":"contracts/ARC11550.algo.ts:74","pc":[355,356]},{"teal":350,"source":"contracts/ARC11550.algo.ts:74","pc":[357,358]},{"teal":351,"source":"contracts/ARC11550.algo.ts:74","pc":[359]},{"teal":352,"source":"contracts/ARC11550.algo.ts:74","pc":[360]},{"teal":353,"source":"contracts/ARC11550.algo.ts:74","pc":[361]},{"teal":354,"source":"contracts/ARC11550.algo.ts:74","pc":[362]},{"teal":355,"source":"contracts/ARC11550.algo.ts:74","pc":[363,364,365]},{"teal":356,"source":"contracts/ARC11550.algo.ts:75","pc":[366,367]},{"teal":357,"source":"contracts/ARC11550.algo.ts:75","pc":[368,369]},{"teal":361,"source":"contracts/ARC11550.algo.ts:76","pc":[370]},{"teal":362,"source":"contracts/ARC11550.algo.ts:76","pc":[371,372]},{"teal":363,"source":"contracts/ARC11550.algo.ts:76","pc":[373,374]},{"teal":364,"source":"contracts/ARC11550.algo.ts:76","pc":[375]},{"teal":365,"source":"contracts/ARC11550.algo.ts:76","pc":[376,377]},{"teal":366,"source":"contracts/ARC11550.algo.ts:76","pc":[378]},{"teal":367,"source":"contracts/ARC11550.algo.ts:76","pc":[379]},{"teal":368,"source":"contracts/ARC11550.algo.ts:76","pc":[380]},{"teal":369,"source":"contracts/ARC11550.algo.ts:76","pc":[381]},{"teal":370,"source":"contracts/ARC11550.algo.ts:76","pc":[382]},{"teal":371,"source":"contracts/ARC11550.algo.ts:76","pc":[383,384]},{"teal":372,"source":"contracts/ARC11550.algo.ts:76","pc":[385]},{"teal":373,"source":"contracts/ARC11550.algo.ts:76","pc":[386]},{"teal":374,"source":"contracts/ARC11550.algo.ts:76","pc":[387]},{"teal":375,"source":"contracts/ARC11550.algo.ts:76","pc":[388]},{"teal":376,"source":"contracts/ARC11550.algo.ts:76","pc":[389]},{"teal":377,"source":"contracts/ARC11550.algo.ts:76","pc":[390,391]},{"teal":378,"source":"contracts/ARC11550.algo.ts:76","pc":[392,393]},{"teal":379,"source":"contracts/ARC11550.algo.ts:76","pc":[394]},{"teal":380,"source":"contracts/ARC11550.algo.ts:76","pc":[395,396]},{"teal":381,"source":"contracts/ARC11550.algo.ts:76","pc":[397]},{"teal":382,"source":"contracts/ARC11550.algo.ts:76","pc":[398]},{"teal":383,"source":"contracts/ARC11550.algo.ts:76","pc":[399]},{"teal":384,"source":"contracts/ARC11550.algo.ts:76","pc":[400]},{"teal":385,"source":"contracts/ARC11550.algo.ts:76","pc":[401]},{"teal":386,"source":"contracts/ARC11550.algo.ts:76","pc":[402,403]},{"teal":387,"source":"contracts/ARC11550.algo.ts:76","pc":[404]},{"teal":388,"source":"contracts/ARC11550.algo.ts:76","pc":[405,406]},{"teal":389,"source":"contracts/ARC11550.algo.ts:76","pc":[407]},{"teal":390,"source":"contracts/ARC11550.algo.ts:76","pc":[408]},{"teal":391,"source":"contracts/ARC11550.algo.ts:76","pc":[409]},{"teal":392,"source":"contracts/ARC11550.algo.ts:76","pc":[410]},{"teal":395,"source":"contracts/ARC11550.algo.ts:76","errorMessage":"box value does not exist: this.balances({ id: t.id, address: t.from }).value","pc":[411]},{"teal":396,"source":"contracts/ARC11550.algo.ts:76","pc":[412]},{"teal":397,"source":"contracts/ARC11550.algo.ts:76","pc":[413,414]},{"teal":398,"source":"contracts/ARC11550.algo.ts:76","pc":[415,416]},{"teal":399,"source":"contracts/ARC11550.algo.ts:76","pc":[417]},{"teal":400,"source":"contracts/ARC11550.algo.ts:76","pc":[418,419]},{"teal":401,"source":"contracts/ARC11550.algo.ts:76","pc":[420]},{"teal":402,"source":"contracts/ARC11550.algo.ts:76","pc":[421]},{"teal":403,"source":"contracts/ARC11550.algo.ts:76","pc":[422]},{"teal":404,"source":"contracts/ARC11550.algo.ts:76","pc":[423,424]},{"teal":405,"source":"contracts/ARC11550.algo.ts:76","pc":[425]},{"teal":406,"source":"contracts/ARC11550.algo.ts:76","pc":[426,427]},{"teal":407,"source":"contracts/ARC11550.algo.ts:76","pc":[428]},{"teal":408,"source":"contracts/ARC11550.algo.ts:76","pc":[429]},{"teal":409,"source":"contracts/ARC11550.algo.ts:76","pc":[430]},{"teal":410,"source":"contracts/ARC11550.algo.ts:76","pc":[431]},{"teal":411,"source":"contracts/ARC11550.algo.ts:76","pc":[432]},{"teal":412,"source":"contracts/ARC11550.algo.ts:76","pc":[433]},{"teal":413,"source":"contracts/ARC11550.algo.ts:76","pc":[434,435]},{"teal":414,"source":"contracts/ARC11550.algo.ts:76","pc":[436,437]},{"teal":415,"source":"contracts/ARC11550.algo.ts:76","pc":[438]},{"teal":416,"source":"contracts/ARC11550.algo.ts:76","pc":[439,440]},{"teal":417,"source":"contracts/ARC11550.algo.ts:76","pc":[441]},{"teal":418,"source":"contracts/ARC11550.algo.ts:76","pc":[442]},{"teal":419,"source":"contracts/ARC11550.algo.ts:76","pc":[443]},{"teal":420,"source":"contracts/ARC11550.algo.ts:76","pc":[444]},{"teal":421,"source":"contracts/ARC11550.algo.ts:76","pc":[445]},{"teal":422,"source":"contracts/ARC11550.algo.ts:76","pc":[446,447]},{"teal":423,"source":"contracts/ARC11550.algo.ts:76","pc":[448]},{"teal":424,"source":"contracts/ARC11550.algo.ts:76","pc":[449]},{"teal":425,"source":"contracts/ARC11550.algo.ts:76","pc":[450]},{"teal":426,"source":"contracts/ARC11550.algo.ts:76","pc":[451]},{"teal":427,"source":"contracts/ARC11550.algo.ts:76","pc":[452]},{"teal":428,"source":"contracts/ARC11550.algo.ts:76","pc":[453,454]},{"teal":429,"source":"contracts/ARC11550.algo.ts:76","pc":[455,456]},{"teal":430,"source":"contracts/ARC11550.algo.ts:76","pc":[457]},{"teal":431,"source":"contracts/ARC11550.algo.ts:76","pc":[458,459]},{"teal":432,"source":"contracts/ARC11550.algo.ts:76","pc":[460]},{"teal":433,"source":"contracts/ARC11550.algo.ts:76","pc":[461]},{"teal":434,"source":"contracts/ARC11550.algo.ts:76","pc":[462]},{"teal":435,"source":"contracts/ARC11550.algo.ts:76","pc":[463]},{"teal":436,"source":"contracts/ARC11550.algo.ts:76","pc":[464]},{"teal":437,"source":"contracts/ARC11550.algo.ts:76","pc":[465,466]},{"teal":438,"source":"contracts/ARC11550.algo.ts:76","pc":[467]},{"teal":439,"source":"contracts/ARC11550.algo.ts:76","pc":[468,469]},{"teal":440,"source":"contracts/ARC11550.algo.ts:76","pc":[470]},{"teal":441,"source":"contracts/ARC11550.algo.ts:76","pc":[471]},{"teal":442,"source":"contracts/ARC11550.algo.ts:76","pc":[472]},{"teal":443,"source":"contracts/ARC11550.algo.ts:76","pc":[473]},{"teal":444,"source":"contracts/ARC11550.algo.ts:76","pc":[474]},{"teal":445,"source":"contracts/ARC11550.algo.ts:76","pc":[475]},{"teal":449,"source":"contracts/ARC11550.algo.ts:77","pc":[476]},{"teal":450,"source":"contracts/ARC11550.algo.ts:77","pc":[477,478]},{"teal":451,"source":"contracts/ARC11550.algo.ts:77","pc":[479,480]},{"teal":452,"source":"contracts/ARC11550.algo.ts:77","pc":[481]},{"teal":453,"source":"contracts/ARC11550.algo.ts:77","pc":[482,483]},{"teal":454,"source":"contracts/ARC11550.algo.ts:77","pc":[484]},{"teal":455,"source":"contracts/ARC11550.algo.ts:77","pc":[485]},{"teal":456,"source":"contracts/ARC11550.algo.ts:77","pc":[486]},{"teal":457,"source":"contracts/ARC11550.algo.ts:77","pc":[487]},{"teal":458,"source":"contracts/ARC11550.algo.ts:77","pc":[488]},{"teal":459,"source":"contracts/ARC11550.algo.ts:77","pc":[489,490]},{"teal":460,"source":"contracts/ARC11550.algo.ts:77","pc":[491]},{"teal":461,"source":"contracts/ARC11550.algo.ts:77","pc":[492]},{"teal":462,"source":"contracts/ARC11550.algo.ts:77","pc":[493]},{"teal":463,"source":"contracts/ARC11550.algo.ts:77","pc":[494]},{"teal":464,"source":"contracts/ARC11550.algo.ts:77","pc":[495]},{"teal":465,"source":"contracts/ARC11550.algo.ts:77","pc":[496,497]},{"teal":466,"source":"contracts/ARC11550.algo.ts:77","pc":[498,499]},{"teal":467,"source":"contracts/ARC11550.algo.ts:77","pc":[500]},{"teal":468,"source":"contracts/ARC11550.algo.ts:77","pc":[501,502]},{"teal":469,"source":"contracts/ARC11550.algo.ts:77","pc":[503]},{"teal":470,"source":"contracts/ARC11550.algo.ts:77","pc":[504]},{"teal":471,"source":"contracts/ARC11550.algo.ts:77","pc":[505]},{"teal":472,"source":"contracts/ARC11550.algo.ts:77","pc":[506,507]},{"teal":473,"source":"contracts/ARC11550.algo.ts:77","pc":[508]},{"teal":474,"source":"contracts/ARC11550.algo.ts:77","pc":[509,510]},{"teal":475,"source":"contracts/ARC11550.algo.ts:77","pc":[511]},{"teal":476,"source":"contracts/ARC11550.algo.ts:77","pc":[512,513]},{"teal":477,"source":"contracts/ARC11550.algo.ts:77","pc":[514]},{"teal":478,"source":"contracts/ARC11550.algo.ts:77","pc":[515]},{"teal":479,"source":"contracts/ARC11550.algo.ts:77","pc":[516]},{"teal":480,"source":"contracts/ARC11550.algo.ts:77","pc":[517]},{"teal":483,"source":"contracts/ARC11550.algo.ts:77","errorMessage":"box value does not exist: this.balances({ id: t.id, address: t.to }).value","pc":[518]},{"teal":484,"source":"contracts/ARC11550.algo.ts:77","pc":[519]},{"teal":485,"source":"contracts/ARC11550.algo.ts:77","pc":[520,521]},{"teal":486,"source":"contracts/ARC11550.algo.ts:77","pc":[522,523]},{"teal":487,"source":"contracts/ARC11550.algo.ts:77","pc":[524]},{"teal":488,"source":"contracts/ARC11550.algo.ts:77","pc":[525,526]},{"teal":489,"source":"contracts/ARC11550.algo.ts:77","pc":[527]},{"teal":490,"source":"contracts/ARC11550.algo.ts:77","pc":[528]},{"teal":491,"source":"contracts/ARC11550.algo.ts:77","pc":[529]},{"teal":492,"source":"contracts/ARC11550.algo.ts:77","pc":[530,531]},{"teal":493,"source":"contracts/ARC11550.algo.ts:77","pc":[532]},{"teal":494,"source":"contracts/ARC11550.algo.ts:77","pc":[533,534]},{"teal":495,"source":"contracts/ARC11550.algo.ts:77","pc":[535]},{"teal":496,"source":"contracts/ARC11550.algo.ts:77","pc":[536]},{"teal":497,"source":"contracts/ARC11550.algo.ts:77","pc":[537]},{"teal":498,"source":"contracts/ARC11550.algo.ts:77","pc":[538]},{"teal":499,"source":"contracts/ARC11550.algo.ts:77","pc":[539]},{"teal":500,"source":"contracts/ARC11550.algo.ts:77","pc":[540]},{"teal":501,"source":"contracts/ARC11550.algo.ts:77","pc":[541,542]},{"teal":502,"source":"contracts/ARC11550.algo.ts:77","pc":[543,544]},{"teal":503,"source":"contracts/ARC11550.algo.ts:77","pc":[545]},{"teal":504,"source":"contracts/ARC11550.algo.ts:77","pc":[546,547]},{"teal":505,"source":"contracts/ARC11550.algo.ts:77","pc":[548]},{"teal":506,"source":"contracts/ARC11550.algo.ts:77","pc":[549]},{"teal":507,"source":"contracts/ARC11550.algo.ts:77","pc":[550]},{"teal":508,"source":"contracts/ARC11550.algo.ts:77","pc":[551]},{"teal":509,"source":"contracts/ARC11550.algo.ts:77","pc":[552]},{"teal":510,"source":"contracts/ARC11550.algo.ts:77","pc":[553,554]},{"teal":511,"source":"contracts/ARC11550.algo.ts:77","pc":[555]},{"teal":512,"source":"contracts/ARC11550.algo.ts:77","pc":[556]},{"teal":513,"source":"contracts/ARC11550.algo.ts:77","pc":[557]},{"teal":514,"source":"contracts/ARC11550.algo.ts:77","pc":[558]},{"teal":515,"source":"contracts/ARC11550.algo.ts:77","pc":[559]},{"teal":516,"source":"contracts/ARC11550.algo.ts:77","pc":[560,561]},{"teal":517,"source":"contracts/ARC11550.algo.ts:77","pc":[562,563]},{"teal":518,"source":"contracts/ARC11550.algo.ts:77","pc":[564]},{"teal":519,"source":"contracts/ARC11550.algo.ts:77","pc":[565,566]},{"teal":520,"source":"contracts/ARC11550.algo.ts:77","pc":[567]},{"teal":521,"source":"contracts/ARC11550.algo.ts:77","pc":[568]},{"teal":522,"source":"contracts/ARC11550.algo.ts:77","pc":[569]},{"teal":523,"source":"contracts/ARC11550.algo.ts:77","pc":[570,571]},{"teal":524,"source":"contracts/ARC11550.algo.ts:77","pc":[572]},{"teal":525,"source":"contracts/ARC11550.algo.ts:77","pc":[573,574]},{"teal":526,"source":"contracts/ARC11550.algo.ts:77","pc":[575]},{"teal":527,"source":"contracts/ARC11550.algo.ts:77","pc":[576,577]},{"teal":528,"source":"contracts/ARC11550.algo.ts:77","pc":[578]},{"teal":529,"source":"contracts/ARC11550.algo.ts:77","pc":[579]},{"teal":530,"source":"contracts/ARC11550.algo.ts:77","pc":[580]},{"teal":531,"source":"contracts/ARC11550.algo.ts:77","pc":[581]},{"teal":532,"source":"contracts/ARC11550.algo.ts:77","pc":[582]},{"teal":533,"source":"contracts/ARC11550.algo.ts:77","pc":[583]},{"teal":538,"source":"contracts/ARC11550.algo.ts:74","pc":[584,585]},{"teal":539,"source":"contracts/ARC11550.algo.ts:74","pc":[586]},{"teal":540,"source":"contracts/ARC11550.algo.ts:74","pc":[587]},{"teal":541,"source":"contracts/ARC11550.algo.ts:74","pc":[588,589]},{"teal":542,"source":"contracts/ARC11550.algo.ts:74","pc":[590,591,592]},{"teal":545,"source":"contracts/ARC11550.algo.ts:66","pc":[593]},{"teal":548,"source":"contracts/ARC11550.algo.ts:24","pc":[594,595,596,597,598,599]},{"teal":549,"source":"contracts/ARC11550.algo.ts:24","pc":[600,601,602]},{"teal":550,"source":"contracts/ARC11550.algo.ts:24","pc":[603,604,605,606]},{"teal":553,"source":"contracts/ARC11550.algo.ts:24","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[607]},{"teal":556,"source":"contracts/ARC11550.algo.ts:24","pc":[608,609,610,611,612,613]},{"teal":557,"source":"contracts/ARC11550.algo.ts:24","pc":[614,615,616,617,618,619]},{"teal":558,"source":"contracts/ARC11550.algo.ts:24","pc":[620,621,622,623,624,625]},{"teal":559,"source":"contracts/ARC11550.algo.ts:24","pc":[626,627,628,629,630,631]},{"teal":560,"source":"contracts/ARC11550.algo.ts:24","pc":[632,633,634,635,636,637]},{"teal":561,"source":"contracts/ARC11550.algo.ts:24","pc":[638,639,640,641,642,643]},{"teal":562,"source":"contracts/ARC11550.algo.ts:24","pc":[644,645,646,647,648,649]},{"teal":563,"source":"contracts/ARC11550.algo.ts:24","pc":[650,651,652]},{"teal":564,"source":"contracts/ARC11550.algo.ts:24","pc":[653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668]},{"teal":567,"source":"contracts/ARC11550.algo.ts:24","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[669]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAIAFABCCAoBkgmBQQVH3x1AXABYg90cmFuc2Zlckhvb2tBcHAAMRgUIQYLMRkIjQwCFgAAAAAAAAAAAAACCAAAAAAAAAAAAAAANhoBF4gAAiRDigEAK4v/Z4AGbmV4dElkImeJKDYaAReIAARQsCRDigEBIiEEKYv/FlBOArqJKDYaAReIAARQsCRDigEBIQQlKYv/FlBOArqJKDYaAReIAA4WSZMhBA5EVwQEULAkQ4oBAYEwgQQpi/8WUE4CuheJKDYaAReIAAUWULAkQ4oBASEFJSmL/xZQTgK6F4koNhoCSRUhBBJENhoBF4gABRZQsCRDigIBKov/Fov+UFC+RBeJKDYaAReIAARQsCRDigEBKYv/FlC+RIk2GgFXAgCIAAIkQ4oBACcESbEhBrIQgAS0wXp7shorZLIYMQCyGov/SRUjChZXBgJMULIaIrIBs7Q7JAnFOlcEACJTRCKMAIsAi/8VIwoMQQDjiwCMASqL/zX/IosBIwsIIgg0/0wlWBcWi/81/yKLASMLCCUINP9MIQRYUFC+RBeL/zX/IosBIwsIIQcINP9MJVgXCSqL/zX/IosBIwsIIgg0/0wlWBcWi/81/yKLASMLCCUINP9MIQRYUFBMFr8qi/81/yKLASMLCCIINP9MJVgXFov/Nf8iiwEjCwghBQg0/0whBFhQUL5EF4v/Nf8iiwEjCwghBwg0/0wlWBcIKov/Nf8iiwEjCwgiCDT/TCVYFxaL/zX/IosBIwsIIQUINP9MIQRYUFBMFr+LACQIjABC/xKJgASXO2FvNhoAjgH97ACABAtgpZ6ABLIh3I+ABINajfOABO9X3kKABNBKy8KABOERDq6ABEXwIqU2GgCOB/3J/eT9//4m/kP+aP5/AA==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type AssetParams = {
  name: Uint8Array,
  symbol: Uint8Array,
  total: bigint,
  decmimals: number
}


/**
 * Converts the ABI tuple representation of a AssetParams to the struct representation
 */
export function AssetParamsFromTuple(abiTuple: [Uint8Array, Uint8Array, bigint, number]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AssetParams, APP_SPEC.structs) as AssetParams
}

export type IdAndAddress = {
  id: bigint,
  address: string
}


/**
 * Converts the ABI tuple representation of a IdAndAddress to the struct representation
 */
export function IdAndAddressFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.IdAndAddress, APP_SPEC.structs) as IdAndAddress
}

/**
 * The argument types for the Arc11550 contract
 */
export type Arc11550Args = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(uint64)void': {
      app: bigint | number
    }
    'arc11550_name(uint64)byte[32]': {
      id: bigint | number
    }
    'arc11550_symbol(uint64)byte[8]': {
      id: bigint | number
    }
    'arc11550_decimals(uint64)uint32': {
      id: bigint | number
    }
    'arc11550_totalSupply(uint64)uint64': {
      id: bigint | number
    }
    'arc11550_balanceOf(uint64,address)uint64': {
      id: bigint | number
      account: string
    }
    'arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)': {
      id: bigint | number
    }
    'arc11550_transfer((uint64,address,address,uint64)[])void': {
      transfers: [bigint | number, string, string, bigint | number][]
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(uint64)void': [app: bigint | number]
    'arc11550_name(uint64)byte[32]': [id: bigint | number]
    'arc11550_symbol(uint64)byte[8]': [id: bigint | number]
    'arc11550_decimals(uint64)uint32': [id: bigint | number]
    'arc11550_totalSupply(uint64)uint64': [id: bigint | number]
    'arc11550_balanceOf(uint64,address)uint64': [id: bigint | number, account: string]
    'arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)': [id: bigint | number]
    'arc11550_transfer((uint64,address,address,uint64)[])void': [transfers: [bigint | number, string, string, bigint | number][]]
  }
}

/**
 * The return type for each method
 */
export type Arc11550Returns = {
  'createApplication(uint64)void': void
  'arc11550_name(uint64)byte[32]': Uint8Array
  'arc11550_symbol(uint64)byte[8]': Uint8Array
  'arc11550_decimals(uint64)uint32': number
  'arc11550_totalSupply(uint64)uint64': bigint
  'arc11550_balanceOf(uint64,address)uint64': bigint
  'arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)': AssetParams
  'arc11550_transfer((uint64,address,address,uint64)[])void': void
}

/**
 * Defines the types of available calls and state of the Arc11550 smart contract.
 */
export type Arc11550Types = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64)void' | 'createApplication', {
      argsObj: Arc11550Args['obj']['createApplication(uint64)void']
      argsTuple: Arc11550Args['tuple']['createApplication(uint64)void']
      returns: Arc11550Returns['createApplication(uint64)void']
    }>
    & Record<'arc11550_name(uint64)byte[32]' | 'arc11550_name', {
      argsObj: Arc11550Args['obj']['arc11550_name(uint64)byte[32]']
      argsTuple: Arc11550Args['tuple']['arc11550_name(uint64)byte[32]']
      returns: Arc11550Returns['arc11550_name(uint64)byte[32]']
    }>
    & Record<'arc11550_symbol(uint64)byte[8]' | 'arc11550_symbol', {
      argsObj: Arc11550Args['obj']['arc11550_symbol(uint64)byte[8]']
      argsTuple: Arc11550Args['tuple']['arc11550_symbol(uint64)byte[8]']
      returns: Arc11550Returns['arc11550_symbol(uint64)byte[8]']
    }>
    & Record<'arc11550_decimals(uint64)uint32' | 'arc11550_decimals', {
      argsObj: Arc11550Args['obj']['arc11550_decimals(uint64)uint32']
      argsTuple: Arc11550Args['tuple']['arc11550_decimals(uint64)uint32']
      returns: Arc11550Returns['arc11550_decimals(uint64)uint32']
    }>
    & Record<'arc11550_totalSupply(uint64)uint64' | 'arc11550_totalSupply', {
      argsObj: Arc11550Args['obj']['arc11550_totalSupply(uint64)uint64']
      argsTuple: Arc11550Args['tuple']['arc11550_totalSupply(uint64)uint64']
      returns: Arc11550Returns['arc11550_totalSupply(uint64)uint64']
    }>
    & Record<'arc11550_balanceOf(uint64,address)uint64' | 'arc11550_balanceOf', {
      argsObj: Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64']
      argsTuple: Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']
      returns: Arc11550Returns['arc11550_balanceOf(uint64,address)uint64']
    }>
    & Record<'arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)' | 'arc11550_params', {
      argsObj: Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)']
      argsTuple: Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)']
      returns: Arc11550Returns['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)']
    }>
    & Record<'arc11550_transfer((uint64,address,address,uint64)[])void' | 'arc11550_transfer', {
      argsObj: Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void']
      argsTuple: Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']
      returns: Arc11550Returns['arc11550_transfer((uint64,address,address,uint64)[])void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        nextId: bigint
        transferHookApp: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        params: Map<bigint | number, AssetParams>
        balances: Map<IdAndAddress, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Arc11550Signatures = keyof Arc11550Types['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Arc11550NonVoidMethodSignatures = keyof Arc11550Types['methods'] extends infer T ? T extends keyof Arc11550Types['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Arc11550 smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Arc11550Signatures> = Arc11550Types['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc11550 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc11550Signatures> = Arc11550Types['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = Arc11550Types['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = Arc11550Types['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Arc11550CreateCallParams =
  | Expand<CallParams<Arc11550Args['obj']['createApplication(uint64)void'] | Arc11550Args['tuple']['createApplication(uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<Arc11550Args['obj']['createApplication(uint64)void'] | Arc11550Args['tuple']['createApplication(uint64)void']> & {method: 'createApplication(uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Arc11550DeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Arc11550CreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc11550 smart contract
 */
export abstract class Arc11550ParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends Arc11550CreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(uint64)void':
            return Arc11550ParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ARC11550 smart contract using the createApplication(uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<Arc11550Args['obj']['createApplication(uint64)void'] | Arc11550Args['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.app],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the arc11550_name(uint64)byte[32] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Name(params: CallParams<Arc11550Args['obj']['arc11550_name(uint64)byte[32]'] | Arc11550Args['tuple']['arc11550_name(uint64)byte[32]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_name(uint64)byte[32]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id],
    }
  }
  /**
   * Constructs a no op call for the arc11550_symbol(uint64)byte[8] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Symbol(params: CallParams<Arc11550Args['obj']['arc11550_symbol(uint64)byte[8]'] | Arc11550Args['tuple']['arc11550_symbol(uint64)byte[8]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_symbol(uint64)byte[8]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id],
    }
  }
  /**
   * Constructs a no op call for the arc11550_decimals(uint64)uint32 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Decimals(params: CallParams<Arc11550Args['obj']['arc11550_decimals(uint64)uint32'] | Arc11550Args['tuple']['arc11550_decimals(uint64)uint32']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_decimals(uint64)uint32' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id],
    }
  }
  /**
   * Constructs a no op call for the arc11550_totalSupply(uint64)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550TotalSupply(params: CallParams<Arc11550Args['obj']['arc11550_totalSupply(uint64)uint64'] | Arc11550Args['tuple']['arc11550_totalSupply(uint64)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_totalSupply(uint64)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id],
    }
  }
  /**
   * Constructs a no op call for the arc11550_balanceOf(uint64,address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550BalanceOf(params: CallParams<Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_balanceOf(uint64,address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id, params.args.account],
    }
  }
  /**
   * Constructs a no op call for the arc11550_params(uint64)(byte[32],byte[8],uint64,uint32) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Params(params: CallParams<Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)'] | Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id],
    }
  }
  /**
   * Constructs a no op call for the arc11550_transfer((uint64,address,address,uint64)[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Transfer(params: CallParams<Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void'] | Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_transfer((uint64,address,address,uint64)[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.transfers],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ARC11550 smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Arc11550Factory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Arc11550Factory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Arc11550Client(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Arc11550Client(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ARC11550 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Arc11550DeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? Arc11550ParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (Arc11550CreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new Arc11550Client(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550 smart contract using the createApplication(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<Arc11550Args['obj']['createApplication(uint64)void'] | Arc11550Args['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(Arc11550ParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550 smart contract using the createApplication(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<Arc11550Args['obj']['createApplication(uint64)void'] | Arc11550Args['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(Arc11550ParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550 smart contract using an ABI method call using the createApplication(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<Arc11550Args['obj']['createApplication(uint64)void'] | Arc11550Args['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(Arc11550ParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | Arc11550Returns['createApplication(uint64)void']) }, appClient: new Arc11550Client(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ARC11550 smart contract
 */
export class Arc11550Client {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Arc11550Client`
   *
   * @param appClient An `AppClient` instance which has been created with the Arc11550 app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Arc11550Client`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Arc11550NonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Arc11550Client` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Arc11550Client> {
    return new Arc11550Client(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Arc11550Client` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Arc11550Client> {
    return new Arc11550Client(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_name(uint64)byte[32]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Name: (params: CallParams<Arc11550Args['obj']['arc11550_name(uint64)byte[32]'] | Arc11550Args['tuple']['arc11550_name(uint64)byte[32]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550Name(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_symbol(uint64)byte[8]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Symbol: (params: CallParams<Arc11550Args['obj']['arc11550_symbol(uint64)byte[8]'] | Arc11550Args['tuple']['arc11550_symbol(uint64)byte[8]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550Symbol(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_decimals(uint64)uint32` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Decimals: (params: CallParams<Arc11550Args['obj']['arc11550_decimals(uint64)uint32'] | Arc11550Args['tuple']['arc11550_decimals(uint64)uint32']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550Decimals(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_totalSupply(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550TotalSupply: (params: CallParams<Arc11550Args['obj']['arc11550_totalSupply(uint64)uint64'] | Arc11550Args['tuple']['arc11550_totalSupply(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550TotalSupply(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_balanceOf(uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550BalanceOf: (params: CallParams<Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550BalanceOf(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Params: (params: CallParams<Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)'] | Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550Params(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_transfer((uint64,address,address,uint64)[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Transfer: (params: CallParams<Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void'] | Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550Transfer(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_name(uint64)byte[32]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Name: (params: CallParams<Arc11550Args['obj']['arc11550_name(uint64)byte[32]'] | Arc11550Args['tuple']['arc11550_name(uint64)byte[32]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550Name(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_symbol(uint64)byte[8]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Symbol: (params: CallParams<Arc11550Args['obj']['arc11550_symbol(uint64)byte[8]'] | Arc11550Args['tuple']['arc11550_symbol(uint64)byte[8]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550Symbol(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_decimals(uint64)uint32` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Decimals: (params: CallParams<Arc11550Args['obj']['arc11550_decimals(uint64)uint32'] | Arc11550Args['tuple']['arc11550_decimals(uint64)uint32']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550Decimals(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_totalSupply(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550TotalSupply: (params: CallParams<Arc11550Args['obj']['arc11550_totalSupply(uint64)uint64'] | Arc11550Args['tuple']['arc11550_totalSupply(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550TotalSupply(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_balanceOf(uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550BalanceOf: (params: CallParams<Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550BalanceOf(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Params: (params: CallParams<Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)'] | Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550Params(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_transfer((uint64,address,address,uint64)[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Transfer: (params: CallParams<Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void'] | Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550Transfer(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_name(uint64)byte[32]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Name: async (params: CallParams<Arc11550Args['obj']['arc11550_name(uint64)byte[32]'] | Arc11550Args['tuple']['arc11550_name(uint64)byte[32]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550Name(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_name(uint64)byte[32]'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_symbol(uint64)byte[8]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Symbol: async (params: CallParams<Arc11550Args['obj']['arc11550_symbol(uint64)byte[8]'] | Arc11550Args['tuple']['arc11550_symbol(uint64)byte[8]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550Symbol(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_symbol(uint64)byte[8]'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_decimals(uint64)uint32` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Decimals: async (params: CallParams<Arc11550Args['obj']['arc11550_decimals(uint64)uint32'] | Arc11550Args['tuple']['arc11550_decimals(uint64)uint32']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550Decimals(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_decimals(uint64)uint32'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_totalSupply(uint64)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550TotalSupply: async (params: CallParams<Arc11550Args['obj']['arc11550_totalSupply(uint64)uint64'] | Arc11550Args['tuple']['arc11550_totalSupply(uint64)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550TotalSupply(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_totalSupply(uint64)uint64'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_balanceOf(uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550BalanceOf: async (params: CallParams<Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550BalanceOf(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_balanceOf(uint64,address)uint64'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Params: async (params: CallParams<Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)'] | Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550Params(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_transfer((uint64,address,address,uint64)[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Transfer: async (params: CallParams<Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void'] | Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550Transfer(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_transfer((uint64,address,address,uint64)[])void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Arc11550Client(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ARC11550 app
   */
  state = {
    /**
     * Methods to access global state for the current ARC11550 app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          nextId: result.nextId,
          transferHookApp: result.transferHookApp,
        }
      },
      /**
       * Get the current value of the nextId key in global state
       */
      nextId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("nextId")) as bigint | undefined },
      /**
       * Get the current value of the transferHookApp key in global state
       */
      transferHookApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("transferHookApp")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current ARC11550 app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the params map in box state
       */
      params: {
        /**
         * Get all current values of the params map in box state
         */
        getMap: async (): Promise<Map<bigint, AssetParams>> => { return (await this.appClient.state.box.getMap("params")) as Map<bigint, AssetParams> },
        /**
         * Get a current value of the params map by key from box state
         */
        value: async (key: bigint | number): Promise<AssetParams | undefined> => { return await this.appClient.state.box.getMapValue("params", key) as AssetParams | undefined },
      },
      /**
       * Get values from the balances map in box state
       */
      balances: {
        /**
         * Get all current values of the balances map in box state
         */
        getMap: async (): Promise<Map<IdAndAddress, bigint>> => { return (await this.appClient.state.box.getMap("balances")) as Map<IdAndAddress, bigint> },
        /**
         * Get a current value of the balances map by key from box state
         */
        value: async (key: IdAndAddress): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("balances", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): Arc11550Composer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a arc11550_name(uint64)byte[32] method call against the ARC11550 contract
       */
      arc11550Name(params: CallParams<Arc11550Args['obj']['arc11550_name(uint64)byte[32]'] | Arc11550Args['tuple']['arc11550_name(uint64)byte[32]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Name(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_name(uint64)byte[32]', v))
        return this
      },
      /**
       * Add a arc11550_symbol(uint64)byte[8] method call against the ARC11550 contract
       */
      arc11550Symbol(params: CallParams<Arc11550Args['obj']['arc11550_symbol(uint64)byte[8]'] | Arc11550Args['tuple']['arc11550_symbol(uint64)byte[8]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Symbol(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_symbol(uint64)byte[8]', v))
        return this
      },
      /**
       * Add a arc11550_decimals(uint64)uint32 method call against the ARC11550 contract
       */
      arc11550Decimals(params: CallParams<Arc11550Args['obj']['arc11550_decimals(uint64)uint32'] | Arc11550Args['tuple']['arc11550_decimals(uint64)uint32']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Decimals(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_decimals(uint64)uint32', v))
        return this
      },
      /**
       * Add a arc11550_totalSupply(uint64)uint64 method call against the ARC11550 contract
       */
      arc11550TotalSupply(params: CallParams<Arc11550Args['obj']['arc11550_totalSupply(uint64)uint64'] | Arc11550Args['tuple']['arc11550_totalSupply(uint64)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550TotalSupply(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_totalSupply(uint64)uint64', v))
        return this
      },
      /**
       * Add a arc11550_balanceOf(uint64,address)uint64 method call against the ARC11550 contract
       */
      arc11550BalanceOf(params: CallParams<Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550BalanceOf(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_balanceOf(uint64,address)uint64', v))
        return this
      },
      /**
       * Add a arc11550_params(uint64)(byte[32],byte[8],uint64,uint32) method call against the ARC11550 contract
       */
      arc11550Params(params: CallParams<Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)'] | Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Params(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)', v))
        return this
      },
      /**
       * Add a arc11550_transfer((uint64,address,address,uint64)[])void method call against the ARC11550 contract
       */
      arc11550Transfer(params: CallParams<Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void'] | Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Transfer(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the ARC11550 contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Arc11550Composer
  }
}
export type Arc11550Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc11550_name(uint64)byte[32] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Name(params?: CallParams<Arc11550Args['obj']['arc11550_name(uint64)byte[32]'] | Arc11550Args['tuple']['arc11550_name(uint64)byte[32]']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_name(uint64)byte[32]'] | undefined]>

  /**
   * Calls the arc11550_symbol(uint64)byte[8] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Symbol(params?: CallParams<Arc11550Args['obj']['arc11550_symbol(uint64)byte[8]'] | Arc11550Args['tuple']['arc11550_symbol(uint64)byte[8]']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_symbol(uint64)byte[8]'] | undefined]>

  /**
   * Calls the arc11550_decimals(uint64)uint32 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Decimals(params?: CallParams<Arc11550Args['obj']['arc11550_decimals(uint64)uint32'] | Arc11550Args['tuple']['arc11550_decimals(uint64)uint32']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_decimals(uint64)uint32'] | undefined]>

  /**
   * Calls the arc11550_totalSupply(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550TotalSupply(params?: CallParams<Arc11550Args['obj']['arc11550_totalSupply(uint64)uint64'] | Arc11550Args['tuple']['arc11550_totalSupply(uint64)uint64']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_totalSupply(uint64)uint64'] | undefined]>

  /**
   * Calls the arc11550_balanceOf(uint64,address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550BalanceOf(params?: CallParams<Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_balanceOf(uint64,address)uint64'] | undefined]>

  /**
   * Calls the arc11550_params(uint64)(byte[32],byte[8],uint64,uint32) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Params(params?: CallParams<Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)'] | Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32)'] | undefined]>

  /**
   * Calls the arc11550_transfer((uint64,address,address,uint64)[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Transfer(params?: CallParams<Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void'] | Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_transfer((uint64,address,address,uint64)[])void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ARC11550 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Arc11550Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc11550Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc11550ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Arc11550ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Arc11550ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Arc11550ComposerResults<TReturns>>
}
export type Arc11550ComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ARC11550","desc":"","methods":[{"name":"createApplication","args":[{"name":"app","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"arc1150_mint","args":[{"name":"params","type":"(byte[32],byte[8],uint64,uint32,address)","struct":"Params"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_metadata","args":[{"name":"key","type":"(uint64,string)","struct":"MetadataKey"}],"returns":{"type":"(bool,byte[])","struct":"Metadata"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_setMetadata","args":[{"name":"key","type":"(uint64,string)","struct":"MetadataKey"},{"name":"data","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_balanceOf","args":[{"name":"id","type":"uint64"},{"name":"account","type":"address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_params","args":[{"name":"id","type":"uint64"}],"returns":{"type":"(byte[32],byte[8],uint64,uint32,address)","struct":"Params"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_transfer","args":[{"name":"transfers","type":"(uint64,address,address,uint64)[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"Params":[{"name":"name","type":"byte[32]"},{"name":"symbol","type":"byte[8]"},{"name":"total","type":"uint64"},{"name":"decmimals","type":"uint32"},{"name":"manager","type":"address"}],"IdAndAddress":[{"name":"id","type":"uint64"},{"name":"address","type":"address"}],"Metadata":[{"name":"mutable","type":"bool"},{"name":"data","type":"byte[]"}],"MetadataKey":[{"name":"id","type":"uint64"},{"name":"key","type":"string"}]},"state":{"schema":{"global":{"bytes":1,"ints":2},"local":{"bytes":0,"ints":0}},"keys":{"global":{"nextId":{"key":"bmV4dElk","keyType":"AVMBytes","valueType":"uint64"},"transferHookApp":{"key":"dHJhbnNmZXJIb29rQXBw","keyType":"AVMBytes","valueType":"uint64"},"minter":{"key":"bWludGVy","keyType":"AVMBytes","valueType":"address"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"params":{"keyType":"uint64","valueType":"Params","prefix":"cA=="},"balances":{"keyType":"IdAndAddress","valueType":"uint64","prefix":"Yg=="},"metadata":{"keyType":"MetadataKey","valueType":"Metadata","prefix":"bQ=="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/ARC11550.algo.ts:35","pc":[0]},{"teal":2,"source":"contracts/ARC11550.algo.ts:35","pc":[1,2,3,4,5,6,7,8,9,10]},{"teal":3,"source":"contracts/ARC11550.algo.ts:35","pc":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47]},{"teal":15,"source":"contracts/ARC11550.algo.ts:35","pc":[48,49]},{"teal":16,"source":"contracts/ARC11550.algo.ts:35","pc":[50]},{"teal":17,"source":"contracts/ARC11550.algo.ts:35","pc":[51,52]},{"teal":18,"source":"contracts/ARC11550.algo.ts:35","pc":[53]},{"teal":19,"source":"contracts/ARC11550.algo.ts:35","pc":[54,55]},{"teal":20,"source":"contracts/ARC11550.algo.ts:35","pc":[56]},{"teal":21,"source":"contracts/ARC11550.algo.ts:35","pc":[57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82]},{"teal":25,"source":"contracts/ARC11550.algo.ts:35","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[83]},{"teal":30,"source":"contracts/ARC11550.algo.ts:54","pc":[84,85,86]},{"teal":31,"source":"contracts/ARC11550.algo.ts:54","pc":[87]},{"teal":34,"source":"contracts/ARC11550.algo.ts:54","pc":[88,89,90]},{"teal":35,"source":"contracts/ARC11550.algo.ts:54","pc":[91]},{"teal":36,"source":"contracts/ARC11550.algo.ts:54","pc":[92]},{"teal":40,"source":"contracts/ARC11550.algo.ts:54","pc":[93,94,95]},{"teal":44,"source":"contracts/ARC11550.algo.ts:55","pc":[96,97]},{"teal":45,"source":"contracts/ARC11550.algo.ts:55","pc":[98,99]},{"teal":46,"source":"contracts/ARC11550.algo.ts:55","pc":[100]},{"teal":50,"source":"contracts/ARC11550.algo.ts:56","pc":[101]},{"teal":51,"source":"contracts/ARC11550.algo.ts:56","pc":[102]},{"teal":52,"source":"contracts/ARC11550.algo.ts:56","pc":[103]},{"teal":53,"source":"contracts/ARC11550.algo.ts:54","pc":[104]},{"teal":58,"source":"contracts/ARC11550.algo.ts:59","pc":[105,106,107]},{"teal":59,"source":"contracts/ARC11550.algo.ts:59","pc":[108]},{"teal":60,"source":"contracts/ARC11550.algo.ts:59","pc":[109]},{"teal":61,"source":"contracts/ARC11550.algo.ts:59","pc":[110,111]},{"teal":62,"source":"contracts/ARC11550.algo.ts:59","pc":[112]},{"teal":65,"source":"contracts/ARC11550.algo.ts:59","errorMessage":"argument 0 (params) for arc1150_mint must be a (byte[32],byte[8],uint64,uint32,address)","pc":[113]},{"teal":68,"source":"contracts/ARC11550.algo.ts:59","pc":[114,115,116]},{"teal":69,"source":"contracts/ARC11550.algo.ts:59","pc":[117]},{"teal":70,"source":"contracts/ARC11550.algo.ts:59","pc":[118]},{"teal":74,"source":"contracts/ARC11550.algo.ts:59","pc":[119,120,121]},{"teal":78,"source":"contracts/ARC11550.algo.ts:60","pc":[122,123]},{"teal":79,"source":"contracts/ARC11550.algo.ts:60","pc":[124,125,126,127,128,129,130,131]},{"teal":80,"source":"contracts/ARC11550.algo.ts:60","pc":[132]},{"teal":81,"source":"contracts/ARC11550.algo.ts:60","pc":[133]},{"teal":82,"source":"contracts/ARC11550.algo.ts:60","pc":[134]},{"teal":86,"source":"contracts/ARC11550.algo.ts:61","pc":[135,136]},{"teal":87,"source":"contracts/ARC11550.algo.ts:61","pc":[137]},{"teal":88,"source":"contracts/ARC11550.algo.ts:61","pc":[138]},{"teal":89,"source":"contracts/ARC11550.algo.ts:61","pc":[139]},{"teal":90,"source":"contracts/ARC11550.algo.ts:61","pc":[140]},{"teal":91,"source":"contracts/ARC11550.algo.ts:61","pc":[141,142]},{"teal":92,"source":"contracts/ARC11550.algo.ts:61","pc":[143]},{"teal":96,"source":"contracts/ARC11550.algo.ts:62","pc":[144]},{"teal":97,"source":"contracts/ARC11550.algo.ts:62","pc":[145]},{"teal":98,"source":"contracts/ARC11550.algo.ts:62","pc":[146]},{"teal":99,"source":"contracts/ARC11550.algo.ts:62","pc":[147]},{"teal":100,"source":"contracts/ARC11550.algo.ts:62","pc":[148]},{"teal":101,"source":"contracts/ARC11550.algo.ts:62","pc":[149]},{"teal":102,"source":"contracts/ARC11550.algo.ts:62","pc":[150]},{"teal":103,"source":"contracts/ARC11550.algo.ts:59","pc":[151]},{"teal":108,"source":"contracts/ARC11550.algo.ts:65","pc":[152]},{"teal":111,"source":"contracts/ARC11550.algo.ts:65","pc":[153,154,155]},{"teal":114,"source":"contracts/ARC11550.algo.ts:65","pc":[156,157,158]},{"teal":115,"source":"contracts/ARC11550.algo.ts:65","pc":[159]},{"teal":116,"source":"contracts/ARC11550.algo.ts:65","pc":[160]},{"teal":117,"source":"contracts/ARC11550.algo.ts:65","pc":[161]},{"teal":118,"source":"contracts/ARC11550.algo.ts:65","pc":[162]},{"teal":122,"source":"contracts/ARC11550.algo.ts:65","pc":[163,164,165]},{"teal":126,"source":"contracts/ARC11550.algo.ts:66","pc":[166]},{"teal":127,"source":"contracts/ARC11550.algo.ts:66","pc":[167,168]},{"teal":128,"source":"contracts/ARC11550.algo.ts:66","pc":[169]},{"teal":129,"source":"contracts/ARC11550.algo.ts:66","pc":[170]},{"teal":132,"source":"contracts/ARC11550.algo.ts:66","errorMessage":"box value does not exist: this.metadata(key).value","pc":[171]},{"teal":133,"source":"contracts/ARC11550.algo.ts:65","pc":[172]},{"teal":138,"source":"contracts/ARC11550.algo.ts:69","pc":[173,174,175]},{"teal":139,"source":"contracts/ARC11550.algo.ts:69","pc":[176,177,178]},{"teal":142,"source":"contracts/ARC11550.algo.ts:69","pc":[179,180,181]},{"teal":145,"source":"contracts/ARC11550.algo.ts:69","pc":[182,183,184]},{"teal":146,"source":"contracts/ARC11550.algo.ts:69","pc":[185]},{"teal":147,"source":"contracts/ARC11550.algo.ts:69","pc":[186]},{"teal":151,"source":"contracts/ARC11550.algo.ts:69","pc":[187,188,189]},{"teal":155,"source":"contracts/ARC11550.algo.ts:70","pc":[190,191]},{"teal":156,"source":"contracts/ARC11550.algo.ts:70","pc":[192,193]},{"teal":157,"source":"contracts/ARC11550.algo.ts:70","pc":[194,195]},{"teal":158,"source":"contracts/ARC11550.algo.ts:70","pc":[196,197]},{"teal":159,"source":"contracts/ARC11550.algo.ts:70","pc":[198,199]},{"teal":160,"source":"contracts/ARC11550.algo.ts:70","pc":[200,201]},{"teal":161,"source":"contracts/ARC11550.algo.ts:70","pc":[202,203]},{"teal":162,"source":"contracts/ARC11550.algo.ts:70","pc":[204,205,206]},{"teal":163,"source":"contracts/ARC11550.algo.ts:70","pc":[207]},{"teal":164,"source":"contracts/ARC11550.algo.ts:70","pc":[208]},{"teal":165,"source":"contracts/ARC11550.algo.ts:70","pc":[209]},{"teal":166,"source":"contracts/ARC11550.algo.ts:70","pc":[210,211]},{"teal":167,"source":"contracts/ARC11550.algo.ts:70","pc":[212]},{"teal":168,"source":"contracts/ARC11550.algo.ts:70","pc":[213]},{"teal":169,"source":"contracts/ARC11550.algo.ts:70","pc":[214]},{"teal":174,"source":"contracts/ARC11550.algo.ts:72","pc":[215]},{"teal":175,"source":"contracts/ARC11550.algo.ts:72","pc":[216,217]},{"teal":176,"source":"contracts/ARC11550.algo.ts:72","pc":[218]},{"teal":177,"source":"contracts/ARC11550.algo.ts:72","pc":[219]},{"teal":178,"source":"contracts/ARC11550.algo.ts:72","pc":[220]},{"teal":179,"source":"contracts/ARC11550.algo.ts:72","pc":[221]},{"teal":180,"source":"contracts/ARC11550.algo.ts:72","pc":[222,223,224]},{"teal":185,"source":"contracts/ARC11550.algo.ts:73","pc":[225]},{"teal":186,"source":"contracts/ARC11550.algo.ts:73","pc":[226,227]},{"teal":187,"source":"contracts/ARC11550.algo.ts:73","pc":[228]},{"teal":188,"source":"contracts/ARC11550.algo.ts:73","pc":[229]},{"teal":191,"source":"contracts/ARC11550.algo.ts:73","errorMessage":"box value does not exist: this.metadata(key).value","pc":[230]},{"teal":192,"source":"contracts/ARC11550.algo.ts:73","pc":[231,232]},{"teal":193,"source":"contracts/ARC11550.algo.ts:73","pc":[233,234]},{"teal":194,"source":"contracts/ARC11550.algo.ts:73","pc":[235]},{"teal":195,"source":"contracts/ARC11550.algo.ts:73","pc":[236]},{"teal":196,"source":"contracts/ARC11550.algo.ts:73","pc":[237]},{"teal":201,"source":"contracts/ARC11550.algo.ts:76","pc":[238]},{"teal":202,"source":"contracts/ARC11550.algo.ts:76","pc":[239,240]},{"teal":203,"source":"contracts/ARC11550.algo.ts:76","pc":[241]},{"teal":204,"source":"contracts/ARC11550.algo.ts:76","pc":[242]},{"teal":207,"source":"contracts/ARC11550.algo.ts:76","errorMessage":"box value does not exist: this.metadata(key).value","pc":[243]},{"teal":208,"source":"contracts/ARC11550.algo.ts:76","pc":[244,245]},{"teal":209,"source":"contracts/ARC11550.algo.ts:76","pc":[246]},{"teal":210,"source":"contracts/ARC11550.algo.ts:76","pc":[247]},{"teal":211,"source":"contracts/ARC11550.algo.ts:76","pc":[248,249]},{"teal":212,"source":"contracts/ARC11550.algo.ts:76","pc":[250,251]},{"teal":213,"source":"contracts/ARC11550.algo.ts:76","pc":[252,253]},{"teal":214,"source":"contracts/ARC11550.algo.ts:76","pc":[254,255]},{"teal":215,"source":"contracts/ARC11550.algo.ts:76","pc":[256]},{"teal":216,"source":"contracts/ARC11550.algo.ts:76","pc":[257]},{"teal":217,"source":"contracts/ARC11550.algo.ts:76","pc":[258,259]},{"teal":218,"source":"contracts/ARC11550.algo.ts:76","pc":[260]},{"teal":219,"source":"contracts/ARC11550.algo.ts:76","pc":[261,262]},{"teal":220,"source":"contracts/ARC11550.algo.ts:76","pc":[263]},{"teal":221,"source":"contracts/ARC11550.algo.ts:76","pc":[264]},{"teal":222,"source":"contracts/ARC11550.algo.ts:76","pc":[265]},{"teal":223,"source":"contracts/ARC11550.algo.ts:76","pc":[266]},{"teal":224,"source":"contracts/ARC11550.algo.ts:76","pc":[267,268]},{"teal":225,"source":"contracts/ARC11550.algo.ts:76","pc":[269]},{"teal":226,"source":"contracts/ARC11550.algo.ts:76","pc":[270,271]},{"teal":227,"source":"contracts/ARC11550.algo.ts:76","pc":[272,273]},{"teal":228,"source":"contracts/ARC11550.algo.ts:76","pc":[274]},{"teal":229,"source":"contracts/ARC11550.algo.ts:76","pc":[275,276]},{"teal":230,"source":"contracts/ARC11550.algo.ts:76","pc":[277]},{"teal":231,"source":"contracts/ARC11550.algo.ts:76","pc":[278,279]},{"teal":232,"source":"contracts/ARC11550.algo.ts:76","pc":[280]},{"teal":233,"source":"contracts/ARC11550.algo.ts:76","pc":[281]},{"teal":234,"source":"contracts/ARC11550.algo.ts:76","pc":[282]},{"teal":235,"source":"contracts/ARC11550.algo.ts:76","pc":[283,284,285]},{"teal":236,"source":"contracts/ARC11550.algo.ts:76","pc":[286]},{"teal":237,"source":"contracts/ARC11550.algo.ts:76","pc":[287]},{"teal":238,"source":"contracts/ARC11550.algo.ts:76","pc":[288]},{"teal":239,"source":"contracts/ARC11550.algo.ts:76","pc":[289,290]},{"teal":240,"source":"contracts/ARC11550.algo.ts:76","pc":[291,292]},{"teal":241,"source":"contracts/ARC11550.algo.ts:76","pc":[293,294]},{"teal":242,"source":"contracts/ARC11550.algo.ts:76","pc":[295,296]},{"teal":243,"source":"contracts/ARC11550.algo.ts:76","pc":[297]},{"teal":244,"source":"contracts/ARC11550.algo.ts:76","pc":[298,299]},{"teal":245,"source":"contracts/ARC11550.algo.ts:76","pc":[300]},{"teal":246,"source":"contracts/ARC11550.algo.ts:76","pc":[301]},{"teal":247,"source":"contracts/ARC11550.algo.ts:76","pc":[302]},{"teal":248,"source":"contracts/ARC11550.algo.ts:76","pc":[303]},{"teal":249,"source":"contracts/ARC11550.algo.ts:76","pc":[304,305]},{"teal":250,"source":"contracts/ARC11550.algo.ts:76","pc":[306,307,308]},{"teal":251,"source":"contracts/ARC11550.algo.ts:76","pc":[309,310]},{"teal":252,"source":"contracts/ARC11550.algo.ts:76","pc":[311]},{"teal":253,"source":"contracts/ARC11550.algo.ts:76","pc":[312,313]},{"teal":254,"source":"contracts/ARC11550.algo.ts:76","pc":[314]},{"teal":255,"source":"contracts/ARC11550.algo.ts:76","pc":[315]},{"teal":256,"source":"contracts/ARC11550.algo.ts:76","pc":[316]},{"teal":257,"source":"contracts/ARC11550.algo.ts:76","pc":[317]},{"teal":258,"source":"contracts/ARC11550.algo.ts:76","pc":[318]},{"teal":259,"source":"contracts/ARC11550.algo.ts:76","pc":[319]},{"teal":260,"source":"contracts/ARC11550.algo.ts:69","pc":[320]},{"teal":265,"source":"contracts/ARC11550.algo.ts:79","pc":[321]},{"teal":268,"source":"contracts/ARC11550.algo.ts:79","pc":[322,323,324]},{"teal":269,"source":"contracts/ARC11550.algo.ts:79","pc":[325]},{"teal":270,"source":"contracts/ARC11550.algo.ts:79","pc":[326]},{"teal":271,"source":"contracts/ARC11550.algo.ts:79","pc":[327,328]},{"teal":272,"source":"contracts/ARC11550.algo.ts:79","pc":[329]},{"teal":275,"source":"contracts/ARC11550.algo.ts:79","errorMessage":"argument 0 (account) for arc11550_balanceOf must be a address","pc":[330]},{"teal":278,"source":"contracts/ARC11550.algo.ts:79","pc":[331,332,333]},{"teal":279,"source":"contracts/ARC11550.algo.ts:79","pc":[334]},{"teal":282,"source":"contracts/ARC11550.algo.ts:79","pc":[335,336,337]},{"teal":283,"source":"contracts/ARC11550.algo.ts:79","pc":[338]},{"teal":284,"source":"contracts/ARC11550.algo.ts:79","pc":[339]},{"teal":285,"source":"contracts/ARC11550.algo.ts:79","pc":[340]},{"teal":286,"source":"contracts/ARC11550.algo.ts:79","pc":[341]},{"teal":287,"source":"contracts/ARC11550.algo.ts:79","pc":[342]},{"teal":291,"source":"contracts/ARC11550.algo.ts:79","pc":[343,344,345]},{"teal":295,"source":"contracts/ARC11550.algo.ts:80","pc":[346]},{"teal":296,"source":"contracts/ARC11550.algo.ts:80","pc":[347,348]},{"teal":297,"source":"contracts/ARC11550.algo.ts:80","pc":[349]},{"teal":298,"source":"contracts/ARC11550.algo.ts:80","pc":[350,351]},{"teal":299,"source":"contracts/ARC11550.algo.ts:80","pc":[352]},{"teal":300,"source":"contracts/ARC11550.algo.ts:80","pc":[353]},{"teal":301,"source":"contracts/ARC11550.algo.ts:80","pc":[354]},{"teal":304,"source":"contracts/ARC11550.algo.ts:80","errorMessage":"box value does not exist: this.balances({ id: id, address: account }).value","pc":[355]},{"teal":305,"source":"contracts/ARC11550.algo.ts:80","pc":[356]},{"teal":306,"source":"contracts/ARC11550.algo.ts:79","pc":[357]},{"teal":311,"source":"contracts/ARC11550.algo.ts:83","pc":[358]},{"teal":314,"source":"contracts/ARC11550.algo.ts:83","pc":[359,360,361]},{"teal":315,"source":"contracts/ARC11550.algo.ts:83","pc":[362]},{"teal":318,"source":"contracts/ARC11550.algo.ts:83","pc":[363,364,365]},{"teal":319,"source":"contracts/ARC11550.algo.ts:83","pc":[366]},{"teal":320,"source":"contracts/ARC11550.algo.ts:83","pc":[367]},{"teal":321,"source":"contracts/ARC11550.algo.ts:83","pc":[368]},{"teal":322,"source":"contracts/ARC11550.algo.ts:83","pc":[369]},{"teal":326,"source":"contracts/ARC11550.algo.ts:83","pc":[370,371,372]},{"teal":330,"source":"contracts/ARC11550.algo.ts:84","pc":[373,374]},{"teal":331,"source":"contracts/ARC11550.algo.ts:84","pc":[375,376]},{"teal":332,"source":"contracts/ARC11550.algo.ts:84","pc":[377]},{"teal":333,"source":"contracts/ARC11550.algo.ts:84","pc":[378]},{"teal":334,"source":"contracts/ARC11550.algo.ts:84","pc":[379]},{"teal":337,"source":"contracts/ARC11550.algo.ts:84","errorMessage":"box value does not exist: this.params(id).value","pc":[380]},{"teal":338,"source":"contracts/ARC11550.algo.ts:83","pc":[381]},{"teal":343,"source":"contracts/ARC11550.algo.ts:87","pc":[382,383,384]},{"teal":344,"source":"contracts/ARC11550.algo.ts:87","pc":[385,386,387]},{"teal":347,"source":"contracts/ARC11550.algo.ts:87","pc":[388,389,390]},{"teal":348,"source":"contracts/ARC11550.algo.ts:87","pc":[391]},{"teal":349,"source":"contracts/ARC11550.algo.ts:87","pc":[392]},{"teal":353,"source":"contracts/ARC11550.algo.ts:87","pc":[393,394,395]},{"teal":356,"source":"contracts/ARC11550.algo.ts:87","pc":[396,397]},{"teal":357,"source":"contracts/ARC11550.algo.ts:87","pc":[398]},{"teal":366,"source":"contracts/ARC11550.algo.ts:89","pc":[399]},{"teal":367,"source":"contracts/ARC11550.algo.ts:89","pc":[400,401]},{"teal":368,"source":"contracts/ARC11550.algo.ts:89","pc":[402,403]},{"teal":369,"source":"contracts/ARC11550.algo.ts:89","pc":[404,405,406,407,408,409]},{"teal":370,"source":"contracts/ARC11550.algo.ts:89","pc":[410,411]},{"teal":374,"source":"contracts/ARC11550.algo.ts:90","pc":[412,413]},{"teal":375,"source":"contracts/ARC11550.algo.ts:90","pc":[414]},{"teal":376,"source":"contracts/ARC11550.algo.ts:90","pc":[415,416]},{"teal":380,"source":"contracts/ARC11550.algo.ts:91","pc":[417,418]},{"teal":381,"source":"contracts/ARC11550.algo.ts:91","pc":[419,420]},{"teal":382,"source":"contracts/ARC11550.algo.ts:91","pc":[421,422]},{"teal":383,"source":"contracts/ARC11550.algo.ts:91","pc":[423]},{"teal":384,"source":"contracts/ARC11550.algo.ts:91","pc":[424]},{"teal":385,"source":"contracts/ARC11550.algo.ts:91","pc":[425]},{"teal":386,"source":"contracts/ARC11550.algo.ts:91","pc":[426]},{"teal":387,"source":"contracts/ARC11550.algo.ts:91","pc":[427]},{"teal":388,"source":"contracts/ARC11550.algo.ts:91","pc":[428,429,430]},{"teal":389,"source":"contracts/ARC11550.algo.ts:91","pc":[431]},{"teal":390,"source":"contracts/ARC11550.algo.ts:91","pc":[432]},{"teal":391,"source":"contracts/ARC11550.algo.ts:91","pc":[433,434]},{"teal":394,"source":"contracts/ARC11550.algo.ts:89","pc":[435]},{"teal":395,"source":"contracts/ARC11550.algo.ts:89","pc":[436,437]},{"teal":398,"source":"contracts/ARC11550.algo.ts:89","pc":[438]},{"teal":399,"source":"contracts/ARC11550.algo.ts:89","pc":[439,440]},{"teal":400,"source":"contracts/ARC11550.algo.ts:89","pc":[441]},{"teal":401,"source":"contracts/ARC11550.algo.ts:89","pc":[442]},{"teal":402,"source":"contracts/ARC11550.algo.ts:89","pc":[443,444]},{"teal":403,"source":"contracts/ARC11550.algo.ts:89","pc":[445,446,447]},{"teal":404,"source":"contracts/ARC11550.algo.ts:89","pc":[448]},{"teal":405,"source":"contracts/ARC11550.algo.ts:89","pc":[449]},{"teal":406,"source":"contracts/ARC11550.algo.ts:88","pc":[450]},{"teal":410,"source":"contracts/ARC11550.algo.ts:95","pc":[451]},{"teal":411,"source":"contracts/ARC11550.algo.ts:95","pc":[452,453]},{"teal":416,"source":"contracts/ARC11550.algo.ts:95","pc":[454,455]},{"teal":417,"source":"contracts/ARC11550.algo.ts:95","pc":[456,457]},{"teal":418,"source":"contracts/ARC11550.algo.ts:95","pc":[458]},{"teal":419,"source":"contracts/ARC11550.algo.ts:95","pc":[459]},{"teal":420,"source":"contracts/ARC11550.algo.ts:95","pc":[460]},{"teal":421,"source":"contracts/ARC11550.algo.ts:95","pc":[461]},{"teal":422,"source":"contracts/ARC11550.algo.ts:95","pc":[462,463,464]},{"teal":423,"source":"contracts/ARC11550.algo.ts:96","pc":[465,466]},{"teal":424,"source":"contracts/ARC11550.algo.ts:96","pc":[467,468]},{"teal":428,"source":"contracts/ARC11550.algo.ts:97","pc":[469]},{"teal":429,"source":"contracts/ARC11550.algo.ts:97","pc":[470,471]},{"teal":430,"source":"contracts/ARC11550.algo.ts:97","pc":[472,473]},{"teal":431,"source":"contracts/ARC11550.algo.ts:97","pc":[474]},{"teal":432,"source":"contracts/ARC11550.algo.ts:97","pc":[475,476]},{"teal":433,"source":"contracts/ARC11550.algo.ts:97","pc":[477]},{"teal":434,"source":"contracts/ARC11550.algo.ts:97","pc":[478]},{"teal":435,"source":"contracts/ARC11550.algo.ts:97","pc":[479]},{"teal":436,"source":"contracts/ARC11550.algo.ts:97","pc":[480]},{"teal":437,"source":"contracts/ARC11550.algo.ts:97","pc":[481]},{"teal":438,"source":"contracts/ARC11550.algo.ts:97","pc":[482,483]},{"teal":439,"source":"contracts/ARC11550.algo.ts:97","pc":[484]},{"teal":440,"source":"contracts/ARC11550.algo.ts:97","pc":[485]},{"teal":441,"source":"contracts/ARC11550.algo.ts:97","pc":[486]},{"teal":442,"source":"contracts/ARC11550.algo.ts:97","pc":[487]},{"teal":443,"source":"contracts/ARC11550.algo.ts:97","pc":[488]},{"teal":444,"source":"contracts/ARC11550.algo.ts:97","pc":[489,490]},{"teal":445,"source":"contracts/ARC11550.algo.ts:97","pc":[491,492]},{"teal":446,"source":"contracts/ARC11550.algo.ts:97","pc":[493]},{"teal":447,"source":"contracts/ARC11550.algo.ts:97","pc":[494,495]},{"teal":448,"source":"contracts/ARC11550.algo.ts:97","pc":[496]},{"teal":449,"source":"contracts/ARC11550.algo.ts:97","pc":[497]},{"teal":450,"source":"contracts/ARC11550.algo.ts:97","pc":[498]},{"teal":451,"source":"contracts/ARC11550.algo.ts:97","pc":[499]},{"teal":452,"source":"contracts/ARC11550.algo.ts:97","pc":[500]},{"teal":453,"source":"contracts/ARC11550.algo.ts:97","pc":[501,502]},{"teal":454,"source":"contracts/ARC11550.algo.ts:97","pc":[503]},{"teal":455,"source":"contracts/ARC11550.algo.ts:97","pc":[504,505]},{"teal":456,"source":"contracts/ARC11550.algo.ts:97","pc":[506]},{"teal":457,"source":"contracts/ARC11550.algo.ts:97","pc":[507]},{"teal":458,"source":"contracts/ARC11550.algo.ts:97","pc":[508]},{"teal":459,"source":"contracts/ARC11550.algo.ts:97","pc":[509]},{"teal":462,"source":"contracts/ARC11550.algo.ts:97","errorMessage":"box value does not exist: this.balances({ id: t.id, address: t.from }).value","pc":[510]},{"teal":463,"source":"contracts/ARC11550.algo.ts:97","pc":[511]},{"teal":464,"source":"contracts/ARC11550.algo.ts:97","pc":[512,513]},{"teal":465,"source":"contracts/ARC11550.algo.ts:97","pc":[514,515]},{"teal":466,"source":"contracts/ARC11550.algo.ts:97","pc":[516]},{"teal":467,"source":"contracts/ARC11550.algo.ts:97","pc":[517,518]},{"teal":468,"source":"contracts/ARC11550.algo.ts:97","pc":[519]},{"teal":469,"source":"contracts/ARC11550.algo.ts:97","pc":[520]},{"teal":470,"source":"contracts/ARC11550.algo.ts:97","pc":[521]},{"teal":471,"source":"contracts/ARC11550.algo.ts:97","pc":[522,523]},{"teal":472,"source":"contracts/ARC11550.algo.ts:97","pc":[524]},{"teal":473,"source":"contracts/ARC11550.algo.ts:97","pc":[525,526]},{"teal":474,"source":"contracts/ARC11550.algo.ts:97","pc":[527]},{"teal":475,"source":"contracts/ARC11550.algo.ts:97","pc":[528]},{"teal":476,"source":"contracts/ARC11550.algo.ts:97","pc":[529]},{"teal":477,"source":"contracts/ARC11550.algo.ts:97","pc":[530]},{"teal":478,"source":"contracts/ARC11550.algo.ts:97","pc":[531]},{"teal":479,"source":"contracts/ARC11550.algo.ts:97","pc":[532]},{"teal":480,"source":"contracts/ARC11550.algo.ts:97","pc":[533,534]},{"teal":481,"source":"contracts/ARC11550.algo.ts:97","pc":[535,536]},{"teal":482,"source":"contracts/ARC11550.algo.ts:97","pc":[537]},{"teal":483,"source":"contracts/ARC11550.algo.ts:97","pc":[538,539]},{"teal":484,"source":"contracts/ARC11550.algo.ts:97","pc":[540]},{"teal":485,"source":"contracts/ARC11550.algo.ts:97","pc":[541]},{"teal":486,"source":"contracts/ARC11550.algo.ts:97","pc":[542]},{"teal":487,"source":"contracts/ARC11550.algo.ts:97","pc":[543]},{"teal":488,"source":"contracts/ARC11550.algo.ts:97","pc":[544]},{"teal":489,"source":"contracts/ARC11550.algo.ts:97","pc":[545,546]},{"teal":490,"source":"contracts/ARC11550.algo.ts:97","pc":[547]},{"teal":491,"source":"contracts/ARC11550.algo.ts:97","pc":[548]},{"teal":492,"source":"contracts/ARC11550.algo.ts:97","pc":[549]},{"teal":493,"source":"contracts/ARC11550.algo.ts:97","pc":[550]},{"teal":494,"source":"contracts/ARC11550.algo.ts:97","pc":[551]},{"teal":495,"source":"contracts/ARC11550.algo.ts:97","pc":[552,553]},{"teal":496,"source":"contracts/ARC11550.algo.ts:97","pc":[554,555]},{"teal":497,"source":"contracts/ARC11550.algo.ts:97","pc":[556]},{"teal":498,"source":"contracts/ARC11550.algo.ts:97","pc":[557,558]},{"teal":499,"source":"contracts/ARC11550.algo.ts:97","pc":[559]},{"teal":500,"source":"contracts/ARC11550.algo.ts:97","pc":[560]},{"teal":501,"source":"contracts/ARC11550.algo.ts:97","pc":[561]},{"teal":502,"source":"contracts/ARC11550.algo.ts:97","pc":[562]},{"teal":503,"source":"contracts/ARC11550.algo.ts:97","pc":[563]},{"teal":504,"source":"contracts/ARC11550.algo.ts:97","pc":[564,565]},{"teal":505,"source":"contracts/ARC11550.algo.ts:97","pc":[566]},{"teal":506,"source":"contracts/ARC11550.algo.ts:97","pc":[567,568]},{"teal":507,"source":"contracts/ARC11550.algo.ts:97","pc":[569]},{"teal":508,"source":"contracts/ARC11550.algo.ts:97","pc":[570]},{"teal":509,"source":"contracts/ARC11550.algo.ts:97","pc":[571]},{"teal":510,"source":"contracts/ARC11550.algo.ts:97","pc":[572]},{"teal":511,"source":"contracts/ARC11550.algo.ts:97","pc":[573]},{"teal":512,"source":"contracts/ARC11550.algo.ts:97","pc":[574]},{"teal":516,"source":"contracts/ARC11550.algo.ts:98","pc":[575]},{"teal":517,"source":"contracts/ARC11550.algo.ts:98","pc":[576,577]},{"teal":518,"source":"contracts/ARC11550.algo.ts:98","pc":[578,579]},{"teal":519,"source":"contracts/ARC11550.algo.ts:98","pc":[580]},{"teal":520,"source":"contracts/ARC11550.algo.ts:98","pc":[581,582]},{"teal":521,"source":"contracts/ARC11550.algo.ts:98","pc":[583]},{"teal":522,"source":"contracts/ARC11550.algo.ts:98","pc":[584]},{"teal":523,"source":"contracts/ARC11550.algo.ts:98","pc":[585]},{"teal":524,"source":"contracts/ARC11550.algo.ts:98","pc":[586]},{"teal":525,"source":"contracts/ARC11550.algo.ts:98","pc":[587]},{"teal":526,"source":"contracts/ARC11550.algo.ts:98","pc":[588,589]},{"teal":527,"source":"contracts/ARC11550.algo.ts:98","pc":[590]},{"teal":528,"source":"contracts/ARC11550.algo.ts:98","pc":[591]},{"teal":529,"source":"contracts/ARC11550.algo.ts:98","pc":[592]},{"teal":530,"source":"contracts/ARC11550.algo.ts:98","pc":[593]},{"teal":531,"source":"contracts/ARC11550.algo.ts:98","pc":[594]},{"teal":532,"source":"contracts/ARC11550.algo.ts:98","pc":[595,596]},{"teal":533,"source":"contracts/ARC11550.algo.ts:98","pc":[597,598]},{"teal":534,"source":"contracts/ARC11550.algo.ts:98","pc":[599]},{"teal":535,"source":"contracts/ARC11550.algo.ts:98","pc":[600,601]},{"teal":536,"source":"contracts/ARC11550.algo.ts:98","pc":[602]},{"teal":537,"source":"contracts/ARC11550.algo.ts:98","pc":[603]},{"teal":538,"source":"contracts/ARC11550.algo.ts:98","pc":[604]},{"teal":539,"source":"contracts/ARC11550.algo.ts:98","pc":[605,606]},{"teal":540,"source":"contracts/ARC11550.algo.ts:98","pc":[607]},{"teal":541,"source":"contracts/ARC11550.algo.ts:98","pc":[608,609]},{"teal":542,"source":"contracts/ARC11550.algo.ts:98","pc":[610]},{"teal":543,"source":"contracts/ARC11550.algo.ts:98","pc":[611,612]},{"teal":544,"source":"contracts/ARC11550.algo.ts:98","pc":[613]},{"teal":545,"source":"contracts/ARC11550.algo.ts:98","pc":[614]},{"teal":546,"source":"contracts/ARC11550.algo.ts:98","pc":[615]},{"teal":547,"source":"contracts/ARC11550.algo.ts:98","pc":[616]},{"teal":550,"source":"contracts/ARC11550.algo.ts:98","errorMessage":"box value does not exist: this.balances({ id: t.id, address: t.to }).value","pc":[617]},{"teal":551,"source":"contracts/ARC11550.algo.ts:98","pc":[618]},{"teal":552,"source":"contracts/ARC11550.algo.ts:98","pc":[619,620]},{"teal":553,"source":"contracts/ARC11550.algo.ts:98","pc":[621,622]},{"teal":554,"source":"contracts/ARC11550.algo.ts:98","pc":[623]},{"teal":555,"source":"contracts/ARC11550.algo.ts:98","pc":[624,625]},{"teal":556,"source":"contracts/ARC11550.algo.ts:98","pc":[626]},{"teal":557,"source":"contracts/ARC11550.algo.ts:98","pc":[627]},{"teal":558,"source":"contracts/ARC11550.algo.ts:98","pc":[628]},{"teal":559,"source":"contracts/ARC11550.algo.ts:98","pc":[629,630]},{"teal":560,"source":"contracts/ARC11550.algo.ts:98","pc":[631]},{"teal":561,"source":"contracts/ARC11550.algo.ts:98","pc":[632,633]},{"teal":562,"source":"contracts/ARC11550.algo.ts:98","pc":[634]},{"teal":563,"source":"contracts/ARC11550.algo.ts:98","pc":[635]},{"teal":564,"source":"contracts/ARC11550.algo.ts:98","pc":[636]},{"teal":565,"source":"contracts/ARC11550.algo.ts:98","pc":[637]},{"teal":566,"source":"contracts/ARC11550.algo.ts:98","pc":[638]},{"teal":567,"source":"contracts/ARC11550.algo.ts:98","pc":[639]},{"teal":568,"source":"contracts/ARC11550.algo.ts:98","pc":[640,641]},{"teal":569,"source":"contracts/ARC11550.algo.ts:98","pc":[642,643]},{"teal":570,"source":"contracts/ARC11550.algo.ts:98","pc":[644]},{"teal":571,"source":"contracts/ARC11550.algo.ts:98","pc":[645,646]},{"teal":572,"source":"contracts/ARC11550.algo.ts:98","pc":[647]},{"teal":573,"source":"contracts/ARC11550.algo.ts:98","pc":[648]},{"teal":574,"source":"contracts/ARC11550.algo.ts:98","pc":[649]},{"teal":575,"source":"contracts/ARC11550.algo.ts:98","pc":[650]},{"teal":576,"source":"contracts/ARC11550.algo.ts:98","pc":[651]},{"teal":577,"source":"contracts/ARC11550.algo.ts:98","pc":[652,653]},{"teal":578,"source":"contracts/ARC11550.algo.ts:98","pc":[654]},{"teal":579,"source":"contracts/ARC11550.algo.ts:98","pc":[655]},{"teal":580,"source":"contracts/ARC11550.algo.ts:98","pc":[656]},{"teal":581,"source":"contracts/ARC11550.algo.ts:98","pc":[657]},{"teal":582,"source":"contracts/ARC11550.algo.ts:98","pc":[658]},{"teal":583,"source":"contracts/ARC11550.algo.ts:98","pc":[659,660]},{"teal":584,"source":"contracts/ARC11550.algo.ts:98","pc":[661,662]},{"teal":585,"source":"contracts/ARC11550.algo.ts:98","pc":[663]},{"teal":586,"source":"contracts/ARC11550.algo.ts:98","pc":[664,665]},{"teal":587,"source":"contracts/ARC11550.algo.ts:98","pc":[666]},{"teal":588,"source":"contracts/ARC11550.algo.ts:98","pc":[667]},{"teal":589,"source":"contracts/ARC11550.algo.ts:98","pc":[668]},{"teal":590,"source":"contracts/ARC11550.algo.ts:98","pc":[669,670]},{"teal":591,"source":"contracts/ARC11550.algo.ts:98","pc":[671]},{"teal":592,"source":"contracts/ARC11550.algo.ts:98","pc":[672,673]},{"teal":593,"source":"contracts/ARC11550.algo.ts:98","pc":[674]},{"teal":594,"source":"contracts/ARC11550.algo.ts:98","pc":[675,676]},{"teal":595,"source":"contracts/ARC11550.algo.ts:98","pc":[677]},{"teal":596,"source":"contracts/ARC11550.algo.ts:98","pc":[678]},{"teal":597,"source":"contracts/ARC11550.algo.ts:98","pc":[679]},{"teal":598,"source":"contracts/ARC11550.algo.ts:98","pc":[680]},{"teal":599,"source":"contracts/ARC11550.algo.ts:98","pc":[681]},{"teal":600,"source":"contracts/ARC11550.algo.ts:98","pc":[682]},{"teal":605,"source":"contracts/ARC11550.algo.ts:95","pc":[683,684]},{"teal":606,"source":"contracts/ARC11550.algo.ts:95","pc":[685]},{"teal":607,"source":"contracts/ARC11550.algo.ts:95","pc":[686]},{"teal":608,"source":"contracts/ARC11550.algo.ts:95","pc":[687,688]},{"teal":609,"source":"contracts/ARC11550.algo.ts:95","pc":[689,690,691]},{"teal":612,"source":"contracts/ARC11550.algo.ts:87","pc":[692]},{"teal":615,"source":"contracts/ARC11550.algo.ts:35","pc":[693,694,695,696,697,698]},{"teal":616,"source":"contracts/ARC11550.algo.ts:35","pc":[699,700,701]},{"teal":617,"source":"contracts/ARC11550.algo.ts:35","pc":[702,703,704,705]},{"teal":620,"source":"contracts/ARC11550.algo.ts:35","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[706]},{"teal":623,"source":"contracts/ARC11550.algo.ts:35","pc":[707,708,709,710,711,712]},{"teal":624,"source":"contracts/ARC11550.algo.ts:35","pc":[713,714,715,716,717,718]},{"teal":625,"source":"contracts/ARC11550.algo.ts:35","pc":[719,720,721,722,723,724]},{"teal":626,"source":"contracts/ARC11550.algo.ts:35","pc":[725,726,727,728,729,730]},{"teal":627,"source":"contracts/ARC11550.algo.ts:35","pc":[731,732,733,734,735,736]},{"teal":628,"source":"contracts/ARC11550.algo.ts:35","pc":[737,738,739,740,741,742]},{"teal":629,"source":"contracts/ARC11550.algo.ts:35","pc":[743,744,745]},{"teal":630,"source":"contracts/ARC11550.algo.ts:35","pc":[746,747,748,749,750,751,752,753,754,755,756,757,758,759]},{"teal":633,"source":"contracts/ARC11550.algo.ts:35","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[760]},{"teal":636,"source":"contracts/ARC11550.algo.ts:35","pc":[761,762]},{"teal":637,"source":"contracts/ARC11550.algo.ts:35","pc":[763]},{"teal":638,"source":"contracts/ARC11550.algo.ts:35","pc":[764,765]},{"teal":639,"source":"contracts/ARC11550.algo.ts:35","pc":[766]},{"teal":640,"source":"contracts/ARC11550.algo.ts:35","pc":[767,768,769]},{"teal":641,"source":"contracts/ARC11550.algo.ts:35","pc":[770,771]},{"teal":642,"source":"contracts/ARC11550.algo.ts:35","pc":[772]},{"teal":643,"source":"contracts/ARC11550.algo.ts:35","pc":[773,774]},{"teal":644,"source":"contracts/ARC11550.algo.ts:35","pc":[775]},{"teal":645,"source":"contracts/ARC11550.algo.ts:35","pc":[776,777]},{"teal":646,"source":"contracts/ARC11550.algo.ts:35","pc":[778,779,780]},{"teal":649,"source":"contracts/ARC11550.algo.ts:35","pc":[781,782]},{"teal":650,"source":"contracts/ARC11550.algo.ts:35","pc":[783,784]},{"teal":651,"source":"contracts/ARC11550.algo.ts:35","pc":[785]},{"teal":652,"source":"contracts/ARC11550.algo.ts:35","pc":[786]},{"teal":653,"source":"contracts/ARC11550.algo.ts:35","pc":[787,788]},{"teal":656,"source":"contracts/ARC11550.algo.ts:35","pc":[789]},{"teal":657,"source":"contracts/ARC11550.algo.ts:35","pc":[790,791]},{"teal":658,"source":"contracts/ARC11550.algo.ts:35","pc":[792]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAIAAFQCCAGKEgmBwFtAWIGbmV4dElkBBUffHUBcA90cmFuc2Zlckhvb2tBcHAAMRgUIQULMRkIjQwCcAAAAAAAAAAAAAACYgAAAAAAAAAAAAAANhoBF4gAAiNDigEAJwWL/2cqImeJNhoBSRWBVBJEiAACI0OKAQAxAIAGbWludGVyZBJEJwQqZBZQi/+/KmQjCCpMZ4krNhoBiAAEULAjQ4oBASiL/1C+RIk2GgJXAgA2GgGIAAIjQ4oCADEAgTQhBCcEi/81/zT/VwAIFxZQTgK6EkQoi/9QvUxIQQANKIv/UL5ENf80/yJTRCiL/1C+RDX/I0k1+zT/NP9PAllJNf5JNP9MWSMLgQIINf00/yI0/lKL/kkVFlcGAkxQSTX8NP80/jT9CDT/FVJQUDX/iAHENP8oi/9QSbxITL+JKzYaAkkVIQQSRDYaAReIAAUWULAjQ4oCASmL/xaL/lBQvkQXiSs2GgEXiAAEULAjQ4oBAScEi/8WUL5EiTYaAVcCAIgAAiNDigEAJwZJsSEFshCABLTBenuyGicFZLIYMQCyGov/SRUkChZXBgJMULIaIrIBs7Q7IwnFOlcEACJTRCKMAIsAi/8VJAoMQQDjiwCMASmL/zX/IosBJAsIIgg0/0wlWBcWi/81/yKLASQLCCUINP9MIQRYUFC+RBeL/zX/IosBJAsIIQcINP9MJVgXCSmL/zX/IosBJAsIIgg0/0wlWBcWi/81/yKLASQLCCUINP9MIQRYUFBMFr8pi/81/yKLASQLCCIINP9MJVgXFov/Nf8iiwEkCwghBgg0/0whBFhQUL5EF4v/Nf8iiwEkCwghBwg0/0wlWBcIKYv/Nf8iiwEkCwgiCDT/TCVYFxaL/zX/IosBJAsIIQYINP9MIQRYUFBMFr+LACMIjABC/xKJgASXO2FvNhoAjgH9kgCABMaBt3yABDrCMlSABLu53meABNBKy8KABEfQI3eABEXwIqU2GgCOBv1x/aD9tf5J/m7+hgA0/BU0/QxAAAs0/BU0/SM1+UIACDT9NPwVIjX5CTX6iQ==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Params = {
  name: Uint8Array,
  symbol: Uint8Array,
  total: bigint,
  decmimals: number,
  manager: string
}


/**
 * Converts the ABI tuple representation of a Params to the struct representation
 */
export function ParamsFromTuple(abiTuple: [Uint8Array, Uint8Array, bigint, number, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Params, APP_SPEC.structs) as Params
}

export type IdAndAddress = {
  id: bigint,
  address: string
}


/**
 * Converts the ABI tuple representation of a IdAndAddress to the struct representation
 */
export function IdAndAddressFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.IdAndAddress, APP_SPEC.structs) as IdAndAddress
}

export type Metadata = {
  mutable: boolean,
  data: Uint8Array
}


/**
 * Converts the ABI tuple representation of a Metadata to the struct representation
 */
export function MetadataFromTuple(abiTuple: [boolean, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Metadata, APP_SPEC.structs) as Metadata
}

export type MetadataKey = {
  id: bigint,
  key: string
}


/**
 * Converts the ABI tuple representation of a MetadataKey to the struct representation
 */
export function MetadataKeyFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.MetadataKey, APP_SPEC.structs) as MetadataKey
}

/**
 * The argument types for the Arc11550 contract
 */
export type Arc11550Args = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(uint64)void': {
      app: bigint | number
    }
    'arc1150_mint((byte[32],byte[8],uint64,uint32,address))void': {
      params: Params
    }
    'arc11550_metadata((uint64,string))(bool,byte[])': {
      key: MetadataKey
    }
    'arc11550_setMetadata((uint64,string),byte[])void': {
      key: MetadataKey
      data: Uint8Array
    }
    'arc11550_balanceOf(uint64,address)uint64': {
      id: bigint | number
      account: string
    }
    'arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)': {
      id: bigint | number
    }
    'arc11550_transfer((uint64,address,address,uint64)[])void': {
      transfers: [bigint | number, string, string, bigint | number][]
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(uint64)void': [app: bigint | number]
    'arc1150_mint((byte[32],byte[8],uint64,uint32,address))void': [params: Params]
    'arc11550_metadata((uint64,string))(bool,byte[])': [key: MetadataKey]
    'arc11550_setMetadata((uint64,string),byte[])void': [key: MetadataKey, data: Uint8Array]
    'arc11550_balanceOf(uint64,address)uint64': [id: bigint | number, account: string]
    'arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)': [id: bigint | number]
    'arc11550_transfer((uint64,address,address,uint64)[])void': [transfers: [bigint | number, string, string, bigint | number][]]
  }
}

/**
 * The return type for each method
 */
export type Arc11550Returns = {
  'createApplication(uint64)void': void
  'arc1150_mint((byte[32],byte[8],uint64,uint32,address))void': void
  'arc11550_metadata((uint64,string))(bool,byte[])': Metadata
  'arc11550_setMetadata((uint64,string),byte[])void': void
  'arc11550_balanceOf(uint64,address)uint64': bigint
  'arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)': Params
  'arc11550_transfer((uint64,address,address,uint64)[])void': void
}

/**
 * Defines the types of available calls and state of the Arc11550 smart contract.
 */
export type Arc11550Types = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64)void' | 'createApplication', {
      argsObj: Arc11550Args['obj']['createApplication(uint64)void']
      argsTuple: Arc11550Args['tuple']['createApplication(uint64)void']
      returns: Arc11550Returns['createApplication(uint64)void']
    }>
    & Record<'arc1150_mint((byte[32],byte[8],uint64,uint32,address))void' | 'arc1150_mint', {
      argsObj: Arc11550Args['obj']['arc1150_mint((byte[32],byte[8],uint64,uint32,address))void']
      argsTuple: Arc11550Args['tuple']['arc1150_mint((byte[32],byte[8],uint64,uint32,address))void']
      returns: Arc11550Returns['arc1150_mint((byte[32],byte[8],uint64,uint32,address))void']
    }>
    & Record<'arc11550_metadata((uint64,string))(bool,byte[])' | 'arc11550_metadata', {
      argsObj: Arc11550Args['obj']['arc11550_metadata((uint64,string))(bool,byte[])']
      argsTuple: Arc11550Args['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']
      returns: Arc11550Returns['arc11550_metadata((uint64,string))(bool,byte[])']
    }>
    & Record<'arc11550_setMetadata((uint64,string),byte[])void' | 'arc11550_setMetadata', {
      argsObj: Arc11550Args['obj']['arc11550_setMetadata((uint64,string),byte[])void']
      argsTuple: Arc11550Args['tuple']['arc11550_setMetadata((uint64,string),byte[])void']
      returns: Arc11550Returns['arc11550_setMetadata((uint64,string),byte[])void']
    }>
    & Record<'arc11550_balanceOf(uint64,address)uint64' | 'arc11550_balanceOf', {
      argsObj: Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64']
      argsTuple: Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']
      returns: Arc11550Returns['arc11550_balanceOf(uint64,address)uint64']
    }>
    & Record<'arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)' | 'arc11550_params', {
      argsObj: Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)']
      argsTuple: Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)']
      returns: Arc11550Returns['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)']
    }>
    & Record<'arc11550_transfer((uint64,address,address,uint64)[])void' | 'arc11550_transfer', {
      argsObj: Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void']
      argsTuple: Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']
      returns: Arc11550Returns['arc11550_transfer((uint64,address,address,uint64)[])void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        nextId: bigint
        transferHookApp: bigint
        minter: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        params: Map<bigint | number, Params>
        balances: Map<IdAndAddress, bigint>
        metadata: Map<MetadataKey, Metadata>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Arc11550Signatures = keyof Arc11550Types['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Arc11550NonVoidMethodSignatures = keyof Arc11550Types['methods'] extends infer T ? T extends keyof Arc11550Types['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Arc11550 smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Arc11550Signatures> = Arc11550Types['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc11550 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc11550Signatures> = Arc11550Types['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = Arc11550Types['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = Arc11550Types['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Arc11550CreateCallParams =
  | Expand<CallParams<Arc11550Args['obj']['createApplication(uint64)void'] | Arc11550Args['tuple']['createApplication(uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<Arc11550Args['obj']['createApplication(uint64)void'] | Arc11550Args['tuple']['createApplication(uint64)void']> & {method: 'createApplication(uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Arc11550DeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Arc11550CreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc11550 smart contract
 */
export abstract class Arc11550ParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends Arc11550CreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(uint64)void':
            return Arc11550ParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ARC11550 smart contract using the createApplication(uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<Arc11550Args['obj']['createApplication(uint64)void'] | Arc11550Args['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.app],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the arc1150_mint((byte[32],byte[8],uint64,uint32,address))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc1150Mint(params: CallParams<Arc11550Args['obj']['arc1150_mint((byte[32],byte[8],uint64,uint32,address))void'] | Arc11550Args['tuple']['arc1150_mint((byte[32],byte[8],uint64,uint32,address))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc1150_mint((byte[32],byte[8],uint64,uint32,address))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.params],
    }
  }
  /**
   * Constructs a no op call for the arc11550_metadata((uint64,string))(bool,byte[]) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Metadata(params: CallParams<Arc11550Args['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550Args['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_metadata((uint64,string))(bool,byte[])' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
  /**
   * Constructs a no op call for the arc11550_setMetadata((uint64,string),byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550SetMetadata(params: CallParams<Arc11550Args['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550Args['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_setMetadata((uint64,string),byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc11550_balanceOf(uint64,address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550BalanceOf(params: CallParams<Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_balanceOf(uint64,address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id, params.args.account],
    }
  }
  /**
   * Constructs a no op call for the arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Params(params: CallParams<Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)'] | Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id],
    }
  }
  /**
   * Constructs a no op call for the arc11550_transfer((uint64,address,address,uint64)[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Transfer(params: CallParams<Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void'] | Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_transfer((uint64,address,address,uint64)[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.transfers],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ARC11550 smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Arc11550Factory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Arc11550Factory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Arc11550Client(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Arc11550Client(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ARC11550 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Arc11550DeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? Arc11550ParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (Arc11550CreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new Arc11550Client(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550 smart contract using the createApplication(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<Arc11550Args['obj']['createApplication(uint64)void'] | Arc11550Args['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(Arc11550ParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550 smart contract using the createApplication(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<Arc11550Args['obj']['createApplication(uint64)void'] | Arc11550Args['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(Arc11550ParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550 smart contract using an ABI method call using the createApplication(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<Arc11550Args['obj']['createApplication(uint64)void'] | Arc11550Args['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(Arc11550ParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | Arc11550Returns['createApplication(uint64)void']) }, appClient: new Arc11550Client(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ARC11550 smart contract
 */
export class Arc11550Client {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Arc11550Client`
   *
   * @param appClient An `AppClient` instance which has been created with the Arc11550 app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Arc11550Client`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Arc11550NonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Arc11550Client` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Arc11550Client> {
    return new Arc11550Client(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Arc11550Client` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Arc11550Client> {
    return new Arc11550Client(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc1150_mint((byte[32],byte[8],uint64,uint32,address))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc1150Mint: (params: CallParams<Arc11550Args['obj']['arc1150_mint((byte[32],byte[8],uint64,uint32,address))void'] | Arc11550Args['tuple']['arc1150_mint((byte[32],byte[8],uint64,uint32,address))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc1150Mint(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_metadata((uint64,string))(bool,byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Metadata: (params: CallParams<Arc11550Args['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550Args['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550Metadata(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_setMetadata((uint64,string),byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550SetMetadata: (params: CallParams<Arc11550Args['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550Args['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550SetMetadata(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_balanceOf(uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550BalanceOf: (params: CallParams<Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550BalanceOf(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Params: (params: CallParams<Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)'] | Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550Params(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_transfer((uint64,address,address,uint64)[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Transfer: (params: CallParams<Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void'] | Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550Transfer(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc1150_mint((byte[32],byte[8],uint64,uint32,address))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc1150Mint: (params: CallParams<Arc11550Args['obj']['arc1150_mint((byte[32],byte[8],uint64,uint32,address))void'] | Arc11550Args['tuple']['arc1150_mint((byte[32],byte[8],uint64,uint32,address))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc1150Mint(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_metadata((uint64,string))(bool,byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Metadata: (params: CallParams<Arc11550Args['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550Args['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550Metadata(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_setMetadata((uint64,string),byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550SetMetadata: (params: CallParams<Arc11550Args['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550Args['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550SetMetadata(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_balanceOf(uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550BalanceOf: (params: CallParams<Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550BalanceOf(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Params: (params: CallParams<Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)'] | Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550Params(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_transfer((uint64,address,address,uint64)[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Transfer: (params: CallParams<Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void'] | Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550Transfer(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc1150_mint((byte[32],byte[8],uint64,uint32,address))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc1150Mint: async (params: CallParams<Arc11550Args['obj']['arc1150_mint((byte[32],byte[8],uint64,uint32,address))void'] | Arc11550Args['tuple']['arc1150_mint((byte[32],byte[8],uint64,uint32,address))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc1150Mint(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc1150_mint((byte[32],byte[8],uint64,uint32,address))void'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_metadata((uint64,string))(bool,byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Metadata: async (params: CallParams<Arc11550Args['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550Args['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550Metadata(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_metadata((uint64,string))(bool,byte[])'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_setMetadata((uint64,string),byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550SetMetadata: async (params: CallParams<Arc11550Args['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550Args['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550SetMetadata(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_setMetadata((uint64,string),byte[])void'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_balanceOf(uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550BalanceOf: async (params: CallParams<Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550BalanceOf(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_balanceOf(uint64,address)uint64'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Params: async (params: CallParams<Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)'] | Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550Params(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_transfer((uint64,address,address,uint64)[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Transfer: async (params: CallParams<Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void'] | Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550Transfer(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_transfer((uint64,address,address,uint64)[])void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Arc11550Client(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ARC11550 app
   */
  state = {
    /**
     * Methods to access global state for the current ARC11550 app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          nextId: result.nextId,
          transferHookApp: result.transferHookApp,
          minter: result.minter,
        }
      },
      /**
       * Get the current value of the nextId key in global state
       */
      nextId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("nextId")) as bigint | undefined },
      /**
       * Get the current value of the transferHookApp key in global state
       */
      transferHookApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("transferHookApp")) as bigint | undefined },
      /**
       * Get the current value of the minter key in global state
       */
      minter: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("minter")) as string | undefined },
    },
    /**
     * Methods to access box state for the current ARC11550 app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the params map in box state
       */
      params: {
        /**
         * Get all current values of the params map in box state
         */
        getMap: async (): Promise<Map<bigint, Params>> => { return (await this.appClient.state.box.getMap("params")) as Map<bigint, Params> },
        /**
         * Get a current value of the params map by key from box state
         */
        value: async (key: bigint | number): Promise<Params | undefined> => { return await this.appClient.state.box.getMapValue("params", key) as Params | undefined },
      },
      /**
       * Get values from the balances map in box state
       */
      balances: {
        /**
         * Get all current values of the balances map in box state
         */
        getMap: async (): Promise<Map<IdAndAddress, bigint>> => { return (await this.appClient.state.box.getMap("balances")) as Map<IdAndAddress, bigint> },
        /**
         * Get a current value of the balances map by key from box state
         */
        value: async (key: IdAndAddress): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("balances", key) as bigint | undefined },
      },
      /**
       * Get values from the metadata map in box state
       */
      metadata: {
        /**
         * Get all current values of the metadata map in box state
         */
        getMap: async (): Promise<Map<MetadataKey, Metadata>> => { return (await this.appClient.state.box.getMap("metadata")) as Map<MetadataKey, Metadata> },
        /**
         * Get a current value of the metadata map by key from box state
         */
        value: async (key: MetadataKey): Promise<Metadata | undefined> => { return await this.appClient.state.box.getMapValue("metadata", key) as Metadata | undefined },
      },
    },
  }

  public newGroup(): Arc11550Composer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a arc1150_mint((byte[32],byte[8],uint64,uint32,address))void method call against the ARC11550 contract
       */
      arc1150Mint(params: CallParams<Arc11550Args['obj']['arc1150_mint((byte[32],byte[8],uint64,uint32,address))void'] | Arc11550Args['tuple']['arc1150_mint((byte[32],byte[8],uint64,uint32,address))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc1150Mint(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc11550_metadata((uint64,string))(bool,byte[]) method call against the ARC11550 contract
       */
      arc11550Metadata(params: CallParams<Arc11550Args['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550Args['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Metadata(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_metadata((uint64,string))(bool,byte[])', v))
        return this
      },
      /**
       * Add a arc11550_setMetadata((uint64,string),byte[])void method call against the ARC11550 contract
       */
      arc11550SetMetadata(params: CallParams<Arc11550Args['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550Args['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550SetMetadata(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc11550_balanceOf(uint64,address)uint64 method call against the ARC11550 contract
       */
      arc11550BalanceOf(params: CallParams<Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550BalanceOf(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_balanceOf(uint64,address)uint64', v))
        return this
      },
      /**
       * Add a arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address) method call against the ARC11550 contract
       */
      arc11550Params(params: CallParams<Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)'] | Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Params(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)', v))
        return this
      },
      /**
       * Add a arc11550_transfer((uint64,address,address,uint64)[])void method call against the ARC11550 contract
       */
      arc11550Transfer(params: CallParams<Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void'] | Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Transfer(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the ARC11550 contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Arc11550Composer
  }
}
export type Arc11550Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc1150_mint((byte[32],byte[8],uint64,uint32,address))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc1150Mint(params?: CallParams<Arc11550Args['obj']['arc1150_mint((byte[32],byte[8],uint64,uint32,address))void'] | Arc11550Args['tuple']['arc1150_mint((byte[32],byte[8],uint64,uint32,address))void']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc1150_mint((byte[32],byte[8],uint64,uint32,address))void'] | undefined]>

  /**
   * Calls the arc11550_metadata((uint64,string))(bool,byte[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Metadata(params?: CallParams<Arc11550Args['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550Args['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_metadata((uint64,string))(bool,byte[])'] | undefined]>

  /**
   * Calls the arc11550_setMetadata((uint64,string),byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550SetMetadata(params?: CallParams<Arc11550Args['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550Args['tuple']['arc11550_setMetadata((uint64,string),byte[])void']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_setMetadata((uint64,string),byte[])void'] | undefined]>

  /**
   * Calls the arc11550_balanceOf(uint64,address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550BalanceOf(params?: CallParams<Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_balanceOf(uint64,address)uint64'] | undefined]>

  /**
   * Calls the arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Params(params?: CallParams<Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)'] | Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_params(uint64)(byte[32],byte[8],uint64,uint32,address)'] | undefined]>

  /**
   * Calls the arc11550_transfer((uint64,address,address,uint64)[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Transfer(params?: CallParams<Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void'] | Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_transfer((uint64,address,address,uint64)[])void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ARC11550 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Arc11550Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc11550Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc11550ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Arc11550ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Arc11550ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Arc11550ComposerResults<TReturns>>
}
export type Arc11550ComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


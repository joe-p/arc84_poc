/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ARC11550","desc":"","methods":[{"name":"createApplication","args":[{"name":"app","type":"uint64"},{"name":"mintCap","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"arc11550_mint","args":[{"name":"params","type":"(byte[32],byte[8],uint64,uint64,address)","struct":"Params"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_multiMint","args":[{"name":"params","type":"(byte[32],byte[8],uint64,uint64,address)[]"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_minted","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_metadata","args":[{"name":"key","type":"(uint64,string)","struct":"MetadataKey"}],"returns":{"type":"(bool,byte[])","struct":"Metadata"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_setMetadata","args":[{"name":"key","type":"(uint64,string)","struct":"MetadataKey"},{"name":"data","type":"byte[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_balanceOf","args":[{"name":"id","type":"uint64"},{"name":"account","type":"address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_balancesOf","args":[{"name":"idAndAddrs","type":"(uint64,address)[]"}],"returns":{"type":"uint64[]"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_params","args":[{"name":"id","type":"uint64"}],"returns":{"type":"(byte[32],byte[8],uint64,uint64,address)","struct":"Params"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_mulitpleParams","args":[{"name":"ids","type":"uint64[]"}],"returns":{"type":"(byte[32],byte[8],uint64,uint64,address)[]"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550_transfer","args":[{"name":"transfers","type":"(uint64,address,address,uint64)[]"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"Params":[{"name":"name","type":"byte[32]"},{"name":"symbol","type":"byte[8]"},{"name":"total","type":"uint64"},{"name":"decimals","type":"uint64"},{"name":"manager","type":"address"}],"IdAndAddress":[{"name":"id","type":"uint64"},{"name":"address","type":"address"}],"Metadata":[{"name":"mutable","type":"bool"},{"name":"data","type":"byte[]"}],"MetadataKey":[{"name":"id","type":"uint64"},{"name":"key","type":"string"}]},"state":{"schema":{"global":{"bytes":1,"ints":3},"local":{"bytes":0,"ints":0}},"keys":{"global":{"minted":{"key":"bWludGVk","keyType":"AVMBytes","valueType":"uint64"},"transferHookApp":{"key":"dHJhbnNmZXJIb29rQXBw","keyType":"AVMBytes","valueType":"uint64"},"mintCap":{"key":"bWludENhcA==","keyType":"AVMBytes","valueType":"uint64"},"minter":{"key":"bWludGVy","keyType":"AVMBytes","valueType":"address"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"params":{"keyType":"uint64","valueType":"Params","prefix":"cA=="},"balances":{"keyType":"IdAndAddress","valueType":"uint64","prefix":"Yg=="},"metadata":{"keyType":"MetadataKey","valueType":"Metadata","prefix":"bQ=="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/ARC11550.algo.ts:35","pc":[0]},{"teal":2,"source":"contracts/ARC11550.algo.ts:35","pc":[1,2,3,4,5,6,7,8,9,10,11]},{"teal":3,"source":"contracts/ARC11550.algo.ts:35","pc":[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56]},{"teal":15,"source":"contracts/ARC11550.algo.ts:35","pc":[57,58]},{"teal":16,"source":"contracts/ARC11550.algo.ts:35","pc":[59]},{"teal":17,"source":"contracts/ARC11550.algo.ts:35","pc":[60,61]},{"teal":18,"source":"contracts/ARC11550.algo.ts:35","pc":[62]},{"teal":19,"source":"contracts/ARC11550.algo.ts:35","pc":[63,64]},{"teal":20,"source":"contracts/ARC11550.algo.ts:35","pc":[65]},{"teal":21,"source":"contracts/ARC11550.algo.ts:35","pc":[66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91]},{"teal":25,"source":"contracts/ARC11550.algo.ts:35","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[92]},{"teal":30,"source":"contracts/ARC11550.algo.ts:57","pc":[93,94,95]},{"teal":31,"source":"contracts/ARC11550.algo.ts:57","pc":[96]},{"teal":34,"source":"contracts/ARC11550.algo.ts:57","pc":[97,98,99]},{"teal":35,"source":"contracts/ARC11550.algo.ts:57","pc":[100]},{"teal":38,"source":"contracts/ARC11550.algo.ts:57","pc":[101,102,103]},{"teal":39,"source":"contracts/ARC11550.algo.ts:57","pc":[104]},{"teal":40,"source":"contracts/ARC11550.algo.ts:57","pc":[105]},{"teal":44,"source":"contracts/ARC11550.algo.ts:57","pc":[106,107,108]},{"teal":48,"source":"contracts/ARC11550.algo.ts:58","pc":[109,110]},{"teal":49,"source":"contracts/ARC11550.algo.ts:58","pc":[111,112]},{"teal":50,"source":"contracts/ARC11550.algo.ts:58","pc":[113]},{"teal":54,"source":"contracts/ARC11550.algo.ts:59","pc":[114]},{"teal":55,"source":"contracts/ARC11550.algo.ts:59","pc":[115]},{"teal":56,"source":"contracts/ARC11550.algo.ts:59","pc":[116]},{"teal":60,"source":"contracts/ARC11550.algo.ts:60","pc":[117,118]},{"teal":61,"source":"contracts/ARC11550.algo.ts:60","pc":[119,120]},{"teal":62,"source":"contracts/ARC11550.algo.ts:60","pc":[121]},{"teal":63,"source":"contracts/ARC11550.algo.ts:57","pc":[122]},{"teal":68,"source":"contracts/ARC11550.algo.ts:63","pc":[123]},{"teal":71,"source":"contracts/ARC11550.algo.ts:63","pc":[124,125,126]},{"teal":72,"source":"contracts/ARC11550.algo.ts:63","pc":[127]},{"teal":73,"source":"contracts/ARC11550.algo.ts:63","pc":[128]},{"teal":74,"source":"contracts/ARC11550.algo.ts:63","pc":[129,130]},{"teal":75,"source":"contracts/ARC11550.algo.ts:63","pc":[131]},{"teal":78,"source":"contracts/ARC11550.algo.ts:63","errorMessage":"argument 0 (params) for arc11550_mint must be a (byte[32],byte[8],uint64,uint64,address)","pc":[132]},{"teal":81,"source":"contracts/ARC11550.algo.ts:63","pc":[133,134,135]},{"teal":82,"source":"contracts/ARC11550.algo.ts:63","pc":[136]},{"teal":83,"source":"contracts/ARC11550.algo.ts:63","pc":[137]},{"teal":84,"source":"contracts/ARC11550.algo.ts:63","pc":[138]},{"teal":85,"source":"contracts/ARC11550.algo.ts:63","pc":[139]},{"teal":86,"source":"contracts/ARC11550.algo.ts:63","pc":[140]},{"teal":90,"source":"contracts/ARC11550.algo.ts:63","pc":[141,142,143]},{"teal":93,"source":"contracts/ARC11550.algo.ts:63","pc":[144]},{"teal":97,"source":"contracts/ARC11550.algo.ts:64","pc":[145]},{"teal":98,"source":"contracts/ARC11550.algo.ts:64","pc":[146]},{"teal":99,"source":"contracts/ARC11550.algo.ts:64","pc":[147,148]},{"teal":103,"source":"contracts/ARC11550.algo.ts:65","pc":[149,150]},{"teal":104,"source":"contracts/ARC11550.algo.ts:65","pc":[151,152]},{"teal":105,"source":"contracts/ARC11550.algo.ts:65","pc":[153]},{"teal":106,"source":"contracts/ARC11550.algo.ts:65","pc":[154]},{"teal":107,"source":"contracts/ARC11550.algo.ts:65","pc":[155]},{"teal":111,"source":"contracts/ARC11550.algo.ts:67","pc":[156,157]},{"teal":112,"source":"contracts/ARC11550.algo.ts:67","pc":[158,159,160,161,162,163,164,165]},{"teal":113,"source":"contracts/ARC11550.algo.ts:67","pc":[166]},{"teal":114,"source":"contracts/ARC11550.algo.ts:67","pc":[167]},{"teal":115,"source":"contracts/ARC11550.algo.ts:67","pc":[168]},{"teal":119,"source":"contracts/ARC11550.algo.ts:68","pc":[169,170]},{"teal":120,"source":"contracts/ARC11550.algo.ts:68","pc":[171,172]},{"teal":121,"source":"contracts/ARC11550.algo.ts:68","pc":[173]},{"teal":122,"source":"contracts/ARC11550.algo.ts:68","pc":[174]},{"teal":123,"source":"contracts/ARC11550.algo.ts:68","pc":[175,176]},{"teal":124,"source":"contracts/ARC11550.algo.ts:68","pc":[177]},{"teal":128,"source":"contracts/ARC11550.algo.ts:70","pc":[178]},{"teal":129,"source":"contracts/ARC11550.algo.ts:70","pc":[179]},{"teal":130,"source":"contracts/ARC11550.algo.ts:70","pc":[180]},{"teal":131,"source":"contracts/ARC11550.algo.ts:70","pc":[181]},{"teal":132,"source":"contracts/ARC11550.algo.ts:70","pc":[182]},{"teal":133,"source":"contracts/ARC11550.algo.ts:70","pc":[183]},{"teal":134,"source":"contracts/ARC11550.algo.ts:70","pc":[184]},{"teal":138,"source":"contracts/ARC11550.algo.ts:71","pc":[185,186]},{"teal":141,"source":"contracts/ARC11550.algo.ts:63","pc":[187,188]},{"teal":142,"source":"contracts/ARC11550.algo.ts:63","pc":[189]},{"teal":147,"source":"contracts/ARC11550.algo.ts:74","pc":[190]},{"teal":150,"source":"contracts/ARC11550.algo.ts:74","pc":[191,192,193]},{"teal":151,"source":"contracts/ARC11550.algo.ts:74","pc":[194,195,196]},{"teal":154,"source":"contracts/ARC11550.algo.ts:74","pc":[197,198,199]},{"teal":155,"source":"contracts/ARC11550.algo.ts:74","pc":[200]},{"teal":156,"source":"contracts/ARC11550.algo.ts:74","pc":[201]},{"teal":157,"source":"contracts/ARC11550.algo.ts:74","pc":[202]},{"teal":158,"source":"contracts/ARC11550.algo.ts:74","pc":[203]},{"teal":159,"source":"contracts/ARC11550.algo.ts:74","pc":[204]},{"teal":163,"source":"contracts/ARC11550.algo.ts:74","pc":[205,206,207]},{"teal":166,"source":"contracts/ARC11550.algo.ts:74","pc":[208]},{"teal":167,"source":"contracts/ARC11550.algo.ts:74","pc":[209]},{"teal":171,"source":"contracts/ARC11550.algo.ts:75","pc":[210]},{"teal":172,"source":"contracts/ARC11550.algo.ts:75","pc":[211]},{"teal":173,"source":"contracts/ARC11550.algo.ts:75","pc":[212,213]},{"teal":177,"source":"contracts/ARC11550.algo.ts:76","pc":[214]},{"teal":178,"source":"contracts/ARC11550.algo.ts:76","pc":[215,216]},{"teal":183,"source":"contracts/ARC11550.algo.ts:76","pc":[217,218]},{"teal":184,"source":"contracts/ARC11550.algo.ts:76","pc":[219,220]},{"teal":185,"source":"contracts/ARC11550.algo.ts:76","pc":[221]},{"teal":186,"source":"contracts/ARC11550.algo.ts:76","pc":[222,223]},{"teal":187,"source":"contracts/ARC11550.algo.ts:76","pc":[224]},{"teal":188,"source":"contracts/ARC11550.algo.ts:76","pc":[225]},{"teal":189,"source":"contracts/ARC11550.algo.ts:76","pc":[226,227,228]},{"teal":193,"source":"contracts/ARC11550.algo.ts:77","pc":[229,230]},{"teal":194,"source":"contracts/ARC11550.algo.ts:77","pc":[231,232]},{"teal":195,"source":"contracts/ARC11550.algo.ts:77","pc":[233]},{"teal":196,"source":"contracts/ARC11550.algo.ts:77","pc":[234,235]},{"teal":197,"source":"contracts/ARC11550.algo.ts:77","pc":[236,237]},{"teal":198,"source":"contracts/ARC11550.algo.ts:77","pc":[238]},{"teal":199,"source":"contracts/ARC11550.algo.ts:77","pc":[239]},{"teal":200,"source":"contracts/ARC11550.algo.ts:77","pc":[240,241]},{"teal":201,"source":"contracts/ARC11550.algo.ts:77","pc":[242]},{"teal":202,"source":"contracts/ARC11550.algo.ts:77","pc":[243,244]},{"teal":203,"source":"contracts/ARC11550.algo.ts:77","pc":[245]},{"teal":204,"source":"contracts/ARC11550.algo.ts:77","pc":[246,247,248]},{"teal":209,"source":"contracts/ARC11550.algo.ts:76","pc":[249,250]},{"teal":210,"source":"contracts/ARC11550.algo.ts:76","pc":[251]},{"teal":211,"source":"contracts/ARC11550.algo.ts:76","pc":[252]},{"teal":212,"source":"contracts/ARC11550.algo.ts:76","pc":[253,254]},{"teal":213,"source":"contracts/ARC11550.algo.ts:76","pc":[255,256,257]},{"teal":218,"source":"contracts/ARC11550.algo.ts:80","pc":[258,259]},{"teal":221,"source":"contracts/ARC11550.algo.ts:74","pc":[260,261]},{"teal":224,"source":"contracts/ARC11550.algo.ts:74","pc":[262,263]},{"teal":225,"source":"contracts/ARC11550.algo.ts:74","pc":[264]},{"teal":230,"source":"contracts/ARC11550.algo.ts:83","pc":[265]},{"teal":233,"source":"contracts/ARC11550.algo.ts:83","pc":[266,267,268]},{"teal":234,"source":"contracts/ARC11550.algo.ts:83","pc":[269]},{"teal":235,"source":"contracts/ARC11550.algo.ts:83","pc":[270]},{"teal":236,"source":"contracts/ARC11550.algo.ts:83","pc":[271]},{"teal":237,"source":"contracts/ARC11550.algo.ts:83","pc":[272]},{"teal":238,"source":"contracts/ARC11550.algo.ts:83","pc":[273]},{"teal":242,"source":"contracts/ARC11550.algo.ts:83","pc":[274,275,276]},{"teal":246,"source":"contracts/ARC11550.algo.ts:84","pc":[277]},{"teal":247,"source":"contracts/ARC11550.algo.ts:84","pc":[278]},{"teal":248,"source":"contracts/ARC11550.algo.ts:83","pc":[279]},{"teal":253,"source":"contracts/ARC11550.algo.ts:87","pc":[280]},{"teal":256,"source":"contracts/ARC11550.algo.ts:87","pc":[281,282,283]},{"teal":259,"source":"contracts/ARC11550.algo.ts:87","pc":[284,285,286]},{"teal":260,"source":"contracts/ARC11550.algo.ts:87","pc":[287]},{"teal":261,"source":"contracts/ARC11550.algo.ts:87","pc":[288]},{"teal":262,"source":"contracts/ARC11550.algo.ts:87","pc":[289]},{"teal":263,"source":"contracts/ARC11550.algo.ts:87","pc":[290]},{"teal":267,"source":"contracts/ARC11550.algo.ts:87","pc":[291,292,293]},{"teal":271,"source":"contracts/ARC11550.algo.ts:88","pc":[294,295]},{"teal":272,"source":"contracts/ARC11550.algo.ts:88","pc":[296,297]},{"teal":273,"source":"contracts/ARC11550.algo.ts:88","pc":[298]},{"teal":274,"source":"contracts/ARC11550.algo.ts:88","pc":[299]},{"teal":277,"source":"contracts/ARC11550.algo.ts:88","errorMessage":"box value does not exist: this.metadata(key).value","pc":[300]},{"teal":278,"source":"contracts/ARC11550.algo.ts:87","pc":[301]},{"teal":283,"source":"contracts/ARC11550.algo.ts:102","pc":[302,303,304]},{"teal":284,"source":"contracts/ARC11550.algo.ts:102","pc":[305,306,307]},{"teal":287,"source":"contracts/ARC11550.algo.ts:102","pc":[308,309,310]},{"teal":290,"source":"contracts/ARC11550.algo.ts:102","pc":[311,312,313]},{"teal":291,"source":"contracts/ARC11550.algo.ts:102","pc":[314]},{"teal":292,"source":"contracts/ARC11550.algo.ts:102","pc":[315]},{"teal":296,"source":"contracts/ARC11550.algo.ts:102","pc":[316,317,318]},{"teal":300,"source":"contracts/ARC11550.algo.ts:103","pc":[319,320]},{"teal":301,"source":"contracts/ARC11550.algo.ts:103","pc":[321,322]},{"teal":302,"source":"contracts/ARC11550.algo.ts:103","pc":[323,324]},{"teal":303,"source":"contracts/ARC11550.algo.ts:103","pc":[325,326]},{"teal":304,"source":"contracts/ARC11550.algo.ts:103","pc":[327,328]},{"teal":305,"source":"contracts/ARC11550.algo.ts:103","pc":[329,330]},{"teal":306,"source":"contracts/ARC11550.algo.ts:103","pc":[331,332]},{"teal":307,"source":"contracts/ARC11550.algo.ts:103","pc":[333,334,335]},{"teal":308,"source":"contracts/ARC11550.algo.ts:103","pc":[336]},{"teal":309,"source":"contracts/ARC11550.algo.ts:103","pc":[337]},{"teal":310,"source":"contracts/ARC11550.algo.ts:103","pc":[338]},{"teal":311,"source":"contracts/ARC11550.algo.ts:103","pc":[339,340]},{"teal":312,"source":"contracts/ARC11550.algo.ts:103","pc":[341]},{"teal":313,"source":"contracts/ARC11550.algo.ts:103","pc":[342]},{"teal":314,"source":"contracts/ARC11550.algo.ts:103","pc":[343]},{"teal":319,"source":"contracts/ARC11550.algo.ts:105","pc":[344,345]},{"teal":320,"source":"contracts/ARC11550.algo.ts:105","pc":[346,347]},{"teal":321,"source":"contracts/ARC11550.algo.ts:105","pc":[348]},{"teal":322,"source":"contracts/ARC11550.algo.ts:105","pc":[349]},{"teal":323,"source":"contracts/ARC11550.algo.ts:105","pc":[350]},{"teal":324,"source":"contracts/ARC11550.algo.ts:105","pc":[351]},{"teal":325,"source":"contracts/ARC11550.algo.ts:105","pc":[352,353,354]},{"teal":330,"source":"contracts/ARC11550.algo.ts:106","pc":[355,356]},{"teal":331,"source":"contracts/ARC11550.algo.ts:106","pc":[357,358]},{"teal":332,"source":"contracts/ARC11550.algo.ts:106","pc":[359]},{"teal":333,"source":"contracts/ARC11550.algo.ts:106","pc":[360]},{"teal":336,"source":"contracts/ARC11550.algo.ts:106","errorMessage":"box value does not exist: this.metadata(key).value","pc":[361]},{"teal":337,"source":"contracts/ARC11550.algo.ts:106","pc":[362,363]},{"teal":338,"source":"contracts/ARC11550.algo.ts:106","pc":[364,365]},{"teal":339,"source":"contracts/ARC11550.algo.ts:106","pc":[366]},{"teal":340,"source":"contracts/ARC11550.algo.ts:106","pc":[367]},{"teal":341,"source":"contracts/ARC11550.algo.ts:106","pc":[368]},{"teal":346,"source":"contracts/ARC11550.algo.ts:109","pc":[369,370]},{"teal":347,"source":"contracts/ARC11550.algo.ts:109","pc":[371,372]},{"teal":348,"source":"contracts/ARC11550.algo.ts:109","pc":[373]},{"teal":349,"source":"contracts/ARC11550.algo.ts:109","pc":[374]},{"teal":352,"source":"contracts/ARC11550.algo.ts:109","errorMessage":"box value does not exist: this.metadata(key).value","pc":[375]},{"teal":353,"source":"contracts/ARC11550.algo.ts:109","pc":[376,377]},{"teal":354,"source":"contracts/ARC11550.algo.ts:109","pc":[378]},{"teal":355,"source":"contracts/ARC11550.algo.ts:109","pc":[379]},{"teal":356,"source":"contracts/ARC11550.algo.ts:109","pc":[380,381]},{"teal":357,"source":"contracts/ARC11550.algo.ts:109","pc":[382,383]},{"teal":358,"source":"contracts/ARC11550.algo.ts:109","pc":[384,385]},{"teal":359,"source":"contracts/ARC11550.algo.ts:109","pc":[386,387]},{"teal":360,"source":"contracts/ARC11550.algo.ts:109","pc":[388]},{"teal":361,"source":"contracts/ARC11550.algo.ts:109","pc":[389]},{"teal":362,"source":"contracts/ARC11550.algo.ts:109","pc":[390,391]},{"teal":363,"source":"contracts/ARC11550.algo.ts:109","pc":[392]},{"teal":364,"source":"contracts/ARC11550.algo.ts:109","pc":[393,394]},{"teal":365,"source":"contracts/ARC11550.algo.ts:109","pc":[395]},{"teal":366,"source":"contracts/ARC11550.algo.ts:109","pc":[396]},{"teal":367,"source":"contracts/ARC11550.algo.ts:109","pc":[397]},{"teal":368,"source":"contracts/ARC11550.algo.ts:109","pc":[398]},{"teal":369,"source":"contracts/ARC11550.algo.ts:109","pc":[399,400]},{"teal":370,"source":"contracts/ARC11550.algo.ts:109","pc":[401]},{"teal":371,"source":"contracts/ARC11550.algo.ts:109","pc":[402,403]},{"teal":372,"source":"contracts/ARC11550.algo.ts:109","pc":[404,405]},{"teal":373,"source":"contracts/ARC11550.algo.ts:109","pc":[406]},{"teal":374,"source":"contracts/ARC11550.algo.ts:109","pc":[407,408]},{"teal":375,"source":"contracts/ARC11550.algo.ts:109","pc":[409]},{"teal":376,"source":"contracts/ARC11550.algo.ts:109","pc":[410,411]},{"teal":377,"source":"contracts/ARC11550.algo.ts:109","pc":[412]},{"teal":378,"source":"contracts/ARC11550.algo.ts:109","pc":[413]},{"teal":379,"source":"contracts/ARC11550.algo.ts:109","pc":[414]},{"teal":380,"source":"contracts/ARC11550.algo.ts:109","pc":[415,416,417]},{"teal":381,"source":"contracts/ARC11550.algo.ts:109","pc":[418]},{"teal":382,"source":"contracts/ARC11550.algo.ts:109","pc":[419]},{"teal":383,"source":"contracts/ARC11550.algo.ts:109","pc":[420]},{"teal":384,"source":"contracts/ARC11550.algo.ts:109","pc":[421,422]},{"teal":385,"source":"contracts/ARC11550.algo.ts:109","pc":[423,424]},{"teal":386,"source":"contracts/ARC11550.algo.ts:109","pc":[425,426]},{"teal":387,"source":"contracts/ARC11550.algo.ts:109","pc":[427,428]},{"teal":388,"source":"contracts/ARC11550.algo.ts:109","pc":[429]},{"teal":389,"source":"contracts/ARC11550.algo.ts:109","pc":[430,431]},{"teal":390,"source":"contracts/ARC11550.algo.ts:109","pc":[432]},{"teal":391,"source":"contracts/ARC11550.algo.ts:109","pc":[433]},{"teal":392,"source":"contracts/ARC11550.algo.ts:109","pc":[434]},{"teal":393,"source":"contracts/ARC11550.algo.ts:109","pc":[435]},{"teal":394,"source":"contracts/ARC11550.algo.ts:109","pc":[436,437]},{"teal":395,"source":"contracts/ARC11550.algo.ts:109","pc":[438,439,440]},{"teal":396,"source":"contracts/ARC11550.algo.ts:109","pc":[441,442]},{"teal":397,"source":"contracts/ARC11550.algo.ts:109","pc":[443,444]},{"teal":398,"source":"contracts/ARC11550.algo.ts:109","pc":[445,446]},{"teal":399,"source":"contracts/ARC11550.algo.ts:109","pc":[447]},{"teal":400,"source":"contracts/ARC11550.algo.ts:109","pc":[448]},{"teal":401,"source":"contracts/ARC11550.algo.ts:109","pc":[449]},{"teal":402,"source":"contracts/ARC11550.algo.ts:109","pc":[450]},{"teal":403,"source":"contracts/ARC11550.algo.ts:109","pc":[451]},{"teal":404,"source":"contracts/ARC11550.algo.ts:109","pc":[452]},{"teal":405,"source":"contracts/ARC11550.algo.ts:102","pc":[453]},{"teal":410,"source":"contracts/ARC11550.algo.ts:119","pc":[454]},{"teal":413,"source":"contracts/ARC11550.algo.ts:119","pc":[455,456,457]},{"teal":414,"source":"contracts/ARC11550.algo.ts:119","pc":[458]},{"teal":415,"source":"contracts/ARC11550.algo.ts:119","pc":[459]},{"teal":416,"source":"contracts/ARC11550.algo.ts:119","pc":[460,461]},{"teal":417,"source":"contracts/ARC11550.algo.ts:119","pc":[462]},{"teal":420,"source":"contracts/ARC11550.algo.ts:119","errorMessage":"argument 0 (account) for arc11550_balanceOf must be a address","pc":[463]},{"teal":423,"source":"contracts/ARC11550.algo.ts:119","pc":[464,465,466]},{"teal":424,"source":"contracts/ARC11550.algo.ts:119","pc":[467]},{"teal":427,"source":"contracts/ARC11550.algo.ts:119","pc":[468,469,470]},{"teal":428,"source":"contracts/ARC11550.algo.ts:119","pc":[471]},{"teal":429,"source":"contracts/ARC11550.algo.ts:119","pc":[472]},{"teal":430,"source":"contracts/ARC11550.algo.ts:119","pc":[473]},{"teal":431,"source":"contracts/ARC11550.algo.ts:119","pc":[474]},{"teal":432,"source":"contracts/ARC11550.algo.ts:119","pc":[475]},{"teal":436,"source":"contracts/ARC11550.algo.ts:119","pc":[476,477,478]},{"teal":440,"source":"contracts/ARC11550.algo.ts:120","pc":[479]},{"teal":441,"source":"contracts/ARC11550.algo.ts:120","pc":[480,481]},{"teal":442,"source":"contracts/ARC11550.algo.ts:120","pc":[482]},{"teal":443,"source":"contracts/ARC11550.algo.ts:120","pc":[483,484]},{"teal":444,"source":"contracts/ARC11550.algo.ts:120","pc":[485]},{"teal":445,"source":"contracts/ARC11550.algo.ts:120","pc":[486]},{"teal":446,"source":"contracts/ARC11550.algo.ts:120","pc":[487]},{"teal":449,"source":"contracts/ARC11550.algo.ts:120","errorMessage":"box value does not exist: this.balances({ id: id, address: account }).value","pc":[488]},{"teal":450,"source":"contracts/ARC11550.algo.ts:120","pc":[489]},{"teal":451,"source":"contracts/ARC11550.algo.ts:119","pc":[490]},{"teal":456,"source":"contracts/ARC11550.algo.ts:123","pc":[491]},{"teal":459,"source":"contracts/ARC11550.algo.ts:123","pc":[492,493,494]},{"teal":460,"source":"contracts/ARC11550.algo.ts:123","pc":[495,496,497]},{"teal":463,"source":"contracts/ARC11550.algo.ts:123","pc":[498,499,500]},{"teal":464,"source":"contracts/ARC11550.algo.ts:123","pc":[501]},{"teal":465,"source":"contracts/ARC11550.algo.ts:123","pc":[502]},{"teal":466,"source":"contracts/ARC11550.algo.ts:123","pc":[503]},{"teal":467,"source":"contracts/ARC11550.algo.ts:123","pc":[504]},{"teal":468,"source":"contracts/ARC11550.algo.ts:123","pc":[505]},{"teal":469,"source":"contracts/ARC11550.algo.ts:123","pc":[506,507,508]},{"teal":470,"source":"contracts/ARC11550.algo.ts:123","pc":[509]},{"teal":471,"source":"contracts/ARC11550.algo.ts:123","pc":[510]},{"teal":472,"source":"contracts/ARC11550.algo.ts:123","pc":[511]},{"teal":473,"source":"contracts/ARC11550.algo.ts:123","pc":[512]},{"teal":474,"source":"contracts/ARC11550.algo.ts:123","pc":[513]},{"teal":475,"source":"contracts/ARC11550.algo.ts:123","pc":[514]},{"teal":479,"source":"contracts/ARC11550.algo.ts:123","pc":[515,516,517]},{"teal":482,"source":"contracts/ARC11550.algo.ts:123","pc":[518]},{"teal":483,"source":"contracts/ARC11550.algo.ts:123","pc":[519,520]},{"teal":487,"source":"contracts/ARC11550.algo.ts:124","pc":[521]},{"teal":488,"source":"contracts/ARC11550.algo.ts:124","pc":[522,523]},{"teal":492,"source":"contracts/ARC11550.algo.ts:125","pc":[524]},{"teal":493,"source":"contracts/ARC11550.algo.ts:125","pc":[525,526]},{"teal":498,"source":"contracts/ARC11550.algo.ts:125","pc":[527,528]},{"teal":499,"source":"contracts/ARC11550.algo.ts:125","pc":[529,530]},{"teal":500,"source":"contracts/ARC11550.algo.ts:125","pc":[531]},{"teal":501,"source":"contracts/ARC11550.algo.ts:125","pc":[532,533]},{"teal":502,"source":"contracts/ARC11550.algo.ts:125","pc":[534]},{"teal":503,"source":"contracts/ARC11550.algo.ts:125","pc":[535]},{"teal":504,"source":"contracts/ARC11550.algo.ts:125","pc":[536,537,538]},{"teal":508,"source":"contracts/ARC11550.algo.ts:126","pc":[539,540]},{"teal":509,"source":"contracts/ARC11550.algo.ts:126","pc":[541,542]},{"teal":510,"source":"contracts/ARC11550.algo.ts:126","pc":[543]},{"teal":511,"source":"contracts/ARC11550.algo.ts:126","pc":[544,545]},{"teal":512,"source":"contracts/ARC11550.algo.ts:126","pc":[546,547]},{"teal":513,"source":"contracts/ARC11550.algo.ts:126","pc":[548]},{"teal":514,"source":"contracts/ARC11550.algo.ts:126","pc":[549]},{"teal":515,"source":"contracts/ARC11550.algo.ts:126","pc":[550]},{"teal":516,"source":"contracts/ARC11550.algo.ts:126","pc":[551]},{"teal":517,"source":"contracts/ARC11550.algo.ts:126","pc":[552,553]},{"teal":518,"source":"contracts/ARC11550.algo.ts:126","pc":[554]},{"teal":519,"source":"contracts/ARC11550.algo.ts:126","pc":[555]},{"teal":520,"source":"contracts/ARC11550.algo.ts:126","pc":[556]},{"teal":521,"source":"contracts/ARC11550.algo.ts:126","pc":[557]},{"teal":522,"source":"contracts/ARC11550.algo.ts:126","pc":[558,559]},{"teal":526,"source":"contracts/ARC11550.algo.ts:127","pc":[560,561]},{"teal":527,"source":"contracts/ARC11550.algo.ts:127","pc":[562,563]},{"teal":528,"source":"contracts/ARC11550.algo.ts:127","pc":[564]},{"teal":529,"source":"contracts/ARC11550.algo.ts:127","pc":[565,566]},{"teal":530,"source":"contracts/ARC11550.algo.ts:127","pc":[567,568]},{"teal":531,"source":"contracts/ARC11550.algo.ts:127","pc":[569]},{"teal":532,"source":"contracts/ARC11550.algo.ts:127","pc":[570]},{"teal":533,"source":"contracts/ARC11550.algo.ts:127","pc":[571]},{"teal":534,"source":"contracts/ARC11550.algo.ts:127","pc":[572]},{"teal":535,"source":"contracts/ARC11550.algo.ts:127","pc":[573,574]},{"teal":536,"source":"contracts/ARC11550.algo.ts:127","pc":[575]},{"teal":537,"source":"contracts/ARC11550.algo.ts:127","pc":[576,577]},{"teal":538,"source":"contracts/ARC11550.algo.ts:127","pc":[578]},{"teal":539,"source":"contracts/ARC11550.algo.ts:127","pc":[579,580]},{"teal":543,"source":"contracts/ARC11550.algo.ts:128","pc":[581,582]},{"teal":544,"source":"contracts/ARC11550.algo.ts:128","pc":[583]},{"teal":545,"source":"contracts/ARC11550.algo.ts:128","pc":[584,585]},{"teal":546,"source":"contracts/ARC11550.algo.ts:128","pc":[586]},{"teal":547,"source":"contracts/ARC11550.algo.ts:128","pc":[587,588]},{"teal":548,"source":"contracts/ARC11550.algo.ts:128","pc":[589]},{"teal":549,"source":"contracts/ARC11550.algo.ts:128","pc":[590]},{"teal":550,"source":"contracts/ARC11550.algo.ts:128","pc":[591]},{"teal":553,"source":"contracts/ARC11550.algo.ts:128","errorMessage":"box value does not exist: this.balances({ id: id, address: addr }).value","pc":[592]},{"teal":554,"source":"contracts/ARC11550.algo.ts:128","pc":[593]},{"teal":555,"source":"contracts/ARC11550.algo.ts:128","pc":[594]},{"teal":556,"source":"contracts/ARC11550.algo.ts:128","pc":[595]},{"teal":557,"source":"contracts/ARC11550.algo.ts:128","pc":[596,597]},{"teal":562,"source":"contracts/ARC11550.algo.ts:125","pc":[598,599]},{"teal":563,"source":"contracts/ARC11550.algo.ts:125","pc":[600]},{"teal":564,"source":"contracts/ARC11550.algo.ts:125","pc":[601]},{"teal":565,"source":"contracts/ARC11550.algo.ts:125","pc":[602,603]},{"teal":566,"source":"contracts/ARC11550.algo.ts:125","pc":[604,605,606]},{"teal":571,"source":"contracts/ARC11550.algo.ts:131","pc":[607,608]},{"teal":574,"source":"contracts/ARC11550.algo.ts:123","pc":[609,610]},{"teal":577,"source":"contracts/ARC11550.algo.ts:123","pc":[611,612]},{"teal":578,"source":"contracts/ARC11550.algo.ts:123","pc":[613]},{"teal":583,"source":"contracts/ARC11550.algo.ts:134","pc":[614]},{"teal":586,"source":"contracts/ARC11550.algo.ts:134","pc":[615,616,617]},{"teal":587,"source":"contracts/ARC11550.algo.ts:134","pc":[618]},{"teal":590,"source":"contracts/ARC11550.algo.ts:134","pc":[619,620,621]},{"teal":591,"source":"contracts/ARC11550.algo.ts:134","pc":[622]},{"teal":592,"source":"contracts/ARC11550.algo.ts:134","pc":[623]},{"teal":593,"source":"contracts/ARC11550.algo.ts:134","pc":[624]},{"teal":594,"source":"contracts/ARC11550.algo.ts:134","pc":[625]},{"teal":598,"source":"contracts/ARC11550.algo.ts:134","pc":[626,627,628]},{"teal":602,"source":"contracts/ARC11550.algo.ts:135","pc":[629,630]},{"teal":603,"source":"contracts/ARC11550.algo.ts:135","pc":[631,632]},{"teal":604,"source":"contracts/ARC11550.algo.ts:135","pc":[633]},{"teal":605,"source":"contracts/ARC11550.algo.ts:135","pc":[634]},{"teal":606,"source":"contracts/ARC11550.algo.ts:135","pc":[635]},{"teal":609,"source":"contracts/ARC11550.algo.ts:135","errorMessage":"box value does not exist: this.params(id).value","pc":[636]},{"teal":610,"source":"contracts/ARC11550.algo.ts:134","pc":[637]},{"teal":615,"source":"contracts/ARC11550.algo.ts:138","pc":[638]},{"teal":618,"source":"contracts/ARC11550.algo.ts:138","pc":[639,640,641]},{"teal":619,"source":"contracts/ARC11550.algo.ts:138","pc":[642,643,644]},{"teal":622,"source":"contracts/ARC11550.algo.ts:138","pc":[645,646,647]},{"teal":623,"source":"contracts/ARC11550.algo.ts:138","pc":[648]},{"teal":624,"source":"contracts/ARC11550.algo.ts:138","pc":[649]},{"teal":625,"source":"contracts/ARC11550.algo.ts:138","pc":[650,651]},{"teal":626,"source":"contracts/ARC11550.algo.ts:138","pc":[652]},{"teal":627,"source":"contracts/ARC11550.algo.ts:138","pc":[653]},{"teal":628,"source":"contracts/ARC11550.algo.ts:138","pc":[654,655,656]},{"teal":629,"source":"contracts/ARC11550.algo.ts:138","pc":[657]},{"teal":630,"source":"contracts/ARC11550.algo.ts:138","pc":[658]},{"teal":631,"source":"contracts/ARC11550.algo.ts:138","pc":[659]},{"teal":632,"source":"contracts/ARC11550.algo.ts:138","pc":[660]},{"teal":633,"source":"contracts/ARC11550.algo.ts:138","pc":[661]},{"teal":634,"source":"contracts/ARC11550.algo.ts:138","pc":[662]},{"teal":638,"source":"contracts/ARC11550.algo.ts:138","pc":[663,664,665]},{"teal":641,"source":"contracts/ARC11550.algo.ts:138","pc":[666]},{"teal":642,"source":"contracts/ARC11550.algo.ts:138","pc":[667,668]},{"teal":646,"source":"contracts/ARC11550.algo.ts:139","pc":[669]},{"teal":647,"source":"contracts/ARC11550.algo.ts:139","pc":[670,671]},{"teal":651,"source":"contracts/ARC11550.algo.ts:140","pc":[672]},{"teal":652,"source":"contracts/ARC11550.algo.ts:140","pc":[673,674]},{"teal":657,"source":"contracts/ARC11550.algo.ts:140","pc":[675,676]},{"teal":658,"source":"contracts/ARC11550.algo.ts:140","pc":[677,678]},{"teal":659,"source":"contracts/ARC11550.algo.ts:140","pc":[679]},{"teal":660,"source":"contracts/ARC11550.algo.ts:140","pc":[680]},{"teal":661,"source":"contracts/ARC11550.algo.ts:140","pc":[681]},{"teal":662,"source":"contracts/ARC11550.algo.ts:140","pc":[682]},{"teal":663,"source":"contracts/ARC11550.algo.ts:140","pc":[683,684,685]},{"teal":667,"source":"contracts/ARC11550.algo.ts:141","pc":[686,687]},{"teal":668,"source":"contracts/ARC11550.algo.ts:141","pc":[688,689]},{"teal":669,"source":"contracts/ARC11550.algo.ts:141","pc":[690]},{"teal":670,"source":"contracts/ARC11550.algo.ts:141","pc":[691,692]},{"teal":671,"source":"contracts/ARC11550.algo.ts:141","pc":[693]},{"teal":672,"source":"contracts/ARC11550.algo.ts:141","pc":[694]},{"teal":673,"source":"contracts/ARC11550.algo.ts:141","pc":[695]},{"teal":674,"source":"contracts/ARC11550.algo.ts:141","pc":[696,697]},{"teal":675,"source":"contracts/ARC11550.algo.ts:141","pc":[698]},{"teal":676,"source":"contracts/ARC11550.algo.ts:141","pc":[699]},{"teal":677,"source":"contracts/ARC11550.algo.ts:141","pc":[700]},{"teal":678,"source":"contracts/ARC11550.algo.ts:141","pc":[701]},{"teal":679,"source":"contracts/ARC11550.algo.ts:141","pc":[702,703]},{"teal":683,"source":"contracts/ARC11550.algo.ts:142","pc":[704,705]},{"teal":684,"source":"contracts/ARC11550.algo.ts:142","pc":[706,707]},{"teal":685,"source":"contracts/ARC11550.algo.ts:142","pc":[708,709]},{"teal":686,"source":"contracts/ARC11550.algo.ts:142","pc":[710]},{"teal":687,"source":"contracts/ARC11550.algo.ts:142","pc":[711]},{"teal":688,"source":"contracts/ARC11550.algo.ts:142","pc":[712]},{"teal":691,"source":"contracts/ARC11550.algo.ts:142","errorMessage":"box value does not exist: this.params(id).value","pc":[713]},{"teal":692,"source":"contracts/ARC11550.algo.ts:142","pc":[714]},{"teal":693,"source":"contracts/ARC11550.algo.ts:142","pc":[715,716]},{"teal":698,"source":"contracts/ARC11550.algo.ts:140","pc":[717,718]},{"teal":699,"source":"contracts/ARC11550.algo.ts:140","pc":[719]},{"teal":700,"source":"contracts/ARC11550.algo.ts:140","pc":[720]},{"teal":701,"source":"contracts/ARC11550.algo.ts:140","pc":[721,722]},{"teal":702,"source":"contracts/ARC11550.algo.ts:140","pc":[723,724,725]},{"teal":707,"source":"contracts/ARC11550.algo.ts:145","pc":[726,727]},{"teal":710,"source":"contracts/ARC11550.algo.ts:138","pc":[728,729]},{"teal":713,"source":"contracts/ARC11550.algo.ts:138","pc":[730,731]},{"teal":714,"source":"contracts/ARC11550.algo.ts:138","pc":[732]},{"teal":719,"source":"contracts/ARC11550.algo.ts:150","pc":[733,734,735]},{"teal":720,"source":"contracts/ARC11550.algo.ts:150","pc":[736,737,738]},{"teal":723,"source":"contracts/ARC11550.algo.ts:150","pc":[739,740,741]},{"teal":724,"source":"contracts/ARC11550.algo.ts:150","pc":[742]},{"teal":725,"source":"contracts/ARC11550.algo.ts:150","pc":[743]},{"teal":729,"source":"contracts/ARC11550.algo.ts:150","pc":[744,745,746]},{"teal":732,"source":"contracts/ARC11550.algo.ts:150","pc":[747]},{"teal":733,"source":"contracts/ARC11550.algo.ts:150","pc":[748,749]},{"teal":738,"source":"contracts/ARC11550.algo.ts:152","pc":[750,751]},{"teal":739,"source":"contracts/ARC11550.algo.ts:152","pc":[752]},{"teal":740,"source":"contracts/ARC11550.algo.ts:152","pc":[753]},{"teal":741,"source":"contracts/ARC11550.algo.ts:152","pc":[754]},{"teal":742,"source":"contracts/ARC11550.algo.ts:152","pc":[755,756,757]},{"teal":752,"source":"contracts/ARC11550.algo.ts:154","pc":[758]},{"teal":753,"source":"contracts/ARC11550.algo.ts:154","pc":[759,760]},{"teal":754,"source":"contracts/ARC11550.algo.ts:154","pc":[761,762]},{"teal":755,"source":"contracts/ARC11550.algo.ts:154","pc":[763,764,765,766,767,768]},{"teal":756,"source":"contracts/ARC11550.algo.ts:154","pc":[769,770]},{"teal":760,"source":"contracts/ARC11550.algo.ts:155","pc":[771,772]},{"teal":761,"source":"contracts/ARC11550.algo.ts:155","pc":[773]},{"teal":762,"source":"contracts/ARC11550.algo.ts:155","pc":[774,775]},{"teal":766,"source":"contracts/ARC11550.algo.ts:156","pc":[776,777]},{"teal":767,"source":"contracts/ARC11550.algo.ts:156","pc":[778,779]},{"teal":768,"source":"contracts/ARC11550.algo.ts:156","pc":[780,781]},{"teal":769,"source":"contracts/ARC11550.algo.ts:156","pc":[782]},{"teal":770,"source":"contracts/ARC11550.algo.ts:156","pc":[783]},{"teal":771,"source":"contracts/ARC11550.algo.ts:156","pc":[784]},{"teal":772,"source":"contracts/ARC11550.algo.ts:156","pc":[785]},{"teal":773,"source":"contracts/ARC11550.algo.ts:156","pc":[786]},{"teal":774,"source":"contracts/ARC11550.algo.ts:156","pc":[787,788,789]},{"teal":775,"source":"contracts/ARC11550.algo.ts:156","pc":[790]},{"teal":776,"source":"contracts/ARC11550.algo.ts:156","pc":[791]},{"teal":777,"source":"contracts/ARC11550.algo.ts:156","pc":[792,793]},{"teal":780,"source":"contracts/ARC11550.algo.ts:154","pc":[794]},{"teal":781,"source":"contracts/ARC11550.algo.ts:154","pc":[795,796]},{"teal":784,"source":"contracts/ARC11550.algo.ts:154","pc":[797]},{"teal":785,"source":"contracts/ARC11550.algo.ts:154","pc":[798,799]},{"teal":786,"source":"contracts/ARC11550.algo.ts:154","pc":[800]},{"teal":787,"source":"contracts/ARC11550.algo.ts:154","pc":[801]},{"teal":788,"source":"contracts/ARC11550.algo.ts:154","pc":[802,803]},{"teal":789,"source":"contracts/ARC11550.algo.ts:154","pc":[804,805,806]},{"teal":790,"source":"contracts/ARC11550.algo.ts:154","pc":[807]},{"teal":791,"source":"contracts/ARC11550.algo.ts:154","pc":[808]},{"teal":792,"source":"contracts/ARC11550.algo.ts:153","pc":[809]},{"teal":796,"source":"contracts/ARC11550.algo.ts:160","pc":[810]},{"teal":797,"source":"contracts/ARC11550.algo.ts:160","pc":[811,812]},{"teal":802,"source":"contracts/ARC11550.algo.ts:160","pc":[813,814]},{"teal":803,"source":"contracts/ARC11550.algo.ts:160","pc":[815,816]},{"teal":804,"source":"contracts/ARC11550.algo.ts:160","pc":[817]},{"teal":805,"source":"contracts/ARC11550.algo.ts:160","pc":[818]},{"teal":806,"source":"contracts/ARC11550.algo.ts:160","pc":[819]},{"teal":807,"source":"contracts/ARC11550.algo.ts:160","pc":[820]},{"teal":808,"source":"contracts/ARC11550.algo.ts:160","pc":[821,822,823]},{"teal":809,"source":"contracts/ARC11550.algo.ts:161","pc":[824,825]},{"teal":810,"source":"contracts/ARC11550.algo.ts:161","pc":[826,827]},{"teal":814,"source":"contracts/ARC11550.algo.ts:162","pc":[828]},{"teal":815,"source":"contracts/ARC11550.algo.ts:162","pc":[829,830]},{"teal":816,"source":"contracts/ARC11550.algo.ts:162","pc":[831,832]},{"teal":817,"source":"contracts/ARC11550.algo.ts:162","pc":[833]},{"teal":818,"source":"contracts/ARC11550.algo.ts:162","pc":[834,835]},{"teal":819,"source":"contracts/ARC11550.algo.ts:162","pc":[836]},{"teal":820,"source":"contracts/ARC11550.algo.ts:162","pc":[837]},{"teal":821,"source":"contracts/ARC11550.algo.ts:162","pc":[838]},{"teal":822,"source":"contracts/ARC11550.algo.ts:162","pc":[839]},{"teal":823,"source":"contracts/ARC11550.algo.ts:162","pc":[840]},{"teal":824,"source":"contracts/ARC11550.algo.ts:162","pc":[841,842]},{"teal":825,"source":"contracts/ARC11550.algo.ts:162","pc":[843]},{"teal":826,"source":"contracts/ARC11550.algo.ts:162","pc":[844]},{"teal":827,"source":"contracts/ARC11550.algo.ts:162","pc":[845]},{"teal":828,"source":"contracts/ARC11550.algo.ts:162","pc":[846]},{"teal":829,"source":"contracts/ARC11550.algo.ts:162","pc":[847]},{"teal":830,"source":"contracts/ARC11550.algo.ts:162","pc":[848,849]},{"teal":831,"source":"contracts/ARC11550.algo.ts:162","pc":[850,851]},{"teal":832,"source":"contracts/ARC11550.algo.ts:162","pc":[852]},{"teal":833,"source":"contracts/ARC11550.algo.ts:162","pc":[853,854]},{"teal":834,"source":"contracts/ARC11550.algo.ts:162","pc":[855]},{"teal":835,"source":"contracts/ARC11550.algo.ts:162","pc":[856]},{"teal":836,"source":"contracts/ARC11550.algo.ts:162","pc":[857]},{"teal":837,"source":"contracts/ARC11550.algo.ts:162","pc":[858]},{"teal":838,"source":"contracts/ARC11550.algo.ts:162","pc":[859]},{"teal":839,"source":"contracts/ARC11550.algo.ts:162","pc":[860,861]},{"teal":840,"source":"contracts/ARC11550.algo.ts:162","pc":[862]},{"teal":841,"source":"contracts/ARC11550.algo.ts:162","pc":[863,864]},{"teal":842,"source":"contracts/ARC11550.algo.ts:162","pc":[865]},{"teal":843,"source":"contracts/ARC11550.algo.ts:162","pc":[866]},{"teal":844,"source":"contracts/ARC11550.algo.ts:162","pc":[867]},{"teal":845,"source":"contracts/ARC11550.algo.ts:162","pc":[868]},{"teal":848,"source":"contracts/ARC11550.algo.ts:162","errorMessage":"box value does not exist: this.balances({ id: t.id, address: t.from }).value","pc":[869]},{"teal":849,"source":"contracts/ARC11550.algo.ts:162","pc":[870]},{"teal":850,"source":"contracts/ARC11550.algo.ts:162","pc":[871,872]},{"teal":851,"source":"contracts/ARC11550.algo.ts:162","pc":[873,874]},{"teal":852,"source":"contracts/ARC11550.algo.ts:162","pc":[875]},{"teal":853,"source":"contracts/ARC11550.algo.ts:162","pc":[876,877]},{"teal":854,"source":"contracts/ARC11550.algo.ts:162","pc":[878]},{"teal":855,"source":"contracts/ARC11550.algo.ts:162","pc":[879]},{"teal":856,"source":"contracts/ARC11550.algo.ts:162","pc":[880]},{"teal":857,"source":"contracts/ARC11550.algo.ts:162","pc":[881,882]},{"teal":858,"source":"contracts/ARC11550.algo.ts:162","pc":[883]},{"teal":859,"source":"contracts/ARC11550.algo.ts:162","pc":[884,885]},{"teal":860,"source":"contracts/ARC11550.algo.ts:162","pc":[886]},{"teal":861,"source":"contracts/ARC11550.algo.ts:162","pc":[887]},{"teal":862,"source":"contracts/ARC11550.algo.ts:162","pc":[888]},{"teal":863,"source":"contracts/ARC11550.algo.ts:162","pc":[889]},{"teal":864,"source":"contracts/ARC11550.algo.ts:162","pc":[890]},{"teal":865,"source":"contracts/ARC11550.algo.ts:162","pc":[891]},{"teal":866,"source":"contracts/ARC11550.algo.ts:162","pc":[892,893]},{"teal":867,"source":"contracts/ARC11550.algo.ts:162","pc":[894,895]},{"teal":868,"source":"contracts/ARC11550.algo.ts:162","pc":[896]},{"teal":869,"source":"contracts/ARC11550.algo.ts:162","pc":[897,898]},{"teal":870,"source":"contracts/ARC11550.algo.ts:162","pc":[899]},{"teal":871,"source":"contracts/ARC11550.algo.ts:162","pc":[900]},{"teal":872,"source":"contracts/ARC11550.algo.ts:162","pc":[901]},{"teal":873,"source":"contracts/ARC11550.algo.ts:162","pc":[902]},{"teal":874,"source":"contracts/ARC11550.algo.ts:162","pc":[903]},{"teal":875,"source":"contracts/ARC11550.algo.ts:162","pc":[904,905]},{"teal":876,"source":"contracts/ARC11550.algo.ts:162","pc":[906]},{"teal":877,"source":"contracts/ARC11550.algo.ts:162","pc":[907]},{"teal":878,"source":"contracts/ARC11550.algo.ts:162","pc":[908]},{"teal":879,"source":"contracts/ARC11550.algo.ts:162","pc":[909]},{"teal":880,"source":"contracts/ARC11550.algo.ts:162","pc":[910]},{"teal":881,"source":"contracts/ARC11550.algo.ts:162","pc":[911,912]},{"teal":882,"source":"contracts/ARC11550.algo.ts:162","pc":[913,914]},{"teal":883,"source":"contracts/ARC11550.algo.ts:162","pc":[915]},{"teal":884,"source":"contracts/ARC11550.algo.ts:162","pc":[916,917]},{"teal":885,"source":"contracts/ARC11550.algo.ts:162","pc":[918]},{"teal":886,"source":"contracts/ARC11550.algo.ts:162","pc":[919]},{"teal":887,"source":"contracts/ARC11550.algo.ts:162","pc":[920]},{"teal":888,"source":"contracts/ARC11550.algo.ts:162","pc":[921]},{"teal":889,"source":"contracts/ARC11550.algo.ts:162","pc":[922]},{"teal":890,"source":"contracts/ARC11550.algo.ts:162","pc":[923,924]},{"teal":891,"source":"contracts/ARC11550.algo.ts:162","pc":[925]},{"teal":892,"source":"contracts/ARC11550.algo.ts:162","pc":[926,927]},{"teal":893,"source":"contracts/ARC11550.algo.ts:162","pc":[928]},{"teal":894,"source":"contracts/ARC11550.algo.ts:162","pc":[929]},{"teal":895,"source":"contracts/ARC11550.algo.ts:162","pc":[930]},{"teal":896,"source":"contracts/ARC11550.algo.ts:162","pc":[931]},{"teal":897,"source":"contracts/ARC11550.algo.ts:162","pc":[932]},{"teal":898,"source":"contracts/ARC11550.algo.ts:162","pc":[933]},{"teal":902,"source":"contracts/ARC11550.algo.ts:163","pc":[934]},{"teal":903,"source":"contracts/ARC11550.algo.ts:163","pc":[935,936]},{"teal":904,"source":"contracts/ARC11550.algo.ts:163","pc":[937,938]},{"teal":905,"source":"contracts/ARC11550.algo.ts:163","pc":[939]},{"teal":906,"source":"contracts/ARC11550.algo.ts:163","pc":[940,941]},{"teal":907,"source":"contracts/ARC11550.algo.ts:163","pc":[942]},{"teal":908,"source":"contracts/ARC11550.algo.ts:163","pc":[943]},{"teal":909,"source":"contracts/ARC11550.algo.ts:163","pc":[944]},{"teal":910,"source":"contracts/ARC11550.algo.ts:163","pc":[945]},{"teal":911,"source":"contracts/ARC11550.algo.ts:163","pc":[946]},{"teal":912,"source":"contracts/ARC11550.algo.ts:163","pc":[947,948]},{"teal":913,"source":"contracts/ARC11550.algo.ts:163","pc":[949]},{"teal":914,"source":"contracts/ARC11550.algo.ts:163","pc":[950]},{"teal":915,"source":"contracts/ARC11550.algo.ts:163","pc":[951]},{"teal":916,"source":"contracts/ARC11550.algo.ts:163","pc":[952]},{"teal":917,"source":"contracts/ARC11550.algo.ts:163","pc":[953]},{"teal":918,"source":"contracts/ARC11550.algo.ts:163","pc":[954,955]},{"teal":919,"source":"contracts/ARC11550.algo.ts:163","pc":[956,957]},{"teal":920,"source":"contracts/ARC11550.algo.ts:163","pc":[958]},{"teal":921,"source":"contracts/ARC11550.algo.ts:163","pc":[959,960]},{"teal":922,"source":"contracts/ARC11550.algo.ts:163","pc":[961]},{"teal":923,"source":"contracts/ARC11550.algo.ts:163","pc":[962]},{"teal":924,"source":"contracts/ARC11550.algo.ts:163","pc":[963]},{"teal":925,"source":"contracts/ARC11550.algo.ts:163","pc":[964,965]},{"teal":926,"source":"contracts/ARC11550.algo.ts:163","pc":[966]},{"teal":927,"source":"contracts/ARC11550.algo.ts:163","pc":[967,968]},{"teal":928,"source":"contracts/ARC11550.algo.ts:163","pc":[969]},{"teal":929,"source":"contracts/ARC11550.algo.ts:163","pc":[970,971]},{"teal":930,"source":"contracts/ARC11550.algo.ts:163","pc":[972]},{"teal":931,"source":"contracts/ARC11550.algo.ts:163","pc":[973]},{"teal":932,"source":"contracts/ARC11550.algo.ts:163","pc":[974]},{"teal":933,"source":"contracts/ARC11550.algo.ts:163","pc":[975]},{"teal":936,"source":"contracts/ARC11550.algo.ts:163","errorMessage":"box value does not exist: this.balances({ id: t.id, address: t.to }).value","pc":[976]},{"teal":937,"source":"contracts/ARC11550.algo.ts:163","pc":[977]},{"teal":938,"source":"contracts/ARC11550.algo.ts:163","pc":[978,979]},{"teal":939,"source":"contracts/ARC11550.algo.ts:163","pc":[980,981]},{"teal":940,"source":"contracts/ARC11550.algo.ts:163","pc":[982]},{"teal":941,"source":"contracts/ARC11550.algo.ts:163","pc":[983,984]},{"teal":942,"source":"contracts/ARC11550.algo.ts:163","pc":[985]},{"teal":943,"source":"contracts/ARC11550.algo.ts:163","pc":[986]},{"teal":944,"source":"contracts/ARC11550.algo.ts:163","pc":[987]},{"teal":945,"source":"contracts/ARC11550.algo.ts:163","pc":[988,989]},{"teal":946,"source":"contracts/ARC11550.algo.ts:163","pc":[990]},{"teal":947,"source":"contracts/ARC11550.algo.ts:163","pc":[991,992]},{"teal":948,"source":"contracts/ARC11550.algo.ts:163","pc":[993]},{"teal":949,"source":"contracts/ARC11550.algo.ts:163","pc":[994]},{"teal":950,"source":"contracts/ARC11550.algo.ts:163","pc":[995]},{"teal":951,"source":"contracts/ARC11550.algo.ts:163","pc":[996]},{"teal":952,"source":"contracts/ARC11550.algo.ts:163","pc":[997]},{"teal":953,"source":"contracts/ARC11550.algo.ts:163","pc":[998]},{"teal":954,"source":"contracts/ARC11550.algo.ts:163","pc":[999,1000]},{"teal":955,"source":"contracts/ARC11550.algo.ts:163","pc":[1001,1002]},{"teal":956,"source":"contracts/ARC11550.algo.ts:163","pc":[1003]},{"teal":957,"source":"contracts/ARC11550.algo.ts:163","pc":[1004,1005]},{"teal":958,"source":"contracts/ARC11550.algo.ts:163","pc":[1006]},{"teal":959,"source":"contracts/ARC11550.algo.ts:163","pc":[1007]},{"teal":960,"source":"contracts/ARC11550.algo.ts:163","pc":[1008]},{"teal":961,"source":"contracts/ARC11550.algo.ts:163","pc":[1009]},{"teal":962,"source":"contracts/ARC11550.algo.ts:163","pc":[1010]},{"teal":963,"source":"contracts/ARC11550.algo.ts:163","pc":[1011,1012]},{"teal":964,"source":"contracts/ARC11550.algo.ts:163","pc":[1013]},{"teal":965,"source":"contracts/ARC11550.algo.ts:163","pc":[1014]},{"teal":966,"source":"contracts/ARC11550.algo.ts:163","pc":[1015]},{"teal":967,"source":"contracts/ARC11550.algo.ts:163","pc":[1016]},{"teal":968,"source":"contracts/ARC11550.algo.ts:163","pc":[1017]},{"teal":969,"source":"contracts/ARC11550.algo.ts:163","pc":[1018,1019]},{"teal":970,"source":"contracts/ARC11550.algo.ts:163","pc":[1020,1021]},{"teal":971,"source":"contracts/ARC11550.algo.ts:163","pc":[1022]},{"teal":972,"source":"contracts/ARC11550.algo.ts:163","pc":[1023,1024]},{"teal":973,"source":"contracts/ARC11550.algo.ts:163","pc":[1025]},{"teal":974,"source":"contracts/ARC11550.algo.ts:163","pc":[1026]},{"teal":975,"source":"contracts/ARC11550.algo.ts:163","pc":[1027]},{"teal":976,"source":"contracts/ARC11550.algo.ts:163","pc":[1028,1029]},{"teal":977,"source":"contracts/ARC11550.algo.ts:163","pc":[1030]},{"teal":978,"source":"contracts/ARC11550.algo.ts:163","pc":[1031,1032]},{"teal":979,"source":"contracts/ARC11550.algo.ts:163","pc":[1033]},{"teal":980,"source":"contracts/ARC11550.algo.ts:163","pc":[1034,1035]},{"teal":981,"source":"contracts/ARC11550.algo.ts:163","pc":[1036]},{"teal":982,"source":"contracts/ARC11550.algo.ts:163","pc":[1037]},{"teal":983,"source":"contracts/ARC11550.algo.ts:163","pc":[1038]},{"teal":984,"source":"contracts/ARC11550.algo.ts:163","pc":[1039]},{"teal":985,"source":"contracts/ARC11550.algo.ts:163","pc":[1040]},{"teal":986,"source":"contracts/ARC11550.algo.ts:163","pc":[1041]},{"teal":991,"source":"contracts/ARC11550.algo.ts:160","pc":[1042,1043]},{"teal":992,"source":"contracts/ARC11550.algo.ts:160","pc":[1044]},{"teal":993,"source":"contracts/ARC11550.algo.ts:160","pc":[1045]},{"teal":994,"source":"contracts/ARC11550.algo.ts:160","pc":[1046,1047]},{"teal":995,"source":"contracts/ARC11550.algo.ts:160","pc":[1048,1049,1050]},{"teal":1000,"source":"contracts/ARC11550.algo.ts:165","pc":[1051]},{"teal":1005,"source":"contracts/ARC11550.algo.ts:169","pc":[1052]},{"teal":1006,"source":"contracts/ARC11550.algo.ts:169","pc":[1053,1054]},{"teal":1011,"source":"contracts/ARC11550.algo.ts:169","pc":[1055,1056]},{"teal":1012,"source":"contracts/ARC11550.algo.ts:169","pc":[1057,1058]},{"teal":1013,"source":"contracts/ARC11550.algo.ts:169","pc":[1059]},{"teal":1014,"source":"contracts/ARC11550.algo.ts:169","pc":[1060]},{"teal":1015,"source":"contracts/ARC11550.algo.ts:169","pc":[1061]},{"teal":1016,"source":"contracts/ARC11550.algo.ts:169","pc":[1062]},{"teal":1017,"source":"contracts/ARC11550.algo.ts:169","pc":[1063,1064,1065]},{"teal":1018,"source":"contracts/ARC11550.algo.ts:170","pc":[1066,1067]},{"teal":1019,"source":"contracts/ARC11550.algo.ts:170","pc":[1068,1069]},{"teal":1023,"source":"contracts/ARC11550.algo.ts:171","pc":[1070,1071]},{"teal":1024,"source":"contracts/ARC11550.algo.ts:171","pc":[1072,1073]},{"teal":1025,"source":"contracts/ARC11550.algo.ts:171","pc":[1074]},{"teal":1026,"source":"contracts/ARC11550.algo.ts:171","pc":[1075,1076]},{"teal":1027,"source":"contracts/ARC11550.algo.ts:171","pc":[1077]},{"teal":1028,"source":"contracts/ARC11550.algo.ts:171","pc":[1078]},{"teal":1029,"source":"contracts/ARC11550.algo.ts:171","pc":[1079]},{"teal":1030,"source":"contracts/ARC11550.algo.ts:171","pc":[1080]},{"teal":1031,"source":"contracts/ARC11550.algo.ts:171","pc":[1081]},{"teal":1032,"source":"contracts/ARC11550.algo.ts:171","pc":[1082,1083]},{"teal":1033,"source":"contracts/ARC11550.algo.ts:171","pc":[1084]},{"teal":1034,"source":"contracts/ARC11550.algo.ts:171","pc":[1085,1086]},{"teal":1035,"source":"contracts/ARC11550.algo.ts:171","pc":[1087]},{"teal":1036,"source":"contracts/ARC11550.algo.ts:171","pc":[1088,1089]},{"teal":1037,"source":"contracts/ARC11550.algo.ts:171","pc":[1090]},{"teal":1038,"source":"contracts/ARC11550.algo.ts:171","pc":[1091]},{"teal":1042,"source":"contracts/ARC11550.algo.ts:172","pc":[1092]},{"teal":1043,"source":"contracts/ARC11550.algo.ts:172","pc":[1093,1094]},{"teal":1044,"source":"contracts/ARC11550.algo.ts:172","pc":[1095,1096]},{"teal":1045,"source":"contracts/ARC11550.algo.ts:172","pc":[1097]},{"teal":1046,"source":"contracts/ARC11550.algo.ts:172","pc":[1098,1099]},{"teal":1047,"source":"contracts/ARC11550.algo.ts:172","pc":[1100]},{"teal":1048,"source":"contracts/ARC11550.algo.ts:172","pc":[1101]},{"teal":1049,"source":"contracts/ARC11550.algo.ts:172","pc":[1102]},{"teal":1050,"source":"contracts/ARC11550.algo.ts:172","pc":[1103]},{"teal":1051,"source":"contracts/ARC11550.algo.ts:172","pc":[1104]},{"teal":1052,"source":"contracts/ARC11550.algo.ts:172","pc":[1105,1106]},{"teal":1053,"source":"contracts/ARC11550.algo.ts:172","pc":[1107]},{"teal":1054,"source":"contracts/ARC11550.algo.ts:172","pc":[1108]},{"teal":1055,"source":"contracts/ARC11550.algo.ts:172","pc":[1109]},{"teal":1056,"source":"contracts/ARC11550.algo.ts:172","pc":[1110]},{"teal":1057,"source":"contracts/ARC11550.algo.ts:172","pc":[1111]},{"teal":1058,"source":"contracts/ARC11550.algo.ts:172","pc":[1112,1113]},{"teal":1059,"source":"contracts/ARC11550.algo.ts:172","pc":[1114,1115]},{"teal":1060,"source":"contracts/ARC11550.algo.ts:172","pc":[1116]},{"teal":1061,"source":"contracts/ARC11550.algo.ts:172","pc":[1117,1118]},{"teal":1062,"source":"contracts/ARC11550.algo.ts:172","pc":[1119]},{"teal":1063,"source":"contracts/ARC11550.algo.ts:172","pc":[1120]},{"teal":1064,"source":"contracts/ARC11550.algo.ts:172","pc":[1121]},{"teal":1065,"source":"contracts/ARC11550.algo.ts:172","pc":[1122]},{"teal":1066,"source":"contracts/ARC11550.algo.ts:172","pc":[1123]},{"teal":1067,"source":"contracts/ARC11550.algo.ts:172","pc":[1124,1125]},{"teal":1068,"source":"contracts/ARC11550.algo.ts:172","pc":[1126]},{"teal":1069,"source":"contracts/ARC11550.algo.ts:172","pc":[1127,1128]},{"teal":1070,"source":"contracts/ARC11550.algo.ts:172","pc":[1129]},{"teal":1071,"source":"contracts/ARC11550.algo.ts:172","pc":[1130]},{"teal":1072,"source":"contracts/ARC11550.algo.ts:172","pc":[1131]},{"teal":1073,"source":"contracts/ARC11550.algo.ts:172","pc":[1132]},{"teal":1076,"source":"contracts/ARC11550.algo.ts:172","errorMessage":"box value does not exist: this.balances({ id: t.id, address: t.from }).value","pc":[1133]},{"teal":1077,"source":"contracts/ARC11550.algo.ts:172","pc":[1134]},{"teal":1078,"source":"contracts/ARC11550.algo.ts:172","pc":[1135,1136]},{"teal":1079,"source":"contracts/ARC11550.algo.ts:172","pc":[1137,1138]},{"teal":1080,"source":"contracts/ARC11550.algo.ts:172","pc":[1139]},{"teal":1081,"source":"contracts/ARC11550.algo.ts:172","pc":[1140,1141]},{"teal":1082,"source":"contracts/ARC11550.algo.ts:172","pc":[1142]},{"teal":1083,"source":"contracts/ARC11550.algo.ts:172","pc":[1143]},{"teal":1084,"source":"contracts/ARC11550.algo.ts:172","pc":[1144]},{"teal":1085,"source":"contracts/ARC11550.algo.ts:172","pc":[1145,1146]},{"teal":1086,"source":"contracts/ARC11550.algo.ts:172","pc":[1147]},{"teal":1087,"source":"contracts/ARC11550.algo.ts:172","pc":[1148,1149]},{"teal":1088,"source":"contracts/ARC11550.algo.ts:172","pc":[1150]},{"teal":1089,"source":"contracts/ARC11550.algo.ts:172","pc":[1151]},{"teal":1090,"source":"contracts/ARC11550.algo.ts:172","pc":[1152]},{"teal":1091,"source":"contracts/ARC11550.algo.ts:172","pc":[1153]},{"teal":1092,"source":"contracts/ARC11550.algo.ts:172","pc":[1154]},{"teal":1093,"source":"contracts/ARC11550.algo.ts:172","pc":[1155]},{"teal":1094,"source":"contracts/ARC11550.algo.ts:172","pc":[1156,1157]},{"teal":1095,"source":"contracts/ARC11550.algo.ts:172","pc":[1158,1159]},{"teal":1096,"source":"contracts/ARC11550.algo.ts:172","pc":[1160]},{"teal":1097,"source":"contracts/ARC11550.algo.ts:172","pc":[1161,1162]},{"teal":1098,"source":"contracts/ARC11550.algo.ts:172","pc":[1163]},{"teal":1099,"source":"contracts/ARC11550.algo.ts:172","pc":[1164]},{"teal":1100,"source":"contracts/ARC11550.algo.ts:172","pc":[1165]},{"teal":1101,"source":"contracts/ARC11550.algo.ts:172","pc":[1166]},{"teal":1102,"source":"contracts/ARC11550.algo.ts:172","pc":[1167]},{"teal":1103,"source":"contracts/ARC11550.algo.ts:172","pc":[1168,1169]},{"teal":1104,"source":"contracts/ARC11550.algo.ts:172","pc":[1170]},{"teal":1105,"source":"contracts/ARC11550.algo.ts:172","pc":[1171]},{"teal":1106,"source":"contracts/ARC11550.algo.ts:172","pc":[1172]},{"teal":1107,"source":"contracts/ARC11550.algo.ts:172","pc":[1173]},{"teal":1108,"source":"contracts/ARC11550.algo.ts:172","pc":[1174]},{"teal":1109,"source":"contracts/ARC11550.algo.ts:172","pc":[1175,1176]},{"teal":1110,"source":"contracts/ARC11550.algo.ts:172","pc":[1177,1178]},{"teal":1111,"source":"contracts/ARC11550.algo.ts:172","pc":[1179]},{"teal":1112,"source":"contracts/ARC11550.algo.ts:172","pc":[1180,1181]},{"teal":1113,"source":"contracts/ARC11550.algo.ts:172","pc":[1182]},{"teal":1114,"source":"contracts/ARC11550.algo.ts:172","pc":[1183]},{"teal":1115,"source":"contracts/ARC11550.algo.ts:172","pc":[1184]},{"teal":1116,"source":"contracts/ARC11550.algo.ts:172","pc":[1185]},{"teal":1117,"source":"contracts/ARC11550.algo.ts:172","pc":[1186]},{"teal":1118,"source":"contracts/ARC11550.algo.ts:172","pc":[1187,1188]},{"teal":1119,"source":"contracts/ARC11550.algo.ts:172","pc":[1189]},{"teal":1120,"source":"contracts/ARC11550.algo.ts:172","pc":[1190,1191]},{"teal":1121,"source":"contracts/ARC11550.algo.ts:172","pc":[1192]},{"teal":1122,"source":"contracts/ARC11550.algo.ts:172","pc":[1193]},{"teal":1123,"source":"contracts/ARC11550.algo.ts:172","pc":[1194]},{"teal":1124,"source":"contracts/ARC11550.algo.ts:172","pc":[1195]},{"teal":1125,"source":"contracts/ARC11550.algo.ts:172","pc":[1196]},{"teal":1126,"source":"contracts/ARC11550.algo.ts:172","pc":[1197]},{"teal":1130,"source":"contracts/ARC11550.algo.ts:173","pc":[1198]},{"teal":1131,"source":"contracts/ARC11550.algo.ts:173","pc":[1199,1200]},{"teal":1132,"source":"contracts/ARC11550.algo.ts:173","pc":[1201,1202]},{"teal":1133,"source":"contracts/ARC11550.algo.ts:173","pc":[1203]},{"teal":1134,"source":"contracts/ARC11550.algo.ts:173","pc":[1204,1205]},{"teal":1135,"source":"contracts/ARC11550.algo.ts:173","pc":[1206]},{"teal":1136,"source":"contracts/ARC11550.algo.ts:173","pc":[1207]},{"teal":1137,"source":"contracts/ARC11550.algo.ts:173","pc":[1208]},{"teal":1138,"source":"contracts/ARC11550.algo.ts:173","pc":[1209]},{"teal":1139,"source":"contracts/ARC11550.algo.ts:173","pc":[1210]},{"teal":1140,"source":"contracts/ARC11550.algo.ts:173","pc":[1211,1212]},{"teal":1141,"source":"contracts/ARC11550.algo.ts:173","pc":[1213]},{"teal":1142,"source":"contracts/ARC11550.algo.ts:173","pc":[1214]},{"teal":1143,"source":"contracts/ARC11550.algo.ts:173","pc":[1215]},{"teal":1144,"source":"contracts/ARC11550.algo.ts:173","pc":[1216]},{"teal":1145,"source":"contracts/ARC11550.algo.ts:173","pc":[1217]},{"teal":1146,"source":"contracts/ARC11550.algo.ts:173","pc":[1218,1219]},{"teal":1147,"source":"contracts/ARC11550.algo.ts:173","pc":[1220,1221]},{"teal":1148,"source":"contracts/ARC11550.algo.ts:173","pc":[1222]},{"teal":1149,"source":"contracts/ARC11550.algo.ts:173","pc":[1223,1224]},{"teal":1150,"source":"contracts/ARC11550.algo.ts:173","pc":[1225]},{"teal":1151,"source":"contracts/ARC11550.algo.ts:173","pc":[1226]},{"teal":1152,"source":"contracts/ARC11550.algo.ts:173","pc":[1227]},{"teal":1153,"source":"contracts/ARC11550.algo.ts:173","pc":[1228,1229]},{"teal":1154,"source":"contracts/ARC11550.algo.ts:173","pc":[1230]},{"teal":1155,"source":"contracts/ARC11550.algo.ts:173","pc":[1231,1232]},{"teal":1156,"source":"contracts/ARC11550.algo.ts:173","pc":[1233]},{"teal":1157,"source":"contracts/ARC11550.algo.ts:173","pc":[1234,1235]},{"teal":1158,"source":"contracts/ARC11550.algo.ts:173","pc":[1236]},{"teal":1159,"source":"contracts/ARC11550.algo.ts:173","pc":[1237]},{"teal":1160,"source":"contracts/ARC11550.algo.ts:173","pc":[1238]},{"teal":1161,"source":"contracts/ARC11550.algo.ts:173","pc":[1239]},{"teal":1164,"source":"contracts/ARC11550.algo.ts:173","errorMessage":"box value does not exist: this.balances({ id: t.id, address: t.to }).value","pc":[1240]},{"teal":1165,"source":"contracts/ARC11550.algo.ts:173","pc":[1241]},{"teal":1166,"source":"contracts/ARC11550.algo.ts:173","pc":[1242,1243]},{"teal":1167,"source":"contracts/ARC11550.algo.ts:173","pc":[1244,1245]},{"teal":1168,"source":"contracts/ARC11550.algo.ts:173","pc":[1246]},{"teal":1169,"source":"contracts/ARC11550.algo.ts:173","pc":[1247,1248]},{"teal":1170,"source":"contracts/ARC11550.algo.ts:173","pc":[1249]},{"teal":1171,"source":"contracts/ARC11550.algo.ts:173","pc":[1250]},{"teal":1172,"source":"contracts/ARC11550.algo.ts:173","pc":[1251]},{"teal":1173,"source":"contracts/ARC11550.algo.ts:173","pc":[1252,1253]},{"teal":1174,"source":"contracts/ARC11550.algo.ts:173","pc":[1254]},{"teal":1175,"source":"contracts/ARC11550.algo.ts:173","pc":[1255,1256]},{"teal":1176,"source":"contracts/ARC11550.algo.ts:173","pc":[1257]},{"teal":1177,"source":"contracts/ARC11550.algo.ts:173","pc":[1258]},{"teal":1178,"source":"contracts/ARC11550.algo.ts:173","pc":[1259]},{"teal":1179,"source":"contracts/ARC11550.algo.ts:173","pc":[1260]},{"teal":1180,"source":"contracts/ARC11550.algo.ts:173","pc":[1261]},{"teal":1181,"source":"contracts/ARC11550.algo.ts:173","pc":[1262]},{"teal":1182,"source":"contracts/ARC11550.algo.ts:173","pc":[1263,1264]},{"teal":1183,"source":"contracts/ARC11550.algo.ts:173","pc":[1265,1266]},{"teal":1184,"source":"contracts/ARC11550.algo.ts:173","pc":[1267]},{"teal":1185,"source":"contracts/ARC11550.algo.ts:173","pc":[1268,1269]},{"teal":1186,"source":"contracts/ARC11550.algo.ts:173","pc":[1270]},{"teal":1187,"source":"contracts/ARC11550.algo.ts:173","pc":[1271]},{"teal":1188,"source":"contracts/ARC11550.algo.ts:173","pc":[1272]},{"teal":1189,"source":"contracts/ARC11550.algo.ts:173","pc":[1273]},{"teal":1190,"source":"contracts/ARC11550.algo.ts:173","pc":[1274]},{"teal":1191,"source":"contracts/ARC11550.algo.ts:173","pc":[1275,1276]},{"teal":1192,"source":"contracts/ARC11550.algo.ts:173","pc":[1277]},{"teal":1193,"source":"contracts/ARC11550.algo.ts:173","pc":[1278]},{"teal":1194,"source":"contracts/ARC11550.algo.ts:173","pc":[1279]},{"teal":1195,"source":"contracts/ARC11550.algo.ts:173","pc":[1280]},{"teal":1196,"source":"contracts/ARC11550.algo.ts:173","pc":[1281]},{"teal":1197,"source":"contracts/ARC11550.algo.ts:173","pc":[1282,1283]},{"teal":1198,"source":"contracts/ARC11550.algo.ts:173","pc":[1284,1285]},{"teal":1199,"source":"contracts/ARC11550.algo.ts:173","pc":[1286]},{"teal":1200,"source":"contracts/ARC11550.algo.ts:173","pc":[1287,1288]},{"teal":1201,"source":"contracts/ARC11550.algo.ts:173","pc":[1289]},{"teal":1202,"source":"contracts/ARC11550.algo.ts:173","pc":[1290]},{"teal":1203,"source":"contracts/ARC11550.algo.ts:173","pc":[1291]},{"teal":1204,"source":"contracts/ARC11550.algo.ts:173","pc":[1292,1293]},{"teal":1205,"source":"contracts/ARC11550.algo.ts:173","pc":[1294]},{"teal":1206,"source":"contracts/ARC11550.algo.ts:173","pc":[1295,1296]},{"teal":1207,"source":"contracts/ARC11550.algo.ts:173","pc":[1297]},{"teal":1208,"source":"contracts/ARC11550.algo.ts:173","pc":[1298,1299]},{"teal":1209,"source":"contracts/ARC11550.algo.ts:173","pc":[1300]},{"teal":1210,"source":"contracts/ARC11550.algo.ts:173","pc":[1301]},{"teal":1211,"source":"contracts/ARC11550.algo.ts:173","pc":[1302]},{"teal":1212,"source":"contracts/ARC11550.algo.ts:173","pc":[1303]},{"teal":1213,"source":"contracts/ARC11550.algo.ts:173","pc":[1304]},{"teal":1214,"source":"contracts/ARC11550.algo.ts:173","pc":[1305]},{"teal":1219,"source":"contracts/ARC11550.algo.ts:169","pc":[1306,1307]},{"teal":1220,"source":"contracts/ARC11550.algo.ts:169","pc":[1308]},{"teal":1221,"source":"contracts/ARC11550.algo.ts:169","pc":[1309]},{"teal":1222,"source":"contracts/ARC11550.algo.ts:169","pc":[1310,1311]},{"teal":1223,"source":"contracts/ARC11550.algo.ts:169","pc":[1312,1313,1314]},{"teal":1226,"source":"contracts/ARC11550.algo.ts:150","pc":[1315]},{"teal":1229,"source":"contracts/ARC11550.algo.ts:35","pc":[1316,1317,1318,1319,1320,1321]},{"teal":1230,"source":"contracts/ARC11550.algo.ts:35","pc":[1322,1323,1324]},{"teal":1231,"source":"contracts/ARC11550.algo.ts:35","pc":[1325,1326,1327,1328]},{"teal":1234,"source":"contracts/ARC11550.algo.ts:35","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[1329]},{"teal":1237,"source":"contracts/ARC11550.algo.ts:35","pc":[1330,1331,1332,1333,1334,1335]},{"teal":1238,"source":"contracts/ARC11550.algo.ts:35","pc":[1336,1337,1338,1339,1340,1341]},{"teal":1239,"source":"contracts/ARC11550.algo.ts:35","pc":[1342,1343,1344,1345,1346,1347]},{"teal":1240,"source":"contracts/ARC11550.algo.ts:35","pc":[1348,1349,1350,1351,1352,1353]},{"teal":1241,"source":"contracts/ARC11550.algo.ts:35","pc":[1354,1355,1356,1357,1358,1359]},{"teal":1242,"source":"contracts/ARC11550.algo.ts:35","pc":[1360,1361,1362,1363,1364,1365]},{"teal":1243,"source":"contracts/ARC11550.algo.ts:35","pc":[1366,1367,1368,1369,1370,1371]},{"teal":1244,"source":"contracts/ARC11550.algo.ts:35","pc":[1372,1373,1374,1375,1376,1377]},{"teal":1245,"source":"contracts/ARC11550.algo.ts:35","pc":[1378,1379,1380,1381,1382,1383]},{"teal":1246,"source":"contracts/ARC11550.algo.ts:35","pc":[1384,1385,1386,1387,1388,1389]},{"teal":1247,"source":"contracts/ARC11550.algo.ts:35","pc":[1390,1391,1392]},{"teal":1248,"source":"contracts/ARC11550.algo.ts:35","pc":[1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414]},{"teal":1251,"source":"contracts/ARC11550.algo.ts:35","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[1415]},{"teal":1254,"source":"contracts/ARC11550.algo.ts:35","pc":[1416,1417]},{"teal":1255,"source":"contracts/ARC11550.algo.ts:35","pc":[1418]},{"teal":1256,"source":"contracts/ARC11550.algo.ts:35","pc":[1419,1420]},{"teal":1257,"source":"contracts/ARC11550.algo.ts:35","pc":[1421]},{"teal":1258,"source":"contracts/ARC11550.algo.ts:35","pc":[1422,1423,1424]},{"teal":1259,"source":"contracts/ARC11550.algo.ts:35","pc":[1425,1426]},{"teal":1260,"source":"contracts/ARC11550.algo.ts:35","pc":[1427]},{"teal":1261,"source":"contracts/ARC11550.algo.ts:35","pc":[1428,1429]},{"teal":1262,"source":"contracts/ARC11550.algo.ts:35","pc":[1430]},{"teal":1263,"source":"contracts/ARC11550.algo.ts:35","pc":[1431,1432]},{"teal":1264,"source":"contracts/ARC11550.algo.ts:35","pc":[1433,1434,1435]},{"teal":1267,"source":"contracts/ARC11550.algo.ts:35","pc":[1436,1437]},{"teal":1268,"source":"contracts/ARC11550.algo.ts:35","pc":[1438,1439]},{"teal":1269,"source":"contracts/ARC11550.algo.ts:35","pc":[1440]},{"teal":1270,"source":"contracts/ARC11550.algo.ts:35","pc":[1441]},{"teal":1271,"source":"contracts/ARC11550.algo.ts:35","pc":[1442,1443]},{"teal":1274,"source":"contracts/ARC11550.algo.ts:35","pc":[1444]},{"teal":1275,"source":"contracts/ARC11550.algo.ts:35","pc":[1445,1446]},{"teal":1276,"source":"contracts/ARC11550.algo.ts:35","pc":[1447]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAJAFAIASAoWEgGJggAAWIEFR98dQZtaW50ZWQBbQFwD3RyYW5zZmVySG9va0FwcAdtaW50Q2FwMRgUIQgLMRkIjQwE1gAAAAAAAAAAAAAEyAAAAAAAAAAAAAAANhoCFzYaAReIAAIlQ4oCACcGi/9nKyJnJweL/meJKjYaAUkVIQYSRIgABRZQsCVDigEBKCtkjACLACcHZA5EMQCABm1pbnRlcmQSRCcFiwAWUIv/vytkJQgrTGeLAIwAiSo2GgFXAgCIAAUWULAlQ4oBAShJK2SMACKMAYsBi/8VIQYKDEEAHYv/Nf8iiwEhBgsINP9MIQZYiP+UiwElCIwBQv/XiwCMAEYBiSqIAAUWULAlQ4oAAStkiSo2GgGIAARQsCVDigEBJwSL/1C+RIk2GgJXAgA2GgGIAAIlQ4oCADEAgTghBCcFi/81/zT/VwAIFxZQTgK6EkQnBIv/UL1MSEEADicEi/9QvkQ1/zT/IlNEJwSL/1C+RDX/JUk1+zT/NP9PAllJNf5JNP9MWSULgQIINf00/yI0/lKL/kkVFlcGAkxQSTX8NP80/jT9CDT/FVJQUDX/iAPPNP8nBIv/UEm8SEy/iSo2GgJJFSEEEkQ2GgEXiAAFFlCwJUOKAgEpi/8Wi/5QUL5EF4kqNhoBVwIAiAAOSRUkChZXBgJMUFCwJUOKAQEoRwMojAAijAGLAYv/FSEFCgxBAESL/zX/IosBIQULCCIINP9MJFgXjAKL/zX/IosBIQULCCQINP9MIQRYjAOLACmLAhaLA1BQvkQXFlCMAIsBJQiMAUL/sIsAjABGA4kqNhoBF4gABFCwJUOKAQEnBYv/FlC+RIkqNhoBVwIAiAAPSRUhBgoWVwYCTFBQsCVDigEBKEcCKIwAIowBiwGL/xUkCgxBACiL/zX/IosBJAsINP9MJFgXjAKLACcFiwIWUL5EUIwAiwElCIwBQv/NiwCMAEYCiTYaAVcCAIgAAiVDigEAKEcDJwZkIhNBASaxIQiyEIAEtMF6e7IaJwZkshgxALIai/9JFSMKFlcGAkxQshoisgGztDslCcU6VwQAIlNEIowAiwCL/xUjCgxBAOOLAIwBKYv/Nf8iiwEjCwgiCDT/TCRYFxaL/zX/IosBIwsIJAg0/0whBFhQUL5EF4v/Nf8iiwEjCwghBwg0/0wkWBcJKYv/Nf8iiwEjCwgiCDT/TCRYFxaL/zX/IosBIwsIJAg0/0whBFhQUEwWvymL/zX/IosBIwsIIgg0/0wkWBcWi/81/yKLASMLCCEFCDT/TCEEWFBQvkQXi/81/yKLASMLCCEHCDT/TCRYFwgpi/81/yKLASMLCCIINP9MJFgXFov/Nf8iiwEjCwghBQg0/0whBFhQUEwWv4sAJQiMAEL/EokijAKLAov/FSMKDEEA+YsCjAOL/zX/IosDIwsIJAg0/0whBFgxABJEKYv/Nf8iiwMjCwgiCDT/TCRYFxaL/zX/IosDIwsIJAg0/0whBFhQUL5EF4v/Nf8iiwMjCwghBwg0/0wkWBcJKYv/Nf8iiwMjCwgiCDT/TCRYFxaL/zX/IosDIwsIJAg0/0whBFhQUEwWvymL/zX/IosDIwsIIgg0/0wkWBcWi/81/yKLAyMLCCEFCDT/TCEEWFBQvkQXi/81/yKLAyMLCCEHCDT/TCRYFwgpi/81/yKLAyMLCCIINP9MJFgXFov/Nf8iiwMjCwghBQg0/0whBFhQUEwWv4sCJQiMAkL+/ImABJF8SLY2GgCOAfssAIAE05PsU4AEXgXxGIAE3UL1oIAEOsIyVIAEu7neZ4AE0ErLwoAEZd2HF4AEUfUEvoAEKtLrVYAERfAipTYaAI4K+vT7N/uC+5H7p/w//GT83/z3/VYANPwVNP0MQAALNPwVNP0lNflCAAg0/TT8FSI1+Qk1+ok=","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Params = {
  name: Uint8Array,
  symbol: Uint8Array,
  total: bigint,
  decimals: bigint,
  manager: string
}


/**
 * Converts the ABI tuple representation of a Params to the struct representation
 */
export function ParamsFromTuple(abiTuple: [Uint8Array, Uint8Array, bigint, bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Params, APP_SPEC.structs) as Params
}

export type IdAndAddress = {
  id: bigint,
  address: string
}


/**
 * Converts the ABI tuple representation of a IdAndAddress to the struct representation
 */
export function IdAndAddressFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.IdAndAddress, APP_SPEC.structs) as IdAndAddress
}

export type Metadata = {
  mutable: boolean,
  data: Uint8Array
}


/**
 * Converts the ABI tuple representation of a Metadata to the struct representation
 */
export function MetadataFromTuple(abiTuple: [boolean, Uint8Array]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Metadata, APP_SPEC.structs) as Metadata
}

export type MetadataKey = {
  id: bigint,
  key: string
}


/**
 * Converts the ABI tuple representation of a MetadataKey to the struct representation
 */
export function MetadataKeyFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.MetadataKey, APP_SPEC.structs) as MetadataKey
}

/**
 * The argument types for the Arc11550 contract
 */
export type Arc11550Args = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(uint64,uint64)void': {
      app: bigint | number
      mintCap: bigint | number
    }
    'arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64': {
      params: Params
    }
    'arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64': {
      params: [Uint8Array, Uint8Array, bigint | number, bigint | number, string][]
    }
    'arc11550_minted()uint64': Record<string, never>
    'arc11550_metadata((uint64,string))(bool,byte[])': {
      key: MetadataKey
    }
    'arc11550_setMetadata((uint64,string),byte[])void': {
      key: MetadataKey
      data: Uint8Array
    }
    'arc11550_balanceOf(uint64,address)uint64': {
      id: bigint | number
      account: string
    }
    'arc11550_balancesOf((uint64,address)[])uint64[]': {
      idAndAddrs: [bigint | number, string][]
    }
    'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)': {
      id: bigint | number
    }
    'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]': {
      ids: bigint[] | number[]
    }
    'arc11550_transfer((uint64,address,address,uint64)[])void': {
      transfers: [bigint | number, string, string, bigint | number][]
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(uint64,uint64)void': [app: bigint | number, mintCap: bigint | number]
    'arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64': [params: Params]
    'arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64': [params: [Uint8Array, Uint8Array, bigint | number, bigint | number, string][]]
    'arc11550_minted()uint64': []
    'arc11550_metadata((uint64,string))(bool,byte[])': [key: MetadataKey]
    'arc11550_setMetadata((uint64,string),byte[])void': [key: MetadataKey, data: Uint8Array]
    'arc11550_balanceOf(uint64,address)uint64': [id: bigint | number, account: string]
    'arc11550_balancesOf((uint64,address)[])uint64[]': [idAndAddrs: [bigint | number, string][]]
    'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)': [id: bigint | number]
    'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]': [ids: bigint[] | number[]]
    'arc11550_transfer((uint64,address,address,uint64)[])void': [transfers: [bigint | number, string, string, bigint | number][]]
  }
}

/**
 * The return type for each method
 */
export type Arc11550Returns = {
  'createApplication(uint64,uint64)void': void
  'arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64': bigint
  'arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64': bigint
  'arc11550_minted()uint64': bigint
  'arc11550_metadata((uint64,string))(bool,byte[])': Metadata
  'arc11550_setMetadata((uint64,string),byte[])void': void
  'arc11550_balanceOf(uint64,address)uint64': bigint
  'arc11550_balancesOf((uint64,address)[])uint64[]': bigint[]
  'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)': Params
  'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]': [Uint8Array, Uint8Array, bigint, bigint, string][]
  'arc11550_transfer((uint64,address,address,uint64)[])void': void
}

/**
 * Defines the types of available calls and state of the Arc11550 smart contract.
 */
export type Arc11550Types = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64,uint64)void' | 'createApplication', {
      argsObj: Arc11550Args['obj']['createApplication(uint64,uint64)void']
      argsTuple: Arc11550Args['tuple']['createApplication(uint64,uint64)void']
      returns: Arc11550Returns['createApplication(uint64,uint64)void']
    }>
    & Record<'arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64' | 'arc11550_mint', {
      argsObj: Arc11550Args['obj']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64']
      argsTuple: Arc11550Args['tuple']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64']
      returns: Arc11550Returns['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64']
    }>
    & Record<'arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64' | 'arc11550_multiMint', {
      argsObj: Arc11550Args['obj']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64']
      argsTuple: Arc11550Args['tuple']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64']
      returns: Arc11550Returns['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64']
    }>
    & Record<'arc11550_minted()uint64' | 'arc11550_minted', {
      argsObj: Arc11550Args['obj']['arc11550_minted()uint64']
      argsTuple: Arc11550Args['tuple']['arc11550_minted()uint64']
      returns: Arc11550Returns['arc11550_minted()uint64']
    }>
    & Record<'arc11550_metadata((uint64,string))(bool,byte[])' | 'arc11550_metadata', {
      argsObj: Arc11550Args['obj']['arc11550_metadata((uint64,string))(bool,byte[])']
      argsTuple: Arc11550Args['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']
      returns: Arc11550Returns['arc11550_metadata((uint64,string))(bool,byte[])']
    }>
    & Record<'arc11550_setMetadata((uint64,string),byte[])void' | 'arc11550_setMetadata', {
      argsObj: Arc11550Args['obj']['arc11550_setMetadata((uint64,string),byte[])void']
      argsTuple: Arc11550Args['tuple']['arc11550_setMetadata((uint64,string),byte[])void']
      returns: Arc11550Returns['arc11550_setMetadata((uint64,string),byte[])void']
    }>
    & Record<'arc11550_balanceOf(uint64,address)uint64' | 'arc11550_balanceOf', {
      argsObj: Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64']
      argsTuple: Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']
      returns: Arc11550Returns['arc11550_balanceOf(uint64,address)uint64']
    }>
    & Record<'arc11550_balancesOf((uint64,address)[])uint64[]' | 'arc11550_balancesOf', {
      argsObj: Arc11550Args['obj']['arc11550_balancesOf((uint64,address)[])uint64[]']
      argsTuple: Arc11550Args['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']
      returns: Arc11550Returns['arc11550_balancesOf((uint64,address)[])uint64[]']
    }>
    & Record<'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)' | 'arc11550_params', {
      argsObj: Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']
      argsTuple: Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']
      returns: Arc11550Returns['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']
    }>
    & Record<'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]' | 'arc11550_mulitpleParams', {
      argsObj: Arc11550Args['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']
      argsTuple: Arc11550Args['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']
      returns: Arc11550Returns['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']
    }>
    & Record<'arc11550_transfer((uint64,address,address,uint64)[])void' | 'arc11550_transfer', {
      argsObj: Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void']
      argsTuple: Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']
      returns: Arc11550Returns['arc11550_transfer((uint64,address,address,uint64)[])void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        minted: bigint
        transferHookApp: bigint
        mintCap: bigint
        minter: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        params: Map<bigint | number, Params>
        balances: Map<IdAndAddress, bigint>
        metadata: Map<MetadataKey, Metadata>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Arc11550Signatures = keyof Arc11550Types['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Arc11550NonVoidMethodSignatures = keyof Arc11550Types['methods'] extends infer T ? T extends keyof Arc11550Types['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Arc11550 smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Arc11550Signatures> = Arc11550Types['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc11550 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc11550Signatures> = Arc11550Types['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = Arc11550Types['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = Arc11550Types['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Arc11550CreateCallParams =
  | Expand<CallParams<Arc11550Args['obj']['createApplication(uint64,uint64)void'] | Arc11550Args['tuple']['createApplication(uint64,uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<Arc11550Args['obj']['createApplication(uint64,uint64)void'] | Arc11550Args['tuple']['createApplication(uint64,uint64)void']> & {method: 'createApplication(uint64,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Arc11550DeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Arc11550CreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc11550 smart contract
 */
export abstract class Arc11550ParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends Arc11550CreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(uint64,uint64)void':
            return Arc11550ParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ARC11550 smart contract using the createApplication(uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<Arc11550Args['obj']['createApplication(uint64,uint64)void'] | Arc11550Args['tuple']['createApplication(uint64,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(uint64,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.app, params.args.mintCap],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Mint(params: CallParams<Arc11550Args['obj']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550Args['tuple']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.params],
    }
  }
  /**
   * Constructs a no op call for the arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550MultiMint(params: CallParams<Arc11550Args['obj']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64'] | Arc11550Args['tuple']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.params],
    }
  }
  /**
   * Constructs a no op call for the arc11550_minted()uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Minted(params: CallParams<Arc11550Args['obj']['arc11550_minted()uint64'] | Arc11550Args['tuple']['arc11550_minted()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_minted()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the arc11550_metadata((uint64,string))(bool,byte[]) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Metadata(params: CallParams<Arc11550Args['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550Args['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_metadata((uint64,string))(bool,byte[])' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key],
    }
  }
  /**
   * Constructs a no op call for the arc11550_setMetadata((uint64,string),byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550SetMetadata(params: CallParams<Arc11550Args['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550Args['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_setMetadata((uint64,string),byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key, params.args.data],
    }
  }
  /**
   * Constructs a no op call for the arc11550_balanceOf(uint64,address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550BalanceOf(params: CallParams<Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_balanceOf(uint64,address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id, params.args.account],
    }
  }
  /**
   * Constructs a no op call for the arc11550_balancesOf((uint64,address)[])uint64[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550BalancesOf(params: CallParams<Arc11550Args['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550Args['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_balancesOf((uint64,address)[])uint64[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.idAndAddrs],
    }
  }
  /**
   * Constructs a no op call for the arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Params(params: CallParams<Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.id],
    }
  }
  /**
   * Constructs a no op call for the arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550MulitpleParams(params: CallParams<Arc11550Args['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | Arc11550Args['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.ids],
    }
  }
  /**
   * Constructs a no op call for the arc11550_transfer((uint64,address,address,uint64)[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550Transfer(params: CallParams<Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void'] | Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550_transfer((uint64,address,address,uint64)[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.transfers],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ARC11550 smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Arc11550Factory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Arc11550Factory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Arc11550Client(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Arc11550Client(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ARC11550 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Arc11550DeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? Arc11550ParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (Arc11550CreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new Arc11550Client(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550 smart contract using the createApplication(uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<Arc11550Args['obj']['createApplication(uint64,uint64)void'] | Arc11550Args['tuple']['createApplication(uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(Arc11550ParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550 smart contract using the createApplication(uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<Arc11550Args['obj']['createApplication(uint64,uint64)void'] | Arc11550Args['tuple']['createApplication(uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(Arc11550ParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550 smart contract using an ABI method call using the createApplication(uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<Arc11550Args['obj']['createApplication(uint64,uint64)void'] | Arc11550Args['tuple']['createApplication(uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(Arc11550ParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | Arc11550Returns['createApplication(uint64,uint64)void']) }, appClient: new Arc11550Client(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ARC11550 smart contract
 */
export class Arc11550Client {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Arc11550Client`
   *
   * @param appClient An `AppClient` instance which has been created with the Arc11550 app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Arc11550Client`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Arc11550NonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Arc11550Client` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Arc11550Client> {
    return new Arc11550Client(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Arc11550Client` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Arc11550Client> {
    return new Arc11550Client(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Mint: (params: CallParams<Arc11550Args['obj']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550Args['tuple']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550Mint(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550MultiMint: (params: CallParams<Arc11550Args['obj']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64'] | Arc11550Args['tuple']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550MultiMint(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_minted()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Minted: (params: CallParams<Arc11550Args['obj']['arc11550_minted()uint64'] | Arc11550Args['tuple']['arc11550_minted()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550Minted(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_metadata((uint64,string))(bool,byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Metadata: (params: CallParams<Arc11550Args['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550Args['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550Metadata(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_setMetadata((uint64,string),byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550SetMetadata: (params: CallParams<Arc11550Args['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550Args['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550SetMetadata(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_balanceOf(uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550BalanceOf: (params: CallParams<Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550BalanceOf(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_balancesOf((uint64,address)[])uint64[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550BalancesOf: (params: CallParams<Arc11550Args['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550Args['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550BalancesOf(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Params: (params: CallParams<Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550Params(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550MulitpleParams: (params: CallParams<Arc11550Args['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | Arc11550Args['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550MulitpleParams(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_transfer((uint64,address,address,uint64)[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550Transfer: (params: CallParams<Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void'] | Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550ParamsFactory.arc11550Transfer(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Mint: (params: CallParams<Arc11550Args['obj']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550Args['tuple']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550Mint(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550MultiMint: (params: CallParams<Arc11550Args['obj']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64'] | Arc11550Args['tuple']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550MultiMint(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_minted()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Minted: (params: CallParams<Arc11550Args['obj']['arc11550_minted()uint64'] | Arc11550Args['tuple']['arc11550_minted()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550Minted(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_metadata((uint64,string))(bool,byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Metadata: (params: CallParams<Arc11550Args['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550Args['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550Metadata(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_setMetadata((uint64,string),byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550SetMetadata: (params: CallParams<Arc11550Args['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550Args['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550SetMetadata(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_balanceOf(uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550BalanceOf: (params: CallParams<Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550BalanceOf(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_balancesOf((uint64,address)[])uint64[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550BalancesOf: (params: CallParams<Arc11550Args['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550Args['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550BalancesOf(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Params: (params: CallParams<Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550Params(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550MulitpleParams: (params: CallParams<Arc11550Args['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | Arc11550Args['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550MulitpleParams(params))
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_transfer((uint64,address,address,uint64)[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550Transfer: (params: CallParams<Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void'] | Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550ParamsFactory.arc11550Transfer(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550 smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Mint: async (params: CallParams<Arc11550Args['obj']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550Args['tuple']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550Mint(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550MultiMint: async (params: CallParams<Arc11550Args['obj']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64'] | Arc11550Args['tuple']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550MultiMint(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_minted()uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Minted: async (params: CallParams<Arc11550Args['obj']['arc11550_minted()uint64'] | Arc11550Args['tuple']['arc11550_minted()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550Minted(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_minted()uint64'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_metadata((uint64,string))(bool,byte[])` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Metadata: async (params: CallParams<Arc11550Args['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550Args['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550Metadata(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_metadata((uint64,string))(bool,byte[])'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_setMetadata((uint64,string),byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550SetMetadata: async (params: CallParams<Arc11550Args['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550Args['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550SetMetadata(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_setMetadata((uint64,string),byte[])void'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_balanceOf(uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550BalanceOf: async (params: CallParams<Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550BalanceOf(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_balanceOf(uint64,address)uint64'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_balancesOf((uint64,address)[])uint64[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550BalancesOf: async (params: CallParams<Arc11550Args['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550Args['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550BalancesOf(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_balancesOf((uint64,address)[])uint64[]'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Params: async (params: CallParams<Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550Params(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550MulitpleParams: async (params: CallParams<Arc11550Args['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | Arc11550Args['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550MulitpleParams(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'])}
    },

    /**
     * Makes a call to the ARC11550 smart contract using the `arc11550_transfer((uint64,address,address,uint64)[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550Transfer: async (params: CallParams<Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void'] | Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550ParamsFactory.arc11550Transfer(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550Returns['arc11550_transfer((uint64,address,address,uint64)[])void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Arc11550Client(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ARC11550 app
   */
  state = {
    /**
     * Methods to access global state for the current ARC11550 app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          minted: result.minted,
          transferHookApp: result.transferHookApp,
          mintCap: result.mintCap,
          minter: result.minter,
        }
      },
      /**
       * Get the current value of the minted key in global state
       */
      minted: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("minted")) as bigint | undefined },
      /**
       * Get the current value of the transferHookApp key in global state
       */
      transferHookApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("transferHookApp")) as bigint | undefined },
      /**
       * Get the current value of the mintCap key in global state
       */
      mintCap: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("mintCap")) as bigint | undefined },
      /**
       * Get the current value of the minter key in global state
       */
      minter: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("minter")) as string | undefined },
    },
    /**
     * Methods to access box state for the current ARC11550 app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the params map in box state
       */
      params: {
        /**
         * Get all current values of the params map in box state
         */
        getMap: async (): Promise<Map<bigint, Params>> => { return (await this.appClient.state.box.getMap("params")) as Map<bigint, Params> },
        /**
         * Get a current value of the params map by key from box state
         */
        value: async (key: bigint | number): Promise<Params | undefined> => { return await this.appClient.state.box.getMapValue("params", key) as Params | undefined },
      },
      /**
       * Get values from the balances map in box state
       */
      balances: {
        /**
         * Get all current values of the balances map in box state
         */
        getMap: async (): Promise<Map<IdAndAddress, bigint>> => { return (await this.appClient.state.box.getMap("balances")) as Map<IdAndAddress, bigint> },
        /**
         * Get a current value of the balances map by key from box state
         */
        value: async (key: IdAndAddress): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("balances", key) as bigint | undefined },
      },
      /**
       * Get values from the metadata map in box state
       */
      metadata: {
        /**
         * Get all current values of the metadata map in box state
         */
        getMap: async (): Promise<Map<MetadataKey, Metadata>> => { return (await this.appClient.state.box.getMap("metadata")) as Map<MetadataKey, Metadata> },
        /**
         * Get a current value of the metadata map by key from box state
         */
        value: async (key: MetadataKey): Promise<Metadata | undefined> => { return await this.appClient.state.box.getMapValue("metadata", key) as Metadata | undefined },
      },
    },
  }

  public newGroup(): Arc11550Composer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64 method call against the ARC11550 contract
       */
      arc11550Mint(params: CallParams<Arc11550Args['obj']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550Args['tuple']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Mint(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64', v))
        return this
      },
      /**
       * Add a arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64 method call against the ARC11550 contract
       */
      arc11550MultiMint(params: CallParams<Arc11550Args['obj']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64'] | Arc11550Args['tuple']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550MultiMint(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64', v))
        return this
      },
      /**
       * Add a arc11550_minted()uint64 method call against the ARC11550 contract
       */
      arc11550Minted(params: CallParams<Arc11550Args['obj']['arc11550_minted()uint64'] | Arc11550Args['tuple']['arc11550_minted()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Minted(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_minted()uint64', v))
        return this
      },
      /**
       * Add a arc11550_metadata((uint64,string))(bool,byte[]) method call against the ARC11550 contract
       */
      arc11550Metadata(params: CallParams<Arc11550Args['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550Args['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Metadata(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_metadata((uint64,string))(bool,byte[])', v))
        return this
      },
      /**
       * Add a arc11550_setMetadata((uint64,string),byte[])void method call against the ARC11550 contract
       */
      arc11550SetMetadata(params: CallParams<Arc11550Args['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550Args['tuple']['arc11550_setMetadata((uint64,string),byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550SetMetadata(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a arc11550_balanceOf(uint64,address)uint64 method call against the ARC11550 contract
       */
      arc11550BalanceOf(params: CallParams<Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550BalanceOf(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_balanceOf(uint64,address)uint64', v))
        return this
      },
      /**
       * Add a arc11550_balancesOf((uint64,address)[])uint64[] method call against the ARC11550 contract
       */
      arc11550BalancesOf(params: CallParams<Arc11550Args['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550Args['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550BalancesOf(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_balancesOf((uint64,address)[])uint64[]', v))
        return this
      },
      /**
       * Add a arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address) method call against the ARC11550 contract
       */
      arc11550Params(params: CallParams<Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Params(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)', v))
        return this
      },
      /**
       * Add a arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[] method call against the ARC11550 contract
       */
      arc11550MulitpleParams(params: CallParams<Arc11550Args['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | Arc11550Args['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550MulitpleParams(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]', v))
        return this
      },
      /**
       * Add a arc11550_transfer((uint64,address,address,uint64)[])void method call against the ARC11550 contract
       */
      arc11550Transfer(params: CallParams<Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void'] | Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550Transfer(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the ARC11550 contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Arc11550Composer
  }
}
export type Arc11550Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Mint(params?: CallParams<Arc11550Args['obj']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64'] | Arc11550Args['tuple']['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_mint((byte[32],byte[8],uint64,uint64,address))uint64'] | undefined]>

  /**
   * Calls the arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550MultiMint(params?: CallParams<Arc11550Args['obj']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64'] | Arc11550Args['tuple']['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_multiMint((byte[32],byte[8],uint64,uint64,address)[])uint64'] | undefined]>

  /**
   * Calls the arc11550_minted()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Minted(params?: CallParams<Arc11550Args['obj']['arc11550_minted()uint64'] | Arc11550Args['tuple']['arc11550_minted()uint64']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_minted()uint64'] | undefined]>

  /**
   * Calls the arc11550_metadata((uint64,string))(bool,byte[]) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Metadata(params?: CallParams<Arc11550Args['obj']['arc11550_metadata((uint64,string))(bool,byte[])'] | Arc11550Args['tuple']['arc11550_metadata((uint64,string))(bool,byte[])']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_metadata((uint64,string))(bool,byte[])'] | undefined]>

  /**
   * Calls the arc11550_setMetadata((uint64,string),byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550SetMetadata(params?: CallParams<Arc11550Args['obj']['arc11550_setMetadata((uint64,string),byte[])void'] | Arc11550Args['tuple']['arc11550_setMetadata((uint64,string),byte[])void']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_setMetadata((uint64,string),byte[])void'] | undefined]>

  /**
   * Calls the arc11550_balanceOf(uint64,address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550BalanceOf(params?: CallParams<Arc11550Args['obj']['arc11550_balanceOf(uint64,address)uint64'] | Arc11550Args['tuple']['arc11550_balanceOf(uint64,address)uint64']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_balanceOf(uint64,address)uint64'] | undefined]>

  /**
   * Calls the arc11550_balancesOf((uint64,address)[])uint64[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550BalancesOf(params?: CallParams<Arc11550Args['obj']['arc11550_balancesOf((uint64,address)[])uint64[]'] | Arc11550Args['tuple']['arc11550_balancesOf((uint64,address)[])uint64[]']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_balancesOf((uint64,address)[])uint64[]'] | undefined]>

  /**
   * Calls the arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Params(params?: CallParams<Arc11550Args['obj']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | Arc11550Args['tuple']['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_params(uint64)(byte[32],byte[8],uint64,uint64,address)'] | undefined]>

  /**
   * Calls the arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550MulitpleParams(params?: CallParams<Arc11550Args['obj']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | Arc11550Args['tuple']['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_mulitpleParams(uint64[])(byte[32],byte[8],uint64,uint64,address)[]'] | undefined]>

  /**
   * Calls the arc11550_transfer((uint64,address,address,uint64)[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550Transfer(params?: CallParams<Arc11550Args['obj']['arc11550_transfer((uint64,address,address,uint64)[])void'] | Arc11550Args['tuple']['arc11550_transfer((uint64,address,address,uint64)[])void']>): Arc11550Composer<[...TReturns, Arc11550Returns['arc11550_transfer((uint64,address,address,uint64)[])void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ARC11550 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Arc11550Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc11550Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc11550ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Arc11550ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Arc11550ComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Arc11550ComposerResults<TReturns>>
}
export type Arc11550ComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ApprovalApp","desc":"","methods":[{"name":"approveRequest","args":[{"name":"sender","type":"address"},{"name":"addrAsset","type":"(address,uint64,uint64)","struct":"AddressAsset"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]}},{"name":"approveRequestRemoval","args":[{"name":"sender","type":"address"},{"name":"addrAsset","type":"(address,uint64,uint64)","struct":"AddressAsset"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]}},{"name":"approveDeclaration","args":[{"name":"sender","type":"address"},{"name":"addrAsset","type":"(address,uint64,uint64)","struct":"AddressAsset"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]}},{"name":"approveDeclarationRemoval","args":[{"name":"sender","type":"address"},{"name":"addrAsset","type":"(address,uint64,uint64)","struct":"AddressAsset"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]}},{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}}],"arcs":[4,56],"structs":{"AddressAsset":[{"name":"addr","type":"address"},{"name":"app","type":"uint64"},{"name":"id","type":"uint64"}]},"state":{"schema":{"global":{"bytes":0,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/DeclarationRegistry.algo.ts:94","pc":[0]},{"teal":2,"source":"contracts/DeclarationRegistry.algo.ts:94","pc":[1,2,3,4,5,6]},{"teal":3,"source":"contracts/DeclarationRegistry.algo.ts:94","pc":[7,8,9,10,11,12,13,14,15]},{"teal":15,"source":"contracts/DeclarationRegistry.algo.ts:94","pc":[16,17]},{"teal":16,"source":"contracts/DeclarationRegistry.algo.ts:94","pc":[18]},{"teal":17,"source":"contracts/DeclarationRegistry.algo.ts:94","pc":[19,20]},{"teal":18,"source":"contracts/DeclarationRegistry.algo.ts:94","pc":[21]},{"teal":19,"source":"contracts/DeclarationRegistry.algo.ts:94","pc":[22,23]},{"teal":20,"source":"contracts/DeclarationRegistry.algo.ts:94","pc":[24]},{"teal":21,"source":"contracts/DeclarationRegistry.algo.ts:94","pc":[25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]},{"teal":25,"source":"contracts/DeclarationRegistry.algo.ts:94","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[51]},{"teal":30,"source":"contracts/DeclarationRegistry.algo.ts:95","pc":[52]},{"teal":33,"source":"contracts/DeclarationRegistry.algo.ts:95","pc":[53,54,55]},{"teal":34,"source":"contracts/DeclarationRegistry.algo.ts:95","pc":[56]},{"teal":35,"source":"contracts/DeclarationRegistry.algo.ts:95","pc":[57]},{"teal":36,"source":"contracts/DeclarationRegistry.algo.ts:95","pc":[58]},{"teal":37,"source":"contracts/DeclarationRegistry.algo.ts:95","pc":[59]},{"teal":40,"source":"contracts/DeclarationRegistry.algo.ts:95","errorMessage":"argument 0 (addrAsset) for approveRequest must be a (address,uint64,uint64)","pc":[60]},{"teal":43,"source":"contracts/DeclarationRegistry.algo.ts:95","pc":[61,62,63]},{"teal":44,"source":"contracts/DeclarationRegistry.algo.ts:95","pc":[64]},{"teal":45,"source":"contracts/DeclarationRegistry.algo.ts:95","pc":[65]},{"teal":46,"source":"contracts/DeclarationRegistry.algo.ts:95","pc":[66]},{"teal":47,"source":"contracts/DeclarationRegistry.algo.ts:95","pc":[67]},{"teal":50,"source":"contracts/DeclarationRegistry.algo.ts:95","errorMessage":"argument 1 (sender) for approveRequest must be a address","pc":[68]},{"teal":53,"source":"contracts/DeclarationRegistry.algo.ts:95","pc":[69,70,71]},{"teal":54,"source":"contracts/DeclarationRegistry.algo.ts:95","pc":[72]},{"teal":55,"source":"contracts/DeclarationRegistry.algo.ts:95","pc":[73]},{"teal":56,"source":"contracts/DeclarationRegistry.algo.ts:95","pc":[74,75]},{"teal":57,"source":"contracts/DeclarationRegistry.algo.ts:95","pc":[76]},{"teal":58,"source":"contracts/DeclarationRegistry.algo.ts:95","pc":[77]},{"teal":59,"source":"contracts/DeclarationRegistry.algo.ts:95","pc":[78]},{"teal":60,"source":"contracts/DeclarationRegistry.algo.ts:95","pc":[79]},{"teal":61,"source":"contracts/DeclarationRegistry.algo.ts:95","pc":[80]},{"teal":65,"source":"contracts/DeclarationRegistry.algo.ts:95","pc":[81,82,83]},{"teal":69,"source":"contracts/DeclarationRegistry.algo.ts:96","pc":[84]},{"teal":70,"source":"contracts/DeclarationRegistry.algo.ts:95","pc":[85]},{"teal":75,"source":"contracts/DeclarationRegistry.algo.ts:99","pc":[86]},{"teal":78,"source":"contracts/DeclarationRegistry.algo.ts:99","pc":[87,88,89]},{"teal":79,"source":"contracts/DeclarationRegistry.algo.ts:99","pc":[90]},{"teal":80,"source":"contracts/DeclarationRegistry.algo.ts:99","pc":[91]},{"teal":81,"source":"contracts/DeclarationRegistry.algo.ts:99","pc":[92]},{"teal":82,"source":"contracts/DeclarationRegistry.algo.ts:99","pc":[93]},{"teal":85,"source":"contracts/DeclarationRegistry.algo.ts:99","errorMessage":"argument 0 (addrAsset) for approveRequestRemoval must be a (address,uint64,uint64)","pc":[94]},{"teal":88,"source":"contracts/DeclarationRegistry.algo.ts:99","pc":[95,96,97]},{"teal":89,"source":"contracts/DeclarationRegistry.algo.ts:99","pc":[98]},{"teal":90,"source":"contracts/DeclarationRegistry.algo.ts:99","pc":[99]},{"teal":91,"source":"contracts/DeclarationRegistry.algo.ts:99","pc":[100]},{"teal":92,"source":"contracts/DeclarationRegistry.algo.ts:99","pc":[101]},{"teal":95,"source":"contracts/DeclarationRegistry.algo.ts:99","errorMessage":"argument 1 (sender) for approveRequestRemoval must be a address","pc":[102]},{"teal":98,"source":"contracts/DeclarationRegistry.algo.ts:99","pc":[103,104,105]},{"teal":99,"source":"contracts/DeclarationRegistry.algo.ts:99","pc":[106]},{"teal":100,"source":"contracts/DeclarationRegistry.algo.ts:99","pc":[107]},{"teal":101,"source":"contracts/DeclarationRegistry.algo.ts:99","pc":[108,109]},{"teal":102,"source":"contracts/DeclarationRegistry.algo.ts:99","pc":[110]},{"teal":103,"source":"contracts/DeclarationRegistry.algo.ts:99","pc":[111]},{"teal":104,"source":"contracts/DeclarationRegistry.algo.ts:99","pc":[112]},{"teal":105,"source":"contracts/DeclarationRegistry.algo.ts:99","pc":[113]},{"teal":106,"source":"contracts/DeclarationRegistry.algo.ts:99","pc":[114]},{"teal":110,"source":"contracts/DeclarationRegistry.algo.ts:99","pc":[115,116,117]},{"teal":114,"source":"contracts/DeclarationRegistry.algo.ts:100","pc":[118]},{"teal":115,"source":"contracts/DeclarationRegistry.algo.ts:99","pc":[119]},{"teal":120,"source":"contracts/DeclarationRegistry.algo.ts:103","pc":[120]},{"teal":123,"source":"contracts/DeclarationRegistry.algo.ts:103","pc":[121,122,123]},{"teal":124,"source":"contracts/DeclarationRegistry.algo.ts:103","pc":[124]},{"teal":125,"source":"contracts/DeclarationRegistry.algo.ts:103","pc":[125]},{"teal":126,"source":"contracts/DeclarationRegistry.algo.ts:103","pc":[126]},{"teal":127,"source":"contracts/DeclarationRegistry.algo.ts:103","pc":[127]},{"teal":130,"source":"contracts/DeclarationRegistry.algo.ts:103","errorMessage":"argument 0 (addrAsset) for approveDeclaration must be a (address,uint64,uint64)","pc":[128]},{"teal":133,"source":"contracts/DeclarationRegistry.algo.ts:103","pc":[129,130,131]},{"teal":134,"source":"contracts/DeclarationRegistry.algo.ts:103","pc":[132]},{"teal":135,"source":"contracts/DeclarationRegistry.algo.ts:103","pc":[133]},{"teal":136,"source":"contracts/DeclarationRegistry.algo.ts:103","pc":[134]},{"teal":137,"source":"contracts/DeclarationRegistry.algo.ts:103","pc":[135]},{"teal":140,"source":"contracts/DeclarationRegistry.algo.ts:103","errorMessage":"argument 1 (sender) for approveDeclaration must be a address","pc":[136]},{"teal":143,"source":"contracts/DeclarationRegistry.algo.ts:103","pc":[137,138,139]},{"teal":144,"source":"contracts/DeclarationRegistry.algo.ts:103","pc":[140]},{"teal":145,"source":"contracts/DeclarationRegistry.algo.ts:103","pc":[141]},{"teal":146,"source":"contracts/DeclarationRegistry.algo.ts:103","pc":[142,143]},{"teal":147,"source":"contracts/DeclarationRegistry.algo.ts:103","pc":[144]},{"teal":148,"source":"contracts/DeclarationRegistry.algo.ts:103","pc":[145]},{"teal":149,"source":"contracts/DeclarationRegistry.algo.ts:103","pc":[146]},{"teal":150,"source":"contracts/DeclarationRegistry.algo.ts:103","pc":[147]},{"teal":151,"source":"contracts/DeclarationRegistry.algo.ts:103","pc":[148]},{"teal":155,"source":"contracts/DeclarationRegistry.algo.ts:103","pc":[149,150,151]},{"teal":159,"source":"contracts/DeclarationRegistry.algo.ts:104","pc":[152,153]},{"teal":160,"source":"contracts/DeclarationRegistry.algo.ts:104","pc":[154,155]},{"teal":161,"source":"contracts/DeclarationRegistry.algo.ts:104","pc":[156,157,158]},{"teal":162,"source":"contracts/DeclarationRegistry.algo.ts:104","pc":[159]},{"teal":163,"source":"contracts/DeclarationRegistry.algo.ts:103","pc":[160]},{"teal":168,"source":"contracts/DeclarationRegistry.algo.ts:107","pc":[161]},{"teal":171,"source":"contracts/DeclarationRegistry.algo.ts:107","pc":[162,163,164]},{"teal":172,"source":"contracts/DeclarationRegistry.algo.ts:107","pc":[165]},{"teal":173,"source":"contracts/DeclarationRegistry.algo.ts:107","pc":[166]},{"teal":174,"source":"contracts/DeclarationRegistry.algo.ts:107","pc":[167]},{"teal":175,"source":"contracts/DeclarationRegistry.algo.ts:107","pc":[168]},{"teal":178,"source":"contracts/DeclarationRegistry.algo.ts:107","errorMessage":"argument 0 (addrAsset) for approveDeclarationRemoval must be a (address,uint64,uint64)","pc":[169]},{"teal":181,"source":"contracts/DeclarationRegistry.algo.ts:107","pc":[170,171,172]},{"teal":182,"source":"contracts/DeclarationRegistry.algo.ts:107","pc":[173]},{"teal":183,"source":"contracts/DeclarationRegistry.algo.ts:107","pc":[174]},{"teal":184,"source":"contracts/DeclarationRegistry.algo.ts:107","pc":[175]},{"teal":185,"source":"contracts/DeclarationRegistry.algo.ts:107","pc":[176]},{"teal":188,"source":"contracts/DeclarationRegistry.algo.ts:107","errorMessage":"argument 1 (sender) for approveDeclarationRemoval must be a address","pc":[177]},{"teal":191,"source":"contracts/DeclarationRegistry.algo.ts:107","pc":[178,179,180]},{"teal":192,"source":"contracts/DeclarationRegistry.algo.ts:107","pc":[181]},{"teal":193,"source":"contracts/DeclarationRegistry.algo.ts:107","pc":[182]},{"teal":194,"source":"contracts/DeclarationRegistry.algo.ts:107","pc":[183,184]},{"teal":195,"source":"contracts/DeclarationRegistry.algo.ts:107","pc":[185]},{"teal":196,"source":"contracts/DeclarationRegistry.algo.ts:107","pc":[186]},{"teal":197,"source":"contracts/DeclarationRegistry.algo.ts:107","pc":[187]},{"teal":198,"source":"contracts/DeclarationRegistry.algo.ts:107","pc":[188]},{"teal":199,"source":"contracts/DeclarationRegistry.algo.ts:107","pc":[189]},{"teal":203,"source":"contracts/DeclarationRegistry.algo.ts:107","pc":[190,191,192]},{"teal":207,"source":"contracts/DeclarationRegistry.algo.ts:108","pc":[193,194]},{"teal":208,"source":"contracts/DeclarationRegistry.algo.ts:108","pc":[195,196]},{"teal":209,"source":"contracts/DeclarationRegistry.algo.ts:108","pc":[197,198,199]},{"teal":210,"source":"contracts/DeclarationRegistry.algo.ts:108","pc":[200]},{"teal":211,"source":"contracts/DeclarationRegistry.algo.ts:107","pc":[201]},{"teal":214,"source":"contracts/DeclarationRegistry.algo.ts:94","pc":[202]},{"teal":215,"source":"contracts/DeclarationRegistry.algo.ts:94","pc":[203]},{"teal":218,"source":"contracts/DeclarationRegistry.algo.ts:94","pc":[204,205,206,207,208,209]},{"teal":219,"source":"contracts/DeclarationRegistry.algo.ts:94","pc":[210,211,212]},{"teal":220,"source":"contracts/DeclarationRegistry.algo.ts:94","pc":[213,214,215,216]},{"teal":223,"source":"contracts/DeclarationRegistry.algo.ts:94","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[217]},{"teal":226,"source":"contracts/DeclarationRegistry.algo.ts:94","pc":[218,219,220,221,222,223]},{"teal":227,"source":"contracts/DeclarationRegistry.algo.ts:94","pc":[224,225,226,227,228,229]},{"teal":228,"source":"contracts/DeclarationRegistry.algo.ts:94","pc":[230,231,232,233,234,235]},{"teal":229,"source":"contracts/DeclarationRegistry.algo.ts:94","pc":[236,237,238,239,240,241]},{"teal":230,"source":"contracts/DeclarationRegistry.algo.ts:94","pc":[242,243,244]},{"teal":231,"source":"contracts/DeclarationRegistry.algo.ts:94","pc":[245,246,247,248,249,250,251,252,253,254]},{"teal":234,"source":"contracts/DeclarationRegistry.algo.ts:94","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[255]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxIDAgMzIgNDgKYnl0ZWNibG9jayAweDE1MWY3Yzc1IDB4MDAKCi8vIFRoaXMgVEVBTCB3YXMgZ2VuZXJhdGVkIGJ5IFRFQUxTY3JpcHQgdjAuMTA2LjMKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCnB1c2hpbnQgNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggKmNhbGxfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKmNyZWF0ZV9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRAoKKk5PVF9JTVBMRU1FTlRFRDoKCS8vIFRoZSByZXF1ZXN0ZWQgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGlzIGNvbnRyYWN0LiBBcmUgeW91IHVzaW5nIHRoZSBjb3JyZWN0IE9uQ29tcGxldGU/IERpZCB5b3Ugc2V0IHlvdXIgYXBwIElEPwoJZXJyCgovLyBhcHByb3ZlUmVxdWVzdChhZGRyZXNzLChhZGRyZXNzLHVpbnQ2NCx1aW50NjQpKWJvb2wKKmFiaV9yb3V0ZV9hcHByb3ZlUmVxdWVzdDoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMCAvLyAweDE1MWY3Yzc1CgoJLy8gYWRkckFzc2V0OiAoYWRkcmVzcyx1aW50NjQsdWludDY0KQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludGMgMyAvLyA0OAoJPT0KCgkvLyBhcmd1bWVudCAwIChhZGRyQXNzZXQpIGZvciBhcHByb3ZlUmVxdWVzdCBtdXN0IGJlIGEgKGFkZHJlc3MsdWludDY0LHVpbnQ2NCkKCWFzc2VydAoKCS8vIHNlbmRlcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludGMgMiAvLyAzMgoJPT0KCgkvLyBhcmd1bWVudCAxIChzZW5kZXIpIGZvciBhcHByb3ZlUmVxdWVzdCBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBhcHByb3ZlUmVxdWVzdChhZGRyZXNzLChhZGRyZXNzLHVpbnQ2NCx1aW50NjQpKWJvb2wKCWNhbGxzdWIgYXBwcm92ZVJlcXVlc3QKCWJ5dGVjIDEgLy8gMHgwMAoJaW50YyAxIC8vIDAKCXVuY292ZXIgMgoJc2V0Yml0Cgljb25jYXQKCWxvZwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gYXBwcm92ZVJlcXVlc3Qoc2VuZGVyOiBBZGRyZXNzLCBhZGRyQXNzZXQ6IEFkZHJlc3NBc3NldCk6IGJvb2xlYW4KYXBwcm92ZVJlcXVlc3Q6Cglwcm90byAyIDEKCgkvLyBjb250cmFjdHMvRGVjbGFyYXRpb25SZWdpc3RyeS5hbGdvLnRzOjk2CgkvLyByZXR1cm4gdHJ1ZTsKCWludGMgMCAvLyAxCglyZXRzdWIKCi8vIGFwcHJvdmVSZXF1ZXN0UmVtb3ZhbChhZGRyZXNzLChhZGRyZXNzLHVpbnQ2NCx1aW50NjQpKWJvb2wKKmFiaV9yb3V0ZV9hcHByb3ZlUmVxdWVzdFJlbW92YWw6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDAgLy8gMHgxNTFmN2M3NQoKCS8vIGFkZHJBc3NldDogKGFkZHJlc3MsdWludDY0LHVpbnQ2NCkKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnRjIDMgLy8gNDgKCT09CgoJLy8gYXJndW1lbnQgMCAoYWRkckFzc2V0KSBmb3IgYXBwcm92ZVJlcXVlc3RSZW1vdmFsIG11c3QgYmUgYSAoYWRkcmVzcyx1aW50NjQsdWludDY0KQoJYXNzZXJ0CgoJLy8gc2VuZGVyOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyAyIC8vIDMyCgk9PQoKCS8vIGFyZ3VtZW50IDEgKHNlbmRlcikgZm9yIGFwcHJvdmVSZXF1ZXN0UmVtb3ZhbCBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBhcHByb3ZlUmVxdWVzdFJlbW92YWwoYWRkcmVzcywoYWRkcmVzcyx1aW50NjQsdWludDY0KSlib29sCgljYWxsc3ViIGFwcHJvdmVSZXF1ZXN0UmVtb3ZhbAoJYnl0ZWMgMSAvLyAweDAwCglpbnRjIDEgLy8gMAoJdW5jb3ZlciAyCglzZXRiaXQKCWNvbmNhdAoJbG9nCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBhcHByb3ZlUmVxdWVzdFJlbW92YWwoc2VuZGVyOiBBZGRyZXNzLCBhZGRyQXNzZXQ6IEFkZHJlc3NBc3NldCk6IGJvb2xlYW4KYXBwcm92ZVJlcXVlc3RSZW1vdmFsOgoJcHJvdG8gMiAxCgoJLy8gY29udHJhY3RzL0RlY2xhcmF0aW9uUmVnaXN0cnkuYWxnby50czoxMDAKCS8vIHJldHVybiB0cnVlOwoJaW50YyAwIC8vIDEKCXJldHN1YgoKLy8gYXBwcm92ZURlY2xhcmF0aW9uKGFkZHJlc3MsKGFkZHJlc3MsdWludDY0LHVpbnQ2NCkpYm9vbAoqYWJpX3JvdXRlX2FwcHJvdmVEZWNsYXJhdGlvbjoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMCAvLyAweDE1MWY3Yzc1CgoJLy8gYWRkckFzc2V0OiAoYWRkcmVzcyx1aW50NjQsdWludDY0KQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludGMgMyAvLyA0OAoJPT0KCgkvLyBhcmd1bWVudCAwIChhZGRyQXNzZXQpIGZvciBhcHByb3ZlRGVjbGFyYXRpb24gbXVzdCBiZSBhIChhZGRyZXNzLHVpbnQ2NCx1aW50NjQpCglhc3NlcnQKCgkvLyBzZW5kZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnRjIDIgLy8gMzIKCT09CgoJLy8gYXJndW1lbnQgMSAoc2VuZGVyKSBmb3IgYXBwcm92ZURlY2xhcmF0aW9uIG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBleGVjdXRlIGFwcHJvdmVEZWNsYXJhdGlvbihhZGRyZXNzLChhZGRyZXNzLHVpbnQ2NCx1aW50NjQpKWJvb2wKCWNhbGxzdWIgYXBwcm92ZURlY2xhcmF0aW9uCglieXRlYyAxIC8vIDB4MDAKCWludGMgMSAvLyAwCgl1bmNvdmVyIDIKCXNldGJpdAoJY29uY2F0Cglsb2cKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGFwcHJvdmVEZWNsYXJhdGlvbihzZW5kZXI6IEFkZHJlc3MsIGFkZHJBc3NldDogQWRkcmVzc0Fzc2V0KTogYm9vbGVhbgphcHByb3ZlRGVjbGFyYXRpb246Cglwcm90byAyIDEKCgkvLyBjb250cmFjdHMvRGVjbGFyYXRpb25SZWdpc3RyeS5hbGdvLnRzOjEwNAoJLy8gcmV0dXJuIHNlbmRlciA9PT0gYWRkckFzc2V0LmFkZHI7CglmcmFtZV9kaWcgLTEgLy8gc2VuZGVyOiBBZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gYWRkckFzc2V0OiBBZGRyZXNzQXNzZXQKCWV4dHJhY3QgMCAzMgoJPT0KCXJldHN1YgoKLy8gYXBwcm92ZURlY2xhcmF0aW9uUmVtb3ZhbChhZGRyZXNzLChhZGRyZXNzLHVpbnQ2NCx1aW50NjQpKWJvb2wKKmFiaV9yb3V0ZV9hcHByb3ZlRGVjbGFyYXRpb25SZW1vdmFsOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAwIC8vIDB4MTUxZjdjNzUKCgkvLyBhZGRyQXNzZXQ6IChhZGRyZXNzLHVpbnQ2NCx1aW50NjQpCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50YyAzIC8vIDQ4Cgk9PQoKCS8vIGFyZ3VtZW50IDAgKGFkZHJBc3NldCkgZm9yIGFwcHJvdmVEZWNsYXJhdGlvblJlbW92YWwgbXVzdCBiZSBhIChhZGRyZXNzLHVpbnQ2NCx1aW50NjQpCglhc3NlcnQKCgkvLyBzZW5kZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnRjIDIgLy8gMzIKCT09CgoJLy8gYXJndW1lbnQgMSAoc2VuZGVyKSBmb3IgYXBwcm92ZURlY2xhcmF0aW9uUmVtb3ZhbCBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBhcHByb3ZlRGVjbGFyYXRpb25SZW1vdmFsKGFkZHJlc3MsKGFkZHJlc3MsdWludDY0LHVpbnQ2NCkpYm9vbAoJY2FsbHN1YiBhcHByb3ZlRGVjbGFyYXRpb25SZW1vdmFsCglieXRlYyAxIC8vIDB4MDAKCWludGMgMSAvLyAwCgl1bmNvdmVyIDIKCXNldGJpdAoJY29uY2F0Cglsb2cKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGFwcHJvdmVEZWNsYXJhdGlvblJlbW92YWwoc2VuZGVyOiBBZGRyZXNzLCBhZGRyQXNzZXQ6IEFkZHJlc3NBc3NldCk6IGJvb2xlYW4KYXBwcm92ZURlY2xhcmF0aW9uUmVtb3ZhbDoKCXByb3RvIDIgMQoKCS8vIGNvbnRyYWN0cy9EZWNsYXJhdGlvblJlZ2lzdHJ5LmFsZ28udHM6MTA4CgkvLyByZXR1cm4gc2VuZGVyID09PSBhZGRyQXNzZXQuYWRkcjsKCWZyYW1lX2RpZyAtMSAvLyBzZW5kZXI6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMiAvLyBhZGRyQXNzZXQ6IEFkZHJlc3NBc3NldAoJZXh0cmFjdCAwIDMyCgk9PQoJcmV0c3ViCgoqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJaW50YyAwIC8vIDEKCXJldHVybgoKKmNyZWF0ZV9Ob09wOgoJcHVzaGJ5dGVzIDB4Yjg0NDdiMzYgLy8gbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbigpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb24KCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY3JlYXRlIE5vT3AKCWVycgoKKmNhbGxfTm9PcDoKCXB1c2hieXRlcyAweDk2NDcwZTQwIC8vIG1ldGhvZCAiYXBwcm92ZVJlcXVlc3QoYWRkcmVzcywoYWRkcmVzcyx1aW50NjQsdWludDY0KSlib29sIgoJcHVzaGJ5dGVzIDB4ZjY5NzkyZDkgLy8gbWV0aG9kICJhcHByb3ZlUmVxdWVzdFJlbW92YWwoYWRkcmVzcywoYWRkcmVzcyx1aW50NjQsdWludDY0KSlib29sIgoJcHVzaGJ5dGVzIDB4ZTM4YTY5YjggLy8gbWV0aG9kICJhcHByb3ZlRGVjbGFyYXRpb24oYWRkcmVzcywoYWRkcmVzcyx1aW50NjQsdWludDY0KSlib29sIgoJcHVzaGJ5dGVzIDB4M2M3MWQ1MDEgLy8gbWV0aG9kICJhcHByb3ZlRGVjbGFyYXRpb25SZW1vdmFsKGFkZHJlc3MsKGFkZHJlc3MsdWludDY0LHVpbnQ2NCkpYm9vbCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfYXBwcm92ZVJlcXVlc3QgKmFiaV9yb3V0ZV9hcHByb3ZlUmVxdWVzdFJlbW92YWwgKmFiaV9yb3V0ZV9hcHByb3ZlRGVjbGFyYXRpb24gKmFiaV9yb3V0ZV9hcHByb3ZlRGVjbGFyYXRpb25SZW1vdmFsCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgTm9PcAoJZXJy","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAEAQAgMCYCBBUffHUBADEYFIEGCzEZCI0MAKcAAAAAAAAAAAAAAJkAAAAAAAAAAAAAACg2GgJJFSUSRDYaAUkVJBJEiAAJKSNPAlRQsCJDigIBIokoNhoCSRUlEkQ2GgFJFSQSRIgACSkjTwJUULAiQ4oCASKJKDYaAkkVJRJENhoBSRUkEkSIAAkpI08CVFCwIkOKAgGL/4v+VwAgEokoNhoCSRUlEkQ2GgFJFSQSRIgACSkjTwJUULAiQ4oCAYv/i/5XACASiSJDgAS4RHs2NhoAjgH/8QCABJZHDkCABPaXktmABOOKabiABDxx1QE2GgCOBP81/1f/ef+iAA==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type AddressAsset = {
  addr: string,
  app: bigint,
  id: bigint
}


/**
 * Converts the ABI tuple representation of a AddressAsset to the struct representation
 */
export function AddressAssetFromTuple(abiTuple: [string, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AddressAsset, APP_SPEC.structs) as AddressAsset
}

/**
 * The argument types for the ApprovalApp contract
 */
export type ApprovalAppArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'approveRequest(address,(address,uint64,uint64))bool': {
      sender: string
      addrAsset: AddressAsset
    }
    'approveRequestRemoval(address,(address,uint64,uint64))bool': {
      sender: string
      addrAsset: AddressAsset
    }
    'approveDeclaration(address,(address,uint64,uint64))bool': {
      sender: string
      addrAsset: AddressAsset
    }
    'approveDeclarationRemoval(address,(address,uint64,uint64))bool': {
      sender: string
      addrAsset: AddressAsset
    }
    'createApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'approveRequest(address,(address,uint64,uint64))bool': [sender: string, addrAsset: AddressAsset]
    'approveRequestRemoval(address,(address,uint64,uint64))bool': [sender: string, addrAsset: AddressAsset]
    'approveDeclaration(address,(address,uint64,uint64))bool': [sender: string, addrAsset: AddressAsset]
    'approveDeclarationRemoval(address,(address,uint64,uint64))bool': [sender: string, addrAsset: AddressAsset]
    'createApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type ApprovalAppReturns = {
  'approveRequest(address,(address,uint64,uint64))bool': boolean
  'approveRequestRemoval(address,(address,uint64,uint64))bool': boolean
  'approveDeclaration(address,(address,uint64,uint64))bool': boolean
  'approveDeclarationRemoval(address,(address,uint64,uint64))bool': boolean
  'createApplication()void': void
}

/**
 * Defines the types of available calls and state of the ApprovalApp smart contract.
 */
export type ApprovalAppTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'approveRequest(address,(address,uint64,uint64))bool' | 'approveRequest', {
      argsObj: ApprovalAppArgs['obj']['approveRequest(address,(address,uint64,uint64))bool']
      argsTuple: ApprovalAppArgs['tuple']['approveRequest(address,(address,uint64,uint64))bool']
      returns: ApprovalAppReturns['approveRequest(address,(address,uint64,uint64))bool']
    }>
    & Record<'approveRequestRemoval(address,(address,uint64,uint64))bool' | 'approveRequestRemoval', {
      argsObj: ApprovalAppArgs['obj']['approveRequestRemoval(address,(address,uint64,uint64))bool']
      argsTuple: ApprovalAppArgs['tuple']['approveRequestRemoval(address,(address,uint64,uint64))bool']
      returns: ApprovalAppReturns['approveRequestRemoval(address,(address,uint64,uint64))bool']
    }>
    & Record<'approveDeclaration(address,(address,uint64,uint64))bool' | 'approveDeclaration', {
      argsObj: ApprovalAppArgs['obj']['approveDeclaration(address,(address,uint64,uint64))bool']
      argsTuple: ApprovalAppArgs['tuple']['approveDeclaration(address,(address,uint64,uint64))bool']
      returns: ApprovalAppReturns['approveDeclaration(address,(address,uint64,uint64))bool']
    }>
    & Record<'approveDeclarationRemoval(address,(address,uint64,uint64))bool' | 'approveDeclarationRemoval', {
      argsObj: ApprovalAppArgs['obj']['approveDeclarationRemoval(address,(address,uint64,uint64))bool']
      argsTuple: ApprovalAppArgs['tuple']['approveDeclarationRemoval(address,(address,uint64,uint64))bool']
      returns: ApprovalAppReturns['approveDeclarationRemoval(address,(address,uint64,uint64))bool']
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: ApprovalAppArgs['obj']['createApplication()void']
      argsTuple: ApprovalAppArgs['tuple']['createApplication()void']
      returns: ApprovalAppReturns['createApplication()void']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type ApprovalAppSignatures = keyof ApprovalAppTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type ApprovalAppNonVoidMethodSignatures = keyof ApprovalAppTypes['methods'] extends infer T ? T extends keyof ApprovalAppTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the ApprovalApp smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends ApprovalAppSignatures> = ApprovalAppTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ApprovalApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ApprovalAppSignatures> = ApprovalAppTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type ApprovalAppCreateCallParams =
  | Expand<CallParams<ApprovalAppArgs['obj']['createApplication()void'] | ApprovalAppArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<ApprovalAppArgs['obj']['createApplication()void'] | ApprovalAppArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type ApprovalAppDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: ApprovalAppCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the ApprovalApp smart contract
 */
export abstract class ApprovalAppParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends ApprovalAppCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return ApprovalAppParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ApprovalApp smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<ApprovalAppArgs['obj']['createApplication()void'] | ApprovalAppArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the approveRequest(address,(address,uint64,uint64))bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static approveRequest(params: CallParams<ApprovalAppArgs['obj']['approveRequest(address,(address,uint64,uint64))bool'] | ApprovalAppArgs['tuple']['approveRequest(address,(address,uint64,uint64))bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'approveRequest(address,(address,uint64,uint64))bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.sender, params.args.addrAsset],
    }
  }
  /**
   * Constructs a no op call for the approveRequestRemoval(address,(address,uint64,uint64))bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static approveRequestRemoval(params: CallParams<ApprovalAppArgs['obj']['approveRequestRemoval(address,(address,uint64,uint64))bool'] | ApprovalAppArgs['tuple']['approveRequestRemoval(address,(address,uint64,uint64))bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'approveRequestRemoval(address,(address,uint64,uint64))bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.sender, params.args.addrAsset],
    }
  }
  /**
   * Constructs a no op call for the approveDeclaration(address,(address,uint64,uint64))bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static approveDeclaration(params: CallParams<ApprovalAppArgs['obj']['approveDeclaration(address,(address,uint64,uint64))bool'] | ApprovalAppArgs['tuple']['approveDeclaration(address,(address,uint64,uint64))bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'approveDeclaration(address,(address,uint64,uint64))bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.sender, params.args.addrAsset],
    }
  }
  /**
   * Constructs a no op call for the approveDeclarationRemoval(address,(address,uint64,uint64))bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static approveDeclarationRemoval(params: CallParams<ApprovalAppArgs['obj']['approveDeclarationRemoval(address,(address,uint64,uint64))bool'] | ApprovalAppArgs['tuple']['approveDeclarationRemoval(address,(address,uint64,uint64))bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'approveDeclarationRemoval(address,(address,uint64,uint64))bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.sender, params.args.addrAsset],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ApprovalApp smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class ApprovalAppFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `ApprovalAppFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new ApprovalAppClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new ApprovalAppClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ApprovalApp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: ApprovalAppDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? ApprovalAppParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (ApprovalAppCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new ApprovalAppClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ApprovalApp smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<ApprovalAppArgs['obj']['createApplication()void'] | ApprovalAppArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(ApprovalAppParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ApprovalApp smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<ApprovalAppArgs['obj']['createApplication()void'] | ApprovalAppArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(ApprovalAppParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ApprovalApp smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<ApprovalAppArgs['obj']['createApplication()void'] | ApprovalAppArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(ApprovalAppParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | ApprovalAppReturns['createApplication()void']) }, appClient: new ApprovalAppClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ApprovalApp smart contract
 */
export class ApprovalAppClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `ApprovalAppClient`
   *
   * @param appClient An `AppClient` instance which has been created with the ApprovalApp app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `ApprovalAppClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends ApprovalAppNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `ApprovalAppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<ApprovalAppClient> {
    return new ApprovalAppClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `ApprovalAppClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<ApprovalAppClient> {
    return new ApprovalAppClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ApprovalApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ApprovalApp smart contract using the `approveRequest(address,(address,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    approveRequest: (params: CallParams<ApprovalAppArgs['obj']['approveRequest(address,(address,uint64,uint64))bool'] | ApprovalAppArgs['tuple']['approveRequest(address,(address,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ApprovalAppParamsFactory.approveRequest(params))
    },

    /**
     * Makes a call to the ApprovalApp smart contract using the `approveRequestRemoval(address,(address,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    approveRequestRemoval: (params: CallParams<ApprovalAppArgs['obj']['approveRequestRemoval(address,(address,uint64,uint64))bool'] | ApprovalAppArgs['tuple']['approveRequestRemoval(address,(address,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ApprovalAppParamsFactory.approveRequestRemoval(params))
    },

    /**
     * Makes a call to the ApprovalApp smart contract using the `approveDeclaration(address,(address,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    approveDeclaration: (params: CallParams<ApprovalAppArgs['obj']['approveDeclaration(address,(address,uint64,uint64))bool'] | ApprovalAppArgs['tuple']['approveDeclaration(address,(address,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ApprovalAppParamsFactory.approveDeclaration(params))
    },

    /**
     * Makes a call to the ApprovalApp smart contract using the `approveDeclarationRemoval(address,(address,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    approveDeclarationRemoval: (params: CallParams<ApprovalAppArgs['obj']['approveDeclarationRemoval(address,(address,uint64,uint64))bool'] | ApprovalAppArgs['tuple']['approveDeclarationRemoval(address,(address,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(ApprovalAppParamsFactory.approveDeclarationRemoval(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ApprovalApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ApprovalApp smart contract using the `approveRequest(address,(address,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    approveRequest: (params: CallParams<ApprovalAppArgs['obj']['approveRequest(address,(address,uint64,uint64))bool'] | ApprovalAppArgs['tuple']['approveRequest(address,(address,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ApprovalAppParamsFactory.approveRequest(params))
    },

    /**
     * Makes a call to the ApprovalApp smart contract using the `approveRequestRemoval(address,(address,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    approveRequestRemoval: (params: CallParams<ApprovalAppArgs['obj']['approveRequestRemoval(address,(address,uint64,uint64))bool'] | ApprovalAppArgs['tuple']['approveRequestRemoval(address,(address,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ApprovalAppParamsFactory.approveRequestRemoval(params))
    },

    /**
     * Makes a call to the ApprovalApp smart contract using the `approveDeclaration(address,(address,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    approveDeclaration: (params: CallParams<ApprovalAppArgs['obj']['approveDeclaration(address,(address,uint64,uint64))bool'] | ApprovalAppArgs['tuple']['approveDeclaration(address,(address,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ApprovalAppParamsFactory.approveDeclaration(params))
    },

    /**
     * Makes a call to the ApprovalApp smart contract using the `approveDeclarationRemoval(address,(address,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    approveDeclarationRemoval: (params: CallParams<ApprovalAppArgs['obj']['approveDeclarationRemoval(address,(address,uint64,uint64))bool'] | ApprovalAppArgs['tuple']['approveDeclarationRemoval(address,(address,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(ApprovalAppParamsFactory.approveDeclarationRemoval(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ApprovalApp smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ApprovalApp smart contract using the `approveRequest(address,(address,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    approveRequest: async (params: CallParams<ApprovalAppArgs['obj']['approveRequest(address,(address,uint64,uint64))bool'] | ApprovalAppArgs['tuple']['approveRequest(address,(address,uint64,uint64))bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ApprovalAppParamsFactory.approveRequest(params))
      return {...result, return: result.return as unknown as (undefined | ApprovalAppReturns['approveRequest(address,(address,uint64,uint64))bool'])}
    },

    /**
     * Makes a call to the ApprovalApp smart contract using the `approveRequestRemoval(address,(address,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    approveRequestRemoval: async (params: CallParams<ApprovalAppArgs['obj']['approveRequestRemoval(address,(address,uint64,uint64))bool'] | ApprovalAppArgs['tuple']['approveRequestRemoval(address,(address,uint64,uint64))bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ApprovalAppParamsFactory.approveRequestRemoval(params))
      return {...result, return: result.return as unknown as (undefined | ApprovalAppReturns['approveRequestRemoval(address,(address,uint64,uint64))bool'])}
    },

    /**
     * Makes a call to the ApprovalApp smart contract using the `approveDeclaration(address,(address,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    approveDeclaration: async (params: CallParams<ApprovalAppArgs['obj']['approveDeclaration(address,(address,uint64,uint64))bool'] | ApprovalAppArgs['tuple']['approveDeclaration(address,(address,uint64,uint64))bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ApprovalAppParamsFactory.approveDeclaration(params))
      return {...result, return: result.return as unknown as (undefined | ApprovalAppReturns['approveDeclaration(address,(address,uint64,uint64))bool'])}
    },

    /**
     * Makes a call to the ApprovalApp smart contract using the `approveDeclarationRemoval(address,(address,uint64,uint64))bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    approveDeclarationRemoval: async (params: CallParams<ApprovalAppArgs['obj']['approveDeclarationRemoval(address,(address,uint64,uint64))bool'] | ApprovalAppArgs['tuple']['approveDeclarationRemoval(address,(address,uint64,uint64))bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(ApprovalAppParamsFactory.approveDeclarationRemoval(params))
      return {...result, return: result.return as unknown as (undefined | ApprovalAppReturns['approveDeclarationRemoval(address,(address,uint64,uint64))bool'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new ApprovalAppClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ApprovalApp app
   */
  state = {
  }

  public newGroup(): ApprovalAppComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a approveRequest(address,(address,uint64,uint64))bool method call against the ApprovalApp contract
       */
      approveRequest(params: CallParams<ApprovalAppArgs['obj']['approveRequest(address,(address,uint64,uint64))bool'] | ApprovalAppArgs['tuple']['approveRequest(address,(address,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.approveRequest(params)))
        resultMappers.push((v) => client.decodeReturnValue('approveRequest(address,(address,uint64,uint64))bool', v))
        return this
      },
      /**
       * Add a approveRequestRemoval(address,(address,uint64,uint64))bool method call against the ApprovalApp contract
       */
      approveRequestRemoval(params: CallParams<ApprovalAppArgs['obj']['approveRequestRemoval(address,(address,uint64,uint64))bool'] | ApprovalAppArgs['tuple']['approveRequestRemoval(address,(address,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.approveRequestRemoval(params)))
        resultMappers.push((v) => client.decodeReturnValue('approveRequestRemoval(address,(address,uint64,uint64))bool', v))
        return this
      },
      /**
       * Add a approveDeclaration(address,(address,uint64,uint64))bool method call against the ApprovalApp contract
       */
      approveDeclaration(params: CallParams<ApprovalAppArgs['obj']['approveDeclaration(address,(address,uint64,uint64))bool'] | ApprovalAppArgs['tuple']['approveDeclaration(address,(address,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.approveDeclaration(params)))
        resultMappers.push((v) => client.decodeReturnValue('approveDeclaration(address,(address,uint64,uint64))bool', v))
        return this
      },
      /**
       * Add a approveDeclarationRemoval(address,(address,uint64,uint64))bool method call against the ApprovalApp contract
       */
      approveDeclarationRemoval(params: CallParams<ApprovalAppArgs['obj']['approveDeclarationRemoval(address,(address,uint64,uint64))bool'] | ApprovalAppArgs['tuple']['approveDeclarationRemoval(address,(address,uint64,uint64))bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.approveDeclarationRemoval(params)))
        resultMappers.push((v) => client.decodeReturnValue('approveDeclarationRemoval(address,(address,uint64,uint64))bool', v))
        return this
      },
      /**
       * Add a clear state call to the ApprovalApp contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as ApprovalAppComposer
  }
}
export type ApprovalAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the approveRequest(address,(address,uint64,uint64))bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveRequest(params?: CallParams<ApprovalAppArgs['obj']['approveRequest(address,(address,uint64,uint64))bool'] | ApprovalAppArgs['tuple']['approveRequest(address,(address,uint64,uint64))bool']>): ApprovalAppComposer<[...TReturns, ApprovalAppReturns['approveRequest(address,(address,uint64,uint64))bool'] | undefined]>

  /**
   * Calls the approveRequestRemoval(address,(address,uint64,uint64))bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveRequestRemoval(params?: CallParams<ApprovalAppArgs['obj']['approveRequestRemoval(address,(address,uint64,uint64))bool'] | ApprovalAppArgs['tuple']['approveRequestRemoval(address,(address,uint64,uint64))bool']>): ApprovalAppComposer<[...TReturns, ApprovalAppReturns['approveRequestRemoval(address,(address,uint64,uint64))bool'] | undefined]>

  /**
   * Calls the approveDeclaration(address,(address,uint64,uint64))bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveDeclaration(params?: CallParams<ApprovalAppArgs['obj']['approveDeclaration(address,(address,uint64,uint64))bool'] | ApprovalAppArgs['tuple']['approveDeclaration(address,(address,uint64,uint64))bool']>): ApprovalAppComposer<[...TReturns, ApprovalAppReturns['approveDeclaration(address,(address,uint64,uint64))bool'] | undefined]>

  /**
   * Calls the approveDeclarationRemoval(address,(address,uint64,uint64))bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveDeclarationRemoval(params?: CallParams<ApprovalAppArgs['obj']['approveDeclarationRemoval(address,(address,uint64,uint64))bool'] | ApprovalAppArgs['tuple']['approveDeclarationRemoval(address,(address,uint64,uint64))bool']>): ApprovalAppComposer<[...TReturns, ApprovalAppReturns['approveDeclarationRemoval(address,(address,uint64,uint64))bool'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ApprovalApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): ApprovalAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): ApprovalAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<ApprovalAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<ApprovalAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<ApprovalAppComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<ApprovalAppComposerResults<TReturns>>
}
export type ApprovalAppComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ARC11550Bridge","desc":"","methods":[{"name":"createApplication","args":[{"name":"transferApp","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"optInToAsa","args":[{"name":"asa","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"asaToArc11550","args":[{"name":"axfer","type":"axfer"},{"name":"receiver","type":"address"}],"returns":{"type":"(uint64,uint64)","struct":"Arc11550Id"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550ToAsa","args":[{"name":"xferCall","type":"appl"},{"name":"xferIndex","type":"uint64"},{"name":"receiver","type":"address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"Arc11550Id":[{"name":"id","type":"uint64"},{"name":"dataApp","type":"uint64"}]},"state":{"schema":{"global":{"bytes":0,"ints":1},"local":{"bytes":0,"ints":0}},"keys":{"global":{"transferApp":{"key":"dHJhbnNmZXJBcHA=","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"asaToArc11550Map":{"keyType":"uint64","valueType":"Arc11550Id","prefix":"YXNh"},"arc11550ToAsaMap":{"keyType":"Arc11550Id","valueType":"uint64","prefix":"YXBw"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[0]},{"teal":2,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[1,2,3,4,5,6,7,8,9]},{"teal":3,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46]},{"teal":15,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[47,48]},{"teal":16,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[49]},{"teal":17,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[50]},{"teal":18,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[51]},{"teal":19,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[52,53]},{"teal":20,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[54]},{"teal":21,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80]},{"teal":25,"source":"contracts/ARC11550Bridge.algo.ts:9","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[81]},{"teal":30,"source":"contracts/ARC11550Bridge.algo.ts:14","pc":[82,83,84]},{"teal":31,"source":"contracts/ARC11550Bridge.algo.ts:14","pc":[85]},{"teal":34,"source":"contracts/ARC11550Bridge.algo.ts:14","pc":[86,87,88]},{"teal":35,"source":"contracts/ARC11550Bridge.algo.ts:14","pc":[89]},{"teal":36,"source":"contracts/ARC11550Bridge.algo.ts:14","pc":[90]},{"teal":40,"source":"contracts/ARC11550Bridge.algo.ts:14","pc":[91,92,93]},{"teal":44,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[94]},{"teal":45,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[95,96]},{"teal":46,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[97]},{"teal":47,"source":"contracts/ARC11550Bridge.algo.ts:14","pc":[98]},{"teal":52,"source":"contracts/ARC11550Bridge.algo.ts:18","pc":[99,100,101]},{"teal":53,"source":"contracts/ARC11550Bridge.algo.ts:18","pc":[102]},{"teal":56,"source":"contracts/ARC11550Bridge.algo.ts:18","pc":[103,104,105]},{"teal":57,"source":"contracts/ARC11550Bridge.algo.ts:18","pc":[106]},{"teal":58,"source":"contracts/ARC11550Bridge.algo.ts:18","pc":[107]},{"teal":62,"source":"contracts/ARC11550Bridge.algo.ts:18","pc":[108,109,110]},{"teal":70,"source":"contracts/ARC11550Bridge.algo.ts:19","pc":[111]},{"teal":71,"source":"contracts/ARC11550Bridge.algo.ts:19","pc":[112,113]},{"teal":72,"source":"contracts/ARC11550Bridge.algo.ts:19","pc":[114,115]},{"teal":76,"source":"contracts/ARC11550Bridge.algo.ts:20","pc":[116,117]},{"teal":77,"source":"contracts/ARC11550Bridge.algo.ts:20","pc":[118,119]},{"teal":81,"source":"contracts/ARC11550Bridge.algo.ts:21","pc":[120]},{"teal":82,"source":"contracts/ARC11550Bridge.algo.ts:21","pc":[121,122]},{"teal":86,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[123,124]},{"teal":87,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[125,126]},{"teal":90,"source":"contracts/ARC11550Bridge.algo.ts:19","pc":[127]},{"teal":91,"source":"contracts/ARC11550Bridge.algo.ts:19","pc":[128,129]},{"teal":94,"source":"contracts/ARC11550Bridge.algo.ts:19","pc":[130]},{"teal":95,"source":"contracts/ARC11550Bridge.algo.ts:18","pc":[131]},{"teal":100,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[132,133]},{"teal":103,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[134,135,136]},{"teal":104,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[137]},{"teal":105,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[138]},{"teal":106,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[139,140]},{"teal":107,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[141]},{"teal":110,"source":"contracts/ARC11550Bridge.algo.ts:26","errorMessage":"argument 0 (receiver) for asaToArc11550 must be a address","pc":[142]},{"teal":113,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[143,144]},{"teal":114,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[145]},{"teal":115,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[146]},{"teal":116,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[147]},{"teal":117,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[148,149]},{"teal":118,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[150,151]},{"teal":119,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[152]},{"teal":122,"source":"contracts/ARC11550Bridge.algo.ts:26","errorMessage":"argument 1 (axfer) for asaToArc11550 must be a axfer transaction","pc":[153]},{"teal":125,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[154,155,156]},{"teal":126,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[157]},{"teal":127,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[158]},{"teal":128,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[159]},{"teal":129,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[160]},{"teal":133,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[161,162,163]},{"teal":136,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[164]},{"teal":137,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[165,166]},{"teal":144,"source":"contracts/ARC11550Bridge.algo.ts:27","pc":[167,168]},{"teal":145,"source":"contracts/ARC11550Bridge.algo.ts:28","pc":[169,170]},{"teal":146,"source":"contracts/ARC11550Bridge.algo.ts:28","pc":[171,172]},{"teal":147,"source":"contracts/ARC11550Bridge.algo.ts:28","pc":[173]},{"teal":150,"source":"contracts/ARC11550Bridge.algo.ts:28","errorMessage":"transaction verification failed: {\"txn\":\"axfer\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}","pc":[174]},{"teal":154,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[175,176]},{"teal":155,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[177,178]},{"teal":156,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[179,180]},{"teal":160,"source":"contracts/ARC11550Bridge.algo.ts:33","pc":[181,182]},{"teal":161,"source":"contracts/ARC11550Bridge.algo.ts:33","pc":[183,184]},{"teal":162,"source":"contracts/ARC11550Bridge.algo.ts:33","pc":[185]},{"teal":163,"source":"contracts/ARC11550Bridge.algo.ts:33","pc":[186,187]},{"teal":164,"source":"contracts/ARC11550Bridge.algo.ts:33","pc":[188]},{"teal":165,"source":"contracts/ARC11550Bridge.algo.ts:33","pc":[189]},{"teal":170,"source":"contracts/ARC11550Bridge.algo.ts:36","pc":[190]},{"teal":171,"source":"contracts/ARC11550Bridge.algo.ts:36","pc":[191,192]},{"teal":172,"source":"contracts/ARC11550Bridge.algo.ts:36","pc":[193,194]},{"teal":173,"source":"contracts/ARC11550Bridge.algo.ts:36","pc":[195]},{"teal":174,"source":"contracts/ARC11550Bridge.algo.ts:36","pc":[196]},{"teal":175,"source":"contracts/ARC11550Bridge.algo.ts:36","pc":[197]},{"teal":176,"source":"contracts/ARC11550Bridge.algo.ts:36","pc":[198]},{"teal":177,"source":"contracts/ARC11550Bridge.algo.ts:36","pc":[199]},{"teal":178,"source":"contracts/ARC11550Bridge.algo.ts:36","pc":[200]},{"teal":179,"source":"contracts/ARC11550Bridge.algo.ts:36","pc":[201,202,203]},{"teal":188,"source":"contracts/ARC11550Bridge.algo.ts:37","pc":[204]},{"teal":189,"source":"contracts/ARC11550Bridge.algo.ts:37","pc":[205]},{"teal":190,"source":"contracts/ARC11550Bridge.algo.ts:37","pc":[206,207]},{"teal":191,"source":"contracts/ARC11550Bridge.algo.ts:37","pc":[208,209,210,211,212,213]},{"teal":192,"source":"contracts/ARC11550Bridge.algo.ts:37","pc":[214,215]},{"teal":196,"source":"contracts/ARC11550Bridge.algo.ts:38","pc":[216]},{"teal":197,"source":"contracts/ARC11550Bridge.algo.ts:38","pc":[217]},{"teal":198,"source":"contracts/ARC11550Bridge.algo.ts:38","pc":[218]},{"teal":199,"source":"contracts/ARC11550Bridge.algo.ts:38","pc":[219,220]},{"teal":200,"source":"contracts/ARC11550Bridge.algo.ts:38","pc":[221,222]},{"teal":201,"source":"contracts/ARC11550Bridge.algo.ts:38","pc":[223,224]},{"teal":202,"source":"contracts/ARC11550Bridge.algo.ts:38","pc":[225,226,227,228,229,230,231,232,233,234]},{"teal":203,"source":"contracts/ARC11550Bridge.algo.ts:38","pc":[235,236]},{"teal":207,"source":"contracts/ARC11550Bridge.algo.ts:39","pc":[237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726]},{"teal":208,"source":"contracts/ARC11550Bridge.algo.ts:39","pc":[1727,1728]},{"teal":212,"source":"contracts/ARC11550Bridge.algo.ts:40","pc":[1729,1730,1731]},{"teal":213,"source":"contracts/ARC11550Bridge.algo.ts:40","pc":[1732,1733]},{"teal":216,"source":"contracts/ARC11550Bridge.algo.ts:37","pc":[1734]},{"teal":217,"source":"contracts/ARC11550Bridge.algo.ts:37","pc":[1735,1736]},{"teal":220,"source":"contracts/ARC11550Bridge.algo.ts:37","pc":[1737]},{"teal":224,"source":"contracts/ARC11550Bridge.algo.ts:43","pc":[1738,1739]},{"teal":225,"source":"contracts/ARC11550Bridge.algo.ts:43","pc":[1740,1741]},{"teal":241,"source":"contracts/ARC11550Bridge.algo.ts:45","pc":[1742]},{"teal":242,"source":"contracts/ARC11550Bridge.algo.ts:45","pc":[1743]},{"teal":243,"source":"contracts/ARC11550Bridge.algo.ts:45","pc":[1744,1745]},{"teal":244,"source":"contracts/ARC11550Bridge.algo.ts:45","pc":[1746,1747,1748,1749,1750,1751]},{"teal":245,"source":"contracts/ARC11550Bridge.algo.ts:45","pc":[1752,1753]},{"teal":249,"source":"contracts/ARC11550Bridge.algo.ts:46","pc":[1754,1755]},{"teal":250,"source":"contracts/ARC11550Bridge.algo.ts:46","pc":[1756,1757]},{"teal":263,"source":"contracts/ARC11550Bridge.algo.ts:48","pc":[1758,1759]},{"teal":264,"source":"contracts/ARC11550Bridge.algo.ts:48","pc":[1760]},{"teal":265,"source":"contracts/ARC11550Bridge.algo.ts:48","pc":[1761,1762]},{"teal":266,"source":"contracts/ARC11550Bridge.algo.ts:53","pc":[1763,1764]},{"teal":267,"source":"contracts/ARC11550Bridge.algo.ts:53","pc":[1765,1766]},{"teal":268,"source":"contracts/ARC11550Bridge.algo.ts:53","pc":[1767]},{"teal":269,"source":"contracts/ARC11550Bridge.algo.ts:53","pc":[1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801]},{"teal":270,"source":"contracts/ARC11550Bridge.algo.ts:53","pc":[1802]},{"teal":271,"source":"contracts/ARC11550Bridge.algo.ts:53","pc":[1803]},{"teal":272,"source":"contracts/ARC11550Bridge.algo.ts:53","pc":[1804,1805,1806]},{"teal":273,"source":"contracts/ARC11550Bridge.algo.ts:53","pc":[1807]},{"teal":274,"source":"contracts/ARC11550Bridge.algo.ts:53","pc":[1808]},{"teal":275,"source":"contracts/ARC11550Bridge.algo.ts:53","pc":[1809]},{"teal":276,"source":"contracts/ARC11550Bridge.algo.ts:53","pc":[1810,1811,1812]},{"teal":277,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[1813,1814]},{"teal":278,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[1815,1816]},{"teal":279,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[1817]},{"teal":280,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[1818,1819]},{"teal":281,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[1820]},{"teal":282,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[1821]},{"teal":283,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[1822,1823,1824]},{"teal":284,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[1825]},{"teal":285,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[1826]},{"teal":286,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[1827]},{"teal":287,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[1828,1829,1830]},{"teal":288,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[1831]},{"teal":289,"source":"contracts/ARC11550Bridge.algo.ts:50","pc":[1832,1833]},{"teal":290,"source":"contracts/ARC11550Bridge.algo.ts:50","pc":[1834,1835]},{"teal":291,"source":"contracts/ARC11550Bridge.algo.ts:50","pc":[1836]},{"teal":292,"source":"contracts/ARC11550Bridge.algo.ts:50","pc":[1837]},{"teal":293,"source":"contracts/ARC11550Bridge.algo.ts:50","pc":[1838]},{"teal":294,"source":"contracts/ARC11550Bridge.algo.ts:51","pc":[1839,1840]},{"teal":295,"source":"contracts/ARC11550Bridge.algo.ts:51","pc":[1841,1842]},{"teal":296,"source":"contracts/ARC11550Bridge.algo.ts:51","pc":[1843]},{"teal":297,"source":"contracts/ARC11550Bridge.algo.ts:51","pc":[1844]},{"teal":298,"source":"contracts/ARC11550Bridge.algo.ts:51","pc":[1845]},{"teal":299,"source":"contracts/ARC11550Bridge.algo.ts:52","pc":[1846,1847]},{"teal":300,"source":"contracts/ARC11550Bridge.algo.ts:52","pc":[1848]},{"teal":301,"source":"contracts/ARC11550Bridge.algo.ts:49","pc":[1849,1850]},{"teal":304,"source":"contracts/ARC11550Bridge.algo.ts:45","pc":[1851]},{"teal":305,"source":"contracts/ARC11550Bridge.algo.ts:45","pc":[1852,1853]},{"teal":308,"source":"contracts/ARC11550Bridge.algo.ts:45","pc":[1854]},{"teal":309,"source":"contracts/ARC11550Bridge.algo.ts:45","pc":[1855,1856]},{"teal":310,"source":"contracts/ARC11550Bridge.algo.ts:45","pc":[1857]},{"teal":311,"source":"contracts/ARC11550Bridge.algo.ts:45","pc":[1858]},{"teal":312,"source":"contracts/ARC11550Bridge.algo.ts:45","pc":[1859,1860]},{"teal":313,"source":"contracts/ARC11550Bridge.algo.ts:45","pc":[1861,1862,1863]},{"teal":314,"source":"contracts/ARC11550Bridge.algo.ts:45","pc":[1864]},{"teal":315,"source":"contracts/ARC11550Bridge.algo.ts:45","pc":[1865,1866]},{"teal":319,"source":"contracts/ARC11550Bridge.algo.ts:59","pc":[1867,1868]},{"teal":320,"source":"contracts/ARC11550Bridge.algo.ts:59","pc":[1869]},{"teal":321,"source":"contracts/ARC11550Bridge.algo.ts:59","pc":[1870,1871]},{"teal":322,"source":"contracts/ARC11550Bridge.algo.ts:59","pc":[1872]},{"teal":323,"source":"contracts/ARC11550Bridge.algo.ts:59","pc":[1873]},{"teal":324,"source":"contracts/ARC11550Bridge.algo.ts:59","pc":[1874,1875]},{"teal":328,"source":"contracts/ARC11550Bridge.algo.ts:60","pc":[1876]},{"teal":329,"source":"contracts/ARC11550Bridge.algo.ts:60","pc":[1877,1878]},{"teal":330,"source":"contracts/ARC11550Bridge.algo.ts:60","pc":[1879]},{"teal":331,"source":"contracts/ARC11550Bridge.algo.ts:60","pc":[1880]},{"teal":332,"source":"contracts/ARC11550Bridge.algo.ts:60","pc":[1881,1882]},{"teal":333,"source":"contracts/ARC11550Bridge.algo.ts:60","pc":[1883]},{"teal":337,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[1884]},{"teal":338,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[1885,1886]},{"teal":339,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[1887]},{"teal":340,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[1888,1889]},{"teal":341,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[1890]},{"teal":342,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[1891]},{"teal":347,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1892]},{"teal":348,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1893,1894]},{"teal":349,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1895]},{"teal":350,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1896]},{"teal":351,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1897,1898]},{"teal":361,"source":"contracts/ARC11550Bridge.algo.ts:66","pc":[1899]},{"teal":362,"source":"contracts/ARC11550Bridge.algo.ts:66","pc":[1900]},{"teal":363,"source":"contracts/ARC11550Bridge.algo.ts:66","pc":[1901,1902]},{"teal":364,"source":"contracts/ARC11550Bridge.algo.ts:66","pc":[1903,1904,1905,1906,1907,1908]},{"teal":365,"source":"contracts/ARC11550Bridge.algo.ts:66","pc":[1909,1910]},{"teal":369,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[1911]},{"teal":370,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[1912]},{"teal":371,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1913]},{"teal":372,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1914,1915]},{"teal":373,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1916]},{"teal":374,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1917]},{"teal":375,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1918,1919]},{"teal":376,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1920]},{"teal":377,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[1921]},{"teal":378,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[1922,1923]},{"teal":385,"source":"contracts/ARC11550Bridge.algo.ts:69","pc":[1924]},{"teal":386,"source":"contracts/ARC11550Bridge.algo.ts:69","pc":[1925]},{"teal":387,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1926]},{"teal":388,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1927,1928]},{"teal":389,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1929]},{"teal":390,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1930]},{"teal":391,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1931,1932]},{"teal":392,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1933]},{"teal":393,"source":"contracts/ARC11550Bridge.algo.ts:69","pc":[1934]},{"teal":394,"source":"contracts/ARC11550Bridge.algo.ts:69","pc":[1935]},{"teal":395,"source":"contracts/ARC11550Bridge.algo.ts:69","pc":[1936,1937]},{"teal":396,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[1938]},{"teal":397,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[1939]},{"teal":398,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1940]},{"teal":399,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1941,1942]},{"teal":400,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1943]},{"teal":401,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1944]},{"teal":402,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1945,1946]},{"teal":403,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1947]},{"teal":404,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[1948]},{"teal":405,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[1949]},{"teal":406,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[1950,1951]},{"teal":407,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[1952]},{"teal":408,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[1953,1954]},{"teal":409,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[1955]},{"teal":410,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[1956,1957]},{"teal":411,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[1958,1959]},{"teal":412,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[1960]},{"teal":413,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[1961]},{"teal":414,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[1962]},{"teal":415,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[1963]},{"teal":416,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[1964,1965]},{"teal":417,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[1966]},{"teal":418,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[1967]},{"teal":419,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[1968,1969,1970]},{"teal":420,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[1971]},{"teal":421,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[1972]},{"teal":422,"source":"contracts/ARC11550Bridge.algo.ts:70","pc":[1973,1974]},{"teal":425,"source":"contracts/ARC11550Bridge.algo.ts:66","pc":[1975]},{"teal":426,"source":"contracts/ARC11550Bridge.algo.ts:66","pc":[1976,1977]},{"teal":429,"source":"contracts/ARC11550Bridge.algo.ts:66","pc":[1978]},{"teal":433,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1979,1980]},{"teal":434,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[1981]},{"teal":437,"source":"contracts/ARC11550Bridge.algo.ts:64","errorMessage":"box value does not exist: this.asaToArc11550Map(asa).value","pc":[1982]},{"teal":440,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[1983,1984]},{"teal":443,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[1985,1986]},{"teal":444,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[1987]},{"teal":449,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[1988,1989]},{"teal":452,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[1990,1991,1992]},{"teal":453,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[1993]},{"teal":454,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[1994]},{"teal":455,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[1995,1996]},{"teal":456,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[1997]},{"teal":459,"source":"contracts/ARC11550Bridge.algo.ts:77","errorMessage":"argument 0 (receiver) for arc11550ToAsa must be a address","pc":[1998]},{"teal":462,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[1999,2000,2001]},{"teal":463,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[2002]},{"teal":466,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[2003,2004]},{"teal":467,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[2005]},{"teal":468,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[2006]},{"teal":469,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[2007]},{"teal":470,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[2008,2009]},{"teal":471,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[2010]},{"teal":472,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[2011]},{"teal":475,"source":"contracts/ARC11550Bridge.algo.ts:77","errorMessage":"argument 2 (xferCall) for arc11550ToAsa must be a appl transaction","pc":[2012]},{"teal":478,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[2013,2014,2015]},{"teal":479,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[2016]},{"teal":480,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[2017]},{"teal":481,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[2018]},{"teal":482,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[2019]},{"teal":483,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[2020]},{"teal":487,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[2021,2022,2023]},{"teal":490,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[2024]},{"teal":491,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[2025,2026]},{"teal":495,"source":"contracts/ARC11550Bridge.algo.ts:78","pc":[2027,2028]},{"teal":496,"source":"contracts/ARC11550Bridge.algo.ts:78","pc":[2029,2030,2031]},{"teal":497,"source":"contracts/ARC11550Bridge.algo.ts:78","pc":[2032,2033]},{"teal":498,"source":"contracts/ARC11550Bridge.algo.ts:79","pc":[2034,2035]},{"teal":499,"source":"contracts/ARC11550Bridge.algo.ts:79","pc":[2036,2037]},{"teal":503,"source":"contracts/ARC11550Bridge.algo.ts:80","pc":[2038,2039]},{"teal":504,"source":"contracts/ARC11550Bridge.algo.ts:80","pc":[2040,2041,2042]},{"teal":505,"source":"contracts/ARC11550Bridge.algo.ts:80","pc":[2043]},{"teal":506,"source":"contracts/ARC11550Bridge.algo.ts:80","pc":[2044,2045]},{"teal":510,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[2046,2047]},{"teal":511,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[2048,2049]},{"teal":512,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[2050]},{"teal":513,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[2051]},{"teal":514,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[2052,2053]},{"teal":515,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[2054,2055,2056,2057,2058,2059]},{"teal":516,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[2060,2061]},{"teal":519,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[2062]},{"teal":520,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[2063,2064]},{"teal":523,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[2065]},{"teal":524,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[2066,2067]},{"teal":525,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[2068]},{"teal":526,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[2069]},{"teal":527,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[2070,2071]},{"teal":528,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[2072,2073,2074]},{"teal":529,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[2075]},{"teal":530,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[2076]},{"teal":531,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[2077]},{"teal":535,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[2078,2079]},{"teal":536,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[2080,2081]},{"teal":537,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[2082]},{"teal":538,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[2083,2084]},{"teal":539,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[2085,2086]},{"teal":540,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[2087]},{"teal":541,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[2088]},{"teal":542,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[2089]},{"teal":543,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[2090]},{"teal":544,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[2091,2092]},{"teal":545,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[2093]},{"teal":546,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[2094]},{"teal":547,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[2095]},{"teal":548,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[2096]},{"teal":549,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[2097]},{"teal":550,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[2098,2099]},{"teal":551,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[2100]},{"teal":552,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[2101]},{"teal":553,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[2102,2103]},{"teal":558,"source":"contracts/ARC11550Bridge.algo.ts:87","pc":[2104]},{"teal":559,"source":"contracts/ARC11550Bridge.algo.ts:87","pc":[2105,2106]},{"teal":560,"source":"contracts/ARC11550Bridge.algo.ts:87","pc":[2107]},{"teal":561,"source":"contracts/ARC11550Bridge.algo.ts:87","pc":[2108]},{"teal":562,"source":"contracts/ARC11550Bridge.algo.ts:87","pc":[2109]},{"teal":563,"source":"contracts/ARC11550Bridge.algo.ts:87","pc":[2110]},{"teal":564,"source":"contracts/ARC11550Bridge.algo.ts:87","pc":[2111]},{"teal":565,"source":"contracts/ARC11550Bridge.algo.ts:87","pc":[2112,2113,2114]},{"teal":573,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[2115]},{"teal":574,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[2116]},{"teal":575,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[2117,2118]},{"teal":576,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[2119,2120,2121,2122,2123,2124]},{"teal":577,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[2125,2126]},{"teal":581,"source":"contracts/ARC11550Bridge.algo.ts:89","pc":[2127,2128]},{"teal":582,"source":"contracts/ARC11550Bridge.algo.ts:89","pc":[2129,2130,2131]},{"teal":583,"source":"contracts/ARC11550Bridge.algo.ts:89","pc":[2132]},{"teal":584,"source":"contracts/ARC11550Bridge.algo.ts:89","pc":[2133,2134]},{"teal":588,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[2135,2136]},{"teal":589,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[2137,2138]},{"teal":590,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[2139]},{"teal":591,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[2140,2141]},{"teal":592,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[2142,2143]},{"teal":593,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[2144]},{"teal":594,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[2145]},{"teal":595,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[2146]},{"teal":596,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[2147]},{"teal":597,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[2148,2149]},{"teal":598,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[2150]},{"teal":599,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[2151]},{"teal":600,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[2152]},{"teal":601,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[2153]},{"teal":602,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[2154]},{"teal":603,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[2155,2156]},{"teal":606,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[2157]},{"teal":607,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[2158,2159]},{"teal":610,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[2160]},{"teal":611,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[2161,2162]},{"teal":612,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[2163]},{"teal":613,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[2164]},{"teal":614,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[2165,2166]},{"teal":615,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[2167,2168,2169]},{"teal":616,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[2170,2171]},{"teal":626,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[2172]},{"teal":627,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[2173,2174]},{"teal":628,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[2175,2176]},{"teal":632,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[2177,2178]},{"teal":633,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[2179,2180,2181]},{"teal":634,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[2182]},{"teal":635,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[2183,2184]},{"teal":639,"source":"contracts/ARC11550Bridge.algo.ts:95","pc":[2185,2186]},{"teal":640,"source":"contracts/ARC11550Bridge.algo.ts:95","pc":[2187,2188,2189]},{"teal":641,"source":"contracts/ARC11550Bridge.algo.ts:95","pc":[2190]},{"teal":642,"source":"contracts/ARC11550Bridge.algo.ts:95","pc":[2191,2192]},{"teal":646,"source":"contracts/ARC11550Bridge.algo.ts:96","pc":[2193,2194]},{"teal":647,"source":"contracts/ARC11550Bridge.algo.ts:96","pc":[2195,2196,2197]},{"teal":648,"source":"contracts/ARC11550Bridge.algo.ts:96","pc":[2198,2199]},{"teal":652,"source":"contracts/ARC11550Bridge.algo.ts:97","pc":[2200,2201]},{"teal":653,"source":"contracts/ARC11550Bridge.algo.ts:97","pc":[2202,2203,2204]},{"teal":654,"source":"contracts/ARC11550Bridge.algo.ts:97","pc":[2205,2206]},{"teal":658,"source":"contracts/ARC11550Bridge.algo.ts:98","pc":[2207,2208]},{"teal":659,"source":"contracts/ARC11550Bridge.algo.ts:98","pc":[2209,2210]},{"teal":662,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[2211]},{"teal":663,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[2212,2213]},{"teal":666,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[2214]},{"teal":667,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[2215,2216]},{"teal":671,"source":"contracts/ARC11550Bridge.algo.ts:101","pc":[2217,2218]},{"teal":672,"source":"contracts/ARC11550Bridge.algo.ts:101","pc":[2219,2220]},{"teal":676,"source":"contracts/ARC11550Bridge.algo.ts:102","pc":[2221]},{"teal":677,"source":"contracts/ARC11550Bridge.algo.ts:102","pc":[2222,2223]},{"teal":678,"source":"contracts/ARC11550Bridge.algo.ts:102","pc":[2224]},{"teal":679,"source":"contracts/ARC11550Bridge.algo.ts:102","pc":[2225,2226]},{"teal":680,"source":"contracts/ARC11550Bridge.algo.ts:102","pc":[2227]},{"teal":681,"source":"contracts/ARC11550Bridge.algo.ts:102","pc":[2228]},{"teal":685,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[2229]},{"teal":686,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[2230,2231]},{"teal":687,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[2232]},{"teal":688,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[2233]},{"teal":689,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[2234,2235]},{"teal":690,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[2236]},{"teal":695,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[2237]},{"teal":696,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[2238,2239]},{"teal":697,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[2240]},{"teal":698,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[2241]},{"teal":701,"source":"contracts/ARC11550Bridge.algo.ts:106","errorMessage":"box value does not exist: this.arc11550ToAsaMap(arc11550).value","pc":[2242]},{"teal":702,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[2243]},{"teal":703,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[2244,2245]},{"teal":707,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2246]},{"teal":708,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2247,2248]},{"teal":709,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2249,2250]},{"teal":713,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2251,2252]},{"teal":714,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2253,2254]},{"teal":718,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2255,2256]},{"teal":719,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2257,2258]},{"teal":723,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2259,2260]},{"teal":724,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2261,2262]},{"teal":725,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2263]},{"teal":726,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2264,2265]},{"teal":727,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2266,2267]},{"teal":728,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2268]},{"teal":729,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2269]},{"teal":730,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2270,2271]},{"teal":731,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2272]},{"teal":732,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2273,2274]},{"teal":733,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2275]},{"teal":734,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2276]},{"teal":735,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2277]},{"teal":736,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2278]},{"teal":737,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2279,2280]},{"teal":740,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2281]},{"teal":741,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2282,2283]},{"teal":744,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[2284]},{"teal":748,"source":"contracts/ARC11550Bridge.algo.ts:110","pc":[2285,2286]},{"teal":751,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[2287,2288]},{"teal":754,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[2289,2290]},{"teal":755,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[2291]},{"teal":758,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[2292,2293,2294,2295,2296,2297]},{"teal":759,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[2298,2299,2300]},{"teal":760,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[2301,2302,2303,2304]},{"teal":763,"source":"contracts/ARC11550Bridge.algo.ts:9","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[2305]},{"teal":766,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[2306,2307,2308,2309,2310,2311]},{"teal":767,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[2312,2313,2314,2315,2316,2317]},{"teal":768,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[2318,2319,2320,2321,2322,2323]},{"teal":769,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[2324,2325,2326]},{"teal":770,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[2327,2328,2329,2330,2331,2332,2333,2334]},{"teal":773,"source":"contracts/ARC11550Bridge.algo.ts:9","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[2335]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAHAAEIBlAEICYGAANhc2EDYXBwC3RyYW5zZmVyQXBwCAAAAAAAAAAABBUffHUxGBQlCzEZCI0MCLEAAAAAAAAAAAAACKMAAAAAAAAAAAAAADYaAReIAAIjQ4oBACuL/2eJNhoBF4gAAiNDigEAsSEFshCL/7IRIrISMgqyFCKyAbOJJwU2GgFJFSEGEkQxFiMJSTgQIQUSRIgABFCwI0OKAgEoRwSL/zgUMgoSRIv/OBGMAIsAcQpIMgMSRCmL/zgRFlC9TEgUQQaYsSWyEIAE4cDE2bIaK2QWshonBLIagAgAAAAAAAAAAbIagM8LCiAKAAgBUCBIKFgQOCYKAAQVH3x1AWIGbWludGVkAW0BcAt0cmFuc2ZlckFwcAFhD3RyYW5zZmVySG9va0FwcAdtaW50Q2FwMRgUgQYLMRkIjQwE1gAAAAAAAAAAAAAEyAAAAAAAAAAAAAAANhoDFzYaAhc2GgEXiAACJEOKAwAnBov/ZysiZycJi/1nJwiL/meJKYgABRZQsCRDigABK2SJKTYaAYgABFCwJEOKAQEnBIv/UL5EiTYaAlcCADYaAYgAAiRDigIAMQAhCSEEJwWL/zX/NP9XAAgXFlBOAroSRCcEi/9QvUxIQQAOJwSL/1C+RDX/NP8iU0QnBIv/UL5ENf8kSTX7NP80/08CWUk1/kk0/0xZJAuBAgg1/TT/IjT+Uov+SRUWVwYCTFBJNfw0/zT+NP0INP8VUlBQNf+IBGw0/ycEi/9QSbxITL+JKTYaAkkVIQQSRDYaAReIAAUWULAkQ4oCASqL/xaL/lBQvkQXiSk2GgFXAgCIAA5JFSMKFlcGAkxQULAkQ4oBAShHAyiMACKMAYsBi/8VIQYKDEEARIv/Nf8iiwEhBgsIIgg0/0wjWBeMAov/Nf8iiwEhBgsIIwg0/0whBFiMA4sAKosCFosDUFC+RBcWUIwAiwEkCIwBQv+wiwCMAEYDiSk2GgEXiAAEULAkQ4oBAScFi/8WUL5EiSk2GgFXAgCIAA9JFSEHChZXBgJMUFCwJEOKAQEoRwIojAAijAGLAYv/FSMKDEEAKIv/Nf8iiwEjCwg0/0wjWBeMAosAJwWLAhZQvkRQjACLASQIjAFC/82LAIwARgKJNhoCSRUhCBJENhoBSRUhBRJEiAACJEOKAgAxACEJIQQnBYv/V0AIFxZQTgK6EkQnB4v/UIv+v4k2GgFXAgCIAAIkQ4oBAChJIowAiwCL/xUhBwoMQQA3iwCMAYv/Nf8iiwEhBwsIIQUINP9MIQhYi/81/yKLASEHCwgiCDT/TCEFWIj/kosAJAiMAEL/vYkpiAAFFlCwJEOKAAEnBmSJKYgABRZQsCRDigABJwhkiTYaAVcCAIgAAiRDigEAKEcCMg0nBmQSRCKMAIsAi/8VJQoMQQGsiwCMAYv/Nf8iiwElCwgjCDT/TCEEWDEAE0EAsScHi/81/yKLASULCCMINP9MIQRYMQBQi/81/yKLASULCCIINP9MI1gXFlBQjAIjIycHi/81/yKLASULCCMINP9MIQRYMQBQi/81/yKLASULCCIINP9MI1gXFlBQTgK6FzIHD0QiSSMnB4v/Nf8iiwElCwgjCDT/TCEEWDEAUIv/Nf8iiwElCwgiCDT/TCNYFxZQUE4CuheL/zX/IosBJQsIIQUINP9MI1gXCRaLAk4CuyqL/zX/IosBJQsIIgg0/0wjWBcWi/81/yKLASULCCMINP9MIQRYUFC+RBeL/zX/IosBJQsIIQUINP9MI1gXCSqL/zX/IosBJQsIIgg0/0wjWBcWi/81/yKLASULCCMINP9MIQRYUFBMFr8qi/81/yKLASULCCIINP9MI1gXFov/Nf8iiwElCwghBgg0/0whBFhQUL5EF4v/Nf8iiwElCwghBQg0/0wjWBcIKov/Nf8iiwElCwgiCDT/TCNYFxaL/zX/IosBJQsIIQYINP9MIQRYUFBMFr+LACQIjABC/kmJKTYaAUkVIQcSRIgABRZQsCRDigEBKDINJwZkEkQrZIwAiwAnCWQORDEAgAZtaW50ZXJkEkQnBYsAFlCL/78rZCQIK0xniwCMAImABOHAxNk2GgCOAfssAIAE3UL1oIAEOsIyVIAEu7neZ4AE0ErLwoAEZd2HF4AEUfUEvoAEKtLrVYAE1XkXXYAEDw+hc4AEwU5o2YAECRyit4AEYrUHi4AEQQV4VTYaAI4N+uX69PsK+6L7x/xC/Fr8ufzx/Uj9WP1o/zsANPwVNP0MQAALNPwVNP0kNflCAAg0/TT8FSI1+Qk1+omyHoABCrIfIrIBs7Q9jAGxJbIQgAQMwzYEshqLAbIYiwEWshqLAHEESIAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQSVcgACioRFcAIIsAcQNIJwRQSVcIACioRFcACFCLAHEASBZQiwBxAUgWUDIKULIaIrIBs7Q7IwnFOlcEABeMAosCFosBFlCMAymLABZQiwO/KosDUIsAFr8piwAWUIwEsSWyEIAEYbrPyLIaJCQpiwAWUE4CuheyGCQkKYsAFlBOAroXFrIaIiQpiwAWUE4CuhcWMgpQi/5Qi/84EhZQSRUhBAoWVwYCTFCyGiKyAbOLBL5EjABGBIknBTYaAkkVIQYSRDYaARcxFiMJSTgQJRJEiAAFFlCwI0OKAwEoRwaL/zkaAowAi/6MAYv/ORoBF4wCi/84GLElshCABMFOaNmyGiKyAbO0OyMJxTpXBAAXEkSLADX/IosBIQQLCCIINP9MJFgXFosCFlCMAyqLA1C9TEgUQQB6sSWyEIAEUfUEvrIaiwNXCAgXshiLADX/IosBIQQLCCIINP9MJFgXFrIaIrIBs7Q7IwnFOlcEAIwEsYEDshCLBFcoCBeyIosEVzAIF7IjiwRXACCyJosEVyAIsiUyCrIqIrIBs7Q8tDyMBSqLA1CLBRa/KYsFFlCLA78qiwNQvkQXjAaxIQWyEIsGshGL/bIUiwA1/yKLASEECwiBSAg0/0wkWBeyEiKyAbOLBowARgaJgASXO2FvNhoAjgH3UQCABLKBpW2ABANe2H6ABEwukUU2GgCOA/dE92X+pQA=","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Arc11550Id = {
  id: bigint,
  dataApp: bigint
}


/**
 * Converts the ABI tuple representation of a Arc11550Id to the struct representation
 */
export function Arc11550IdFromTuple(abiTuple: [bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Arc11550Id, APP_SPEC.structs) as Arc11550Id
}

/**
 * The argument types for the Arc11550Bridge contract
 */
export type Arc11550BridgeArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(uint64)void': {
      transferApp: bigint | number
    }
    'optInToAsa(uint64)void': {
      asa: bigint | number
    }
    'asaToArc11550(axfer,address)(uint64,uint64)': {
      axfer: AppMethodCallTransactionArgument
      receiver: string
    }
    'arc11550ToAsa(appl,uint64,address)uint64': {
      xferCall: AppMethodCallTransactionArgument
      xferIndex: bigint | number
      receiver: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(uint64)void': [transferApp: bigint | number]
    'optInToAsa(uint64)void': [asa: bigint | number]
    'asaToArc11550(axfer,address)(uint64,uint64)': [axfer: AppMethodCallTransactionArgument, receiver: string]
    'arc11550ToAsa(appl,uint64,address)uint64': [xferCall: AppMethodCallTransactionArgument, xferIndex: bigint | number, receiver: string]
  }
}

/**
 * The return type for each method
 */
export type Arc11550BridgeReturns = {
  'createApplication(uint64)void': void
  'optInToAsa(uint64)void': void
  'asaToArc11550(axfer,address)(uint64,uint64)': Arc11550Id
  'arc11550ToAsa(appl,uint64,address)uint64': bigint
}

/**
 * Defines the types of available calls and state of the Arc11550Bridge smart contract.
 */
export type Arc11550BridgeTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64)void' | 'createApplication', {
      argsObj: Arc11550BridgeArgs['obj']['createApplication(uint64)void']
      argsTuple: Arc11550BridgeArgs['tuple']['createApplication(uint64)void']
      returns: Arc11550BridgeReturns['createApplication(uint64)void']
    }>
    & Record<'optInToAsa(uint64)void' | 'optInToAsa', {
      argsObj: Arc11550BridgeArgs['obj']['optInToAsa(uint64)void']
      argsTuple: Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']
      returns: Arc11550BridgeReturns['optInToAsa(uint64)void']
    }>
    & Record<'asaToArc11550(axfer,address)(uint64,uint64)' | 'asaToArc11550', {
      argsObj: Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)']
      argsTuple: Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']
      returns: Arc11550BridgeReturns['asaToArc11550(axfer,address)(uint64,uint64)']
    }>
    & Record<'arc11550ToAsa(appl,uint64,address)uint64' | 'arc11550ToAsa', {
      argsObj: Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64']
      argsTuple: Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']
      returns: Arc11550BridgeReturns['arc11550ToAsa(appl,uint64,address)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        transferApp: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        asaToArc11550Map: Map<bigint | number, Arc11550Id>
        arc11550ToAsaMap: Map<Arc11550Id, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Arc11550BridgeSignatures = keyof Arc11550BridgeTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Arc11550BridgeNonVoidMethodSignatures = keyof Arc11550BridgeTypes['methods'] extends infer T ? T extends keyof Arc11550BridgeTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Arc11550Bridge smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Arc11550BridgeSignatures> = Arc11550BridgeTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc11550Bridge smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc11550BridgeSignatures> = Arc11550BridgeTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = Arc11550BridgeTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = Arc11550BridgeTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Arc11550BridgeCreateCallParams =
  | Expand<CallParams<Arc11550BridgeArgs['obj']['createApplication(uint64)void'] | Arc11550BridgeArgs['tuple']['createApplication(uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<Arc11550BridgeArgs['obj']['createApplication(uint64)void'] | Arc11550BridgeArgs['tuple']['createApplication(uint64)void']> & {method: 'createApplication(uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Arc11550BridgeDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Arc11550BridgeCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc11550Bridge smart contract
 */
export abstract class Arc11550BridgeParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends Arc11550BridgeCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(uint64)void':
            return Arc11550BridgeParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ARC11550Bridge smart contract using the createApplication(uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<Arc11550BridgeArgs['obj']['createApplication(uint64)void'] | Arc11550BridgeArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.transferApp],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the optInToAsa(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToAsa(params: CallParams<Arc11550BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optInToAsa(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asa],
    }
  }
  /**
   * Constructs a no op call for the asaToArc11550(axfer,address)(uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static asaToArc11550(params: CallParams<Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)'] | Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'asaToArc11550(axfer,address)(uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.axfer, params.args.receiver],
    }
  }
  /**
   * Constructs a no op call for the arc11550ToAsa(appl,uint64,address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550ToAsa(params: CallParams<Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64'] | Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550ToAsa(appl,uint64,address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.xferCall, params.args.xferIndex, params.args.receiver],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ARC11550Bridge smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Arc11550BridgeFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Arc11550BridgeFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Arc11550BridgeClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Arc11550BridgeClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ARC11550Bridge smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Arc11550BridgeDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? Arc11550BridgeParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (Arc11550BridgeCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new Arc11550BridgeClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Bridge smart contract using the createApplication(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<Arc11550BridgeArgs['obj']['createApplication(uint64)void'] | Arc11550BridgeArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(Arc11550BridgeParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Bridge smart contract using the createApplication(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<Arc11550BridgeArgs['obj']['createApplication(uint64)void'] | Arc11550BridgeArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(Arc11550BridgeParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Bridge smart contract using an ABI method call using the createApplication(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<Arc11550BridgeArgs['obj']['createApplication(uint64)void'] | Arc11550BridgeArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(Arc11550BridgeParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | Arc11550BridgeReturns['createApplication(uint64)void']) }, appClient: new Arc11550BridgeClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ARC11550Bridge smart contract
 */
export class Arc11550BridgeClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Arc11550BridgeClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Arc11550Bridge app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Arc11550BridgeClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Arc11550BridgeNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Arc11550BridgeClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Arc11550BridgeClient> {
    return new Arc11550BridgeClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Arc11550BridgeClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Arc11550BridgeClient> {
    return new Arc11550BridgeClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Bridge smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `optInToAsa(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToAsa: (params: CallParams<Arc11550BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550BridgeParamsFactory.optInToAsa(params))
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `asaToArc11550(axfer,address)(uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    asaToArc11550: (params: CallParams<Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)'] | Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550BridgeParamsFactory.asaToArc11550(params))
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `arc11550ToAsa(appl,uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550ToAsa: (params: CallParams<Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64'] | Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550BridgeParamsFactory.arc11550ToAsa(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Bridge smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `optInToAsa(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToAsa: (params: CallParams<Arc11550BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550BridgeParamsFactory.optInToAsa(params))
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `asaToArc11550(axfer,address)(uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    asaToArc11550: (params: CallParams<Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)'] | Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550BridgeParamsFactory.asaToArc11550(params))
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `arc11550ToAsa(appl,uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550ToAsa: (params: CallParams<Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64'] | Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550BridgeParamsFactory.arc11550ToAsa(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Bridge smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `optInToAsa(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToAsa: async (params: CallParams<Arc11550BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550BridgeParamsFactory.optInToAsa(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550BridgeReturns['optInToAsa(uint64)void'])}
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `asaToArc11550(axfer,address)(uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    asaToArc11550: async (params: CallParams<Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)'] | Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550BridgeParamsFactory.asaToArc11550(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550BridgeReturns['asaToArc11550(axfer,address)(uint64,uint64)'])}
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `arc11550ToAsa(appl,uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550ToAsa: async (params: CallParams<Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64'] | Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550BridgeParamsFactory.arc11550ToAsa(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550BridgeReturns['arc11550ToAsa(appl,uint64,address)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Arc11550BridgeClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ARC11550Bridge app
   */
  state = {
    /**
     * Methods to access global state for the current ARC11550Bridge app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          transferApp: result.transferApp,
        }
      },
      /**
       * Get the current value of the transferApp key in global state
       */
      transferApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("transferApp")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current ARC11550Bridge app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the asaToArc11550Map map in box state
       */
      asaToArc11550Map: {
        /**
         * Get all current values of the asaToArc11550Map map in box state
         */
        getMap: async (): Promise<Map<bigint, Arc11550Id>> => { return (await this.appClient.state.box.getMap("asaToArc11550Map")) as Map<bigint, Arc11550Id> },
        /**
         * Get a current value of the asaToArc11550Map map by key from box state
         */
        value: async (key: bigint | number): Promise<Arc11550Id | undefined> => { return await this.appClient.state.box.getMapValue("asaToArc11550Map", key) as Arc11550Id | undefined },
      },
      /**
       * Get values from the arc11550ToAsaMap map in box state
       */
      arc11550ToAsaMap: {
        /**
         * Get all current values of the arc11550ToAsaMap map in box state
         */
        getMap: async (): Promise<Map<Arc11550Id, bigint>> => { return (await this.appClient.state.box.getMap("arc11550ToAsaMap")) as Map<Arc11550Id, bigint> },
        /**
         * Get a current value of the arc11550ToAsaMap map by key from box state
         */
        value: async (key: Arc11550Id): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("arc11550ToAsaMap", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): Arc11550BridgeComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a optInToAsa(uint64)void method call against the ARC11550Bridge contract
       */
      optInToAsa(params: CallParams<Arc11550BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToAsa(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a asaToArc11550(axfer,address)(uint64,uint64) method call against the ARC11550Bridge contract
       */
      asaToArc11550(params: CallParams<Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)'] | Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.asaToArc11550(params)))
        resultMappers.push((v) => client.decodeReturnValue('asaToArc11550(axfer,address)(uint64,uint64)', v))
        return this
      },
      /**
       * Add a arc11550ToAsa(appl,uint64,address)uint64 method call against the ARC11550Bridge contract
       */
      arc11550ToAsa(params: CallParams<Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64'] | Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550ToAsa(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550ToAsa(appl,uint64,address)uint64', v))
        return this
      },
      /**
       * Add a clear state call to the ARC11550Bridge contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Arc11550BridgeComposer
  }
}
export type Arc11550BridgeComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the optInToAsa(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsa(params?: CallParams<Arc11550BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']>): Arc11550BridgeComposer<[...TReturns, Arc11550BridgeReturns['optInToAsa(uint64)void'] | undefined]>

  /**
   * Calls the asaToArc11550(axfer,address)(uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  asaToArc11550(params?: CallParams<Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)'] | Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']>): Arc11550BridgeComposer<[...TReturns, Arc11550BridgeReturns['asaToArc11550(axfer,address)(uint64,uint64)'] | undefined]>

  /**
   * Calls the arc11550ToAsa(appl,uint64,address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550ToAsa(params?: CallParams<Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64'] | Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']>): Arc11550BridgeComposer<[...TReturns, Arc11550BridgeReturns['arc11550ToAsa(appl,uint64,address)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ARC11550Bridge smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Arc11550BridgeComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc11550BridgeComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc11550BridgeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Arc11550BridgeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Arc11550BridgeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Arc11550BridgeComposerResults<TReturns>>
}
export type Arc11550BridgeComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


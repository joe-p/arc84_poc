/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ARC11550Bridge","desc":"","methods":[{"name":"createApplication","args":[{"name":"dataApp","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"optInToAsa","args":[{"name":"asa","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"asaToArc11550","args":[{"name":"axfer","type":"axfer"},{"name":"receiver","type":"address"}],"returns":{"type":"(uint64,uint64)","struct":"Arc11550Id"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550ToAsa","args":[{"name":"xferCall","type":"appl"},{"name":"xferIndex","type":"uint64"},{"name":"receiver","type":"address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"Arc11550Id":[{"name":"id","type":"uint64"},{"name":"dataApp","type":"uint64"}]},"state":{"schema":{"global":{"bytes":0,"ints":2},"local":{"bytes":0,"ints":0}},"keys":{"global":{"dataApp":{"key":"ZGF0YUFwcA==","keyType":"AVMBytes","valueType":"uint64"},"collection":{"key":"Y29sbGVjdGlvbg==","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"asaToArc11550Map":{"keyType":"uint64","valueType":"Arc11550Id","prefix":"YXNh"},"arc11550ToAsaMap":{"keyType":"Arc11550Id","valueType":"uint64","prefix":"YXBw"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[0]},{"teal":2,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[1,2,3,4,5,6,7,8,9]},{"teal":3,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42]},{"teal":15,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[43,44]},{"teal":16,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[45]},{"teal":17,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[46]},{"teal":18,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[47]},{"teal":19,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[48,49]},{"teal":20,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[50]},{"teal":21,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76]},{"teal":25,"source":"contracts/ARC11550Bridge.algo.ts:9","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[77]},{"teal":30,"source":"contracts/ARC11550Bridge.algo.ts:19","pc":[78,79,80]},{"teal":31,"source":"contracts/ARC11550Bridge.algo.ts:19","pc":[81]},{"teal":34,"source":"contracts/ARC11550Bridge.algo.ts:19","pc":[82,83,84]},{"teal":35,"source":"contracts/ARC11550Bridge.algo.ts:19","pc":[85]},{"teal":36,"source":"contracts/ARC11550Bridge.algo.ts:19","pc":[86]},{"teal":40,"source":"contracts/ARC11550Bridge.algo.ts:19","pc":[87,88,89]},{"teal":44,"source":"contracts/ARC11550Bridge.algo.ts:20","pc":[90]},{"teal":45,"source":"contracts/ARC11550Bridge.algo.ts:20","pc":[91,92]},{"teal":46,"source":"contracts/ARC11550Bridge.algo.ts:20","pc":[93]},{"teal":47,"source":"contracts/ARC11550Bridge.algo.ts:19","pc":[94]},{"teal":52,"source":"contracts/ARC11550Bridge.algo.ts:23","pc":[95,96,97]},{"teal":53,"source":"contracts/ARC11550Bridge.algo.ts:23","pc":[98]},{"teal":56,"source":"contracts/ARC11550Bridge.algo.ts:23","pc":[99,100,101]},{"teal":57,"source":"contracts/ARC11550Bridge.algo.ts:23","pc":[102]},{"teal":58,"source":"contracts/ARC11550Bridge.algo.ts:23","pc":[103]},{"teal":62,"source":"contracts/ARC11550Bridge.algo.ts:23","pc":[104,105,106]},{"teal":70,"source":"contracts/ARC11550Bridge.algo.ts:24","pc":[107]},{"teal":71,"source":"contracts/ARC11550Bridge.algo.ts:24","pc":[108,109]},{"teal":72,"source":"contracts/ARC11550Bridge.algo.ts:24","pc":[110,111]},{"teal":76,"source":"contracts/ARC11550Bridge.algo.ts:25","pc":[112,113]},{"teal":77,"source":"contracts/ARC11550Bridge.algo.ts:25","pc":[114,115]},{"teal":81,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[116]},{"teal":82,"source":"contracts/ARC11550Bridge.algo.ts:26","pc":[117,118]},{"teal":86,"source":"contracts/ARC11550Bridge.algo.ts:27","pc":[119,120]},{"teal":87,"source":"contracts/ARC11550Bridge.algo.ts:27","pc":[121,122]},{"teal":90,"source":"contracts/ARC11550Bridge.algo.ts:24","pc":[123]},{"teal":91,"source":"contracts/ARC11550Bridge.algo.ts:24","pc":[124,125]},{"teal":94,"source":"contracts/ARC11550Bridge.algo.ts:24","pc":[126]},{"teal":95,"source":"contracts/ARC11550Bridge.algo.ts:23","pc":[127]},{"teal":100,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[128,129]},{"teal":103,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[130,131,132]},{"teal":104,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[133]},{"teal":105,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[134]},{"teal":106,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[135,136]},{"teal":107,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[137]},{"teal":110,"source":"contracts/ARC11550Bridge.algo.ts:31","errorMessage":"argument 0 (receiver) for asaToArc11550 must be a address","pc":[138]},{"teal":113,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[139,140]},{"teal":114,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[141]},{"teal":115,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[142]},{"teal":116,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[143]},{"teal":117,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[144,145]},{"teal":118,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[146,147]},{"teal":119,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[148]},{"teal":122,"source":"contracts/ARC11550Bridge.algo.ts:31","errorMessage":"argument 1 (axfer) for asaToArc11550 must be a axfer transaction","pc":[149]},{"teal":125,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[150,151,152]},{"teal":126,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[153]},{"teal":127,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[154]},{"teal":128,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[155]},{"teal":129,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[156]},{"teal":133,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[157,158,159]},{"teal":136,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[160]},{"teal":137,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[161,162]},{"teal":144,"source":"contracts/ARC11550Bridge.algo.ts:32","pc":[163,164]},{"teal":145,"source":"contracts/ARC11550Bridge.algo.ts:33","pc":[165,166]},{"teal":146,"source":"contracts/ARC11550Bridge.algo.ts:33","pc":[167,168]},{"teal":147,"source":"contracts/ARC11550Bridge.algo.ts:33","pc":[169]},{"teal":150,"source":"contracts/ARC11550Bridge.algo.ts:33","errorMessage":"transaction verification failed: {\"txn\":\"axfer\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}","pc":[170]},{"teal":154,"source":"contracts/ARC11550Bridge.algo.ts:36","pc":[171,172]},{"teal":155,"source":"contracts/ARC11550Bridge.algo.ts:36","pc":[173,174]},{"teal":156,"source":"contracts/ARC11550Bridge.algo.ts:36","pc":[175,176]},{"teal":160,"source":"contracts/ARC11550Bridge.algo.ts:38","pc":[177,178]},{"teal":161,"source":"contracts/ARC11550Bridge.algo.ts:38","pc":[179,180]},{"teal":162,"source":"contracts/ARC11550Bridge.algo.ts:38","pc":[181]},{"teal":163,"source":"contracts/ARC11550Bridge.algo.ts:38","pc":[182,183]},{"teal":164,"source":"contracts/ARC11550Bridge.algo.ts:38","pc":[184]},{"teal":165,"source":"contracts/ARC11550Bridge.algo.ts:38","pc":[185]},{"teal":170,"source":"contracts/ARC11550Bridge.algo.ts:41","pc":[186]},{"teal":171,"source":"contracts/ARC11550Bridge.algo.ts:41","pc":[187,188]},{"teal":172,"source":"contracts/ARC11550Bridge.algo.ts:41","pc":[189,190]},{"teal":173,"source":"contracts/ARC11550Bridge.algo.ts:41","pc":[191]},{"teal":174,"source":"contracts/ARC11550Bridge.algo.ts:41","pc":[192]},{"teal":175,"source":"contracts/ARC11550Bridge.algo.ts:41","pc":[193]},{"teal":176,"source":"contracts/ARC11550Bridge.algo.ts:41","pc":[194]},{"teal":177,"source":"contracts/ARC11550Bridge.algo.ts:41","pc":[195]},{"teal":178,"source":"contracts/ARC11550Bridge.algo.ts:41","pc":[196]},{"teal":179,"source":"contracts/ARC11550Bridge.algo.ts:41","pc":[197,198,199]},{"teal":197,"source":"contracts/ARC11550Bridge.algo.ts:42","pc":[200]},{"teal":198,"source":"contracts/ARC11550Bridge.algo.ts:42","pc":[201]},{"teal":199,"source":"contracts/ARC11550Bridge.algo.ts:42","pc":[202,203]},{"teal":200,"source":"contracts/ARC11550Bridge.algo.ts:42","pc":[204,205,206,207,208,209]},{"teal":201,"source":"contracts/ARC11550Bridge.algo.ts:42","pc":[210,211]},{"teal":205,"source":"contracts/ARC11550Bridge.algo.ts:43","pc":[212]},{"teal":206,"source":"contracts/ARC11550Bridge.algo.ts:43","pc":[213]},{"teal":207,"source":"contracts/ARC11550Bridge.algo.ts:43","pc":[214,215]},{"teal":221,"source":"contracts/ARC11550Bridge.algo.ts:45","pc":[216,217,218,219,220,221,222,223,224,225,226,227]},{"teal":222,"source":"contracts/ARC11550Bridge.algo.ts:45","pc":[228]},{"teal":223,"source":"contracts/ARC11550Bridge.algo.ts:45","pc":[229]},{"teal":224,"source":"contracts/ARC11550Bridge.algo.ts:45","pc":[230,231]},{"teal":225,"source":"contracts/ARC11550Bridge.algo.ts:50","pc":[232,233]},{"teal":226,"source":"contracts/ARC11550Bridge.algo.ts:50","pc":[234,235]},{"teal":227,"source":"contracts/ARC11550Bridge.algo.ts:50","pc":[236]},{"teal":228,"source":"contracts/ARC11550Bridge.algo.ts:50","pc":[237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270]},{"teal":229,"source":"contracts/ARC11550Bridge.algo.ts:50","pc":[271]},{"teal":230,"source":"contracts/ARC11550Bridge.algo.ts:50","pc":[272]},{"teal":231,"source":"contracts/ARC11550Bridge.algo.ts:50","pc":[273,274,275]},{"teal":232,"source":"contracts/ARC11550Bridge.algo.ts:50","pc":[276]},{"teal":233,"source":"contracts/ARC11550Bridge.algo.ts:50","pc":[277]},{"teal":234,"source":"contracts/ARC11550Bridge.algo.ts:50","pc":[278]},{"teal":235,"source":"contracts/ARC11550Bridge.algo.ts:50","pc":[279,280,281]},{"teal":236,"source":"contracts/ARC11550Bridge.algo.ts:51","pc":[282,283]},{"teal":237,"source":"contracts/ARC11550Bridge.algo.ts:51","pc":[284,285]},{"teal":238,"source":"contracts/ARC11550Bridge.algo.ts:51","pc":[286]},{"teal":239,"source":"contracts/ARC11550Bridge.algo.ts:51","pc":[287,288]},{"teal":240,"source":"contracts/ARC11550Bridge.algo.ts:51","pc":[289]},{"teal":241,"source":"contracts/ARC11550Bridge.algo.ts:51","pc":[290]},{"teal":242,"source":"contracts/ARC11550Bridge.algo.ts:51","pc":[291,292,293]},{"teal":243,"source":"contracts/ARC11550Bridge.algo.ts:51","pc":[294]},{"teal":244,"source":"contracts/ARC11550Bridge.algo.ts:51","pc":[295]},{"teal":245,"source":"contracts/ARC11550Bridge.algo.ts:51","pc":[296]},{"teal":246,"source":"contracts/ARC11550Bridge.algo.ts:51","pc":[297,298,299]},{"teal":247,"source":"contracts/ARC11550Bridge.algo.ts:51","pc":[300]},{"teal":248,"source":"contracts/ARC11550Bridge.algo.ts:47","pc":[301,302]},{"teal":249,"source":"contracts/ARC11550Bridge.algo.ts:47","pc":[303,304]},{"teal":250,"source":"contracts/ARC11550Bridge.algo.ts:47","pc":[305]},{"teal":251,"source":"contracts/ARC11550Bridge.algo.ts:47","pc":[306]},{"teal":252,"source":"contracts/ARC11550Bridge.algo.ts:47","pc":[307]},{"teal":253,"source":"contracts/ARC11550Bridge.algo.ts:48","pc":[308,309]},{"teal":254,"source":"contracts/ARC11550Bridge.algo.ts:48","pc":[310,311]},{"teal":255,"source":"contracts/ARC11550Bridge.algo.ts:48","pc":[312]},{"teal":256,"source":"contracts/ARC11550Bridge.algo.ts:48","pc":[313]},{"teal":257,"source":"contracts/ARC11550Bridge.algo.ts:48","pc":[314]},{"teal":258,"source":"contracts/ARC11550Bridge.algo.ts:49","pc":[315,316]},{"teal":259,"source":"contracts/ARC11550Bridge.algo.ts:49","pc":[317]},{"teal":260,"source":"contracts/ARC11550Bridge.algo.ts:52","pc":[318,319]},{"teal":261,"source":"contracts/ARC11550Bridge.algo.ts:52","pc":[320]},{"teal":262,"source":"contracts/ARC11550Bridge.algo.ts:46","pc":[321,322]},{"teal":265,"source":"contracts/ARC11550Bridge.algo.ts:42","pc":[323]},{"teal":266,"source":"contracts/ARC11550Bridge.algo.ts:42","pc":[324,325]},{"teal":269,"source":"contracts/ARC11550Bridge.algo.ts:42","pc":[326]},{"teal":270,"source":"contracts/ARC11550Bridge.algo.ts:42","pc":[327,328]},{"teal":271,"source":"contracts/ARC11550Bridge.algo.ts:42","pc":[329]},{"teal":272,"source":"contracts/ARC11550Bridge.algo.ts:42","pc":[330]},{"teal":273,"source":"contracts/ARC11550Bridge.algo.ts:42","pc":[331,332]},{"teal":274,"source":"contracts/ARC11550Bridge.algo.ts:42","pc":[333,334,335]},{"teal":275,"source":"contracts/ARC11550Bridge.algo.ts:42","pc":[336]},{"teal":276,"source":"contracts/ARC11550Bridge.algo.ts:42","pc":[337,338]},{"teal":280,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[339,340]},{"teal":281,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[341]},{"teal":282,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[342]},{"teal":283,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[343]},{"teal":284,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[344]},{"teal":285,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[345]},{"teal":286,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[346,347]},{"teal":290,"source":"contracts/ARC11550Bridge.algo.ts:58","pc":[348]},{"teal":291,"source":"contracts/ARC11550Bridge.algo.ts:58","pc":[349,350]},{"teal":292,"source":"contracts/ARC11550Bridge.algo.ts:58","pc":[351]},{"teal":293,"source":"contracts/ARC11550Bridge.algo.ts:58","pc":[352]},{"teal":294,"source":"contracts/ARC11550Bridge.algo.ts:58","pc":[353,354]},{"teal":295,"source":"contracts/ARC11550Bridge.algo.ts:58","pc":[355]},{"teal":299,"source":"contracts/ARC11550Bridge.algo.ts:59","pc":[356]},{"teal":300,"source":"contracts/ARC11550Bridge.algo.ts:59","pc":[357,358]},{"teal":301,"source":"contracts/ARC11550Bridge.algo.ts:59","pc":[359]},{"teal":302,"source":"contracts/ARC11550Bridge.algo.ts:59","pc":[360,361]},{"teal":303,"source":"contracts/ARC11550Bridge.algo.ts:59","pc":[362]},{"teal":304,"source":"contracts/ARC11550Bridge.algo.ts:59","pc":[363]},{"teal":309,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[364]},{"teal":310,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[365,366]},{"teal":311,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[367]},{"teal":312,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[368]},{"teal":313,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[369,370]},{"teal":323,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[371]},{"teal":324,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[372]},{"teal":325,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[373,374]},{"teal":326,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[375,376,377,378,379,380]},{"teal":327,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[381,382]},{"teal":331,"source":"contracts/ARC11550Bridge.algo.ts:65","pc":[383]},{"teal":332,"source":"contracts/ARC11550Bridge.algo.ts:65","pc":[384]},{"teal":333,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[385]},{"teal":334,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[386,387]},{"teal":335,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[388]},{"teal":336,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[389]},{"teal":337,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[390,391]},{"teal":338,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[392]},{"teal":339,"source":"contracts/ARC11550Bridge.algo.ts:65","pc":[393]},{"teal":340,"source":"contracts/ARC11550Bridge.algo.ts:65","pc":[394,395]},{"teal":347,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[396]},{"teal":348,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[397]},{"teal":349,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[398]},{"teal":350,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[399,400]},{"teal":351,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[401]},{"teal":352,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[402]},{"teal":353,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[403,404]},{"teal":354,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[405]},{"teal":355,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[406]},{"teal":356,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[407]},{"teal":357,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[408,409]},{"teal":358,"source":"contracts/ARC11550Bridge.algo.ts:68","pc":[410]},{"teal":359,"source":"contracts/ARC11550Bridge.algo.ts:68","pc":[411]},{"teal":360,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[412]},{"teal":361,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[413,414]},{"teal":362,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[415]},{"teal":363,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[416]},{"teal":364,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[417,418]},{"teal":365,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[419]},{"teal":366,"source":"contracts/ARC11550Bridge.algo.ts:68","pc":[420]},{"teal":367,"source":"contracts/ARC11550Bridge.algo.ts:68","pc":[421]},{"teal":368,"source":"contracts/ARC11550Bridge.algo.ts:68","pc":[422,423]},{"teal":369,"source":"contracts/ARC11550Bridge.algo.ts:68","pc":[424]},{"teal":370,"source":"contracts/ARC11550Bridge.algo.ts:68","pc":[425,426]},{"teal":371,"source":"contracts/ARC11550Bridge.algo.ts:68","pc":[427]},{"teal":372,"source":"contracts/ARC11550Bridge.algo.ts:68","pc":[428,429]},{"teal":373,"source":"contracts/ARC11550Bridge.algo.ts:68","pc":[430,431]},{"teal":374,"source":"contracts/ARC11550Bridge.algo.ts:68","pc":[432]},{"teal":375,"source":"contracts/ARC11550Bridge.algo.ts:68","pc":[433]},{"teal":376,"source":"contracts/ARC11550Bridge.algo.ts:68","pc":[434]},{"teal":377,"source":"contracts/ARC11550Bridge.algo.ts:68","pc":[435]},{"teal":378,"source":"contracts/ARC11550Bridge.algo.ts:68","pc":[436,437]},{"teal":379,"source":"contracts/ARC11550Bridge.algo.ts:68","pc":[438]},{"teal":380,"source":"contracts/ARC11550Bridge.algo.ts:68","pc":[439]},{"teal":381,"source":"contracts/ARC11550Bridge.algo.ts:68","pc":[440,441,442]},{"teal":382,"source":"contracts/ARC11550Bridge.algo.ts:68","pc":[443]},{"teal":383,"source":"contracts/ARC11550Bridge.algo.ts:68","pc":[444]},{"teal":384,"source":"contracts/ARC11550Bridge.algo.ts:68","pc":[445,446]},{"teal":387,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[447]},{"teal":388,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[448,449]},{"teal":391,"source":"contracts/ARC11550Bridge.algo.ts:64","pc":[450]},{"teal":395,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[451,452]},{"teal":396,"source":"contracts/ARC11550Bridge.algo.ts:62","pc":[453]},{"teal":399,"source":"contracts/ARC11550Bridge.algo.ts:62","errorMessage":"box value does not exist: this.asaToArc11550Map(asa).value","pc":[454]},{"teal":402,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[455,456]},{"teal":405,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[457,458]},{"teal":406,"source":"contracts/ARC11550Bridge.algo.ts:31","pc":[459]},{"teal":411,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[460,461]},{"teal":414,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[462,463,464]},{"teal":415,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[465]},{"teal":416,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[466]},{"teal":417,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[467,468]},{"teal":418,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[469]},{"teal":421,"source":"contracts/ARC11550Bridge.algo.ts:75","errorMessage":"argument 0 (receiver) for arc11550ToAsa must be a address","pc":[470]},{"teal":424,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[471,472,473]},{"teal":425,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[474]},{"teal":428,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[475,476]},{"teal":429,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[477]},{"teal":430,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[478]},{"teal":431,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[479]},{"teal":432,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[480,481]},{"teal":433,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[482]},{"teal":434,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[483]},{"teal":437,"source":"contracts/ARC11550Bridge.algo.ts:75","errorMessage":"argument 2 (xferCall) for arc11550ToAsa must be a appl transaction","pc":[484]},{"teal":440,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[485,486,487]},{"teal":441,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[488]},{"teal":442,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[489]},{"teal":443,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[490]},{"teal":444,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[491]},{"teal":445,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[492]},{"teal":449,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[493,494,495]},{"teal":452,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[496]},{"teal":453,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[497,498]},{"teal":457,"source":"contracts/ARC11550Bridge.algo.ts:76","pc":[499,500]},{"teal":458,"source":"contracts/ARC11550Bridge.algo.ts:76","pc":[501,502,503]},{"teal":459,"source":"contracts/ARC11550Bridge.algo.ts:76","pc":[504,505]},{"teal":460,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[506,507]},{"teal":461,"source":"contracts/ARC11550Bridge.algo.ts:77","pc":[508,509]},{"teal":465,"source":"contracts/ARC11550Bridge.algo.ts:78","pc":[510,511]},{"teal":466,"source":"contracts/ARC11550Bridge.algo.ts:78","pc":[512,513]},{"teal":467,"source":"contracts/ARC11550Bridge.algo.ts:78","pc":[514]},{"teal":468,"source":"contracts/ARC11550Bridge.algo.ts:78","pc":[515,516]},{"teal":469,"source":"contracts/ARC11550Bridge.algo.ts:78","pc":[517,518]},{"teal":470,"source":"contracts/ARC11550Bridge.algo.ts:78","pc":[519]},{"teal":471,"source":"contracts/ARC11550Bridge.algo.ts:78","pc":[520]},{"teal":472,"source":"contracts/ARC11550Bridge.algo.ts:78","pc":[521,522]},{"teal":473,"source":"contracts/ARC11550Bridge.algo.ts:78","pc":[523]},{"teal":474,"source":"contracts/ARC11550Bridge.algo.ts:78","pc":[524,525]},{"teal":475,"source":"contracts/ARC11550Bridge.algo.ts:78","pc":[526]},{"teal":476,"source":"contracts/ARC11550Bridge.algo.ts:78","pc":[527,528]},{"teal":477,"source":"contracts/ARC11550Bridge.algo.ts:78","pc":[529]},{"teal":478,"source":"contracts/ARC11550Bridge.algo.ts:78","pc":[530,531]},{"teal":479,"source":"contracts/ARC11550Bridge.algo.ts:78","pc":[532]},{"teal":480,"source":"contracts/ARC11550Bridge.algo.ts:78","pc":[533]},{"teal":484,"source":"contracts/ARC11550Bridge.algo.ts:80","pc":[534,535]},{"teal":485,"source":"contracts/ARC11550Bridge.algo.ts:80","pc":[536,537,538]},{"teal":486,"source":"contracts/ARC11550Bridge.algo.ts:80","pc":[539]},{"teal":487,"source":"contracts/ARC11550Bridge.algo.ts:80","pc":[540,541]},{"teal":491,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[542,543]},{"teal":492,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[544,545]},{"teal":493,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[546]},{"teal":494,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[547]},{"teal":495,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[548,549]},{"teal":496,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[550,551,552,553,554,555]},{"teal":497,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[556,557]},{"teal":500,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[558]},{"teal":501,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[559,560]},{"teal":504,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[561]},{"teal":505,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[562,563]},{"teal":506,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[564]},{"teal":507,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[565]},{"teal":508,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[566,567]},{"teal":509,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[568,569,570]},{"teal":510,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[571]},{"teal":511,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[572]},{"teal":512,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[573]},{"teal":516,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[574,575]},{"teal":517,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[576,577]},{"teal":518,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[578]},{"teal":519,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[579,580]},{"teal":520,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[581,582]},{"teal":521,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[583]},{"teal":522,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[584]},{"teal":523,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[585]},{"teal":524,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[586]},{"teal":525,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[587,588]},{"teal":526,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[589]},{"teal":527,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[590]},{"teal":528,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[591]},{"teal":529,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[592]},{"teal":530,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[593]},{"teal":531,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[594,595]},{"teal":532,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[596]},{"teal":533,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[597]},{"teal":534,"source":"contracts/ARC11550Bridge.algo.ts:85","pc":[598,599]},{"teal":539,"source":"contracts/ARC11550Bridge.algo.ts:87","pc":[600]},{"teal":540,"source":"contracts/ARC11550Bridge.algo.ts:87","pc":[601,602]},{"teal":541,"source":"contracts/ARC11550Bridge.algo.ts:87","pc":[603]},{"teal":542,"source":"contracts/ARC11550Bridge.algo.ts:87","pc":[604]},{"teal":543,"source":"contracts/ARC11550Bridge.algo.ts:87","pc":[605]},{"teal":544,"source":"contracts/ARC11550Bridge.algo.ts:87","pc":[606]},{"teal":545,"source":"contracts/ARC11550Bridge.algo.ts:87","pc":[607]},{"teal":546,"source":"contracts/ARC11550Bridge.algo.ts:87","pc":[608,609,610]},{"teal":554,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[611]},{"teal":555,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[612]},{"teal":556,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[613,614]},{"teal":557,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[615,616,617,618,619,620]},{"teal":558,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[621,622]},{"teal":562,"source":"contracts/ARC11550Bridge.algo.ts:89","pc":[623,624]},{"teal":563,"source":"contracts/ARC11550Bridge.algo.ts:89","pc":[625,626,627]},{"teal":564,"source":"contracts/ARC11550Bridge.algo.ts:89","pc":[628]},{"teal":565,"source":"contracts/ARC11550Bridge.algo.ts:89","pc":[629,630]},{"teal":569,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[631,632]},{"teal":570,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[633,634]},{"teal":571,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[635]},{"teal":572,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[636,637]},{"teal":573,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[638,639]},{"teal":574,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[640]},{"teal":575,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[641]},{"teal":576,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[642]},{"teal":577,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[643]},{"teal":578,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[644,645]},{"teal":579,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[646]},{"teal":580,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[647]},{"teal":581,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[648]},{"teal":582,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[649]},{"teal":583,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[650]},{"teal":584,"source":"contracts/ARC11550Bridge.algo.ts:90","pc":[651,652]},{"teal":587,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[653]},{"teal":588,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[654,655]},{"teal":591,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[656]},{"teal":592,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[657,658]},{"teal":593,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[659]},{"teal":594,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[660]},{"teal":595,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[661,662]},{"teal":596,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[663,664,665]},{"teal":597,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[666,667]},{"teal":607,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[668]},{"teal":608,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[669,670]},{"teal":609,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[671,672]},{"teal":613,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[673,674]},{"teal":614,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[675,676,677]},{"teal":615,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[678]},{"teal":616,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[679,680]},{"teal":620,"source":"contracts/ARC11550Bridge.algo.ts:95","pc":[681,682]},{"teal":621,"source":"contracts/ARC11550Bridge.algo.ts:95","pc":[683,684,685]},{"teal":622,"source":"contracts/ARC11550Bridge.algo.ts:95","pc":[686]},{"teal":623,"source":"contracts/ARC11550Bridge.algo.ts:95","pc":[687,688]},{"teal":627,"source":"contracts/ARC11550Bridge.algo.ts:96","pc":[689,690]},{"teal":628,"source":"contracts/ARC11550Bridge.algo.ts:96","pc":[691,692,693]},{"teal":629,"source":"contracts/ARC11550Bridge.algo.ts:96","pc":[694,695]},{"teal":633,"source":"contracts/ARC11550Bridge.algo.ts:97","pc":[696,697]},{"teal":634,"source":"contracts/ARC11550Bridge.algo.ts:97","pc":[698,699,700]},{"teal":635,"source":"contracts/ARC11550Bridge.algo.ts:97","pc":[701,702]},{"teal":639,"source":"contracts/ARC11550Bridge.algo.ts:98","pc":[703,704]},{"teal":640,"source":"contracts/ARC11550Bridge.algo.ts:98","pc":[705,706]},{"teal":643,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[707]},{"teal":644,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[708,709]},{"teal":647,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[710]},{"teal":648,"source":"contracts/ARC11550Bridge.algo.ts:93","pc":[711,712]},{"teal":652,"source":"contracts/ARC11550Bridge.algo.ts:101","pc":[713,714]},{"teal":653,"source":"contracts/ARC11550Bridge.algo.ts:101","pc":[715,716]},{"teal":657,"source":"contracts/ARC11550Bridge.algo.ts:102","pc":[717]},{"teal":658,"source":"contracts/ARC11550Bridge.algo.ts:102","pc":[718,719]},{"teal":659,"source":"contracts/ARC11550Bridge.algo.ts:102","pc":[720]},{"teal":660,"source":"contracts/ARC11550Bridge.algo.ts:102","pc":[721,722]},{"teal":661,"source":"contracts/ARC11550Bridge.algo.ts:102","pc":[723]},{"teal":662,"source":"contracts/ARC11550Bridge.algo.ts:102","pc":[724]},{"teal":666,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[725]},{"teal":667,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[726,727]},{"teal":668,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[728]},{"teal":669,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[729]},{"teal":670,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[730,731]},{"teal":671,"source":"contracts/ARC11550Bridge.algo.ts:103","pc":[732]},{"teal":676,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[733]},{"teal":677,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[734,735]},{"teal":678,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[736]},{"teal":679,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[737]},{"teal":682,"source":"contracts/ARC11550Bridge.algo.ts:106","errorMessage":"box value does not exist: this.arc11550ToAsaMap(arc11550).value","pc":[738]},{"teal":683,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[739]},{"teal":684,"source":"contracts/ARC11550Bridge.algo.ts:106","pc":[740,741]},{"teal":688,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[742]},{"teal":689,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[743,744]},{"teal":690,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[745,746]},{"teal":694,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[747,748]},{"teal":695,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[749,750]},{"teal":699,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[751,752]},{"teal":700,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[753,754]},{"teal":704,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[755,756]},{"teal":705,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[757,758]},{"teal":706,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[759]},{"teal":707,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[760,761]},{"teal":708,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[762,763]},{"teal":709,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[764]},{"teal":710,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[765]},{"teal":711,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[766,767]},{"teal":712,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[768]},{"teal":713,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[769,770]},{"teal":714,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[771]},{"teal":715,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[772]},{"teal":716,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[773]},{"teal":717,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[774]},{"teal":718,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[775,776]},{"teal":721,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[777]},{"teal":722,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[778,779]},{"teal":725,"source":"contracts/ARC11550Bridge.algo.ts:108","pc":[780]},{"teal":729,"source":"contracts/ARC11550Bridge.algo.ts:110","pc":[781,782]},{"teal":732,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[783,784]},{"teal":735,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[785,786]},{"teal":736,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[787]},{"teal":739,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[788,789,790,791,792,793]},{"teal":740,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[794,795,796]},{"teal":741,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[797,798,799,800]},{"teal":744,"source":"contracts/ARC11550Bridge.algo.ts:9","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[801]},{"teal":747,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[802,803,804,805,806,807]},{"teal":748,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[808,809,810,811,812,813]},{"teal":749,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[814,815,816,817,818,819]},{"teal":750,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[820,821,822]},{"teal":751,"source":"contracts/ARC11550Bridge.algo.ts:9","pc":[823,824,825,826,827,828,829,830]},{"teal":754,"source":"contracts/ARC11550Bridge.algo.ts:9","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[831]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAHAAEIBlAEICYGAANhc2EDYXBwB2RhdGFBcHAIAAAAAAAAAAAEFR98dTEYFCULMRkIjQwC1QAAAAAAAAAAAAACxwAAAAAAAAAAAAAANhoBF4gAAiNDigEAK4v/Z4k2GgEXiAACI0OKAQCxIQWyEIv/shEishIyCrIUIrIBs4knBTYaAUkVIQYSRDEWIwlJOBAhBRJEiAAEULAjQ4oCAShHA4v/OBQyChJEi/84EYwAiwBxCkgyAxJEKYv/OBEWUL1MSBRBAKSxJbIQgAS/gAPVshorZLIYgApjb2xsZWN0aW9uZBayGosAcQRIgCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBJVyAAKKhEVwAgiwBxA0gnBFBJVwgAKKhEVwAIUIsAcQBIFlCLAHEBSBZQMgpQJwRQshoisgGztDsjCcU6VwQAF4wBiwEWK2QWUIwCKYsAFlCLAr8qiwJQiwAWvymLABZQjAOxJbIQgARhus/IshokJCmLABZQTgK6F7IYJCQpiwAWUE4CuhcWshoiJCmLABZQTgK6FxYyClCL/lCL/zgSFlBJFSEEChZXBgJMULIaIrIBs4sDvkSMAEYDiScFNhoCSRUhBhJENhoBFzEWIwlJOBAlEkSIAAUWULAjQ4oDAShHBov/ORoCjACL/owBiwA1/yKLASEECwiBKAg0/0whBlgyChJEi/85GgEXjAKL/zgYsSWyEIAEwU5o2bIaIrIBs7Q7IwnFOlcEABcSRIsANf8iiwEhBAsIIgg0/0wkWBcWiwIWUIwDKosDUL1MSBRBAHqxJbIQgASgrJQ8shqLA1cICBeyGIsANf8iiwEhBAsIIgg0/0wkWBcWshoisgGztDsjCcU6VwQAjASxgQOyEIsEVygIF7IiiwRXMAgXsiOLBFcAILImiwRXIAiyJTIKsioisgGztDy0PIwFKosDUIsFFr8piwUWUIsDvyqLA1C+RBeMBrEhBbIQiwayEYv9shSLADX/IosBIQQLCIFICDT/TCRYF7ISIrIBs4sGjABGBomABJc7YW82GgCOAf0tAIAEsoGlbYAEA17YfoAETC6RRTYaAI4D/SD9Qf6NAA==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Arc11550Id = {
  id: bigint,
  dataApp: bigint
}


/**
 * Converts the ABI tuple representation of a Arc11550Id to the struct representation
 */
export function Arc11550IdFromTuple(abiTuple: [bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Arc11550Id, APP_SPEC.structs) as Arc11550Id
}

/**
 * The argument types for the Arc11550Bridge contract
 */
export type Arc11550BridgeArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(uint64)void': {
      dataApp: bigint | number
    }
    'optInToAsa(uint64)void': {
      asa: bigint | number
    }
    'asaToArc11550(axfer,address)(uint64,uint64)': {
      axfer: AppMethodCallTransactionArgument
      receiver: string
    }
    'arc11550ToAsa(appl,uint64,address)uint64': {
      xferCall: AppMethodCallTransactionArgument
      xferIndex: bigint | number
      receiver: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(uint64)void': [dataApp: bigint | number]
    'optInToAsa(uint64)void': [asa: bigint | number]
    'asaToArc11550(axfer,address)(uint64,uint64)': [axfer: AppMethodCallTransactionArgument, receiver: string]
    'arc11550ToAsa(appl,uint64,address)uint64': [xferCall: AppMethodCallTransactionArgument, xferIndex: bigint | number, receiver: string]
  }
}

/**
 * The return type for each method
 */
export type Arc11550BridgeReturns = {
  'createApplication(uint64)void': void
  'optInToAsa(uint64)void': void
  'asaToArc11550(axfer,address)(uint64,uint64)': Arc11550Id
  'arc11550ToAsa(appl,uint64,address)uint64': bigint
}

/**
 * Defines the types of available calls and state of the Arc11550Bridge smart contract.
 */
export type Arc11550BridgeTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64)void' | 'createApplication', {
      argsObj: Arc11550BridgeArgs['obj']['createApplication(uint64)void']
      argsTuple: Arc11550BridgeArgs['tuple']['createApplication(uint64)void']
      returns: Arc11550BridgeReturns['createApplication(uint64)void']
    }>
    & Record<'optInToAsa(uint64)void' | 'optInToAsa', {
      argsObj: Arc11550BridgeArgs['obj']['optInToAsa(uint64)void']
      argsTuple: Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']
      returns: Arc11550BridgeReturns['optInToAsa(uint64)void']
    }>
    & Record<'asaToArc11550(axfer,address)(uint64,uint64)' | 'asaToArc11550', {
      argsObj: Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)']
      argsTuple: Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']
      returns: Arc11550BridgeReturns['asaToArc11550(axfer,address)(uint64,uint64)']
    }>
    & Record<'arc11550ToAsa(appl,uint64,address)uint64' | 'arc11550ToAsa', {
      argsObj: Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64']
      argsTuple: Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']
      returns: Arc11550BridgeReturns['arc11550ToAsa(appl,uint64,address)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        dataApp: bigint
        collection: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        asaToArc11550Map: Map<bigint | number, Arc11550Id>
        arc11550ToAsaMap: Map<Arc11550Id, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Arc11550BridgeSignatures = keyof Arc11550BridgeTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Arc11550BridgeNonVoidMethodSignatures = keyof Arc11550BridgeTypes['methods'] extends infer T ? T extends keyof Arc11550BridgeTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Arc11550Bridge smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Arc11550BridgeSignatures> = Arc11550BridgeTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc11550Bridge smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc11550BridgeSignatures> = Arc11550BridgeTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = Arc11550BridgeTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = Arc11550BridgeTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Arc11550BridgeCreateCallParams =
  | Expand<CallParams<Arc11550BridgeArgs['obj']['createApplication(uint64)void'] | Arc11550BridgeArgs['tuple']['createApplication(uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<Arc11550BridgeArgs['obj']['createApplication(uint64)void'] | Arc11550BridgeArgs['tuple']['createApplication(uint64)void']> & {method: 'createApplication(uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Arc11550BridgeDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Arc11550BridgeCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc11550Bridge smart contract
 */
export abstract class Arc11550BridgeParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends Arc11550BridgeCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(uint64)void':
            return Arc11550BridgeParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ARC11550Bridge smart contract using the createApplication(uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<Arc11550BridgeArgs['obj']['createApplication(uint64)void'] | Arc11550BridgeArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.dataApp],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the optInToAsa(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToAsa(params: CallParams<Arc11550BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optInToAsa(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asa],
    }
  }
  /**
   * Constructs a no op call for the asaToArc11550(axfer,address)(uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static asaToArc11550(params: CallParams<Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)'] | Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'asaToArc11550(axfer,address)(uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.axfer, params.args.receiver],
    }
  }
  /**
   * Constructs a no op call for the arc11550ToAsa(appl,uint64,address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550ToAsa(params: CallParams<Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64'] | Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550ToAsa(appl,uint64,address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.xferCall, params.args.xferIndex, params.args.receiver],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ARC11550Bridge smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Arc11550BridgeFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Arc11550BridgeFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Arc11550BridgeClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Arc11550BridgeClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ARC11550Bridge smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Arc11550BridgeDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? Arc11550BridgeParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (Arc11550BridgeCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new Arc11550BridgeClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Bridge smart contract using the createApplication(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<Arc11550BridgeArgs['obj']['createApplication(uint64)void'] | Arc11550BridgeArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(Arc11550BridgeParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Bridge smart contract using the createApplication(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<Arc11550BridgeArgs['obj']['createApplication(uint64)void'] | Arc11550BridgeArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(Arc11550BridgeParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Bridge smart contract using an ABI method call using the createApplication(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<Arc11550BridgeArgs['obj']['createApplication(uint64)void'] | Arc11550BridgeArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(Arc11550BridgeParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | Arc11550BridgeReturns['createApplication(uint64)void']) }, appClient: new Arc11550BridgeClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ARC11550Bridge smart contract
 */
export class Arc11550BridgeClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Arc11550BridgeClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Arc11550Bridge app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Arc11550BridgeClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Arc11550BridgeNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Arc11550BridgeClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Arc11550BridgeClient> {
    return new Arc11550BridgeClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Arc11550BridgeClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Arc11550BridgeClient> {
    return new Arc11550BridgeClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Bridge smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `optInToAsa(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToAsa: (params: CallParams<Arc11550BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550BridgeParamsFactory.optInToAsa(params))
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `asaToArc11550(axfer,address)(uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    asaToArc11550: (params: CallParams<Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)'] | Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550BridgeParamsFactory.asaToArc11550(params))
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `arc11550ToAsa(appl,uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550ToAsa: (params: CallParams<Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64'] | Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550BridgeParamsFactory.arc11550ToAsa(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Bridge smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `optInToAsa(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToAsa: (params: CallParams<Arc11550BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550BridgeParamsFactory.optInToAsa(params))
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `asaToArc11550(axfer,address)(uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    asaToArc11550: (params: CallParams<Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)'] | Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550BridgeParamsFactory.asaToArc11550(params))
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `arc11550ToAsa(appl,uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550ToAsa: (params: CallParams<Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64'] | Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550BridgeParamsFactory.arc11550ToAsa(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Bridge smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `optInToAsa(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToAsa: async (params: CallParams<Arc11550BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550BridgeParamsFactory.optInToAsa(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550BridgeReturns['optInToAsa(uint64)void'])}
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `asaToArc11550(axfer,address)(uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    asaToArc11550: async (params: CallParams<Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)'] | Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550BridgeParamsFactory.asaToArc11550(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550BridgeReturns['asaToArc11550(axfer,address)(uint64,uint64)'])}
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `arc11550ToAsa(appl,uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550ToAsa: async (params: CallParams<Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64'] | Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550BridgeParamsFactory.arc11550ToAsa(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550BridgeReturns['arc11550ToAsa(appl,uint64,address)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Arc11550BridgeClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ARC11550Bridge app
   */
  state = {
    /**
     * Methods to access global state for the current ARC11550Bridge app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          dataApp: result.dataApp,
          collection: result.collection,
        }
      },
      /**
       * Get the current value of the dataApp key in global state
       */
      dataApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("dataApp")) as bigint | undefined },
      /**
       * Get the current value of the collection key in global state
       */
      collection: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("collection")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current ARC11550Bridge app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the asaToArc11550Map map in box state
       */
      asaToArc11550Map: {
        /**
         * Get all current values of the asaToArc11550Map map in box state
         */
        getMap: async (): Promise<Map<bigint, Arc11550Id>> => { return (await this.appClient.state.box.getMap("asaToArc11550Map")) as Map<bigint, Arc11550Id> },
        /**
         * Get a current value of the asaToArc11550Map map by key from box state
         */
        value: async (key: bigint | number): Promise<Arc11550Id | undefined> => { return await this.appClient.state.box.getMapValue("asaToArc11550Map", key) as Arc11550Id | undefined },
      },
      /**
       * Get values from the arc11550ToAsaMap map in box state
       */
      arc11550ToAsaMap: {
        /**
         * Get all current values of the arc11550ToAsaMap map in box state
         */
        getMap: async (): Promise<Map<Arc11550Id, bigint>> => { return (await this.appClient.state.box.getMap("arc11550ToAsaMap")) as Map<Arc11550Id, bigint> },
        /**
         * Get a current value of the arc11550ToAsaMap map by key from box state
         */
        value: async (key: Arc11550Id): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("arc11550ToAsaMap", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): Arc11550BridgeComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a optInToAsa(uint64)void method call against the ARC11550Bridge contract
       */
      optInToAsa(params: CallParams<Arc11550BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToAsa(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a asaToArc11550(axfer,address)(uint64,uint64) method call against the ARC11550Bridge contract
       */
      asaToArc11550(params: CallParams<Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)'] | Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.asaToArc11550(params)))
        resultMappers.push((v) => client.decodeReturnValue('asaToArc11550(axfer,address)(uint64,uint64)', v))
        return this
      },
      /**
       * Add a arc11550ToAsa(appl,uint64,address)uint64 method call against the ARC11550Bridge contract
       */
      arc11550ToAsa(params: CallParams<Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64'] | Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550ToAsa(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550ToAsa(appl,uint64,address)uint64', v))
        return this
      },
      /**
       * Add a clear state call to the ARC11550Bridge contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Arc11550BridgeComposer
  }
}
export type Arc11550BridgeComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the optInToAsa(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsa(params?: CallParams<Arc11550BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']>): Arc11550BridgeComposer<[...TReturns, Arc11550BridgeReturns['optInToAsa(uint64)void'] | undefined]>

  /**
   * Calls the asaToArc11550(axfer,address)(uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  asaToArc11550(params?: CallParams<Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)'] | Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']>): Arc11550BridgeComposer<[...TReturns, Arc11550BridgeReturns['asaToArc11550(axfer,address)(uint64,uint64)'] | undefined]>

  /**
   * Calls the arc11550ToAsa(appl,uint64,address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550ToAsa(params?: CallParams<Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64'] | Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']>): Arc11550BridgeComposer<[...TReturns, Arc11550BridgeReturns['arc11550ToAsa(appl,uint64,address)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ARC11550Bridge smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Arc11550BridgeComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc11550BridgeComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc11550BridgeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Arc11550BridgeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Arc11550BridgeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Arc11550BridgeComposerResults<TReturns>>
}
export type Arc11550BridgeComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


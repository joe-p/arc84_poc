/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ARC11550Bridge","desc":"","methods":[{"name":"optInToAsa","args":[{"name":"asa","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"asaToArc11550","args":[{"name":"axfer","type":"axfer"},{"name":"receiver","type":"address"}],"returns":{"type":"(uint64,uint64)","struct":"Arc11550Id"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc11550ToAsa","args":[{"name":"xferCall","type":"appl"},{"name":"xferIndex","type":"uint64"},{"name":"receiver","type":"address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}}],"arcs":[4,56],"structs":{"Arc11550Id":[{"name":"id","type":"uint64"},{"name":"app","type":"uint64"}]},"state":{"schema":{"global":{"bytes":0,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"asaToArc11550Map":{"keyType":"uint64","valueType":"Arc11550Id","prefix":"YXNh"},"arc11550ToAsaMap":{"keyType":"Arc11550Id","valueType":"uint64","prefix":"YXBw"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/ARC11550Bridge.algo.ts:10","pc":[0]},{"teal":2,"source":"contracts/ARC11550Bridge.algo.ts:10","pc":[1,2,3,4,5,6,7,8,9]},{"teal":3,"source":"contracts/ARC11550Bridge.algo.ts:10","pc":[10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]},{"teal":15,"source":"contracts/ARC11550Bridge.algo.ts:10","pc":[35,36]},{"teal":16,"source":"contracts/ARC11550Bridge.algo.ts:10","pc":[37]},{"teal":17,"source":"contracts/ARC11550Bridge.algo.ts:10","pc":[38]},{"teal":18,"source":"contracts/ARC11550Bridge.algo.ts:10","pc":[39]},{"teal":19,"source":"contracts/ARC11550Bridge.algo.ts:10","pc":[40,41]},{"teal":20,"source":"contracts/ARC11550Bridge.algo.ts:10","pc":[42]},{"teal":21,"source":"contracts/ARC11550Bridge.algo.ts:10","pc":[43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68]},{"teal":25,"source":"contracts/ARC11550Bridge.algo.ts:10","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[69]},{"teal":30,"source":"contracts/ARC11550Bridge.algo.ts:14","pc":[70,71,72]},{"teal":31,"source":"contracts/ARC11550Bridge.algo.ts:14","pc":[73]},{"teal":34,"source":"contracts/ARC11550Bridge.algo.ts:14","pc":[74,75,76]},{"teal":35,"source":"contracts/ARC11550Bridge.algo.ts:14","pc":[77]},{"teal":36,"source":"contracts/ARC11550Bridge.algo.ts:14","pc":[78]},{"teal":40,"source":"contracts/ARC11550Bridge.algo.ts:14","pc":[79,80,81]},{"teal":48,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[82]},{"teal":49,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[83,84]},{"teal":50,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[85,86]},{"teal":54,"source":"contracts/ARC11550Bridge.algo.ts:16","pc":[87,88]},{"teal":55,"source":"contracts/ARC11550Bridge.algo.ts:16","pc":[89,90]},{"teal":59,"source":"contracts/ARC11550Bridge.algo.ts:17","pc":[91]},{"teal":60,"source":"contracts/ARC11550Bridge.algo.ts:17","pc":[92,93]},{"teal":64,"source":"contracts/ARC11550Bridge.algo.ts:18","pc":[94,95]},{"teal":65,"source":"contracts/ARC11550Bridge.algo.ts:18","pc":[96,97]},{"teal":68,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[98]},{"teal":69,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[99,100]},{"teal":72,"source":"contracts/ARC11550Bridge.algo.ts:15","pc":[101]},{"teal":73,"source":"contracts/ARC11550Bridge.algo.ts:14","pc":[102]},{"teal":78,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[103,104]},{"teal":81,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[105,106,107]},{"teal":82,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[108]},{"teal":83,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[109]},{"teal":84,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[110,111]},{"teal":85,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[112]},{"teal":88,"source":"contracts/ARC11550Bridge.algo.ts:22","errorMessage":"argument 0 (receiver) for asaToArc11550 must be a address","pc":[113]},{"teal":91,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[114,115]},{"teal":92,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[116]},{"teal":93,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[117]},{"teal":94,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[118]},{"teal":95,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[119,120]},{"teal":96,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[121,122]},{"teal":97,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[123]},{"teal":100,"source":"contracts/ARC11550Bridge.algo.ts:22","errorMessage":"argument 1 (axfer) for asaToArc11550 must be a axfer transaction","pc":[124]},{"teal":103,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[125,126,127]},{"teal":104,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[128]},{"teal":105,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[129]},{"teal":106,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[130]},{"teal":107,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[131]},{"teal":111,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[132,133,134]},{"teal":114,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[135]},{"teal":115,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[136,137]},{"teal":122,"source":"contracts/ARC11550Bridge.algo.ts:23","pc":[138,139]},{"teal":123,"source":"contracts/ARC11550Bridge.algo.ts:24","pc":[140,141]},{"teal":124,"source":"contracts/ARC11550Bridge.algo.ts:24","pc":[142,143]},{"teal":125,"source":"contracts/ARC11550Bridge.algo.ts:24","pc":[144]},{"teal":128,"source":"contracts/ARC11550Bridge.algo.ts:24","errorMessage":"transaction verification failed: {\"txn\":\"axfer\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}","pc":[145]},{"teal":132,"source":"contracts/ARC11550Bridge.algo.ts:27","pc":[146,147]},{"teal":133,"source":"contracts/ARC11550Bridge.algo.ts:27","pc":[148,149]},{"teal":134,"source":"contracts/ARC11550Bridge.algo.ts:27","pc":[150,151]},{"teal":138,"source":"contracts/ARC11550Bridge.algo.ts:29","pc":[152,153]},{"teal":139,"source":"contracts/ARC11550Bridge.algo.ts:29","pc":[154,155]},{"teal":140,"source":"contracts/ARC11550Bridge.algo.ts:29","pc":[156]},{"teal":141,"source":"contracts/ARC11550Bridge.algo.ts:29","pc":[157,158]},{"teal":142,"source":"contracts/ARC11550Bridge.algo.ts:29","pc":[159]},{"teal":143,"source":"contracts/ARC11550Bridge.algo.ts:29","pc":[160]},{"teal":148,"source":"contracts/ARC11550Bridge.algo.ts:32","pc":[161]},{"teal":149,"source":"contracts/ARC11550Bridge.algo.ts:32","pc":[162,163]},{"teal":150,"source":"contracts/ARC11550Bridge.algo.ts:32","pc":[164,165]},{"teal":151,"source":"contracts/ARC11550Bridge.algo.ts:32","pc":[166]},{"teal":152,"source":"contracts/ARC11550Bridge.algo.ts:32","pc":[167]},{"teal":153,"source":"contracts/ARC11550Bridge.algo.ts:32","pc":[168]},{"teal":154,"source":"contracts/ARC11550Bridge.algo.ts:32","pc":[169]},{"teal":155,"source":"contracts/ARC11550Bridge.algo.ts:32","pc":[170]},{"teal":156,"source":"contracts/ARC11550Bridge.algo.ts:32","pc":[171]},{"teal":157,"source":"contracts/ARC11550Bridge.algo.ts:32","pc":[172,173,174]},{"teal":164,"source":"contracts/ARC11550Bridge.algo.ts:33","pc":[175]},{"teal":165,"source":"contracts/ARC11550Bridge.algo.ts:33","pc":[176]},{"teal":166,"source":"contracts/ARC11550Bridge.algo.ts:33","pc":[177,178]},{"teal":167,"source":"contracts/ARC11550Bridge.algo.ts:33","pc":[179,180,181,182,183,184]},{"teal":168,"source":"contracts/ARC11550Bridge.algo.ts:33","pc":[185,186]},{"teal":172,"source":"contracts/ARC11550Bridge.algo.ts:34","pc":[187]},{"teal":173,"source":"contracts/ARC11550Bridge.algo.ts:34","pc":[188,189]},{"teal":174,"source":"contracts/ARC11550Bridge.algo.ts:34","pc":[190,191,192,193,194,195,196,197,198,199]},{"teal":175,"source":"contracts/ARC11550Bridge.algo.ts:34","pc":[200,201]},{"teal":178,"source":"contracts/ARC11550Bridge.algo.ts:33","pc":[202]},{"teal":179,"source":"contracts/ARC11550Bridge.algo.ts:33","pc":[203,204]},{"teal":182,"source":"contracts/ARC11550Bridge.algo.ts:33","pc":[205]},{"teal":186,"source":"contracts/ARC11550Bridge.algo.ts:37","pc":[206,207]},{"teal":187,"source":"contracts/ARC11550Bridge.algo.ts:37","pc":[208,209]},{"teal":202,"source":"contracts/ARC11550Bridge.algo.ts:39","pc":[210]},{"teal":203,"source":"contracts/ARC11550Bridge.algo.ts:39","pc":[211]},{"teal":204,"source":"contracts/ARC11550Bridge.algo.ts:39","pc":[212,213]},{"teal":205,"source":"contracts/ARC11550Bridge.algo.ts:39","pc":[214,215,216,217,218,219]},{"teal":206,"source":"contracts/ARC11550Bridge.algo.ts:39","pc":[220,221]},{"teal":210,"source":"contracts/ARC11550Bridge.algo.ts:40","pc":[222,223]},{"teal":211,"source":"contracts/ARC11550Bridge.algo.ts:40","pc":[224,225]},{"teal":223,"source":"contracts/ARC11550Bridge.algo.ts:46","pc":[226,227]},{"teal":224,"source":"contracts/ARC11550Bridge.algo.ts:46","pc":[228,229]},{"teal":225,"source":"contracts/ARC11550Bridge.algo.ts:46","pc":[230]},{"teal":226,"source":"contracts/ARC11550Bridge.algo.ts:46","pc":[231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264]},{"teal":227,"source":"contracts/ARC11550Bridge.algo.ts:46","pc":[265]},{"teal":228,"source":"contracts/ARC11550Bridge.algo.ts:46","pc":[266]},{"teal":229,"source":"contracts/ARC11550Bridge.algo.ts:46","pc":[267,268,269]},{"teal":230,"source":"contracts/ARC11550Bridge.algo.ts:46","pc":[270]},{"teal":231,"source":"contracts/ARC11550Bridge.algo.ts:46","pc":[271]},{"teal":232,"source":"contracts/ARC11550Bridge.algo.ts:46","pc":[272]},{"teal":233,"source":"contracts/ARC11550Bridge.algo.ts:46","pc":[273,274,275]},{"teal":234,"source":"contracts/ARC11550Bridge.algo.ts:47","pc":[276,277]},{"teal":235,"source":"contracts/ARC11550Bridge.algo.ts:47","pc":[278,279]},{"teal":236,"source":"contracts/ARC11550Bridge.algo.ts:47","pc":[280]},{"teal":237,"source":"contracts/ARC11550Bridge.algo.ts:47","pc":[281]},{"teal":238,"source":"contracts/ARC11550Bridge.algo.ts:47","pc":[282]},{"teal":239,"source":"contracts/ARC11550Bridge.algo.ts:47","pc":[283]},{"teal":240,"source":"contracts/ARC11550Bridge.algo.ts:47","pc":[284,285,286]},{"teal":241,"source":"contracts/ARC11550Bridge.algo.ts:47","pc":[287]},{"teal":242,"source":"contracts/ARC11550Bridge.algo.ts:47","pc":[288]},{"teal":243,"source":"contracts/ARC11550Bridge.algo.ts:47","pc":[289]},{"teal":244,"source":"contracts/ARC11550Bridge.algo.ts:47","pc":[290,291,292]},{"teal":245,"source":"contracts/ARC11550Bridge.algo.ts:47","pc":[293]},{"teal":246,"source":"contracts/ARC11550Bridge.algo.ts:43","pc":[294,295]},{"teal":247,"source":"contracts/ARC11550Bridge.algo.ts:43","pc":[296,297]},{"teal":248,"source":"contracts/ARC11550Bridge.algo.ts:43","pc":[298]},{"teal":249,"source":"contracts/ARC11550Bridge.algo.ts:43","pc":[299]},{"teal":250,"source":"contracts/ARC11550Bridge.algo.ts:43","pc":[300]},{"teal":251,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[301,302]},{"teal":252,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[303,304]},{"teal":253,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[305]},{"teal":254,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[306]},{"teal":255,"source":"contracts/ARC11550Bridge.algo.ts:44","pc":[307]},{"teal":256,"source":"contracts/ARC11550Bridge.algo.ts:45","pc":[308,309]},{"teal":257,"source":"contracts/ARC11550Bridge.algo.ts:45","pc":[310]},{"teal":258,"source":"contracts/ARC11550Bridge.algo.ts:42","pc":[311,312]},{"teal":261,"source":"contracts/ARC11550Bridge.algo.ts:39","pc":[313]},{"teal":262,"source":"contracts/ARC11550Bridge.algo.ts:39","pc":[314,315]},{"teal":265,"source":"contracts/ARC11550Bridge.algo.ts:39","pc":[316]},{"teal":266,"source":"contracts/ARC11550Bridge.algo.ts:39","pc":[317,318]},{"teal":267,"source":"contracts/ARC11550Bridge.algo.ts:39","pc":[319]},{"teal":268,"source":"contracts/ARC11550Bridge.algo.ts:39","pc":[320]},{"teal":269,"source":"contracts/ARC11550Bridge.algo.ts:39","pc":[321,322]},{"teal":270,"source":"contracts/ARC11550Bridge.algo.ts:39","pc":[323,324,325]},{"teal":271,"source":"contracts/ARC11550Bridge.algo.ts:39","pc":[326]},{"teal":272,"source":"contracts/ARC11550Bridge.algo.ts:39","pc":[327,328]},{"teal":276,"source":"contracts/ARC11550Bridge.algo.ts:52","pc":[329,330]},{"teal":277,"source":"contracts/ARC11550Bridge.algo.ts:52","pc":[331]},{"teal":278,"source":"contracts/ARC11550Bridge.algo.ts:52","pc":[332,333]},{"teal":279,"source":"contracts/ARC11550Bridge.algo.ts:52","pc":[334]},{"teal":280,"source":"contracts/ARC11550Bridge.algo.ts:52","pc":[335]},{"teal":281,"source":"contracts/ARC11550Bridge.algo.ts:52","pc":[336,337]},{"teal":285,"source":"contracts/ARC11550Bridge.algo.ts:53","pc":[338]},{"teal":286,"source":"contracts/ARC11550Bridge.algo.ts:53","pc":[339,340]},{"teal":287,"source":"contracts/ARC11550Bridge.algo.ts:53","pc":[341]},{"teal":288,"source":"contracts/ARC11550Bridge.algo.ts:53","pc":[342]},{"teal":289,"source":"contracts/ARC11550Bridge.algo.ts:53","pc":[343,344]},{"teal":290,"source":"contracts/ARC11550Bridge.algo.ts:53","pc":[345]},{"teal":294,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[346]},{"teal":295,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[347,348]},{"teal":296,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[349]},{"teal":297,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[350,351]},{"teal":298,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[352]},{"teal":299,"source":"contracts/ARC11550Bridge.algo.ts:54","pc":[353]},{"teal":304,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[354]},{"teal":305,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[355,356]},{"teal":306,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[357]},{"teal":307,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[358]},{"teal":308,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[359,360]},{"teal":315,"source":"contracts/ARC11550Bridge.algo.ts:59","pc":[361]},{"teal":316,"source":"contracts/ARC11550Bridge.algo.ts:59","pc":[362]},{"teal":317,"source":"contracts/ARC11550Bridge.algo.ts:59","pc":[363,364]},{"teal":318,"source":"contracts/ARC11550Bridge.algo.ts:59","pc":[365,366,367,368,369,370]},{"teal":319,"source":"contracts/ARC11550Bridge.algo.ts:59","pc":[371,372]},{"teal":323,"source":"contracts/ARC11550Bridge.algo.ts:60","pc":[373]},{"teal":324,"source":"contracts/ARC11550Bridge.algo.ts:60","pc":[374]},{"teal":325,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[375]},{"teal":326,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[376,377]},{"teal":327,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[378]},{"teal":328,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[379]},{"teal":329,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[380,381]},{"teal":330,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[382]},{"teal":331,"source":"contracts/ARC11550Bridge.algo.ts:60","pc":[383]},{"teal":332,"source":"contracts/ARC11550Bridge.algo.ts:60","pc":[384,385]},{"teal":336,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[386]},{"teal":337,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[387]},{"teal":338,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[388]},{"teal":339,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[389,390]},{"teal":340,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[391]},{"teal":341,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[392]},{"teal":342,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[393,394]},{"teal":343,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[395]},{"teal":344,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[396]},{"teal":345,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[397]},{"teal":346,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[398,399]},{"teal":347,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[400]},{"teal":348,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[401,402]},{"teal":349,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[403]},{"teal":350,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[404,405]},{"teal":351,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[406,407]},{"teal":352,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[408]},{"teal":353,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[409]},{"teal":354,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[410]},{"teal":355,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[411]},{"teal":356,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[412,413]},{"teal":357,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[414]},{"teal":358,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[415]},{"teal":359,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[416,417,418]},{"teal":360,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[419]},{"teal":361,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[420]},{"teal":362,"source":"contracts/ARC11550Bridge.algo.ts:61","pc":[421,422]},{"teal":365,"source":"contracts/ARC11550Bridge.algo.ts:59","pc":[423]},{"teal":366,"source":"contracts/ARC11550Bridge.algo.ts:59","pc":[424,425]},{"teal":369,"source":"contracts/ARC11550Bridge.algo.ts:59","pc":[426]},{"teal":373,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[427,428]},{"teal":374,"source":"contracts/ARC11550Bridge.algo.ts:57","pc":[429]},{"teal":377,"source":"contracts/ARC11550Bridge.algo.ts:57","errorMessage":"box value does not exist: this.asaToArc11550Map(asa).value","pc":[430]},{"teal":380,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[431,432]},{"teal":383,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[433,434]},{"teal":384,"source":"contracts/ARC11550Bridge.algo.ts:22","pc":[435]},{"teal":389,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[436,437]},{"teal":392,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[438,439,440]},{"teal":393,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[441]},{"teal":394,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[442]},{"teal":395,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[443,444]},{"teal":396,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[445]},{"teal":399,"source":"contracts/ARC11550Bridge.algo.ts:67","errorMessage":"argument 0 (receiver) for arc11550ToAsa must be a address","pc":[446]},{"teal":402,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[447,448,449]},{"teal":403,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[450]},{"teal":406,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[451,452]},{"teal":407,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[453]},{"teal":408,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[454]},{"teal":409,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[455]},{"teal":410,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[456,457]},{"teal":411,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[458]},{"teal":412,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[459]},{"teal":415,"source":"contracts/ARC11550Bridge.algo.ts:67","errorMessage":"argument 2 (xferCall) for arc11550ToAsa must be a appl transaction","pc":[460]},{"teal":418,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[461,462,463]},{"teal":419,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[464]},{"teal":420,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[465]},{"teal":421,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[466]},{"teal":422,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[467]},{"teal":423,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[468]},{"teal":427,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[469,470,471]},{"teal":430,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[472]},{"teal":431,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[473,474]},{"teal":435,"source":"contracts/ARC11550Bridge.algo.ts:68","pc":[475,476]},{"teal":436,"source":"contracts/ARC11550Bridge.algo.ts:68","pc":[477,478,479]},{"teal":437,"source":"contracts/ARC11550Bridge.algo.ts:68","pc":[480,481]},{"teal":438,"source":"contracts/ARC11550Bridge.algo.ts:69","pc":[482,483]},{"teal":439,"source":"contracts/ARC11550Bridge.algo.ts:69","pc":[484,485]},{"teal":443,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[486,487]},{"teal":444,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[488,489]},{"teal":445,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[490]},{"teal":446,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[491,492]},{"teal":447,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[493,494]},{"teal":448,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[495]},{"teal":449,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[496]},{"teal":450,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[497]},{"teal":451,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[498]},{"teal":452,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[499,500]},{"teal":453,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[501]},{"teal":454,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[502]},{"teal":455,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[503]},{"teal":456,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[504]},{"teal":457,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[505]},{"teal":458,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[506,507]},{"teal":459,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[508,509]},{"teal":460,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[510]},{"teal":461,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[511]},{"teal":462,"source":"contracts/ARC11550Bridge.algo.ts:71","pc":[512,513]},{"teal":467,"source":"contracts/ARC11550Bridge.algo.ts:73","pc":[514]},{"teal":468,"source":"contracts/ARC11550Bridge.algo.ts:73","pc":[515,516]},{"teal":469,"source":"contracts/ARC11550Bridge.algo.ts:73","pc":[517]},{"teal":470,"source":"contracts/ARC11550Bridge.algo.ts:73","pc":[518]},{"teal":471,"source":"contracts/ARC11550Bridge.algo.ts:73","pc":[519]},{"teal":472,"source":"contracts/ARC11550Bridge.algo.ts:73","pc":[520]},{"teal":473,"source":"contracts/ARC11550Bridge.algo.ts:73","pc":[521]},{"teal":474,"source":"contracts/ARC11550Bridge.algo.ts:73","pc":[522,523,524]},{"teal":482,"source":"contracts/ARC11550Bridge.algo.ts:74","pc":[525]},{"teal":483,"source":"contracts/ARC11550Bridge.algo.ts:74","pc":[526]},{"teal":484,"source":"contracts/ARC11550Bridge.algo.ts:74","pc":[527,528]},{"teal":485,"source":"contracts/ARC11550Bridge.algo.ts:74","pc":[529,530,531,532,533,534]},{"teal":486,"source":"contracts/ARC11550Bridge.algo.ts:74","pc":[535,536]},{"teal":490,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[537,538]},{"teal":491,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[539,540,541]},{"teal":492,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[542]},{"teal":493,"source":"contracts/ARC11550Bridge.algo.ts:75","pc":[543,544]},{"teal":497,"source":"contracts/ARC11550Bridge.algo.ts:76","pc":[545,546]},{"teal":498,"source":"contracts/ARC11550Bridge.algo.ts:76","pc":[547,548]},{"teal":499,"source":"contracts/ARC11550Bridge.algo.ts:76","pc":[549]},{"teal":500,"source":"contracts/ARC11550Bridge.algo.ts:76","pc":[550,551]},{"teal":501,"source":"contracts/ARC11550Bridge.algo.ts:76","pc":[552,553]},{"teal":502,"source":"contracts/ARC11550Bridge.algo.ts:76","pc":[554]},{"teal":503,"source":"contracts/ARC11550Bridge.algo.ts:76","pc":[555]},{"teal":504,"source":"contracts/ARC11550Bridge.algo.ts:76","pc":[556]},{"teal":505,"source":"contracts/ARC11550Bridge.algo.ts:76","pc":[557]},{"teal":506,"source":"contracts/ARC11550Bridge.algo.ts:76","pc":[558,559]},{"teal":507,"source":"contracts/ARC11550Bridge.algo.ts:76","pc":[560]},{"teal":508,"source":"contracts/ARC11550Bridge.algo.ts:76","pc":[561]},{"teal":509,"source":"contracts/ARC11550Bridge.algo.ts:76","pc":[562]},{"teal":510,"source":"contracts/ARC11550Bridge.algo.ts:76","pc":[563]},{"teal":511,"source":"contracts/ARC11550Bridge.algo.ts:76","pc":[564]},{"teal":512,"source":"contracts/ARC11550Bridge.algo.ts:76","pc":[565,566]},{"teal":515,"source":"contracts/ARC11550Bridge.algo.ts:74","pc":[567]},{"teal":516,"source":"contracts/ARC11550Bridge.algo.ts:74","pc":[568,569]},{"teal":519,"source":"contracts/ARC11550Bridge.algo.ts:74","pc":[570]},{"teal":520,"source":"contracts/ARC11550Bridge.algo.ts:74","pc":[571,572]},{"teal":521,"source":"contracts/ARC11550Bridge.algo.ts:74","pc":[573]},{"teal":522,"source":"contracts/ARC11550Bridge.algo.ts:74","pc":[574]},{"teal":523,"source":"contracts/ARC11550Bridge.algo.ts:74","pc":[575,576]},{"teal":524,"source":"contracts/ARC11550Bridge.algo.ts:74","pc":[577,578,579]},{"teal":525,"source":"contracts/ARC11550Bridge.algo.ts:74","pc":[580,581]},{"teal":535,"source":"contracts/ARC11550Bridge.algo.ts:79","pc":[582]},{"teal":536,"source":"contracts/ARC11550Bridge.algo.ts:79","pc":[583,584]},{"teal":537,"source":"contracts/ARC11550Bridge.algo.ts:79","pc":[585,586]},{"teal":541,"source":"contracts/ARC11550Bridge.algo.ts:80","pc":[587,588]},{"teal":542,"source":"contracts/ARC11550Bridge.algo.ts:80","pc":[589,590,591]},{"teal":543,"source":"contracts/ARC11550Bridge.algo.ts:80","pc":[592]},{"teal":544,"source":"contracts/ARC11550Bridge.algo.ts:80","pc":[593,594]},{"teal":548,"source":"contracts/ARC11550Bridge.algo.ts:81","pc":[595,596]},{"teal":549,"source":"contracts/ARC11550Bridge.algo.ts:81","pc":[597,598,599]},{"teal":550,"source":"contracts/ARC11550Bridge.algo.ts:81","pc":[600]},{"teal":551,"source":"contracts/ARC11550Bridge.algo.ts:81","pc":[601,602]},{"teal":555,"source":"contracts/ARC11550Bridge.algo.ts:82","pc":[603,604]},{"teal":556,"source":"contracts/ARC11550Bridge.algo.ts:82","pc":[605,606,607]},{"teal":557,"source":"contracts/ARC11550Bridge.algo.ts:82","pc":[608,609]},{"teal":561,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[610,611]},{"teal":562,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[612,613,614]},{"teal":563,"source":"contracts/ARC11550Bridge.algo.ts:83","pc":[615,616]},{"teal":567,"source":"contracts/ARC11550Bridge.algo.ts:84","pc":[617,618]},{"teal":568,"source":"contracts/ARC11550Bridge.algo.ts:84","pc":[619,620]},{"teal":571,"source":"contracts/ARC11550Bridge.algo.ts:79","pc":[621]},{"teal":572,"source":"contracts/ARC11550Bridge.algo.ts:79","pc":[622,623]},{"teal":575,"source":"contracts/ARC11550Bridge.algo.ts:79","pc":[624]},{"teal":576,"source":"contracts/ARC11550Bridge.algo.ts:79","pc":[625,626]},{"teal":580,"source":"contracts/ARC11550Bridge.algo.ts:87","pc":[627,628]},{"teal":581,"source":"contracts/ARC11550Bridge.algo.ts:87","pc":[629,630]},{"teal":585,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[631]},{"teal":586,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[632,633]},{"teal":587,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[634]},{"teal":588,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[635,636]},{"teal":589,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[637]},{"teal":590,"source":"contracts/ARC11550Bridge.algo.ts:88","pc":[638]},{"teal":594,"source":"contracts/ARC11550Bridge.algo.ts:89","pc":[639]},{"teal":595,"source":"contracts/ARC11550Bridge.algo.ts:89","pc":[640,641]},{"teal":596,"source":"contracts/ARC11550Bridge.algo.ts:89","pc":[642]},{"teal":597,"source":"contracts/ARC11550Bridge.algo.ts:89","pc":[643]},{"teal":598,"source":"contracts/ARC11550Bridge.algo.ts:89","pc":[644,645]},{"teal":599,"source":"contracts/ARC11550Bridge.algo.ts:89","pc":[646]},{"teal":604,"source":"contracts/ARC11550Bridge.algo.ts:92","pc":[647]},{"teal":605,"source":"contracts/ARC11550Bridge.algo.ts:92","pc":[648,649]},{"teal":606,"source":"contracts/ARC11550Bridge.algo.ts:92","pc":[650]},{"teal":607,"source":"contracts/ARC11550Bridge.algo.ts:92","pc":[651]},{"teal":610,"source":"contracts/ARC11550Bridge.algo.ts:92","errorMessage":"box value does not exist: this.arc11550ToAsaMap(arc11550).value","pc":[652]},{"teal":611,"source":"contracts/ARC11550Bridge.algo.ts:92","pc":[653]},{"teal":612,"source":"contracts/ARC11550Bridge.algo.ts:92","pc":[654,655]},{"teal":616,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[656]},{"teal":617,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[657,658]},{"teal":618,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[659,660]},{"teal":622,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[661,662]},{"teal":623,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[663,664]},{"teal":627,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[665,666]},{"teal":628,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[667,668]},{"teal":632,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[669,670]},{"teal":633,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[671,672]},{"teal":634,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[673]},{"teal":635,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[674,675]},{"teal":636,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[676,677]},{"teal":637,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[678]},{"teal":638,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[679]},{"teal":639,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[680,681]},{"teal":640,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[682]},{"teal":641,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[683,684]},{"teal":642,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[685]},{"teal":643,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[686]},{"teal":644,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[687]},{"teal":645,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[688]},{"teal":646,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[689,690]},{"teal":649,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[691]},{"teal":650,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[692,693]},{"teal":653,"source":"contracts/ARC11550Bridge.algo.ts:94","pc":[694]},{"teal":657,"source":"contracts/ARC11550Bridge.algo.ts:96","pc":[695,696]},{"teal":660,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[697,698]},{"teal":663,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[699,700]},{"teal":664,"source":"contracts/ARC11550Bridge.algo.ts:67","pc":[701]},{"teal":667,"source":"contracts/ARC11550Bridge.algo.ts:10","pc":[702]},{"teal":668,"source":"contracts/ARC11550Bridge.algo.ts:10","pc":[703]},{"teal":671,"source":"contracts/ARC11550Bridge.algo.ts:10","pc":[704,705,706,707,708,709]},{"teal":672,"source":"contracts/ARC11550Bridge.algo.ts:10","pc":[710,711,712]},{"teal":673,"source":"contracts/ARC11550Bridge.algo.ts:10","pc":[713,714,715,716]},{"teal":676,"source":"contracts/ARC11550Bridge.algo.ts:10","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[717]},{"teal":679,"source":"contracts/ARC11550Bridge.algo.ts:10","pc":[718,719,720,721,722,723]},{"teal":680,"source":"contracts/ARC11550Bridge.algo.ts:10","pc":[724,725,726,727,728,729]},{"teal":681,"source":"contracts/ARC11550Bridge.algo.ts:10","pc":[730,731,732,733,734,735]},{"teal":682,"source":"contracts/ARC11550Bridge.algo.ts:10","pc":[736,737,738]},{"teal":683,"source":"contracts/ARC11550Bridge.algo.ts:10","pc":[739,740,741,742,743,744,745,746]},{"teal":686,"source":"contracts/ARC11550Bridge.algo.ts:10","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[747]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAHAAEGCFAEICYFAANhc2EDYXBwCAAAAAAAAAAABBUffHUxGBQkCzEZCI0MAokAAAAAAAAAAAAAAnsAAAAAAAAAAAAAADYaAReIAAIjQ4oBALEhBbIQi/+yESKyEjIKshQisgGziScENhoBSRUhBhJEMRYjCUk4ECEFEkSIAARQsCNDigIBKEcEi/84FDIKEkSL/zgRjACLAHEKSDIDEkQpi/84ERZQvUxIFEEAs7EkshCABJF8SLayGiuyGoAIAAAAAAAAAAGyGiKyAbO0PYwBsSSyEIAE05PsU7IaiwGyGIsAcQRIgCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBJVyAAKKhEVwAgiwBxA0grUElXCAAoqERXAAhQiwBxAEgWUIsAcQFIFlAyClCyGiKyAbO0OyMJxTpXBAAXjAKLAhaLARZQjAMpiwAWUIsDvyqLA1CLABa/KYsAFlCMBLEkshCABEXwIqWyGiUlKYsAFlBOAroXshgiJSmLABZQTgK6FxYyClCL/lCL/zgSFlBJFSEEChZXBgJMULIaIrIBs4sEvkSMAEYEiScENhoCSRUhBhJENhoBFzEWIwlJOBAkEkSIAAUWULAjQ4oDAShHBYv/ORoBjACL/owBiwA1/yKLASEECwgiCDT/TCVYFxaL/zgYFlCMAiqLAlC9TEgUQQB6sSSyEIAEUfUEvrIaiwJXCAgXshiLADX/IosBIQQLCCIINP9MJVgXFrIaIrIBs7Q7IwnFOlcEAIwDsYEDshCLA1coCBeyIosDVzAIF7IjiwNXACCyJosDVyAIsiUyCrIqIrIBs7Q8tDyMBCqLAlCLBBa/KYsEFlCLAr8qiwJQvkQXjAWxIQWyEIsFshGL/bIUiwA1/yKLASEECwiBSAg0/0wlWBeyEiKyAbOLBYwARgWJI0OABLhEezY2GgCOAf/xAIAEsoGlbYAEA17YfoAETC6RRTYaAI4D/Vv9fP7JAA==","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Arc11550Id = {
  id: bigint,
  app: bigint
}


/**
 * Converts the ABI tuple representation of a Arc11550Id to the struct representation
 */
export function Arc11550IdFromTuple(abiTuple: [bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Arc11550Id, APP_SPEC.structs) as Arc11550Id
}

/**
 * The argument types for the Arc11550Bridge contract
 */
export type Arc11550BridgeArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'optInToAsa(uint64)void': {
      asa: bigint | number
    }
    'asaToArc11550(axfer,address)(uint64,uint64)': {
      axfer: AppMethodCallTransactionArgument
      receiver: string
    }
    'arc11550ToAsa(appl,uint64,address)uint64': {
      xferCall: AppMethodCallTransactionArgument
      xferIndex: bigint | number
      receiver: string
    }
    'createApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'optInToAsa(uint64)void': [asa: bigint | number]
    'asaToArc11550(axfer,address)(uint64,uint64)': [axfer: AppMethodCallTransactionArgument, receiver: string]
    'arc11550ToAsa(appl,uint64,address)uint64': [xferCall: AppMethodCallTransactionArgument, xferIndex: bigint | number, receiver: string]
    'createApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type Arc11550BridgeReturns = {
  'optInToAsa(uint64)void': void
  'asaToArc11550(axfer,address)(uint64,uint64)': Arc11550Id
  'arc11550ToAsa(appl,uint64,address)uint64': bigint
  'createApplication()void': void
}

/**
 * Defines the types of available calls and state of the Arc11550Bridge smart contract.
 */
export type Arc11550BridgeTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'optInToAsa(uint64)void' | 'optInToAsa', {
      argsObj: Arc11550BridgeArgs['obj']['optInToAsa(uint64)void']
      argsTuple: Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']
      returns: Arc11550BridgeReturns['optInToAsa(uint64)void']
    }>
    & Record<'asaToArc11550(axfer,address)(uint64,uint64)' | 'asaToArc11550', {
      argsObj: Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)']
      argsTuple: Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']
      returns: Arc11550BridgeReturns['asaToArc11550(axfer,address)(uint64,uint64)']
    }>
    & Record<'arc11550ToAsa(appl,uint64,address)uint64' | 'arc11550ToAsa', {
      argsObj: Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64']
      argsTuple: Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']
      returns: Arc11550BridgeReturns['arc11550ToAsa(appl,uint64,address)uint64']
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: Arc11550BridgeArgs['obj']['createApplication()void']
      argsTuple: Arc11550BridgeArgs['tuple']['createApplication()void']
      returns: Arc11550BridgeReturns['createApplication()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    box: {
      keys: {}
      maps: {
        asaToArc11550Map: Map<bigint | number, Arc11550Id>
        arc11550ToAsaMap: Map<Arc11550Id, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Arc11550BridgeSignatures = keyof Arc11550BridgeTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Arc11550BridgeNonVoidMethodSignatures = keyof Arc11550BridgeTypes['methods'] extends infer T ? T extends keyof Arc11550BridgeTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Arc11550Bridge smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Arc11550BridgeSignatures> = Arc11550BridgeTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc11550Bridge smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc11550BridgeSignatures> = Arc11550BridgeTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = Arc11550BridgeTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Arc11550BridgeCreateCallParams =
  | Expand<CallParams<Arc11550BridgeArgs['obj']['createApplication()void'] | Arc11550BridgeArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<Arc11550BridgeArgs['obj']['createApplication()void'] | Arc11550BridgeArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Arc11550BridgeDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Arc11550BridgeCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc11550Bridge smart contract
 */
export abstract class Arc11550BridgeParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends Arc11550BridgeCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return Arc11550BridgeParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ARC11550Bridge smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<Arc11550BridgeArgs['obj']['createApplication()void'] | Arc11550BridgeArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the optInToAsa(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToAsa(params: CallParams<Arc11550BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optInToAsa(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asa],
    }
  }
  /**
   * Constructs a no op call for the asaToArc11550(axfer,address)(uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static asaToArc11550(params: CallParams<Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)'] | Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'asaToArc11550(axfer,address)(uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.axfer, params.args.receiver],
    }
  }
  /**
   * Constructs a no op call for the arc11550ToAsa(appl,uint64,address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc11550ToAsa(params: CallParams<Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64'] | Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc11550ToAsa(appl,uint64,address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.xferCall, params.args.xferIndex, params.args.receiver],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ARC11550Bridge smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Arc11550BridgeFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Arc11550BridgeFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Arc11550BridgeClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Arc11550BridgeClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ARC11550Bridge smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Arc11550BridgeDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? Arc11550BridgeParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (Arc11550BridgeCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new Arc11550BridgeClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Bridge smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<Arc11550BridgeArgs['obj']['createApplication()void'] | Arc11550BridgeArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(Arc11550BridgeParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Bridge smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<Arc11550BridgeArgs['obj']['createApplication()void'] | Arc11550BridgeArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(Arc11550BridgeParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC11550Bridge smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<Arc11550BridgeArgs['obj']['createApplication()void'] | Arc11550BridgeArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(Arc11550BridgeParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | Arc11550BridgeReturns['createApplication()void']) }, appClient: new Arc11550BridgeClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ARC11550Bridge smart contract
 */
export class Arc11550BridgeClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Arc11550BridgeClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Arc11550Bridge app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Arc11550BridgeClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Arc11550BridgeNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Arc11550BridgeClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Arc11550BridgeClient> {
    return new Arc11550BridgeClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Arc11550BridgeClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Arc11550BridgeClient> {
    return new Arc11550BridgeClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Bridge smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `optInToAsa(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToAsa: (params: CallParams<Arc11550BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550BridgeParamsFactory.optInToAsa(params))
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `asaToArc11550(axfer,address)(uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    asaToArc11550: (params: CallParams<Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)'] | Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550BridgeParamsFactory.asaToArc11550(params))
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `arc11550ToAsa(appl,uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc11550ToAsa: (params: CallParams<Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64'] | Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc11550BridgeParamsFactory.arc11550ToAsa(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Bridge smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `optInToAsa(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToAsa: (params: CallParams<Arc11550BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550BridgeParamsFactory.optInToAsa(params))
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `asaToArc11550(axfer,address)(uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    asaToArc11550: (params: CallParams<Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)'] | Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550BridgeParamsFactory.asaToArc11550(params))
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `arc11550ToAsa(appl,uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc11550ToAsa: (params: CallParams<Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64'] | Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc11550BridgeParamsFactory.arc11550ToAsa(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ARC11550Bridge smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `optInToAsa(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToAsa: async (params: CallParams<Arc11550BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550BridgeParamsFactory.optInToAsa(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550BridgeReturns['optInToAsa(uint64)void'])}
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `asaToArc11550(axfer,address)(uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    asaToArc11550: async (params: CallParams<Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)'] | Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550BridgeParamsFactory.asaToArc11550(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550BridgeReturns['asaToArc11550(axfer,address)(uint64,uint64)'])}
    },

    /**
     * Makes a call to the ARC11550Bridge smart contract using the `arc11550ToAsa(appl,uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc11550ToAsa: async (params: CallParams<Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64'] | Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc11550BridgeParamsFactory.arc11550ToAsa(params))
      return {...result, return: result.return as unknown as (undefined | Arc11550BridgeReturns['arc11550ToAsa(appl,uint64,address)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Arc11550BridgeClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ARC11550Bridge app
   */
  state = {
    /**
     * Methods to access box state for the current ARC11550Bridge app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the asaToArc11550Map map in box state
       */
      asaToArc11550Map: {
        /**
         * Get all current values of the asaToArc11550Map map in box state
         */
        getMap: async (): Promise<Map<bigint, Arc11550Id>> => { return (await this.appClient.state.box.getMap("asaToArc11550Map")) as Map<bigint, Arc11550Id> },
        /**
         * Get a current value of the asaToArc11550Map map by key from box state
         */
        value: async (key: bigint | number): Promise<Arc11550Id | undefined> => { return await this.appClient.state.box.getMapValue("asaToArc11550Map", key) as Arc11550Id | undefined },
      },
      /**
       * Get values from the arc11550ToAsaMap map in box state
       */
      arc11550ToAsaMap: {
        /**
         * Get all current values of the arc11550ToAsaMap map in box state
         */
        getMap: async (): Promise<Map<Arc11550Id, bigint>> => { return (await this.appClient.state.box.getMap("arc11550ToAsaMap")) as Map<Arc11550Id, bigint> },
        /**
         * Get a current value of the arc11550ToAsaMap map by key from box state
         */
        value: async (key: Arc11550Id): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("arc11550ToAsaMap", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): Arc11550BridgeComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a optInToAsa(uint64)void method call against the ARC11550Bridge contract
       */
      optInToAsa(params: CallParams<Arc11550BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToAsa(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a asaToArc11550(axfer,address)(uint64,uint64) method call against the ARC11550Bridge contract
       */
      asaToArc11550(params: CallParams<Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)'] | Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.asaToArc11550(params)))
        resultMappers.push((v) => client.decodeReturnValue('asaToArc11550(axfer,address)(uint64,uint64)', v))
        return this
      },
      /**
       * Add a arc11550ToAsa(appl,uint64,address)uint64 method call against the ARC11550Bridge contract
       */
      arc11550ToAsa(params: CallParams<Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64'] | Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc11550ToAsa(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc11550ToAsa(appl,uint64,address)uint64', v))
        return this
      },
      /**
       * Add a clear state call to the ARC11550Bridge contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Arc11550BridgeComposer
  }
}
export type Arc11550BridgeComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the optInToAsa(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsa(params?: CallParams<Arc11550BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc11550BridgeArgs['tuple']['optInToAsa(uint64)void']>): Arc11550BridgeComposer<[...TReturns, Arc11550BridgeReturns['optInToAsa(uint64)void'] | undefined]>

  /**
   * Calls the asaToArc11550(axfer,address)(uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  asaToArc11550(params?: CallParams<Arc11550BridgeArgs['obj']['asaToArc11550(axfer,address)(uint64,uint64)'] | Arc11550BridgeArgs['tuple']['asaToArc11550(axfer,address)(uint64,uint64)']>): Arc11550BridgeComposer<[...TReturns, Arc11550BridgeReturns['asaToArc11550(axfer,address)(uint64,uint64)'] | undefined]>

  /**
   * Calls the arc11550ToAsa(appl,uint64,address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc11550ToAsa(params?: CallParams<Arc11550BridgeArgs['obj']['arc11550ToAsa(appl,uint64,address)uint64'] | Arc11550BridgeArgs['tuple']['arc11550ToAsa(appl,uint64,address)uint64']>): Arc11550BridgeComposer<[...TReturns, Arc11550BridgeReturns['arc11550ToAsa(appl,uint64,address)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ARC11550Bridge smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Arc11550BridgeComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc11550BridgeComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc11550BridgeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Arc11550BridgeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Arc11550BridgeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Arc11550BridgeComposerResults<TReturns>>
}
export type Arc11550BridgeComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


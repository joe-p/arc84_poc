#pragma version 10
intcblock 0 1 6 4 32
bytecblock 0x 0x617361 0x617070 0x151f7c75

// This TEAL was generated by TEALScript v0.106.3
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 2 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// optInToAsa(uint64)void
*abi_route_optInToAsa:
	// asa: uint64
	txna ApplicationArgs 1
	btoi

	// execute optInToAsa(uint64)void
	callsub optInToAsa
	intc 1 // 1
	return

// optInToAsa(asa: AssetID): void
optInToAsa:
	proto 1 0

	// contracts/ARC200Bridge.algo.ts:22
	// sendAssetTransfer({
	//       xferAsset: asa,
	//       assetAmount: 0,
	//       assetReceiver: this.app.address,
	//     })
	itxn_begin
	intc 3 //  axfer
	itxn_field TypeEnum

	// contracts/ARC200Bridge.algo.ts:23
	// xferAsset: asa
	frame_dig -1 // asa: AssetID
	itxn_field XferAsset

	// contracts/ARC200Bridge.algo.ts:24
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// contracts/ARC200Bridge.algo.ts:25
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// asaToArc200(axfer,address)uint64
*abi_route_asaToArc200:
	// The ABI return prefix
	bytec 3 // 0x151f7c75

	// receiver: address
	txna ApplicationArgs 1
	dup
	len
	intc 4 // 32
	==

	// argument 0 (receiver) for asaToArc200 must be a address
	assert

	// axfer: axfer
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 3 //  axfer
	==

	// argument 1 (axfer) for asaToArc200 must be a axfer transaction
	assert

	// execute asaToArc200(axfer,address)uint64
	callsub asaToArc200
	itob
	concat
	log
	intc 1 // 1
	return

// asaToArc200(axfer: AssetTransferTxn, receiver: Address): AppID
asaToArc200:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// contracts/ARC200Bridge.algo.ts:30
	// verifyAssetTransferTxn(axfer, {
	//       assetReceiver: this.app.address,
	//     })
	// verify assetReceiver
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"axfer","field":"assetReceiver","expected":"this.app.address"}
	assert

	// contracts/ARC200Bridge.algo.ts:34
	// asa = axfer.xferAsset
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns XferAsset
	frame_bury 0 // asa: uint64

	// contracts/ARC200Bridge.algo.ts:36
	// assert(asa.clawback === Address.zeroAddress)
	frame_dig 0 // asa: uint64
	asset_params_get AssetClawback
	pop
	global ZeroAddress
	==
	assert

	// *if0_condition
	// contracts/ARC200Bridge.algo.ts:39
	// !this.asaToArc200Map(axfer.xferAsset).exists
	bytec 1 //  "asa"
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	box_len
	swap
	pop
	!
	bz *if0_end

	// *if0_consequent
	// contracts/ARC200Bridge.algo.ts:40
	// sendMethodCall<typeof ARC200.prototype.createApplication>({
	//         methodArgs: [
	//           asa.name as bytes<32>,
	//           asa.unitName as bytes<8>,
	//           // PROBLEM: we need to go from uint64 to uint8
	//           asa.decimals as uint8,
	//           asa.total as uint256,
	//         ],
	//       })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	pushbytes 0x8529f783 // method "createApplication(byte[32],byte[8],uint8,uint256)void"
	itxn_field ApplicationArgs

	// contracts/ARC200Bridge.algo.ts:41
	// methodArgs: [
	//           asa.name as bytes<32>,
	//           asa.unitName as bytes<8>,
	//           // PROBLEM: we need to go from uint64 to uint8
	//           asa.decimals as uint8,
	//           asa.total as uint256,
	//         ]
	frame_dig 0 // asa: uint64
	asset_params_get AssetName
	pop
	pushbytes 0x0000000000000000000000000000000000000000000000000000000000000000
	concat
	dup
	extract 32 0
	bytec 0 // 0x
	b==
	assert
	extract 0 32
	itxn_field ApplicationArgs
	frame_dig 0 // asa: uint64
	asset_params_get AssetUnitName
	pop
	pushbytes 0x0000000000000000
	concat
	dup
	extract 8 0
	bytec 0 // 0x
	b==
	assert
	extract 0 8
	itxn_field ApplicationArgs
	frame_dig 0 // asa: uint64
	asset_params_get AssetDecimals
	pop
	itob
	extract 7 1
	itxn_field ApplicationArgs
	frame_dig 0 // asa: uint64
	asset_params_get AssetTotal
	pop
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/ARC200Bridge.algo.ts:50
	// app = this.itxn.createdApplicationID
	itxn CreatedApplicationID
	frame_bury 1 // app: uint64

	// contracts/ARC200Bridge.algo.ts:52
	// this.asaToArc200Map(asa).value = app
	bytec 1 //  "asa"
	frame_dig 0 // asa: uint64
	itob
	concat
	frame_dig 1 // app: uint64
	itob
	box_put

	// contracts/ARC200Bridge.algo.ts:53
	// this.arc200ToAsaMap(app).value = asa
	bytec 2 //  "app"
	frame_dig 1 // app: uint64
	itob
	concat
	frame_dig 0 // asa: uint64
	itob
	box_put

*if0_end:
	// contracts/ARC200Bridge.algo.ts:56
	// arc200App = this.asaToArc200Map(asa).value
	bytec 1 //  "asa"
	frame_dig 0 // asa: uint64
	itob
	concat
	box_get

	// box value does not exist: this.asaToArc200Map(asa).value
	assert
	btoi
	frame_bury 2 // arc200App: uint64

	// contracts/ARC200Bridge.algo.ts:58
	// transferSucceeded = sendMethodCall<typeof ARC200.prototype.arc200_transfer>({
	//       applicationID: arc200App,
	//       methodArgs: [receiver, axfer.assetAmount as uint256],
	//     })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	pushbytes 0xda7025b9 // method "arc200_transfer(address,uint256)bool"
	itxn_field ApplicationArgs

	// contracts/ARC200Bridge.algo.ts:59
	// applicationID: arc200App
	frame_dig 2 // arc200App: uint64
	itxn_field ApplicationID

	// contracts/ARC200Bridge.algo.ts:60
	// methodArgs: [receiver, axfer.assetAmount as uint256]
	frame_dig -2 // receiver: Address
	itxn_field ApplicationArgs
	frame_dig -1 // axfer: AssetTransferTxn
	gtxns AssetAmount
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	intc 0 // 0
	getbit
	frame_bury 3 // transferSucceeded: bool

	// contracts/ARC200Bridge.algo.ts:63
	// assert(transferSucceeded)
	frame_dig 3 // transferSucceeded: bool
	assert

	// contracts/ARC200Bridge.algo.ts:65
	// return arc200App;
	frame_dig 2 // arc200App: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

// getArc200Params(app: AppID): ARC200Params
getArc200Params:
	proto 1 1

	// contracts/ARC200Bridge.algo.ts:70
	// return {
	//       total: sendMethodCall<typeof ARC200.prototype.arc200_totalSupply>({ applicationID: app }),
	//       name: sendMethodCall<typeof ARC200.prototype.arc200_name>({ applicationID: app }),
	//       symbol: sendMethodCall<typeof ARC200.prototype.arc200_symbol>({ applicationID: app }),
	//       decimals: sendMethodCall<typeof ARC200.prototype.arc200_decimals>({ applicationID: app }),
	//     };
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	pushbytes 0xec996041 // method "arc200_totalSupply()uint256"
	itxn_field ApplicationArgs

	// contracts/ARC200Bridge.algo.ts:71
	// applicationID: app
	frame_dig -1 // app: AppID
	itxn_field ApplicationID

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0

	// contracts/ARC200Bridge.algo.ts:74
	// sendMethodCall<typeof ARC200.prototype.arc200_decimals>({ applicationID: app })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	pushbytes 0x84ec13d5 // method "arc200_decimals()uint8"
	itxn_field ApplicationArgs

	// contracts/ARC200Bridge.algo.ts:74
	// applicationID: app
	frame_dig -1 // app: AppID
	itxn_field ApplicationID

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	btoi
	itob
	extract 7 1
	concat

	// contracts/ARC200Bridge.algo.ts:72
	// sendMethodCall<typeof ARC200.prototype.arc200_name>({ applicationID: app })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	pushbytes 0x657d13ec // method "arc200_name()byte[32]"
	itxn_field ApplicationArgs

	// contracts/ARC200Bridge.algo.ts:72
	// applicationID: app
	frame_dig -1 // app: AppID
	itxn_field ApplicationID

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	concat

	// contracts/ARC200Bridge.algo.ts:73
	// sendMethodCall<typeof ARC200.prototype.arc200_symbol>({ applicationID: app })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	pushbytes 0xb6ae1a25 // method "arc200_symbol()byte[8]"
	itxn_field ApplicationArgs

	// contracts/ARC200Bridge.algo.ts:73
	// applicationID: app
	frame_dig -1 // app: AppID
	itxn_field ApplicationID

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	concat
	retsub

// arc200ToAsa(uint64,uint64,address)uint64
*abi_route_arc200ToAsa:
	// The ABI return prefix
	bytec 3 // 0x151f7c75

	// receiver: address
	txna ApplicationArgs 3
	dup
	len
	intc 4 // 32
	==

	// argument 0 (receiver) for arc200ToAsa must be a address
	assert

	// amount: uint64
	txna ApplicationArgs 2
	btoi

	// app: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc200ToAsa(uint64,uint64,address)uint64
	callsub arc200ToAsa
	itob
	concat
	log
	intc 1 // 1
	return

// arc200ToAsa(app: AppID, amount: uint64, receiver: Address): AssetID
arc200ToAsa:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// *if1_condition
	// contracts/ARC200Bridge.algo.ts:79
	// !this.arc200ToAsaMap(app).exists
	bytec 2 //  "app"
	frame_dig -1 // app: AppID
	itob
	concat
	box_len
	swap
	pop
	!
	bz *if1_end

	// *if1_consequent
	// contracts/ARC200Bridge.algo.ts:80
	// params = this.getArc200Params(app)
	frame_dig -1 // app: AppID
	callsub getArc200Params
	frame_bury 0 // params: (uint256,uint8,byte[32],byte[8])

	// contracts/ARC200Bridge.algo.ts:81
	// sendAssetCreation({
	//         configAssetTotal: params.total as uint64,
	//         configAssetDecimals: params.decimals as uint64,
	//         configAssetName: params.name as bytes,
	//         configAssetUnitName: params.symbol as bytes,
	//         configAssetReserve: this.app.address,
	//       })
	itxn_begin
	pushint 3 // acfg
	itxn_field TypeEnum

	// contracts/ARC200Bridge.algo.ts:82
	// configAssetTotal: params.total as uint64
	frame_dig 0 // params: (uint256,uint8,byte[32],byte[8])
	extract 0 32
	dup
	bitlen
	pushint 64
	<=

	// params.total as uint64 overflowed 64 bits
	assert
	extract 24 8
	btoi
	itxn_field ConfigAssetTotal

	// contracts/ARC200Bridge.algo.ts:83
	// configAssetDecimals: params.decimals as uint64
	frame_dig 0 // params: (uint256,uint8,byte[32],byte[8])
	extract 32 1
	btoi
	itxn_field ConfigAssetDecimals

	// contracts/ARC200Bridge.algo.ts:84
	// configAssetName: params.name as bytes
	frame_dig 0 // params: (uint256,uint8,byte[32],byte[8])
	extract 33 32
	itxn_field ConfigAssetName

	// contracts/ARC200Bridge.algo.ts:85
	// configAssetUnitName: params.symbol as bytes
	frame_dig 0 // params: (uint256,uint8,byte[32],byte[8])
	extract 65 8
	itxn_field ConfigAssetUnitName

	// contracts/ARC200Bridge.algo.ts:86
	// configAssetReserve: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetReserve

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID

	// contracts/ARC200Bridge.algo.ts:89
	// asa = this.itxn.createdAssetID
	itxn CreatedAssetID
	frame_bury 1 // asa: uint64

	// contracts/ARC200Bridge.algo.ts:90
	// this.arc200ToAsaMap(app).value = asa
	bytec 2 //  "app"
	frame_dig -1 // app: AppID
	itob
	concat
	frame_dig 1 // asa: uint64
	itob
	box_put

	// contracts/ARC200Bridge.algo.ts:91
	// this.asaToArc200Map(asa).value = app
	bytec 1 //  "asa"
	frame_dig 1 // asa: uint64
	itob
	concat
	frame_dig -1 // app: AppID
	itob
	box_put

*if1_end:
	// contracts/ARC200Bridge.algo.ts:94
	// asa = this.arc200ToAsaMap(app).value
	bytec 2 //  "app"
	frame_dig -1 // app: AppID
	itob
	concat
	box_get

	// box value does not exist: this.arc200ToAsaMap(app).value
	assert
	btoi
	frame_bury 2 // asa: uint64

	// contracts/ARC200Bridge.algo.ts:97
	// transferSucceeded = sendMethodCall<typeof ARC200.prototype.arc200_transferFrom>({
	//       applicationID: app,
	//       methodArgs: [this.txn.sender, this.app.address, amount as uint256],
	//     })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	pushbytes 0x4a968f8f // method "arc200_transferFrom(address,address,uint256)bool"
	itxn_field ApplicationArgs

	// contracts/ARC200Bridge.algo.ts:98
	// applicationID: app
	frame_dig -1 // app: AppID
	itxn_field ApplicationID

	// contracts/ARC200Bridge.algo.ts:99
	// methodArgs: [this.txn.sender, this.app.address, amount as uint256]
	txn Sender
	itxn_field ApplicationArgs
	global CurrentApplicationAddress
	itxn_field ApplicationArgs
	frame_dig -2 // amount: uint64
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	intc 0 // 0
	getbit
	frame_bury 3 // transferSucceeded: bool

	// contracts/ARC200Bridge.algo.ts:102
	// assert(transferSucceeded)
	frame_dig 3 // transferSucceeded: bool
	assert

	// contracts/ARC200Bridge.algo.ts:104
	// sendAssetTransfer({ xferAsset: asa, assetReceiver: receiver, assetAmount: amount })
	itxn_begin
	intc 3 //  axfer
	itxn_field TypeEnum

	// contracts/ARC200Bridge.algo.ts:104
	// xferAsset: asa
	frame_dig 2 // asa: uint64
	itxn_field XferAsset

	// contracts/ARC200Bridge.algo.ts:104
	// assetReceiver: receiver
	frame_dig -3 // receiver: Address
	itxn_field AssetReceiver

	// contracts/ARC200Bridge.algo.ts:104
	// assetAmount: amount
	frame_dig -2 // amount: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/ARC200Bridge.algo.ts:106
	// return asa;
	frame_dig 2 // asa: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

*abi_route_createApplication:
	intc 1 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xb281a56d // method "optInToAsa(uint64)void"
	pushbytes 0x59bd33b7 // method "asaToArc200(axfer,address)uint64"
	pushbytes 0xf92b0c52 // method "arc200ToAsa(uint64,uint64,address)uint64"
	txna ApplicationArgs 0
	match *abi_route_optInToAsa *abi_route_asaToArc200 *abi_route_arc200ToAsa

	// this contract does not implement the given ABI method for call NoOp
	err
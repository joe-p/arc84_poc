/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ARC84TransferHook","desc":"","methods":[{"name":"approved","desc":"Determines whether a transfer is approved or not. This implementation just returns true (which is the same as not setting a\ntransferHookApp), but there are many possibilities such as dynamic whitelists, blacklists, enforced royalties, token-gating, etc.","args":[{"name":"caller","type":"address"},{"name":"transfers","type":"(uint64,address,address,uint64)[]"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]}},{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":0,"ints":0},"local":{"bytes":0,"ints":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/ARC84Data.algo.ts:271","pc":[0]},{"teal":2,"source":"contracts/ARC84Data.algo.ts:271","pc":[1,2,3]},{"teal":14,"source":"contracts/ARC84Data.algo.ts:271","pc":[4,5]},{"teal":15,"source":"contracts/ARC84Data.algo.ts:271","pc":[6]},{"teal":16,"source":"contracts/ARC84Data.algo.ts:271","pc":[7,8]},{"teal":17,"source":"contracts/ARC84Data.algo.ts:271","pc":[9]},{"teal":18,"source":"contracts/ARC84Data.algo.ts:271","pc":[10,11]},{"teal":19,"source":"contracts/ARC84Data.algo.ts:271","pc":[12]},{"teal":20,"source":"contracts/ARC84Data.algo.ts:271","pc":[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]},{"teal":24,"source":"contracts/ARC84Data.algo.ts:271","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[39]},{"teal":29,"source":"contracts/ARC84Data.algo.ts:275","pc":[40,41,42,43,44,45]},{"teal":32,"source":"contracts/ARC84Data.algo.ts:275","pc":[46,47,48]},{"teal":33,"source":"contracts/ARC84Data.algo.ts:275","pc":[49,50,51]},{"teal":36,"source":"contracts/ARC84Data.algo.ts:275","pc":[52,53,54]},{"teal":37,"source":"contracts/ARC84Data.algo.ts:275","pc":[55]},{"teal":38,"source":"contracts/ARC84Data.algo.ts:275","pc":[56]},{"teal":39,"source":"contracts/ARC84Data.algo.ts:275","pc":[57,58]},{"teal":40,"source":"contracts/ARC84Data.algo.ts:275","pc":[59]},{"teal":43,"source":"contracts/ARC84Data.algo.ts:275","errorMessage":"argument 1 (caller) for approved must be a address","pc":[60]},{"teal":46,"source":"contracts/ARC84Data.algo.ts:275","pc":[61,62,63]},{"teal":47,"source":"contracts/ARC84Data.algo.ts:275","pc":[64,65,66]},{"teal":48,"source":"contracts/ARC84Data.algo.ts:275","pc":[67,68]},{"teal":49,"source":"contracts/ARC84Data.algo.ts:275","pc":[69,70]},{"teal":50,"source":"contracts/ARC84Data.algo.ts:275","pc":[71]},{"teal":51,"source":"contracts/ARC84Data.algo.ts:275","pc":[72]},{"teal":52,"source":"contracts/ARC84Data.algo.ts:275","pc":[73]},{"teal":53,"source":"contracts/ARC84Data.algo.ts:275","pc":[74]},{"teal":54,"source":"contracts/ARC84Data.algo.ts:275","pc":[75]},{"teal":61,"source":"contracts/ARC84Data.algo.ts:275","pc":[76,77,78]},{"teal":65,"source":"contracts/ARC84Data.algo.ts:276","pc":[79]},{"teal":66,"source":"contracts/ARC84Data.algo.ts:275","pc":[80]},{"teal":69,"source":"contracts/ARC84Data.algo.ts:271","pc":[81]},{"teal":70,"source":"contracts/ARC84Data.algo.ts:271","pc":[82]},{"teal":73,"source":"contracts/ARC84Data.algo.ts:271","pc":[83,84,85,86,87,88]},{"teal":74,"source":"contracts/ARC84Data.algo.ts:271","pc":[89,90,91]},{"teal":75,"source":"contracts/ARC84Data.algo.ts:271","pc":[92,93,94,95]},{"teal":78,"source":"contracts/ARC84Data.algo.ts:271","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[96]},{"teal":81,"source":"contracts/ARC84Data.algo.ts:271","pc":[97,98,99,100,101,102]},{"teal":82,"source":"contracts/ARC84Data.algo.ts:271","pc":[103,104,105]},{"teal":83,"source":"contracts/ARC84Data.algo.ts:271","pc":[106,107,108,109]},{"teal":86,"source":"contracts/ARC84Data.algo.ts:271","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[110]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjEwNi4zCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGdvcmFuZGZvdW5kYXRpb24vVEVBTFNjcmlwdAoKLy8gVGhpcyBjb250cmFjdCBpcyBjb21wbGlhbnQgd2l0aCBhbmQvb3IgaW1wbGVtZW50cyB0aGUgZm9sbG93aW5nIEFSQ3M6IFsgQVJDNCBdCgovLyBUaGUgZm9sbG93aW5nIHRlbiBsaW5lcyBvZiBURUFMIGhhbmRsZSBpbml0aWFsIHByb2dyYW0gZmxvdwovLyBUaGlzIHBhdHRlcm4gaXMgdXNlZCB0byBtYWtlIGl0IGVhc3kgZm9yIGFueW9uZSB0byBwYXJzZSB0aGUgc3RhcnQgb2YgdGhlIHByb2dyYW0gYW5kIGRldGVybWluZSBpZiBhIHNwZWNpZmljIGFjdGlvbiBpcyBhbGxvd2VkCi8vIEhlcmUsIGFjdGlvbiByZWZlcnMgdG8gdGhlIE9uQ29tcGxldGUgaW4gY29tYmluYXRpb24gd2l0aCB3aGV0aGVyIHRoZSBhcHAgaXMgYmVpbmcgY3JlYXRlZCBvciBjYWxsZWQKLy8gRXZlcnkgcG9zc2libGUgYWN0aW9uIGZvciB0aGlzIGNvbnRyYWN0IGlzIHJlcHJlc2VudGVkIGluIHRoZSBzd2l0Y2ggc3RhdGVtZW50Ci8vIElmIHRoZSBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlc3BlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIipOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQpwdXNoaW50IDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoICpjYWxsX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpjcmVhdGVfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQKCipOT1RfSU1QTEVNRU5URUQ6CgkvLyBUaGUgcmVxdWVzdGVkIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhpcyBjb250cmFjdC4gQXJlIHlvdSB1c2luZyB0aGUgY29ycmVjdCBPbkNvbXBsZXRlPyBEaWQgeW91IHNldCB5b3VyIGFwcCBJRD8KCWVycgoKLy8gYXBwcm92ZWQoYWRkcmVzcywodWludDY0LGFkZHJlc3MsYWRkcmVzcyx1aW50NjQpW10pYm9vbAoqYWJpX3JvdXRlX2FwcHJvdmVkOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglwdXNoYnl0ZXMgMHgxNTFmN2M3NQoKCS8vIHRyYW5zZmVyczogKHVpbnQ2NCxhZGRyZXNzLGFkZHJlc3MsdWludDY0KVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIGNhbGxlcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCXB1c2hpbnQgMzIKCT09CgoJLy8gYXJndW1lbnQgMSAoY2FsbGVyKSBmb3IgYXBwcm92ZWQgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIGV4ZWN1dGUgYXBwcm92ZWQoYWRkcmVzcywodWludDY0LGFkZHJlc3MsYWRkcmVzcyx1aW50NjQpW10pYm9vbAoJY2FsbHN1YiBhcHByb3ZlZAoJcHVzaGJ5dGVzIDB4MDAKCXB1c2hpbnQgMAoJdW5jb3ZlciAyCglzZXRiaXQKCWNvbmNhdAoJbG9nCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBhcHByb3ZlZChjYWxsZXI6IEFkZHJlc3MsIHRyYW5zZmVyczogVHJhbnNmZXJbXSk6IGJvb2xlYW4KLy8KLy8gRGV0ZXJtaW5lcyB3aGV0aGVyIGEgdHJhbnNmZXIgaXMgYXBwcm92ZWQgb3Igbm90LiBUaGlzIGltcGxlbWVudGF0aW9uIGp1c3QgcmV0dXJucyB0cnVlICh3aGljaCBpcyB0aGUgc2FtZSBhcyBub3Qgc2V0dGluZyBhCi8vIHRyYW5zZmVySG9va0FwcCksIGJ1dCB0aGVyZSBhcmUgbWFueSBwb3NzaWJpbGl0aWVzIHN1Y2ggYXMgZHluYW1pYyB3aGl0ZWxpc3RzLCBibGFja2xpc3RzLCBlbmZvcmNlZCByb3lhbHRpZXMsIHRva2VuLWdhdGluZywgZXRjLgphcHByb3ZlZDoKCXByb3RvIDIgMQoKCS8vIGNvbnRyYWN0cy9BUkM4NERhdGEuYWxnby50czoyNzYKCS8vIHJldHVybiB0cnVlOwoJaW50YyAwIC8vIDEKCXJldHN1YgoKKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCWludGMgMCAvLyAxCglyZXR1cm4KCipjcmVhdGVfTm9PcDoKCXB1c2hieXRlcyAweGI4NDQ3YjM2IC8vIG1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNyZWF0ZSBOb09wCgllcnIKCipjYWxsX05vT3A6CglwdXNoYnl0ZXMgMHhiNGMxN2E3YiAvLyBtZXRob2QgImFwcHJvdmVkKGFkZHJlc3MsKHVpbnQ2NCxhZGRyZXNzLGFkZHJlc3MsdWludDY0KVtdKWJvb2wiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2FwcHJvdmVkCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgTm9PcAoJZXJy","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiABATEYFIEGCzEZCI0MADoAAAAAAAAAAAAAACwAAAAAAAAAAAAAAIAEFR98dTYaAlcCADYaAUkVgSASRIgADIABAIEATwJUULAiQ4oCASKJIkOABLhEezY2GgCOAf/xAIAEtMF6ezYaAI4B/7oA","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Arc84TransferHook contract
 */
export type Arc84TransferHookArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'approved(address,(uint64,address,address,uint64)[])bool': {
      caller: string
      transfers: [bigint | number, string, string, bigint | number][]
    }
    'createApplication()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'approved(address,(uint64,address,address,uint64)[])bool': [caller: string, transfers: [bigint | number, string, string, bigint | number][]]
    'createApplication()void': []
  }
}

/**
 * The return type for each method
 */
export type Arc84TransferHookReturns = {
  'approved(address,(uint64,address,address,uint64)[])bool': boolean
  'createApplication()void': void
}

/**
 * Defines the types of available calls and state of the Arc84TransferHook smart contract.
 */
export type Arc84TransferHookTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'approved(address,(uint64,address,address,uint64)[])bool' | 'approved', {
      argsObj: Arc84TransferHookArgs['obj']['approved(address,(uint64,address,address,uint64)[])bool']
      argsTuple: Arc84TransferHookArgs['tuple']['approved(address,(uint64,address,address,uint64)[])bool']
      returns: Arc84TransferHookReturns['approved(address,(uint64,address,address,uint64)[])bool']
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: Arc84TransferHookArgs['obj']['createApplication()void']
      argsTuple: Arc84TransferHookArgs['tuple']['createApplication()void']
      returns: Arc84TransferHookReturns['createApplication()void']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type Arc84TransferHookSignatures = keyof Arc84TransferHookTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Arc84TransferHookNonVoidMethodSignatures = keyof Arc84TransferHookTypes['methods'] extends infer T ? T extends keyof Arc84TransferHookTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Arc84TransferHook smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Arc84TransferHookSignatures> = Arc84TransferHookTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc84TransferHook smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc84TransferHookSignatures> = Arc84TransferHookTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type Arc84TransferHookCreateCallParams =
  | Expand<CallParams<Arc84TransferHookArgs['obj']['createApplication()void'] | Arc84TransferHookArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<Arc84TransferHookArgs['obj']['createApplication()void'] | Arc84TransferHookArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Arc84TransferHookDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Arc84TransferHookCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc84TransferHook smart contract
 */
export abstract class Arc84TransferHookParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends Arc84TransferHookCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return Arc84TransferHookParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ARC84TransferHook smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<Arc84TransferHookArgs['obj']['createApplication()void'] | Arc84TransferHookArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the approved(address,(uint64,address,address,uint64)[])bool ABI method
   *
  * Determines whether a transfer is approved or not. This implementation just returns true (which is the same as not setting a
  transferHookApp), but there are many possibilities such as dynamic whitelists, blacklists, enforced royalties, token-gating, etc.

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static approved(params: CallParams<Arc84TransferHookArgs['obj']['approved(address,(uint64,address,address,uint64)[])bool'] | Arc84TransferHookArgs['tuple']['approved(address,(uint64,address,address,uint64)[])bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'approved(address,(uint64,address,address,uint64)[])bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.caller, params.args.transfers],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ARC84TransferHook smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Arc84TransferHookFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Arc84TransferHookFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Arc84TransferHookClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Arc84TransferHookClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ARC84TransferHook smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Arc84TransferHookDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? Arc84TransferHookParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (Arc84TransferHookCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new Arc84TransferHookClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC84TransferHook smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<Arc84TransferHookArgs['obj']['createApplication()void'] | Arc84TransferHookArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(Arc84TransferHookParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC84TransferHook smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<Arc84TransferHookArgs['obj']['createApplication()void'] | Arc84TransferHookArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(Arc84TransferHookParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC84TransferHook smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<Arc84TransferHookArgs['obj']['createApplication()void'] | Arc84TransferHookArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(Arc84TransferHookParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | Arc84TransferHookReturns['createApplication()void']) }, appClient: new Arc84TransferHookClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ARC84TransferHook smart contract
 */
export class Arc84TransferHookClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Arc84TransferHookClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Arc84TransferHook app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Arc84TransferHookClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Arc84TransferHookNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Arc84TransferHookClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Arc84TransferHookClient> {
    return new Arc84TransferHookClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Arc84TransferHookClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Arc84TransferHookClient> {
    return new Arc84TransferHookClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ARC84TransferHook smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC84TransferHook smart contract using the `approved(address,(uint64,address,address,uint64)[])bool` ABI method.
     *
    * Determines whether a transfer is approved or not. This implementation just returns true (which is the same as not setting a
    transferHookApp), but there are many possibilities such as dynamic whitelists, blacklists, enforced royalties, token-gating, etc.

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    approved: (params: CallParams<Arc84TransferHookArgs['obj']['approved(address,(uint64,address,address,uint64)[])bool'] | Arc84TransferHookArgs['tuple']['approved(address,(uint64,address,address,uint64)[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc84TransferHookParamsFactory.approved(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ARC84TransferHook smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC84TransferHook smart contract using the `approved(address,(uint64,address,address,uint64)[])bool` ABI method.
     *
    * Determines whether a transfer is approved or not. This implementation just returns true (which is the same as not setting a
    transferHookApp), but there are many possibilities such as dynamic whitelists, blacklists, enforced royalties, token-gating, etc.

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    approved: (params: CallParams<Arc84TransferHookArgs['obj']['approved(address,(uint64,address,address,uint64)[])bool'] | Arc84TransferHookArgs['tuple']['approved(address,(uint64,address,address,uint64)[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc84TransferHookParamsFactory.approved(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ARC84TransferHook smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC84TransferHook smart contract using the `approved(address,(uint64,address,address,uint64)[])bool` ABI method.
     *
    * Determines whether a transfer is approved or not. This implementation just returns true (which is the same as not setting a
    transferHookApp), but there are many possibilities such as dynamic whitelists, blacklists, enforced royalties, token-gating, etc.

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    approved: async (params: CallParams<Arc84TransferHookArgs['obj']['approved(address,(uint64,address,address,uint64)[])bool'] | Arc84TransferHookArgs['tuple']['approved(address,(uint64,address,address,uint64)[])bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc84TransferHookParamsFactory.approved(params))
      return {...result, return: result.return as unknown as (undefined | Arc84TransferHookReturns['approved(address,(uint64,address,address,uint64)[])bool'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Arc84TransferHookClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ARC84TransferHook app
   */
  state = {
  }

  public newGroup(): Arc84TransferHookComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a approved(address,(uint64,address,address,uint64)[])bool method call against the ARC84TransferHook contract
       */
      approved(params: CallParams<Arc84TransferHookArgs['obj']['approved(address,(uint64,address,address,uint64)[])bool'] | Arc84TransferHookArgs['tuple']['approved(address,(uint64,address,address,uint64)[])bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.approved(params)))
        resultMappers.push((v) => client.decodeReturnValue('approved(address,(uint64,address,address,uint64)[])bool', v))
        return this
      },
      /**
       * Add a clear state call to the ARC84TransferHook contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Arc84TransferHookComposer
  }
}
export type Arc84TransferHookComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the approved(address,(uint64,address,address,uint64)[])bool ABI method.
   *
  * Determines whether a transfer is approved or not. This implementation just returns true (which is the same as not setting a
  transferHookApp), but there are many possibilities such as dynamic whitelists, blacklists, enforced royalties, token-gating, etc.

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approved(params?: CallParams<Arc84TransferHookArgs['obj']['approved(address,(uint64,address,address,uint64)[])bool'] | Arc84TransferHookArgs['tuple']['approved(address,(uint64,address,address,uint64)[])bool']>): Arc84TransferHookComposer<[...TReturns, Arc84TransferHookReturns['approved(address,(uint64,address,address,uint64)[])bool'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ARC84TransferHook smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Arc84TransferHookComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc84TransferHookComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc84TransferHookComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Arc84TransferHookComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Arc84TransferHookComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Arc84TransferHookComposerResults<TReturns>>
}
export type Arc84TransferHookComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>


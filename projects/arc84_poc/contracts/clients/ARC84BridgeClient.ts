/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ARC84Bridge","desc":"","methods":[{"name":"createApplication","args":[{"name":"dataApp","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"optInToAsa","args":[{"name":"asa","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"asaToArc84","args":[{"name":"axfer","type":"axfer"},{"name":"receiver","type":"address"}],"returns":{"type":"(uint64,uint64)","struct":"Arc84Id"},"actions":{"create":[],"call":["NoOp"]}},{"name":"arc84ToAsa","args":[{"name":"xferCall","type":"appl"},{"name":"xferIndex","type":"uint64"},{"name":"receiver","type":"address"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]}},{"name":"withdrawAsa","args":[{"name":"asa","type":"uint64"},{"name":"withdrawalFor","type":"address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"Arc84Id":[{"name":"id","type":"uint64"},{"name":"dataApp","type":"uint64"}],"AsaAndAddr":[{"name":"asa","type":"uint64"},{"name":"address","type":"address"}]},"state":{"schema":{"global":{"bytes":0,"ints":2},"local":{"bytes":0,"ints":0}},"keys":{"global":{"dataApp":{"key":"ZGF0YUFwcA==","keyType":"AVMBytes","valueType":"uint64"},"collection":{"key":"Y29sbGVjdGlvbg==","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"asaToArc84Map":{"keyType":"uint64","valueType":"Arc84Id","prefix":"YXNh"},"arc84ToAsaMap":{"keyType":"Arc84Id","valueType":"uint64","prefix":"YXBw"},"withdrawAmounts":{"keyType":"AsaAndAddr","valueType":"uint64"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts/ARC84Bridge.algo.ts:15","pc":[0]},{"teal":2,"source":"contracts/ARC84Bridge.algo.ts:15","pc":[1,2,3,4,5,6,7,8,9,10]},{"teal":3,"source":"contracts/ARC84Bridge.algo.ts:15","pc":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59]},{"teal":15,"source":"contracts/ARC84Bridge.algo.ts:15","pc":[60,61]},{"teal":16,"source":"contracts/ARC84Bridge.algo.ts:15","pc":[62]},{"teal":17,"source":"contracts/ARC84Bridge.algo.ts:15","pc":[63]},{"teal":18,"source":"contracts/ARC84Bridge.algo.ts:15","pc":[64]},{"teal":19,"source":"contracts/ARC84Bridge.algo.ts:15","pc":[65,66]},{"teal":20,"source":"contracts/ARC84Bridge.algo.ts:15","pc":[67]},{"teal":21,"source":"contracts/ARC84Bridge.algo.ts:15","pc":[68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93]},{"teal":25,"source":"contracts/ARC84Bridge.algo.ts:15","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[94]},{"teal":30,"source":"contracts/ARC84Bridge.algo.ts:29","pc":[95,96,97]},{"teal":31,"source":"contracts/ARC84Bridge.algo.ts:29","pc":[98]},{"teal":34,"source":"contracts/ARC84Bridge.algo.ts:29","pc":[99,100,101]},{"teal":35,"source":"contracts/ARC84Bridge.algo.ts:29","pc":[102]},{"teal":36,"source":"contracts/ARC84Bridge.algo.ts:29","pc":[103]},{"teal":40,"source":"contracts/ARC84Bridge.algo.ts:29","pc":[104,105,106]},{"teal":44,"source":"contracts/ARC84Bridge.algo.ts:30","pc":[107]},{"teal":45,"source":"contracts/ARC84Bridge.algo.ts:30","pc":[108,109]},{"teal":46,"source":"contracts/ARC84Bridge.algo.ts:30","pc":[110]},{"teal":53,"source":"contracts/ARC84Bridge.algo.ts:31","pc":[111,112]},{"teal":54,"source":"contracts/ARC84Bridge.algo.ts:31","pc":[113]},{"teal":55,"source":"contracts/ARC84Bridge.algo.ts:31","pc":[114]},{"teal":56,"source":"contracts/ARC84Bridge.algo.ts:31","pc":[115,116]},{"teal":57,"source":"contracts/ARC84Bridge.algo.ts:31","pc":[117,118,119,120,121,122]},{"teal":58,"source":"contracts/ARC84Bridge.algo.ts:31","pc":[123,124]},{"teal":62,"source":"contracts/ARC84Bridge.algo.ts:32","pc":[125,126]},{"teal":63,"source":"contracts/ARC84Bridge.algo.ts:32","pc":[127,128]},{"teal":67,"source":"contracts/ARC84Bridge.algo.ts:33","pc":[129,130]},{"teal":68,"source":"contracts/ARC84Bridge.algo.ts:33","pc":[131,132]},{"teal":69,"source":"contracts/ARC84Bridge.algo.ts:33","pc":[133,134,135,136,137,138,139,140,141,142]},{"teal":70,"source":"contracts/ARC84Bridge.algo.ts:33","pc":[143,144]},{"teal":73,"source":"contracts/ARC84Bridge.algo.ts:31","pc":[145]},{"teal":74,"source":"contracts/ARC84Bridge.algo.ts:31","pc":[146,147]},{"teal":77,"source":"contracts/ARC84Bridge.algo.ts:31","pc":[148]},{"teal":78,"source":"contracts/ARC84Bridge.algo.ts:31","pc":[149,150]},{"teal":79,"source":"contracts/ARC84Bridge.algo.ts:31","pc":[151]},{"teal":80,"source":"contracts/ARC84Bridge.algo.ts:31","pc":[152]},{"teal":81,"source":"contracts/ARC84Bridge.algo.ts:31","pc":[153,154]},{"teal":82,"source":"contracts/ARC84Bridge.algo.ts:31","pc":[155,156,157]},{"teal":83,"source":"contracts/ARC84Bridge.algo.ts:31","pc":[158]},{"teal":84,"source":"contracts/ARC84Bridge.algo.ts:31","pc":[159]},{"teal":85,"source":"contracts/ARC84Bridge.algo.ts:29","pc":[160]},{"teal":90,"source":"contracts/ARC84Bridge.algo.ts:37","pc":[161,162,163]},{"teal":91,"source":"contracts/ARC84Bridge.algo.ts:37","pc":[164]},{"teal":94,"source":"contracts/ARC84Bridge.algo.ts:37","pc":[165,166,167]},{"teal":95,"source":"contracts/ARC84Bridge.algo.ts:37","pc":[168]},{"teal":96,"source":"contracts/ARC84Bridge.algo.ts:37","pc":[169]},{"teal":100,"source":"contracts/ARC84Bridge.algo.ts:37","pc":[170,171,172]},{"teal":108,"source":"contracts/ARC84Bridge.algo.ts:38","pc":[173]},{"teal":109,"source":"contracts/ARC84Bridge.algo.ts:38","pc":[174,175]},{"teal":110,"source":"contracts/ARC84Bridge.algo.ts:38","pc":[176,177]},{"teal":114,"source":"contracts/ARC84Bridge.algo.ts:39","pc":[178,179]},{"teal":115,"source":"contracts/ARC84Bridge.algo.ts:39","pc":[180,181]},{"teal":119,"source":"contracts/ARC84Bridge.algo.ts:40","pc":[182]},{"teal":120,"source":"contracts/ARC84Bridge.algo.ts:40","pc":[183,184]},{"teal":124,"source":"contracts/ARC84Bridge.algo.ts:41","pc":[185,186]},{"teal":125,"source":"contracts/ARC84Bridge.algo.ts:41","pc":[187,188]},{"teal":128,"source":"contracts/ARC84Bridge.algo.ts:38","pc":[189]},{"teal":129,"source":"contracts/ARC84Bridge.algo.ts:38","pc":[190,191]},{"teal":132,"source":"contracts/ARC84Bridge.algo.ts:38","pc":[192]},{"teal":133,"source":"contracts/ARC84Bridge.algo.ts:37","pc":[193]},{"teal":138,"source":"contracts/ARC84Bridge.algo.ts:45","pc":[194,195]},{"teal":141,"source":"contracts/ARC84Bridge.algo.ts:45","pc":[196,197,198]},{"teal":142,"source":"contracts/ARC84Bridge.algo.ts:45","pc":[199]},{"teal":143,"source":"contracts/ARC84Bridge.algo.ts:45","pc":[200]},{"teal":144,"source":"contracts/ARC84Bridge.algo.ts:45","pc":[201,202]},{"teal":145,"source":"contracts/ARC84Bridge.algo.ts:45","pc":[203]},{"teal":148,"source":"contracts/ARC84Bridge.algo.ts:45","errorMessage":"argument 0 (receiver) for asaToArc84 must be a address","pc":[204]},{"teal":151,"source":"contracts/ARC84Bridge.algo.ts:45","pc":[205,206]},{"teal":152,"source":"contracts/ARC84Bridge.algo.ts:45","pc":[207]},{"teal":153,"source":"contracts/ARC84Bridge.algo.ts:45","pc":[208]},{"teal":154,"source":"contracts/ARC84Bridge.algo.ts:45","pc":[209]},{"teal":155,"source":"contracts/ARC84Bridge.algo.ts:45","pc":[210,211]},{"teal":156,"source":"contracts/ARC84Bridge.algo.ts:45","pc":[212,213]},{"teal":157,"source":"contracts/ARC84Bridge.algo.ts:45","pc":[214]},{"teal":160,"source":"contracts/ARC84Bridge.algo.ts:45","errorMessage":"argument 1 (axfer) for asaToArc84 must be a axfer transaction","pc":[215]},{"teal":163,"source":"contracts/ARC84Bridge.algo.ts:45","pc":[216,217,218]},{"teal":164,"source":"contracts/ARC84Bridge.algo.ts:45","pc":[219]},{"teal":165,"source":"contracts/ARC84Bridge.algo.ts:45","pc":[220]},{"teal":166,"source":"contracts/ARC84Bridge.algo.ts:45","pc":[221]},{"teal":167,"source":"contracts/ARC84Bridge.algo.ts:45","pc":[222]},{"teal":171,"source":"contracts/ARC84Bridge.algo.ts:45","pc":[223,224,225]},{"teal":174,"source":"contracts/ARC84Bridge.algo.ts:45","pc":[226]},{"teal":175,"source":"contracts/ARC84Bridge.algo.ts:45","pc":[227,228]},{"teal":182,"source":"contracts/ARC84Bridge.algo.ts:46","pc":[229,230]},{"teal":183,"source":"contracts/ARC84Bridge.algo.ts:47","pc":[231,232]},{"teal":184,"source":"contracts/ARC84Bridge.algo.ts:47","pc":[233,234]},{"teal":185,"source":"contracts/ARC84Bridge.algo.ts:47","pc":[235]},{"teal":188,"source":"contracts/ARC84Bridge.algo.ts:47","errorMessage":"transaction verification failed: {\"txn\":\"axfer\",\"field\":\"assetReceiver\",\"expected\":\"this.app.address\"}","pc":[236]},{"teal":192,"source":"contracts/ARC84Bridge.algo.ts:50","pc":[237,238]},{"teal":193,"source":"contracts/ARC84Bridge.algo.ts:50","pc":[239,240]},{"teal":194,"source":"contracts/ARC84Bridge.algo.ts:50","pc":[241,242]},{"teal":199,"source":"contracts/ARC84Bridge.algo.ts:53","pc":[243]},{"teal":200,"source":"contracts/ARC84Bridge.algo.ts:53","pc":[244,245]},{"teal":201,"source":"contracts/ARC84Bridge.algo.ts:53","pc":[246,247]},{"teal":202,"source":"contracts/ARC84Bridge.algo.ts:53","pc":[248]},{"teal":203,"source":"contracts/ARC84Bridge.algo.ts:53","pc":[249]},{"teal":204,"source":"contracts/ARC84Bridge.algo.ts:53","pc":[250]},{"teal":205,"source":"contracts/ARC84Bridge.algo.ts:53","pc":[251]},{"teal":206,"source":"contracts/ARC84Bridge.algo.ts:53","pc":[252]},{"teal":207,"source":"contracts/ARC84Bridge.algo.ts:53","pc":[253]},{"teal":208,"source":"contracts/ARC84Bridge.algo.ts:53","pc":[254,255,256]},{"teal":226,"source":"contracts/ARC84Bridge.algo.ts:54","pc":[257]},{"teal":227,"source":"contracts/ARC84Bridge.algo.ts:54","pc":[258]},{"teal":228,"source":"contracts/ARC84Bridge.algo.ts:54","pc":[259,260]},{"teal":229,"source":"contracts/ARC84Bridge.algo.ts:54","pc":[261,262,263,264,265,266]},{"teal":230,"source":"contracts/ARC84Bridge.algo.ts:54","pc":[267,268]},{"teal":234,"source":"contracts/ARC84Bridge.algo.ts:55","pc":[269]},{"teal":235,"source":"contracts/ARC84Bridge.algo.ts:55","pc":[270]},{"teal":236,"source":"contracts/ARC84Bridge.algo.ts:55","pc":[271,272]},{"teal":250,"source":"contracts/ARC84Bridge.algo.ts:57","pc":[273,274]},{"teal":251,"source":"contracts/ARC84Bridge.algo.ts:57","pc":[275]},{"teal":252,"source":"contracts/ARC84Bridge.algo.ts:57","pc":[276]},{"teal":253,"source":"contracts/ARC84Bridge.algo.ts:57","pc":[277,278]},{"teal":254,"source":"contracts/ARC84Bridge.algo.ts:62","pc":[279,280]},{"teal":255,"source":"contracts/ARC84Bridge.algo.ts:62","pc":[281,282]},{"teal":256,"source":"contracts/ARC84Bridge.algo.ts:62","pc":[283]},{"teal":257,"source":"contracts/ARC84Bridge.algo.ts:62","pc":[284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317]},{"teal":258,"source":"contracts/ARC84Bridge.algo.ts:62","pc":[318]},{"teal":259,"source":"contracts/ARC84Bridge.algo.ts:62","pc":[319]},{"teal":260,"source":"contracts/ARC84Bridge.algo.ts:62","pc":[320,321,322]},{"teal":261,"source":"contracts/ARC84Bridge.algo.ts:62","pc":[323]},{"teal":262,"source":"contracts/ARC84Bridge.algo.ts:62","pc":[324]},{"teal":263,"source":"contracts/ARC84Bridge.algo.ts:62","pc":[325]},{"teal":264,"source":"contracts/ARC84Bridge.algo.ts:62","pc":[326,327,328]},{"teal":265,"source":"contracts/ARC84Bridge.algo.ts:63","pc":[329,330]},{"teal":266,"source":"contracts/ARC84Bridge.algo.ts:63","pc":[331,332]},{"teal":267,"source":"contracts/ARC84Bridge.algo.ts:63","pc":[333]},{"teal":268,"source":"contracts/ARC84Bridge.algo.ts:63","pc":[334,335]},{"teal":269,"source":"contracts/ARC84Bridge.algo.ts:63","pc":[336]},{"teal":270,"source":"contracts/ARC84Bridge.algo.ts:63","pc":[337]},{"teal":271,"source":"contracts/ARC84Bridge.algo.ts:63","pc":[338,339,340]},{"teal":272,"source":"contracts/ARC84Bridge.algo.ts:63","pc":[341]},{"teal":273,"source":"contracts/ARC84Bridge.algo.ts:63","pc":[342]},{"teal":274,"source":"contracts/ARC84Bridge.algo.ts:63","pc":[343]},{"teal":275,"source":"contracts/ARC84Bridge.algo.ts:63","pc":[344,345,346]},{"teal":276,"source":"contracts/ARC84Bridge.algo.ts:63","pc":[347]},{"teal":277,"source":"contracts/ARC84Bridge.algo.ts:59","pc":[348,349]},{"teal":278,"source":"contracts/ARC84Bridge.algo.ts:59","pc":[350,351]},{"teal":279,"source":"contracts/ARC84Bridge.algo.ts:59","pc":[352]},{"teal":280,"source":"contracts/ARC84Bridge.algo.ts:59","pc":[353]},{"teal":281,"source":"contracts/ARC84Bridge.algo.ts:59","pc":[354]},{"teal":282,"source":"contracts/ARC84Bridge.algo.ts:60","pc":[355,356]},{"teal":283,"source":"contracts/ARC84Bridge.algo.ts:60","pc":[357,358]},{"teal":284,"source":"contracts/ARC84Bridge.algo.ts:60","pc":[359]},{"teal":285,"source":"contracts/ARC84Bridge.algo.ts:60","pc":[360]},{"teal":286,"source":"contracts/ARC84Bridge.algo.ts:60","pc":[361]},{"teal":287,"source":"contracts/ARC84Bridge.algo.ts:61","pc":[362,363]},{"teal":288,"source":"contracts/ARC84Bridge.algo.ts:61","pc":[364]},{"teal":289,"source":"contracts/ARC84Bridge.algo.ts:64","pc":[365,366]},{"teal":290,"source":"contracts/ARC84Bridge.algo.ts:64","pc":[367]},{"teal":291,"source":"contracts/ARC84Bridge.algo.ts:58","pc":[368,369]},{"teal":294,"source":"contracts/ARC84Bridge.algo.ts:54","pc":[370]},{"teal":295,"source":"contracts/ARC84Bridge.algo.ts:54","pc":[371,372]},{"teal":298,"source":"contracts/ARC84Bridge.algo.ts:54","pc":[373]},{"teal":299,"source":"contracts/ARC84Bridge.algo.ts:54","pc":[374,375]},{"teal":300,"source":"contracts/ARC84Bridge.algo.ts:54","pc":[376]},{"teal":301,"source":"contracts/ARC84Bridge.algo.ts:54","pc":[377]},{"teal":302,"source":"contracts/ARC84Bridge.algo.ts:54","pc":[378,379]},{"teal":303,"source":"contracts/ARC84Bridge.algo.ts:54","pc":[380,381,382]},{"teal":304,"source":"contracts/ARC84Bridge.algo.ts:54","pc":[383]},{"teal":305,"source":"contracts/ARC84Bridge.algo.ts:54","pc":[384,385]},{"teal":309,"source":"contracts/ARC84Bridge.algo.ts:69","pc":[386,387]},{"teal":310,"source":"contracts/ARC84Bridge.algo.ts:69","pc":[388]},{"teal":311,"source":"contracts/ARC84Bridge.algo.ts:69","pc":[389]},{"teal":312,"source":"contracts/ARC84Bridge.algo.ts:69","pc":[390]},{"teal":313,"source":"contracts/ARC84Bridge.algo.ts:69","pc":[391]},{"teal":314,"source":"contracts/ARC84Bridge.algo.ts:69","pc":[392]},{"teal":315,"source":"contracts/ARC84Bridge.algo.ts:69","pc":[393,394]},{"teal":319,"source":"contracts/ARC84Bridge.algo.ts:70","pc":[395]},{"teal":320,"source":"contracts/ARC84Bridge.algo.ts:70","pc":[396,397]},{"teal":321,"source":"contracts/ARC84Bridge.algo.ts:70","pc":[398]},{"teal":322,"source":"contracts/ARC84Bridge.algo.ts:70","pc":[399]},{"teal":323,"source":"contracts/ARC84Bridge.algo.ts:70","pc":[400,401]},{"teal":324,"source":"contracts/ARC84Bridge.algo.ts:70","pc":[402]},{"teal":328,"source":"contracts/ARC84Bridge.algo.ts:71","pc":[403]},{"teal":329,"source":"contracts/ARC84Bridge.algo.ts:71","pc":[404,405]},{"teal":330,"source":"contracts/ARC84Bridge.algo.ts:71","pc":[406]},{"teal":331,"source":"contracts/ARC84Bridge.algo.ts:71","pc":[407,408]},{"teal":332,"source":"contracts/ARC84Bridge.algo.ts:71","pc":[409]},{"teal":333,"source":"contracts/ARC84Bridge.algo.ts:71","pc":[410]},{"teal":338,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[411]},{"teal":339,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[412,413]},{"teal":340,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[414]},{"teal":341,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[415]},{"teal":342,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[416,417]},{"teal":348,"source":"contracts/ARC84Bridge.algo.ts:76","pc":[418]},{"teal":349,"source":"contracts/ARC84Bridge.algo.ts:76","pc":[419]},{"teal":350,"source":"contracts/ARC84Bridge.algo.ts:76","pc":[420,421]},{"teal":351,"source":"contracts/ARC84Bridge.algo.ts:76","pc":[422,423]},{"teal":352,"source":"contracts/ARC84Bridge.algo.ts:76","pc":[424,425]},{"teal":356,"source":"contracts/ARC84Bridge.algo.ts:77","pc":[426]},{"teal":357,"source":"contracts/ARC84Bridge.algo.ts:77","pc":[427]},{"teal":358,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[428]},{"teal":359,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[429,430]},{"teal":360,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[431]},{"teal":361,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[432]},{"teal":362,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[433,434]},{"teal":363,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[435]},{"teal":364,"source":"contracts/ARC84Bridge.algo.ts:77","pc":[436]},{"teal":365,"source":"contracts/ARC84Bridge.algo.ts:77","pc":[437,438]},{"teal":368,"source":"contracts/ARC84Bridge.algo.ts:76","pc":[439]},{"teal":369,"source":"contracts/ARC84Bridge.algo.ts:76","pc":[440,441]},{"teal":372,"source":"contracts/ARC84Bridge.algo.ts:76","pc":[442]},{"teal":373,"source":"contracts/ARC84Bridge.algo.ts:76","pc":[443,444]},{"teal":374,"source":"contracts/ARC84Bridge.algo.ts:76","pc":[445]},{"teal":375,"source":"contracts/ARC84Bridge.algo.ts:76","pc":[446]},{"teal":376,"source":"contracts/ARC84Bridge.algo.ts:76","pc":[447,448]},{"teal":377,"source":"contracts/ARC84Bridge.algo.ts:76","pc":[449,450,451]},{"teal":378,"source":"contracts/ARC84Bridge.algo.ts:76","pc":[452]},{"teal":379,"source":"contracts/ARC84Bridge.algo.ts:76","pc":[453,454]},{"teal":389,"source":"contracts/ARC84Bridge.algo.ts:81","pc":[455]},{"teal":390,"source":"contracts/ARC84Bridge.algo.ts:81","pc":[456]},{"teal":391,"source":"contracts/ARC84Bridge.algo.ts:81","pc":[457,458]},{"teal":392,"source":"contracts/ARC84Bridge.algo.ts:81","pc":[459,460,461,462,463,464]},{"teal":393,"source":"contracts/ARC84Bridge.algo.ts:81","pc":[465,466]},{"teal":397,"source":"contracts/ARC84Bridge.algo.ts:82","pc":[467,468]},{"teal":398,"source":"contracts/ARC84Bridge.algo.ts:82","pc":[469,470]},{"teal":405,"source":"contracts/ARC84Bridge.algo.ts:84","pc":[471]},{"teal":406,"source":"contracts/ARC84Bridge.algo.ts:84","pc":[472]},{"teal":407,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[473]},{"teal":408,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[474,475]},{"teal":409,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[476]},{"teal":410,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[477]},{"teal":411,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[478,479]},{"teal":412,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[480]},{"teal":413,"source":"contracts/ARC84Bridge.algo.ts:84","pc":[481]},{"teal":414,"source":"contracts/ARC84Bridge.algo.ts:84","pc":[482]},{"teal":415,"source":"contracts/ARC84Bridge.algo.ts:84","pc":[483,484]},{"teal":416,"source":"contracts/ARC84Bridge.algo.ts:85","pc":[485]},{"teal":417,"source":"contracts/ARC84Bridge.algo.ts:85","pc":[486]},{"teal":418,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[487]},{"teal":419,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[488,489]},{"teal":420,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[490]},{"teal":421,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[491]},{"teal":422,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[492,493]},{"teal":423,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[494]},{"teal":424,"source":"contracts/ARC84Bridge.algo.ts:85","pc":[495]},{"teal":425,"source":"contracts/ARC84Bridge.algo.ts:85","pc":[496]},{"teal":426,"source":"contracts/ARC84Bridge.algo.ts:85","pc":[497,498]},{"teal":427,"source":"contracts/ARC84Bridge.algo.ts:85","pc":[499]},{"teal":428,"source":"contracts/ARC84Bridge.algo.ts:85","pc":[500,501]},{"teal":429,"source":"contracts/ARC84Bridge.algo.ts:85","pc":[502]},{"teal":430,"source":"contracts/ARC84Bridge.algo.ts:85","pc":[503,504]},{"teal":431,"source":"contracts/ARC84Bridge.algo.ts:85","pc":[505,506]},{"teal":432,"source":"contracts/ARC84Bridge.algo.ts:85","pc":[507]},{"teal":433,"source":"contracts/ARC84Bridge.algo.ts:85","pc":[508]},{"teal":434,"source":"contracts/ARC84Bridge.algo.ts:85","pc":[509]},{"teal":435,"source":"contracts/ARC84Bridge.algo.ts:85","pc":[510]},{"teal":436,"source":"contracts/ARC84Bridge.algo.ts:85","pc":[511,512]},{"teal":437,"source":"contracts/ARC84Bridge.algo.ts:85","pc":[513]},{"teal":438,"source":"contracts/ARC84Bridge.algo.ts:85","pc":[514]},{"teal":439,"source":"contracts/ARC84Bridge.algo.ts:85","pc":[515,516,517]},{"teal":440,"source":"contracts/ARC84Bridge.algo.ts:85","pc":[518]},{"teal":441,"source":"contracts/ARC84Bridge.algo.ts:85","pc":[519]},{"teal":442,"source":"contracts/ARC84Bridge.algo.ts:85","pc":[520,521]},{"teal":445,"source":"contracts/ARC84Bridge.algo.ts:81","pc":[522]},{"teal":446,"source":"contracts/ARC84Bridge.algo.ts:81","pc":[523,524]},{"teal":449,"source":"contracts/ARC84Bridge.algo.ts:81","pc":[525]},{"teal":453,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[526,527]},{"teal":454,"source":"contracts/ARC84Bridge.algo.ts:74","pc":[528]},{"teal":457,"source":"contracts/ARC84Bridge.algo.ts:74","errorMessage":"box value does not exist: this.asaToArc84Map(asa).value","pc":[529]},{"teal":460,"source":"contracts/ARC84Bridge.algo.ts:45","pc":[530,531]},{"teal":463,"source":"contracts/ARC84Bridge.algo.ts:45","pc":[532,533]},{"teal":464,"source":"contracts/ARC84Bridge.algo.ts:45","pc":[534]},{"teal":469,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[535,536]},{"teal":472,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[537,538,539]},{"teal":473,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[540]},{"teal":474,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[541]},{"teal":475,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[542,543]},{"teal":476,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[544]},{"teal":479,"source":"contracts/ARC84Bridge.algo.ts:92","errorMessage":"argument 0 (receiver) for arc84ToAsa must be a address","pc":[545]},{"teal":482,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[546,547,548]},{"teal":483,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[549]},{"teal":486,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[550,551]},{"teal":487,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[552]},{"teal":488,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[553]},{"teal":489,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[554]},{"teal":490,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[555,556]},{"teal":491,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[557]},{"teal":492,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[558]},{"teal":495,"source":"contracts/ARC84Bridge.algo.ts:92","errorMessage":"argument 2 (xferCall) for arc84ToAsa must be a appl transaction","pc":[559]},{"teal":498,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[560,561,562]},{"teal":499,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[563]},{"teal":500,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[564]},{"teal":501,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[565]},{"teal":502,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[566]},{"teal":503,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[567]},{"teal":507,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[568,569,570]},{"teal":510,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[571]},{"teal":511,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[572,573]},{"teal":515,"source":"contracts/ARC84Bridge.algo.ts:93","pc":[574,575]},{"teal":516,"source":"contracts/ARC84Bridge.algo.ts:93","pc":[576,577,578]},{"teal":517,"source":"contracts/ARC84Bridge.algo.ts:93","pc":[579,580,581]},{"teal":518,"source":"contracts/ARC84Bridge.algo.ts:93","pc":[582,583]},{"teal":519,"source":"contracts/ARC84Bridge.algo.ts:94","pc":[584,585]},{"teal":520,"source":"contracts/ARC84Bridge.algo.ts:94","pc":[586,587]},{"teal":524,"source":"contracts/ARC84Bridge.algo.ts:95","pc":[588,589]},{"teal":525,"source":"contracts/ARC84Bridge.algo.ts:95","pc":[590,591]},{"teal":526,"source":"contracts/ARC84Bridge.algo.ts:95","pc":[592]},{"teal":527,"source":"contracts/ARC84Bridge.algo.ts:95","pc":[593,594]},{"teal":528,"source":"contracts/ARC84Bridge.algo.ts:95","pc":[595,596]},{"teal":529,"source":"contracts/ARC84Bridge.algo.ts:95","pc":[597]},{"teal":530,"source":"contracts/ARC84Bridge.algo.ts:95","pc":[598]},{"teal":531,"source":"contracts/ARC84Bridge.algo.ts:95","pc":[599,600]},{"teal":532,"source":"contracts/ARC84Bridge.algo.ts:95","pc":[601]},{"teal":533,"source":"contracts/ARC84Bridge.algo.ts:95","pc":[602,603]},{"teal":534,"source":"contracts/ARC84Bridge.algo.ts:95","pc":[604]},{"teal":535,"source":"contracts/ARC84Bridge.algo.ts:95","pc":[605,606]},{"teal":536,"source":"contracts/ARC84Bridge.algo.ts:95","pc":[607]},{"teal":537,"source":"contracts/ARC84Bridge.algo.ts:95","pc":[608,609]},{"teal":538,"source":"contracts/ARC84Bridge.algo.ts:95","pc":[610]},{"teal":539,"source":"contracts/ARC84Bridge.algo.ts:95","pc":[611]},{"teal":543,"source":"contracts/ARC84Bridge.algo.ts:97","pc":[612,613]},{"teal":544,"source":"contracts/ARC84Bridge.algo.ts:97","pc":[614,615,616]},{"teal":545,"source":"contracts/ARC84Bridge.algo.ts:97","pc":[617]},{"teal":546,"source":"contracts/ARC84Bridge.algo.ts:97","pc":[618,619]},{"teal":552,"source":"contracts/ARC84Bridge.algo.ts:101","pc":[620,621]},{"teal":553,"source":"contracts/ARC84Bridge.algo.ts:101","pc":[622,623]},{"teal":554,"source":"contracts/ARC84Bridge.algo.ts:101","pc":[624]},{"teal":555,"source":"contracts/ARC84Bridge.algo.ts:101","pc":[625]},{"teal":556,"source":"contracts/ARC84Bridge.algo.ts:101","pc":[626,627]},{"teal":557,"source":"contracts/ARC84Bridge.algo.ts:101","pc":[628,629]},{"teal":558,"source":"contracts/ARC84Bridge.algo.ts:101","pc":[630,631]},{"teal":562,"source":"contracts/ARC84Bridge.algo.ts:101","pc":[632,633]},{"teal":563,"source":"contracts/ARC84Bridge.algo.ts:101","pc":[634,635]},{"teal":566,"source":"contracts/ARC84Bridge.algo.ts:101","pc":[636]},{"teal":567,"source":"contracts/ARC84Bridge.algo.ts:101","pc":[637,638]},{"teal":570,"source":"contracts/ARC84Bridge.algo.ts:101","pc":[639]},{"teal":571,"source":"contracts/ARC84Bridge.algo.ts:101","pc":[640,641]},{"teal":572,"source":"contracts/ARC84Bridge.algo.ts:101","pc":[642]},{"teal":573,"source":"contracts/ARC84Bridge.algo.ts:101","pc":[643]},{"teal":574,"source":"contracts/ARC84Bridge.algo.ts:101","pc":[644,645]},{"teal":575,"source":"contracts/ARC84Bridge.algo.ts:101","pc":[646,647,648]},{"teal":576,"source":"contracts/ARC84Bridge.algo.ts:101","pc":[649]},{"teal":577,"source":"contracts/ARC84Bridge.algo.ts:101","pc":[650]},{"teal":578,"source":"contracts/ARC84Bridge.algo.ts:100","pc":[651]},{"teal":582,"source":"contracts/ARC84Bridge.algo.ts:104","pc":[652,653]},{"teal":583,"source":"contracts/ARC84Bridge.algo.ts:104","pc":[654,655]},{"teal":584,"source":"contracts/ARC84Bridge.algo.ts:104","pc":[656]},{"teal":585,"source":"contracts/ARC84Bridge.algo.ts:104","pc":[657,658]},{"teal":586,"source":"contracts/ARC84Bridge.algo.ts:104","pc":[659,660]},{"teal":587,"source":"contracts/ARC84Bridge.algo.ts:104","pc":[661]},{"teal":588,"source":"contracts/ARC84Bridge.algo.ts:104","pc":[662]},{"teal":589,"source":"contracts/ARC84Bridge.algo.ts:104","pc":[663]},{"teal":590,"source":"contracts/ARC84Bridge.algo.ts:104","pc":[664]},{"teal":591,"source":"contracts/ARC84Bridge.algo.ts:104","pc":[665,666]},{"teal":592,"source":"contracts/ARC84Bridge.algo.ts:104","pc":[667]},{"teal":593,"source":"contracts/ARC84Bridge.algo.ts:104","pc":[668]},{"teal":594,"source":"contracts/ARC84Bridge.algo.ts:104","pc":[669]},{"teal":595,"source":"contracts/ARC84Bridge.algo.ts:104","pc":[670]},{"teal":596,"source":"contracts/ARC84Bridge.algo.ts:104","pc":[671]},{"teal":597,"source":"contracts/ARC84Bridge.algo.ts:104","pc":[672,673]},{"teal":598,"source":"contracts/ARC84Bridge.algo.ts:104","pc":[674]},{"teal":599,"source":"contracts/ARC84Bridge.algo.ts:104","pc":[675]},{"teal":600,"source":"contracts/ARC84Bridge.algo.ts:104","pc":[676,677]},{"teal":605,"source":"contracts/ARC84Bridge.algo.ts:106","pc":[678]},{"teal":606,"source":"contracts/ARC84Bridge.algo.ts:106","pc":[679,680]},{"teal":607,"source":"contracts/ARC84Bridge.algo.ts:106","pc":[681]},{"teal":608,"source":"contracts/ARC84Bridge.algo.ts:106","pc":[682]},{"teal":609,"source":"contracts/ARC84Bridge.algo.ts:106","pc":[683]},{"teal":610,"source":"contracts/ARC84Bridge.algo.ts:106","pc":[684]},{"teal":611,"source":"contracts/ARC84Bridge.algo.ts:106","pc":[685]},{"teal":612,"source":"contracts/ARC84Bridge.algo.ts:106","pc":[686,687,688]},{"teal":620,"source":"contracts/ARC84Bridge.algo.ts:107","pc":[689]},{"teal":621,"source":"contracts/ARC84Bridge.algo.ts:107","pc":[690]},{"teal":622,"source":"contracts/ARC84Bridge.algo.ts:107","pc":[691,692]},{"teal":623,"source":"contracts/ARC84Bridge.algo.ts:107","pc":[693,694,695,696,697,698]},{"teal":624,"source":"contracts/ARC84Bridge.algo.ts:107","pc":[699,700]},{"teal":628,"source":"contracts/ARC84Bridge.algo.ts:108","pc":[701,702]},{"teal":629,"source":"contracts/ARC84Bridge.algo.ts:108","pc":[703,704,705]},{"teal":630,"source":"contracts/ARC84Bridge.algo.ts:108","pc":[706]},{"teal":631,"source":"contracts/ARC84Bridge.algo.ts:108","pc":[707,708]},{"teal":635,"source":"contracts/ARC84Bridge.algo.ts:109","pc":[709,710]},{"teal":636,"source":"contracts/ARC84Bridge.algo.ts:109","pc":[711,712]},{"teal":637,"source":"contracts/ARC84Bridge.algo.ts:109","pc":[713]},{"teal":638,"source":"contracts/ARC84Bridge.algo.ts:109","pc":[714,715]},{"teal":639,"source":"contracts/ARC84Bridge.algo.ts:109","pc":[716,717]},{"teal":640,"source":"contracts/ARC84Bridge.algo.ts:109","pc":[718]},{"teal":641,"source":"contracts/ARC84Bridge.algo.ts:109","pc":[719]},{"teal":642,"source":"contracts/ARC84Bridge.algo.ts:109","pc":[720]},{"teal":643,"source":"contracts/ARC84Bridge.algo.ts:109","pc":[721]},{"teal":644,"source":"contracts/ARC84Bridge.algo.ts:109","pc":[722,723]},{"teal":645,"source":"contracts/ARC84Bridge.algo.ts:109","pc":[724]},{"teal":646,"source":"contracts/ARC84Bridge.algo.ts:109","pc":[725]},{"teal":647,"source":"contracts/ARC84Bridge.algo.ts:109","pc":[726]},{"teal":648,"source":"contracts/ARC84Bridge.algo.ts:109","pc":[727]},{"teal":649,"source":"contracts/ARC84Bridge.algo.ts:109","pc":[728]},{"teal":650,"source":"contracts/ARC84Bridge.algo.ts:109","pc":[729,730]},{"teal":653,"source":"contracts/ARC84Bridge.algo.ts:107","pc":[731]},{"teal":654,"source":"contracts/ARC84Bridge.algo.ts:107","pc":[732,733]},{"teal":657,"source":"contracts/ARC84Bridge.algo.ts:107","pc":[734]},{"teal":658,"source":"contracts/ARC84Bridge.algo.ts:107","pc":[735,736]},{"teal":659,"source":"contracts/ARC84Bridge.algo.ts:107","pc":[737]},{"teal":660,"source":"contracts/ARC84Bridge.algo.ts:107","pc":[738]},{"teal":661,"source":"contracts/ARC84Bridge.algo.ts:107","pc":[739,740]},{"teal":662,"source":"contracts/ARC84Bridge.algo.ts:107","pc":[741,742,743]},{"teal":663,"source":"contracts/ARC84Bridge.algo.ts:107","pc":[744,745]},{"teal":673,"source":"contracts/ARC84Bridge.algo.ts:112","pc":[746]},{"teal":674,"source":"contracts/ARC84Bridge.algo.ts:112","pc":[747,748]},{"teal":675,"source":"contracts/ARC84Bridge.algo.ts:112","pc":[749,750]},{"teal":679,"source":"contracts/ARC84Bridge.algo.ts:113","pc":[751,752]},{"teal":680,"source":"contracts/ARC84Bridge.algo.ts:113","pc":[753,754,755]},{"teal":681,"source":"contracts/ARC84Bridge.algo.ts:113","pc":[756]},{"teal":682,"source":"contracts/ARC84Bridge.algo.ts:113","pc":[757,758]},{"teal":686,"source":"contracts/ARC84Bridge.algo.ts:114","pc":[759,760]},{"teal":687,"source":"contracts/ARC84Bridge.algo.ts:114","pc":[761,762,763]},{"teal":688,"source":"contracts/ARC84Bridge.algo.ts:114","pc":[764]},{"teal":689,"source":"contracts/ARC84Bridge.algo.ts:114","pc":[765,766]},{"teal":693,"source":"contracts/ARC84Bridge.algo.ts:115","pc":[767,768]},{"teal":694,"source":"contracts/ARC84Bridge.algo.ts:115","pc":[769,770,771]},{"teal":695,"source":"contracts/ARC84Bridge.algo.ts:115","pc":[772,773]},{"teal":699,"source":"contracts/ARC84Bridge.algo.ts:116","pc":[774,775]},{"teal":700,"source":"contracts/ARC84Bridge.algo.ts:116","pc":[776,777,778]},{"teal":701,"source":"contracts/ARC84Bridge.algo.ts:116","pc":[779,780]},{"teal":705,"source":"contracts/ARC84Bridge.algo.ts:117","pc":[781,782]},{"teal":706,"source":"contracts/ARC84Bridge.algo.ts:117","pc":[783,784]},{"teal":709,"source":"contracts/ARC84Bridge.algo.ts:112","pc":[785]},{"teal":710,"source":"contracts/ARC84Bridge.algo.ts:112","pc":[786,787]},{"teal":713,"source":"contracts/ARC84Bridge.algo.ts:112","pc":[788]},{"teal":714,"source":"contracts/ARC84Bridge.algo.ts:112","pc":[789,790]},{"teal":718,"source":"contracts/ARC84Bridge.algo.ts:120","pc":[791,792]},{"teal":719,"source":"contracts/ARC84Bridge.algo.ts:120","pc":[793,794]},{"teal":723,"source":"contracts/ARC84Bridge.algo.ts:121","pc":[795]},{"teal":724,"source":"contracts/ARC84Bridge.algo.ts:121","pc":[796,797]},{"teal":725,"source":"contracts/ARC84Bridge.algo.ts:121","pc":[798]},{"teal":726,"source":"contracts/ARC84Bridge.algo.ts:121","pc":[799,800]},{"teal":727,"source":"contracts/ARC84Bridge.algo.ts:121","pc":[801]},{"teal":728,"source":"contracts/ARC84Bridge.algo.ts:121","pc":[802]},{"teal":732,"source":"contracts/ARC84Bridge.algo.ts:122","pc":[803]},{"teal":733,"source":"contracts/ARC84Bridge.algo.ts:122","pc":[804,805]},{"teal":734,"source":"contracts/ARC84Bridge.algo.ts:122","pc":[806]},{"teal":735,"source":"contracts/ARC84Bridge.algo.ts:122","pc":[807]},{"teal":736,"source":"contracts/ARC84Bridge.algo.ts:122","pc":[808,809]},{"teal":737,"source":"contracts/ARC84Bridge.algo.ts:122","pc":[810]},{"teal":742,"source":"contracts/ARC84Bridge.algo.ts:125","pc":[811]},{"teal":743,"source":"contracts/ARC84Bridge.algo.ts:125","pc":[812,813]},{"teal":744,"source":"contracts/ARC84Bridge.algo.ts:125","pc":[814]},{"teal":745,"source":"contracts/ARC84Bridge.algo.ts:125","pc":[815]},{"teal":748,"source":"contracts/ARC84Bridge.algo.ts:125","errorMessage":"box value does not exist: this.arc84ToAsaMap(arc84).value","pc":[816]},{"teal":749,"source":"contracts/ARC84Bridge.algo.ts:125","pc":[817]},{"teal":750,"source":"contracts/ARC84Bridge.algo.ts:125","pc":[818,819]},{"teal":755,"source":"contracts/ARC84Bridge.algo.ts:127","pc":[820,821]},{"teal":756,"source":"contracts/ARC84Bridge.algo.ts:127","pc":[822,823]},{"teal":757,"source":"contracts/ARC84Bridge.algo.ts:127","pc":[824,825]},{"teal":758,"source":"contracts/ARC84Bridge.algo.ts:127","pc":[826]},{"teal":759,"source":"contracts/ARC84Bridge.algo.ts:127","pc":[827]},{"teal":760,"source":"contracts/ARC84Bridge.algo.ts:127","pc":[828]},{"teal":761,"source":"contracts/ARC84Bridge.algo.ts:127","pc":[829,830,831]},{"teal":766,"source":"contracts/ARC84Bridge.algo.ts:128","pc":[832,833]},{"teal":767,"source":"contracts/ARC84Bridge.algo.ts:128","pc":[834]},{"teal":768,"source":"contracts/ARC84Bridge.algo.ts:128","pc":[835,836]},{"teal":769,"source":"contracts/ARC84Bridge.algo.ts:128","pc":[837]},{"teal":770,"source":"contracts/ARC84Bridge.algo.ts:128","pc":[838,839]},{"teal":775,"source":"contracts/ARC84Bridge.algo.ts:129","pc":[840,841]},{"teal":776,"source":"contracts/ARC84Bridge.algo.ts:129","pc":[842]},{"teal":777,"source":"contracts/ARC84Bridge.algo.ts:129","pc":[843]},{"teal":778,"source":"contracts/ARC84Bridge.algo.ts:129","pc":[844]},{"teal":779,"source":"contracts/ARC84Bridge.algo.ts:129","pc":[845]},{"teal":780,"source":"contracts/ARC84Bridge.algo.ts:129","pc":[846,847,848]},{"teal":785,"source":"contracts/ARC84Bridge.algo.ts:129","pc":[849,850]},{"teal":786,"source":"contracts/ARC84Bridge.algo.ts:129","pc":[851]},{"teal":787,"source":"contracts/ARC84Bridge.algo.ts:129","pc":[852]},{"teal":788,"source":"contracts/ARC84Bridge.algo.ts:129","pc":[853]},{"teal":793,"source":"contracts/ARC84Bridge.algo.ts:131","pc":[854,855]},{"teal":794,"source":"contracts/ARC84Bridge.algo.ts:131","pc":[856]},{"teal":797,"source":"contracts/ARC84Bridge.algo.ts:131","errorMessage":"box value does not exist: this.withdrawAmounts(key).value","pc":[857]},{"teal":798,"source":"contracts/ARC84Bridge.algo.ts:131","pc":[858]},{"teal":799,"source":"contracts/ARC84Bridge.algo.ts:131","pc":[859,860]},{"teal":800,"source":"contracts/ARC84Bridge.algo.ts:131","pc":[861,862]},{"teal":801,"source":"contracts/ARC84Bridge.algo.ts:131","pc":[863]},{"teal":802,"source":"contracts/ARC84Bridge.algo.ts:131","pc":[864,865]},{"teal":803,"source":"contracts/ARC84Bridge.algo.ts:131","pc":[866,867]},{"teal":804,"source":"contracts/ARC84Bridge.algo.ts:131","pc":[868]},{"teal":805,"source":"contracts/ARC84Bridge.algo.ts:131","pc":[869]},{"teal":806,"source":"contracts/ARC84Bridge.algo.ts:131","pc":[870,871]},{"teal":807,"source":"contracts/ARC84Bridge.algo.ts:131","pc":[872]},{"teal":808,"source":"contracts/ARC84Bridge.algo.ts:131","pc":[873,874]},{"teal":809,"source":"contracts/ARC84Bridge.algo.ts:131","pc":[875]},{"teal":810,"source":"contracts/ARC84Bridge.algo.ts:131","pc":[876]},{"teal":811,"source":"contracts/ARC84Bridge.algo.ts:131","pc":[877]},{"teal":812,"source":"contracts/ARC84Bridge.algo.ts:131","pc":[878]},{"teal":813,"source":"contracts/ARC84Bridge.algo.ts:131","pc":[879]},{"teal":814,"source":"contracts/ARC84Bridge.algo.ts:131","pc":[880,881]},{"teal":815,"source":"contracts/ARC84Bridge.algo.ts:131","pc":[882]},{"teal":816,"source":"contracts/ARC84Bridge.algo.ts:131","pc":[883]},{"teal":817,"source":"contracts/ARC84Bridge.algo.ts:131","pc":[884]},{"teal":818,"source":"contracts/ARC84Bridge.algo.ts:127","pc":[885,886,887]},{"teal":823,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[888]},{"teal":824,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[889,890]},{"teal":825,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[891,892]},{"teal":829,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[893,894]},{"teal":830,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[895,896]},{"teal":834,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[897,898]},{"teal":835,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[899,900]},{"teal":839,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[901,902]},{"teal":840,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[903,904]},{"teal":841,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[905]},{"teal":842,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[906,907]},{"teal":843,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[908,909]},{"teal":844,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[910]},{"teal":845,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[911]},{"teal":846,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[912,913]},{"teal":847,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[914]},{"teal":848,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[915,916]},{"teal":849,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[917]},{"teal":850,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[918]},{"teal":851,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[919]},{"teal":852,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[920]},{"teal":853,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[921,922]},{"teal":856,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[923]},{"teal":857,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[924,925]},{"teal":860,"source":"contracts/ARC84Bridge.algo.ts:133","pc":[926]},{"teal":865,"source":"contracts/ARC84Bridge.algo.ts:136","pc":[927,928]},{"teal":868,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[929,930]},{"teal":871,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[931,932]},{"teal":872,"source":"contracts/ARC84Bridge.algo.ts:92","pc":[933]},{"teal":877,"source":"contracts/ARC84Bridge.algo.ts:139","pc":[934,935,936]},{"teal":878,"source":"contracts/ARC84Bridge.algo.ts:139","pc":[937]},{"teal":879,"source":"contracts/ARC84Bridge.algo.ts:139","pc":[938]},{"teal":880,"source":"contracts/ARC84Bridge.algo.ts:139","pc":[939,940]},{"teal":881,"source":"contracts/ARC84Bridge.algo.ts:139","pc":[941]},{"teal":884,"source":"contracts/ARC84Bridge.algo.ts:139","errorMessage":"argument 0 (withdrawalFor) for withdrawAsa must be a address","pc":[942]},{"teal":887,"source":"contracts/ARC84Bridge.algo.ts:139","pc":[943,944,945]},{"teal":888,"source":"contracts/ARC84Bridge.algo.ts:139","pc":[946]},{"teal":891,"source":"contracts/ARC84Bridge.algo.ts:139","pc":[947,948,949]},{"teal":892,"source":"contracts/ARC84Bridge.algo.ts:139","pc":[950]},{"teal":893,"source":"contracts/ARC84Bridge.algo.ts:139","pc":[951]},{"teal":897,"source":"contracts/ARC84Bridge.algo.ts:139","pc":[952,953,954]},{"teal":900,"source":"contracts/ARC84Bridge.algo.ts:139","pc":[955]},{"teal":904,"source":"contracts/ARC84Bridge.algo.ts:140","pc":[956,957]},{"teal":905,"source":"contracts/ARC84Bridge.algo.ts:140","pc":[958]},{"teal":906,"source":"contracts/ARC84Bridge.algo.ts:140","pc":[959,960]},{"teal":907,"source":"contracts/ARC84Bridge.algo.ts:140","pc":[961]},{"teal":908,"source":"contracts/ARC84Bridge.algo.ts:140","pc":[962,963]},{"teal":912,"source":"contracts/ARC84Bridge.algo.ts:141","pc":[964]},{"teal":913,"source":"contracts/ARC84Bridge.algo.ts:141","pc":[965,966]},{"teal":914,"source":"contracts/ARC84Bridge.algo.ts:141","pc":[967,968]},{"teal":918,"source":"contracts/ARC84Bridge.algo.ts:141","pc":[969,970]},{"teal":919,"source":"contracts/ARC84Bridge.algo.ts:141","pc":[971,972]},{"teal":923,"source":"contracts/ARC84Bridge.algo.ts:141","pc":[973,974]},{"teal":924,"source":"contracts/ARC84Bridge.algo.ts:141","pc":[975,976]},{"teal":928,"source":"contracts/ARC84Bridge.algo.ts:141","pc":[977,978]},{"teal":929,"source":"contracts/ARC84Bridge.algo.ts:141","pc":[979]},{"teal":932,"source":"contracts/ARC84Bridge.algo.ts:141","errorMessage":"box value does not exist: this.withdrawAmounts(key).value","pc":[980]},{"teal":933,"source":"contracts/ARC84Bridge.algo.ts:141","pc":[981]},{"teal":934,"source":"contracts/ARC84Bridge.algo.ts:141","pc":[982,983]},{"teal":937,"source":"contracts/ARC84Bridge.algo.ts:141","pc":[984]},{"teal":938,"source":"contracts/ARC84Bridge.algo.ts:141","pc":[985,986]},{"teal":941,"source":"contracts/ARC84Bridge.algo.ts:141","pc":[987]},{"teal":945,"source":"contracts/ARC84Bridge.algo.ts:142","pc":[988,989]},{"teal":946,"source":"contracts/ARC84Bridge.algo.ts:142","pc":[990]},{"teal":947,"source":"contracts/ARC84Bridge.algo.ts:139","pc":[991]},{"teal":950,"source":"contracts/ARC84Bridge.algo.ts:15","pc":[992,993,994,995,996,997]},{"teal":951,"source":"contracts/ARC84Bridge.algo.ts:15","pc":[998,999,1000]},{"teal":952,"source":"contracts/ARC84Bridge.algo.ts:15","pc":[1001,1002,1003,1004]},{"teal":955,"source":"contracts/ARC84Bridge.algo.ts:15","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[1005]},{"teal":958,"source":"contracts/ARC84Bridge.algo.ts:15","pc":[1006,1007,1008,1009,1010,1011]},{"teal":959,"source":"contracts/ARC84Bridge.algo.ts:15","pc":[1012,1013,1014,1015,1016,1017]},{"teal":960,"source":"contracts/ARC84Bridge.algo.ts:15","pc":[1018,1019,1020,1021,1022,1023]},{"teal":961,"source":"contracts/ARC84Bridge.algo.ts:15","pc":[1024,1025,1026,1027,1028,1029]},{"teal":962,"source":"contracts/ARC84Bridge.algo.ts:15","pc":[1030,1031,1032]},{"teal":963,"source":"contracts/ARC84Bridge.algo.ts:15","pc":[1033,1034,1035,1036,1037,1038,1039,1040,1041,1042]},{"teal":966,"source":"contracts/ARC84Bridge.algo.ts:15","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[1043]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAwIDEgOCA2IDgwIDQgMzIgNzIKYnl0ZWNibG9jayAweCAweDYxNzM2MSAweDYxNzA3MCAweDY0NjE3NDYxNDE3MDcwIDB4NjM2ZjZjNmM2NTYzNzQ2OTZmNmUgMHgwMDAwMDAwMDAwMDAwMDAwIDB4MTUxZjdjNzUgMHhmNzY0MTIxYwoKLy8gVGhpcyBURUFMIHdhcyBnZW5lcmF0ZWQgYnkgVEVBTFNjcmlwdCB2MC4xMDYuMwovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXNwZWN0aXZlIGJyYW5jaCB3aWxsIGJlICIqTk9UX0lNUExFTUVOVEVEIiB3aGljaCBqdXN0IGNvbnRhaW5zICJlcnIiCnR4biBBcHBsaWNhdGlvbklECiEKaW50YyAzIC8vIDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoICpjYWxsX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpjcmVhdGVfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQKCipOT1RfSU1QTEVNRU5URUQ6CgkvLyBUaGUgcmVxdWVzdGVkIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhpcyBjb250cmFjdC4gQXJlIHlvdSB1c2luZyB0aGUgY29ycmVjdCBPbkNvbXBsZXRlPyBEaWQgeW91IHNldCB5b3VyIGFwcCBJRD8KCWVycgoKLy8gY3JlYXRlQXBwbGljYXRpb24odWludDY0KXZvaWQKKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCS8vIGRhdGFBcHA6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgY3JlYXRlQXBwbGljYXRpb24odWludDY0KXZvaWQKCWNhbGxzdWIgY3JlYXRlQXBwbGljYXRpb24KCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKGRhdGFBcHA6IEFwcElEKTogdm9pZApjcmVhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0cy9BUkM4NEJyaWRnZS5hbGdvLnRzOjMwCgkvLyB0aGlzLmRhdGFBcHAudmFsdWUgPSBkYXRhQXBwCglieXRlYyAzIC8vICAiZGF0YUFwcCIKCWZyYW1lX2RpZyAtMSAvLyBkYXRhQXBwOiBBcHBJRAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvQVJDODRCcmlkZ2UuYWxnby50czozMQoJLy8gdGhpcy5jb2xsZWN0aW9uLnZhbHVlID0gc2VuZE1ldGhvZENhbGw8dHlwZW9mIEFSQzg0RGF0YS5wcm90b3R5cGUuYXJjODRfbmV3Q29sbGVjdGlvbj4oewoJLy8gICAgICAgYXBwbGljYXRpb25JRDogZGF0YUFwcCwKCS8vICAgICAgIG1ldGhvZEFyZ3M6IFt0aGlzLmFwcC5hZGRyZXNzLCBidG9pKGhleCgnMHhGRkZGRkZGRkZGRkZGRkZGJykpXSwKCS8vICAgICB9KQoJYnl0ZWMgNCAvLyAgImNvbGxlY3Rpb24iCglpdHhuX2JlZ2luCglpbnRjIDMgLy8gIGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCXB1c2hieXRlcyAweDM4YTZmZTczIC8vIG1ldGhvZCAiYXJjODRfbmV3Q29sbGVjdGlvbihhZGRyZXNzLHVpbnQ2NCl1aW50NjQiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIGNvbnRyYWN0cy9BUkM4NEJyaWRnZS5hbGdvLnRzOjMyCgkvLyBhcHBsaWNhdGlvbklEOiBkYXRhQXBwCglmcmFtZV9kaWcgLTEgLy8gZGF0YUFwcDogQXBwSUQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIGNvbnRyYWN0cy9BUkM4NEJyaWRnZS5hbGdvLnRzOjMzCgkvLyBtZXRob2RBcmdzOiBbdGhpcy5hcHAuYWRkcmVzcywgYnRvaShoZXgoJzB4RkZGRkZGRkZGRkZGRkZGRicpKV0KCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJcHVzaGJ5dGVzIDB4ZmZmZmZmZmZmZmZmZmZmZgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglpdHhuIE51bUxvZ3MKCWludGMgMSAvLyAxCgktCglpdHhuYXMgTG9ncwoJZXh0cmFjdCA0IDAKCWJ0b2kKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIG9wdEluVG9Bc2EodWludDY0KXZvaWQKKmFiaV9yb3V0ZV9vcHRJblRvQXNhOgoJLy8gYXNhOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIG9wdEluVG9Bc2EodWludDY0KXZvaWQKCWNhbGxzdWIgb3B0SW5Ub0FzYQoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gb3B0SW5Ub0FzYShhc2E6IEFzc2V0SUQpOiB2b2lkCm9wdEluVG9Bc2E6Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHMvQVJDODRCcmlkZ2UuYWxnby50czozOAoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgeGZlckFzc2V0OiBhc2EsCgkvLyAgICAgICBhc3NldEFtb3VudDogMCwKCS8vICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgNSAvLyAgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvQVJDODRCcmlkZ2UuYWxnby50czozOQoJLy8geGZlckFzc2V0OiBhc2EKCWZyYW1lX2RpZyAtMSAvLyBhc2E6IEFzc2V0SUQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gY29udHJhY3RzL0FSQzg0QnJpZGdlLmFsZ28udHM6NDAKCS8vIGFzc2V0QW1vdW50OiAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIGNvbnRyYWN0cy9BUkM4NEJyaWRnZS5hbGdvLnRzOjQxCgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyBhc2FUb0FyYzg0KGF4ZmVyLGFkZHJlc3MpKHVpbnQ2NCx1aW50NjQpCiphYmlfcm91dGVfYXNhVG9BcmM4NDoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgNiAvLyAweDE1MWY3Yzc1CgoJLy8gcmVjZWl2ZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnRjIDYgLy8gMzIKCT09CgoJLy8gYXJndW1lbnQgMCAocmVjZWl2ZXIpIGZvciBhc2FUb0FyYzg0IG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBheGZlcjogYXhmZXIKCXR4biBHcm91cEluZGV4CglpbnRjIDEgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyA1IC8vICBheGZlcgoJPT0KCgkvLyBhcmd1bWVudCAxIChheGZlcikgZm9yIGFzYVRvQXJjODQgbXVzdCBiZSBhIGF4ZmVyIHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyBleGVjdXRlIGFzYVRvQXJjODQoYXhmZXIsYWRkcmVzcykodWludDY0LHVpbnQ2NCkKCWNhbGxzdWIgYXNhVG9BcmM4NAoJY29uY2F0Cglsb2cKCWludGMgMSAvLyAxCglyZXR1cm4KCi8vIGFzYVRvQXJjODQoYXhmZXI6IEFzc2V0VHJhbnNmZXJUeG4sIHJlY2VpdmVyOiBBZGRyZXNzKTogQXJjODRJZAphc2FUb0FyYzg0OgoJcHJvdG8gMiAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCWR1cG4gNAoKCS8vIGNvbnRyYWN0cy9BUkM4NEJyaWRnZS5hbGdvLnRzOjQ2CgkvLyB2ZXJpZnlBc3NldFRyYW5zZmVyVHhuKGF4ZmVyLCB7CgkvLyAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgYXNzZXRSZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIGF4ZmVyOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBBc3NldFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6ImF4ZmVyIiwiZmllbGQiOiJhc3NldFJlY2VpdmVyIiwiZXhwZWN0ZWQiOiJ0aGlzLmFwcC5hZGRyZXNzIn0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9BUkM4NEJyaWRnZS5hbGdvLnRzOjUwCgkvLyBhc2EgPSBheGZlci54ZmVyQXNzZXQKCWZyYW1lX2RpZyAtMSAvLyBheGZlcjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgWGZlckFzc2V0CglmcmFtZV9idXJ5IDAgLy8gYXNhOiB1aW50NjQKCgkvLyAqaWYwX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL0FSQzg0QnJpZGdlLmFsZ28udHM6NTMKCS8vICF0aGlzLmFzYVRvQXJjODRNYXAoYXhmZXIueGZlckFzc2V0KS5leGlzdHMKCWJ5dGVjIDEgLy8gICJhc2EiCglmcmFtZV9kaWcgLTEgLy8gYXhmZXI6IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIFhmZXJBc3NldAoJaXRvYgoJY29uY2F0Cglib3hfbGVuCglzd2FwCglwb3AKCSEKCWJ6ICppZjBfZW5kCgoJLy8gKmlmMF9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvQVJDODRCcmlkZ2UuYWxnby50czo1NAoJLy8gaWQgPSBzZW5kTWV0aG9kQ2FsbDx0eXBlb2YgQVJDODREYXRhLnByb3RvdHlwZS5hcmM4NF9taW50Pih7CgkvLyAgICAgICAgIGFwcGxpY2F0aW9uSUQ6IHRoaXMuZGF0YUFwcC52YWx1ZSwKCS8vICAgICAgICAgbWV0aG9kQXJnczogWwoJLy8gICAgICAgICAgIHRoaXMuY29sbGVjdGlvbi52YWx1ZSwKCS8vICAgICAgICAgICB7CgkvLyAgICAgICAgICAgICB0b3RhbDogYXNhLnRvdGFsLAoJLy8gICAgICAgICAgICAgZGVjaW1hbHM6IGFzYS5kZWNpbWFscywKCS8vICAgICAgICAgICAgIG1hbmFnZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgICAgICBuYW1lOiBhc2EubmFtZSBhcyBieXRlczwzMj4sCgkvLyAgICAgICAgICAgICBzeW1ib2w6IGFzYS51bml0TmFtZSBhcyBieXRlczw4PiwKCS8vICAgICAgICAgICAgIHRyYW5zZmVySG9va0FwcDogQXBwSUQuemVyb0luZGV4LAoJLy8gICAgICAgICAgIH0sCgkvLyAgICAgICAgIF0sCgkvLyAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyAzIC8vICBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCglwdXNoYnl0ZXMgMHhhZjc4NDc5NiAvLyBtZXRob2QgImFyYzg0X21pbnQodWludDY0LChieXRlWzMyXSxieXRlWzhdLHVpbnQ2NCx1aW50NjQsYWRkcmVzcyx1aW50NjQpKXVpbnQ2NCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzL0FSQzg0QnJpZGdlLmFsZ28udHM6NTUKCS8vIGFwcGxpY2F0aW9uSUQ6IHRoaXMuZGF0YUFwcC52YWx1ZQoJYnl0ZWMgMyAvLyAgImRhdGFBcHAiCglhcHBfZ2xvYmFsX2dldAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gY29udHJhY3RzL0FSQzg0QnJpZGdlLmFsZ28udHM6NTYKCS8vIG1ldGhvZEFyZ3M6IFsKCS8vICAgICAgICAgICB0aGlzLmNvbGxlY3Rpb24udmFsdWUsCgkvLyAgICAgICAgICAgewoJLy8gICAgICAgICAgICAgdG90YWw6IGFzYS50b3RhbCwKCS8vICAgICAgICAgICAgIGRlY2ltYWxzOiBhc2EuZGVjaW1hbHMsCgkvLyAgICAgICAgICAgICBtYW5hZ2VyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgbmFtZTogYXNhLm5hbWUgYXMgYnl0ZXM8MzI+LAoJLy8gICAgICAgICAgICAgc3ltYm9sOiBhc2EudW5pdE5hbWUgYXMgYnl0ZXM8OD4sCgkvLyAgICAgICAgICAgICB0cmFuc2Zlckhvb2tBcHA6IEFwcElELnplcm9JbmRleCwKCS8vICAgICAgICAgICB9LAoJLy8gICAgICAgICBdCglieXRlYyA0IC8vICAiY29sbGVjdGlvbiIKCWFwcF9nbG9iYWxfZ2V0CglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJZnJhbWVfZGlnIDAgLy8gYXNhOiB1aW50NjQKCWFzc2V0X3BhcmFtc19nZXQgQXNzZXROYW1lCglwb3AKCXB1c2hieXRlcyAweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJZHVwCglleHRyYWN0IDMyIDAKCWJ5dGVjIDAgLy8gMHgKCWI9PQoJYXNzZXJ0CglleHRyYWN0IDAgMzIKCWZyYW1lX2RpZyAwIC8vIGFzYTogdWludDY0Cglhc3NldF9wYXJhbXNfZ2V0IEFzc2V0VW5pdE5hbWUKCXBvcAoJYnl0ZWMgNSAvLyAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJZHVwCglleHRyYWN0IDggMAoJYnl0ZWMgMCAvLyAweAoJYj09Cglhc3NlcnQKCWV4dHJhY3QgMCA4Cgljb25jYXQKCWZyYW1lX2RpZyAwIC8vIGFzYTogdWludDY0Cglhc3NldF9wYXJhbXNfZ2V0IEFzc2V0VG90YWwKCXBvcAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgMCAvLyBhc2E6IHVpbnQ2NAoJYXNzZXRfcGFyYW1zX2dldCBBc3NldERlY2ltYWxzCglwb3AKCWl0b2IKCWNvbmNhdAoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWNvbmNhdAoJYnl0ZWMgNSAvLyAweDAwMDAwMDAwMDAwMDAwMDAKCWNvbmNhdAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglpdHhuIE51bUxvZ3MKCWludGMgMSAvLyAxCgktCglpdHhuYXMgTG9ncwoJZXh0cmFjdCA0IDAKCWJ0b2kKCWZyYW1lX2J1cnkgMSAvLyBpZDogdWludDY0CgoJLy8gY29udHJhY3RzL0FSQzg0QnJpZGdlLmFsZ28udHM6NjkKCS8vIGFwcEFuZElkOiBBcmM4NElkID0geyBkYXRhQXBwOiB0aGlzLmRhdGFBcHAudmFsdWUsIGlkOiBpZCB9CglmcmFtZV9kaWcgMSAvLyBpZDogdWludDY0CglpdG9iCglieXRlYyAzIC8vICAiZGF0YUFwcCIKCWFwcF9nbG9iYWxfZ2V0CglpdG9iCgljb25jYXQKCWZyYW1lX2J1cnkgMiAvLyBhcHBBbmRJZDogQXJjODRJZAoKCS8vIGNvbnRyYWN0cy9BUkM4NEJyaWRnZS5hbGdvLnRzOjcwCgkvLyB0aGlzLmFzYVRvQXJjODRNYXAoYXNhKS52YWx1ZSA9IGFwcEFuZElkCglieXRlYyAxIC8vICAiYXNhIgoJZnJhbWVfZGlnIDAgLy8gYXNhOiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIDIgLy8gYXBwQW5kSWQ6IEFyYzg0SWQKCWJveF9wdXQKCgkvLyBjb250cmFjdHMvQVJDODRCcmlkZ2UuYWxnby50czo3MQoJLy8gdGhpcy5hcmM4NFRvQXNhTWFwKGFwcEFuZElkKS52YWx1ZSA9IGFzYQoJYnl0ZWMgMiAvLyAgImFwcCIKCWZyYW1lX2RpZyAyIC8vIGFwcEFuZElkOiBBcmM4NElkCgljb25jYXQKCWZyYW1lX2RpZyAwIC8vIGFzYTogdWludDY0CglpdG9iCglib3hfcHV0CgoqaWYwX2VuZDoKCS8vIGNvbnRyYWN0cy9BUkM4NEJyaWRnZS5hbGdvLnRzOjc0CgkvLyBhcmM4NCA9IHRoaXMuYXNhVG9BcmM4NE1hcChhc2EpLnZhbHVlCglieXRlYyAxIC8vICAiYXNhIgoJZnJhbWVfZGlnIDAgLy8gYXNhOiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfYnVyeSAzIC8vIHN0b3JhZ2Uga2V5Ly9hcmM4NAoKCS8vIGNvbnRyYWN0cy9BUkM4NEJyaWRnZS5hbGdvLnRzOjc2CgkvLyB4ZmVyQXBwID0gc2VuZE1ldGhvZENhbGw8dHlwZW9mIEFSQzg0RGF0YS5wcm90b3R5cGUuYXJjODRfdHJhbnNmZXJBcHA+KHsKCS8vICAgICAgIGFwcGxpY2F0aW9uSUQ6IGFyYzg0LmRhdGFBcHAsCgkvLyAgICAgfSkKCWl0eG5fYmVnaW4KCWludGMgMyAvLyAgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJYnl0ZWMgNyAvLyAgbWV0aG9kICJhcmM4NF90cmFuc2ZlckFwcCgpdWludDY0IgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBjb250cmFjdHMvQVJDODRCcmlkZ2UuYWxnby50czo3NwoJLy8gYXBwbGljYXRpb25JRDogYXJjODQuZGF0YUFwcAoJaW50YyAyIC8vICBoZWFkT2Zmc2V0CglpbnRjIDIgLy8gOAoJYnl0ZWMgMSAvLyAgImFzYSIKCWZyYW1lX2RpZyAwIC8vIGFzYTogdWludDY0CglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglpdHhuIE51bUxvZ3MKCWludGMgMSAvLyAxCgktCglpdHhuYXMgTG9ncwoJZXh0cmFjdCA0IDAKCWJ0b2kKCWZyYW1lX2J1cnkgNCAvLyB4ZmVyQXBwOiB1aW50NjQKCgkvLyBjb250cmFjdHMvQVJDODRCcmlkZ2UuYWxnby50czo4MQoJLy8gc2VuZE1ldGhvZENhbGw8dHlwZW9mIEFSQzg0VHJhbnNmZXIucHJvdG90eXBlLmFyYzg0X3RyYW5zZmVyPih7CgkvLyAgICAgICBhcHBsaWNhdGlvbklEOiB4ZmVyQXBwLAoJLy8gICAgICAgbWV0aG9kQXJnczogWwoJLy8gICAgICAgICBhcmM4NC5kYXRhQXBwLAoJLy8gICAgICAgICBbeyB0b2tlbklkOiBhcmM4NC5pZCwgYW1vdW50OiBheGZlci5hc3NldEFtb3VudCwgZnJvbTogdGhpcy5hcHAuYWRkcmVzcywgdG86IHJlY2VpdmVyIH1dLAoJLy8gICAgICAgXSwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyAzIC8vICBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCglwdXNoYnl0ZXMgMHgyZjczZDc4ZCAvLyBtZXRob2QgImFyYzg0X3RyYW5zZmVyKHVpbnQ2NCwodWludDY0LGFkZHJlc3MsYWRkcmVzcyx1aW50NjQpW10pdm9pZCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzL0FSQzg0QnJpZGdlLmFsZ28udHM6ODIKCS8vIGFwcGxpY2F0aW9uSUQ6IHhmZXJBcHAKCWZyYW1lX2RpZyA0IC8vIHhmZXJBcHA6IHVpbnQ2NAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gY29udHJhY3RzL0FSQzg0QnJpZGdlLmFsZ28udHM6ODMKCS8vIG1ldGhvZEFyZ3M6IFsKCS8vICAgICAgICAgYXJjODQuZGF0YUFwcCwKCS8vICAgICAgICAgW3sgdG9rZW5JZDogYXJjODQuaWQsIGFtb3VudDogYXhmZXIuYXNzZXRBbW91bnQsIGZyb206IHRoaXMuYXBwLmFkZHJlc3MsIHRvOiByZWNlaXZlciB9XSwKCS8vICAgICAgIF0KCWludGMgMiAvLyAgaGVhZE9mZnNldAoJaW50YyAyIC8vIDgKCWJ5dGVjIDEgLy8gICJhc2EiCglmcmFtZV9kaWcgMCAvLyBhc2E6IHVpbnQ2NAoJaXRvYgoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJaXRvYgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWludGMgMCAvLyAwCglpbnRjIDIgLy8gOAoJYnl0ZWMgMSAvLyAgImFzYSIKCWZyYW1lX2RpZyAwIC8vIGFzYTogdWludDY0CglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglpdG9iCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJY29uY2F0CglmcmFtZV9kaWcgLTIgLy8gcmVjZWl2ZXI6IEFkZHJlc3MKCWNvbmNhdAoJZnJhbWVfZGlnIC0xIC8vIGF4ZmVyOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBBc3NldEFtb3VudAoJaXRvYgoJY29uY2F0CglkdXAKCWxlbgoJaW50YyA0IC8vIDgwCgkvCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMCAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHMvQVJDODRCcmlkZ2UuYWxnby50czo4OQoJLy8gcmV0dXJuIGFyYzg0OwoJZnJhbWVfZGlnIDMgLy8gc3RvcmFnZSBrZXkvL2FyYzg0Cglib3hfZ2V0CgoJLy8gYm94IHZhbHVlIGRvZXMgbm90IGV4aXN0OiB0aGlzLmFzYVRvQXJjODRNYXAoYXNhKS52YWx1ZQoJYXNzZXJ0CgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCgoJLy8gcG9wIGFsbCBsb2NhbCB2YXJpYWJsZXMgZnJvbSB0aGUgc3RhY2sKCXBvcG4gNAoJcmV0c3ViCgovLyBhcmM4NFRvQXNhKGFwcGwsdWludDY0LGFkZHJlc3MpdWludDY0CiphYmlfcm91dGVfYXJjODRUb0FzYToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgNiAvLyAweDE1MWY3Yzc1CgoJLy8gcmVjZWl2ZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnRjIDYgLy8gMzIKCT09CgoJLy8gYXJndW1lbnQgMCAocmVjZWl2ZXIpIGZvciBhcmM4NFRvQXNhIG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyB4ZmVySW5kZXg6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIHhmZXJDYWxsOiBhcHBsCgl0eG4gR3JvdXBJbmRleAoJaW50YyAxIC8vIDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludGMgMyAvLyAgYXBwbAoJPT0KCgkvLyBhcmd1bWVudCAyICh4ZmVyQ2FsbCkgZm9yIGFyYzg0VG9Bc2EgbXVzdCBiZSBhIGFwcGwgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIGV4ZWN1dGUgYXJjODRUb0FzYShhcHBsLHVpbnQ2NCxhZGRyZXNzKXVpbnQ2NAoJY2FsbHN1YiBhcmM4NFRvQXNhCglpdG9iCgljb25jYXQKCWxvZwoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gYXJjODRUb0FzYSh4ZmVyQ2FsbDogQXBwQ2FsbFR4biwgeGZlckluZGV4OiB1aW50NjQsIHJlY2VpdmVyOiBBZGRyZXNzKTogQXNzZXRJRAphcmM4NFRvQXNhOgoJcHJvdG8gMyAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCWR1cG4gNwoKCS8vIGNvbnRyYWN0cy9BUkM4NEJyaWRnZS5hbGdvLnRzOjkzCgkvLyB4ZmVyczogVHJhbnNmZXJbXSA9IGNhc3RCeXRlczxUcmFuc2ZlcltdPihleHRyYWN0Myh4ZmVyQ2FsbC5hcHBsaWNhdGlvbkFyZ3NbMl0sIDIsIDApKQoJZnJhbWVfZGlnIC0xIC8vIHhmZXJDYWxsOiBBcHBDYWxsVHhuCglndHhucyBBcHBsaWNhdGlvbkFyZ3MgMgoJZXh0cmFjdCAyIDAKCWZyYW1lX2J1cnkgMCAvLyB4ZmVyczogVHJhbnNmZXJbXQoJZnJhbWVfZGlnIC0yIC8vIHhmZXJJbmRleDogdWludDY0CglmcmFtZV9idXJ5IDEgLy8gYWNjZXNzb3I6IGFjY2Vzc29yLy8wLy94ZmVyCgoJLy8gY29udHJhY3RzL0FSQzg0QnJpZGdlLmFsZ28udHM6OTUKCS8vIGFzc2VydCh4ZmVyLnRvID09PSB0aGlzLmFwcC5hZGRyZXNzKQoJZnJhbWVfZGlnIDAgLy8geGZlcnM6IFRyYW5zZmVyW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDAgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMSAvLyBzYXZlZCBhY2Nlc3NvcjogYWNjZXNzb3IvLzAvL3hmZXIKCWludGMgNCAvLyA4MAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglwdXNoaW50IDQwIC8vIGhlYWRPZmZzZXQKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludGMgNiAvLyAzMgoJZXh0cmFjdDMKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL0FSQzg0QnJpZGdlLmFsZ28udHM6OTcKCS8vIGRhdGFBcHAgPSBBcHBJRC5mcm9tVWludDY0KGJ0b2koeGZlckNhbGwuYXBwbGljYXRpb25BcmdzWzFdKSkKCWZyYW1lX2RpZyAtMSAvLyB4ZmVyQ2FsbDogQXBwQ2FsbFR4bgoJZ3R4bnMgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCWZyYW1lX2J1cnkgMiAvLyBkYXRhQXBwOiB1aW50NjQKCgkvLyBjb250cmFjdHMvQVJDODRCcmlkZ2UuYWxnby50czoxMDAKCS8vIGFzc2VydCgKCS8vICAgICAgIHhmZXJDYWxsLmFwcGxpY2F0aW9uSUQgPT0gc2VuZE1ldGhvZENhbGw8dHlwZW9mIEFSQzg0RGF0YS5wcm90b3R5cGUuYXJjODRfdHJhbnNmZXJBcHA+KHsgYXBwbGljYXRpb25JRDogZGF0YUFwcCB9KQoJLy8gICAgICkKCWZyYW1lX2RpZyAtMSAvLyB4ZmVyQ2FsbDogQXBwQ2FsbFR4bgoJZ3R4bnMgQXBwbGljYXRpb25JRAoJaXR4bl9iZWdpbgoJaW50YyAzIC8vICBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCglieXRlYyA3IC8vICBtZXRob2QgImFyYzg0X3RyYW5zZmVyQXBwKCl1aW50NjQiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIGNvbnRyYWN0cy9BUkM4NEJyaWRnZS5hbGdvLnRzOjEwMQoJLy8gYXBwbGljYXRpb25JRDogZGF0YUFwcAoJZnJhbWVfZGlnIDIgLy8gZGF0YUFwcDogdWludDY0CglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBGZWUgZmllbGQgbm90IHNldCwgZGVmYXVsdGluZyB0byAwCglpbnRjIDAgLy8gMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglpdHhuIE51bUxvZ3MKCWludGMgMSAvLyAxCgktCglpdHhuYXMgTG9ncwoJZXh0cmFjdCA0IDAKCWJ0b2kKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvQVJDODRCcmlkZ2UuYWxnby50czoxMDQKCS8vIGFyYzg0OiBBcmM4NElkID0geyBkYXRhQXBwOiBkYXRhQXBwLCBpZDogeGZlci50b2tlbklkIH0KCWZyYW1lX2RpZyAwIC8vIHhmZXJzOiBUcmFuc2ZlcltdCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyAwIC8vICBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIDEgLy8gc2F2ZWQgYWNjZXNzb3I6IGFjY2Vzc29yLy8wLy94ZmVyCglpbnRjIDQgLy8gODAKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJaW50YyAwIC8vICBoZWFkT2Zmc2V0CgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglpbnRjIDIgLy8gOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWZyYW1lX2RpZyAyIC8vIGRhdGFBcHA6IHVpbnQ2NAoJaXRvYgoJY29uY2F0CglmcmFtZV9idXJ5IDMgLy8gYXJjODQ6IEFyYzg0SWQKCgkvLyAqaWYxX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL0FSQzg0QnJpZGdlLmFsZ28udHM6MTA2CgkvLyAhdGhpcy5hcmM4NFRvQXNhTWFwKGFyYzg0KS5leGlzdHMKCWJ5dGVjIDIgLy8gICJhcHAiCglmcmFtZV9kaWcgMyAvLyBhcmM4NDogQXJjODRJZAoJY29uY2F0Cglib3hfbGVuCglzd2FwCglwb3AKCSEKCWJ6ICppZjFfZW5kCgoJLy8gKmlmMV9jb25zZXF1ZW50CgkvLyBjb250cmFjdHMvQVJDODRCcmlkZ2UuYWxnby50czoxMDcKCS8vIHBhcmFtcyA9IHNlbmRNZXRob2RDYWxsPHR5cGVvZiBBUkM4NERhdGEucHJvdG90eXBlLmFyYzg0X3BhcmFtcz4oewoJLy8gICAgICAgICBhcHBsaWNhdGlvbklEOiBhcmM4NC5kYXRhQXBwLAoJLy8gICAgICAgICBtZXRob2RBcmdzOiBbeGZlci50b2tlbklkXSwKCS8vICAgICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDMgLy8gIGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCXB1c2hieXRlcyAweDEzMTdmOTkzIC8vIG1ldGhvZCAiYXJjODRfcGFyYW1zKHVpbnQ2NCkoYnl0ZVszMl0sYnl0ZVs4XSx1aW50NjQsdWludDY0LGFkZHJlc3MsdWludDY0KSIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gY29udHJhY3RzL0FSQzg0QnJpZGdlLmFsZ28udHM6MTA4CgkvLyBhcHBsaWNhdGlvbklEOiBhcmM4NC5kYXRhQXBwCglmcmFtZV9kaWcgMyAvLyBhcmM4NDogQXJjODRJZAoJZXh0cmFjdCA4IDgKCWJ0b2kKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIGNvbnRyYWN0cy9BUkM4NEJyaWRnZS5hbGdvLnRzOjEwOQoJLy8gbWV0aG9kQXJnczogW3hmZXIudG9rZW5JZF0KCWZyYW1lX2RpZyAwIC8vIHhmZXJzOiBUcmFuc2ZlcltdCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJaW50YyAwIC8vICBpbml0aWFsIG9mZnNldAoJZnJhbWVfZGlnIDEgLy8gc2F2ZWQgYWNjZXNzb3I6IGFjY2Vzc29yLy8wLy94ZmVyCglpbnRjIDQgLy8gODAKCSogLy8gYWNjICogdHlwZUxlbmd0aAoJKwoJaW50YyAwIC8vICBoZWFkT2Zmc2V0CgkrCglsb2FkIDI1NSAvLyBmdWxsIGFycmF5Cglzd2FwCglpbnRjIDIgLy8gOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJaXR4biBOdW1Mb2dzCglpbnRjIDEgLy8gMQoJLQoJaXR4bmFzIExvZ3MKCWV4dHJhY3QgNCAwCglmcmFtZV9idXJ5IDQgLy8gcGFyYW1zOiAoYnl0ZVszMl0sYnl0ZVs4XSx1aW50NjQsdWludDY0LGFkZHJlc3MsdWludDY0KQoKCS8vIGNvbnRyYWN0cy9BUkM4NEJyaWRnZS5hbGdvLnRzOjExMgoJLy8gc2VuZEFzc2V0Q3JlYXRpb24oewoJLy8gICAgICAgICBjb25maWdBc3NldFRvdGFsOiBwYXJhbXMudG90YWwgYXMgdWludDY0LAoJLy8gICAgICAgICBjb25maWdBc3NldERlY2ltYWxzOiBwYXJhbXMuZGVjaW1hbHMgYXMgdWludDY0LAoJLy8gICAgICAgICBjb25maWdBc3NldE5hbWU6IHBhcmFtcy5uYW1lIGFzIGJ5dGVzLAoJLy8gICAgICAgICBjb25maWdBc3NldFVuaXROYW1lOiBwYXJhbXMuc3ltYm9sIGFzIGJ5dGVzLAoJLy8gICAgICAgICBjb25maWdBc3NldFJlc2VydmU6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICB9KQoJaXR4bl9iZWdpbgoJcHVzaGludCAzIC8vIGFjZmcKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvQVJDODRCcmlkZ2UuYWxnby50czoxMTMKCS8vIGNvbmZpZ0Fzc2V0VG90YWw6IHBhcmFtcy50b3RhbCBhcyB1aW50NjQKCWZyYW1lX2RpZyA0IC8vIHBhcmFtczogKGJ5dGVbMzJdLGJ5dGVbOF0sdWludDY0LHVpbnQ2NCxhZGRyZXNzLHVpbnQ2NCkKCWV4dHJhY3QgNDAgOAoJYnRvaQoJaXR4bl9maWVsZCBDb25maWdBc3NldFRvdGFsCgoJLy8gY29udHJhY3RzL0FSQzg0QnJpZGdlLmFsZ28udHM6MTE0CgkvLyBjb25maWdBc3NldERlY2ltYWxzOiBwYXJhbXMuZGVjaW1hbHMgYXMgdWludDY0CglmcmFtZV9kaWcgNCAvLyBwYXJhbXM6IChieXRlWzMyXSxieXRlWzhdLHVpbnQ2NCx1aW50NjQsYWRkcmVzcyx1aW50NjQpCglleHRyYWN0IDQ4IDgKCWJ0b2kKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXREZWNpbWFscwoKCS8vIGNvbnRyYWN0cy9BUkM4NEJyaWRnZS5hbGdvLnRzOjExNQoJLy8gY29uZmlnQXNzZXROYW1lOiBwYXJhbXMubmFtZSBhcyBieXRlcwoJZnJhbWVfZGlnIDQgLy8gcGFyYW1zOiAoYnl0ZVszMl0sYnl0ZVs4XSx1aW50NjQsdWludDY0LGFkZHJlc3MsdWludDY0KQoJZXh0cmFjdCAwIDMyCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TmFtZQoKCS8vIGNvbnRyYWN0cy9BUkM4NEJyaWRnZS5hbGdvLnRzOjExNgoJLy8gY29uZmlnQXNzZXRVbml0TmFtZTogcGFyYW1zLnN5bWJvbCBhcyBieXRlcwoJZnJhbWVfZGlnIDQgLy8gcGFyYW1zOiAoYnl0ZVszMl0sYnl0ZVs4XSx1aW50NjQsdWludDY0LGFkZHJlc3MsdWludDY0KQoJZXh0cmFjdCAzMiA4CglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VW5pdE5hbWUKCgkvLyBjb250cmFjdHMvQVJDODRCcmlkZ2UuYWxnby50czoxMTcKCS8vIGNvbmZpZ0Fzc2V0UmVzZXJ2ZTogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRSZXNlcnZlCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJaXR4biBDcmVhdGVkQXNzZXRJRAoKCS8vIGNvbnRyYWN0cy9BUkM4NEJyaWRnZS5hbGdvLnRzOjEyMAoJLy8gYXNhID0gdGhpcy5pdHhuLmNyZWF0ZWRBc3NldElECglpdHhuIENyZWF0ZWRBc3NldElECglmcmFtZV9idXJ5IDUgLy8gYXNhOiB1aW50NjQKCgkvLyBjb250cmFjdHMvQVJDODRCcmlkZ2UuYWxnby50czoxMjEKCS8vIHRoaXMuYXJjODRUb0FzYU1hcChhcmM4NCkudmFsdWUgPSBhc2EKCWJ5dGVjIDIgLy8gICJhcHAiCglmcmFtZV9kaWcgMyAvLyBhcmM4NDogQXJjODRJZAoJY29uY2F0CglmcmFtZV9kaWcgNSAvLyBhc2E6IHVpbnQ2NAoJaXRvYgoJYm94X3B1dAoKCS8vIGNvbnRyYWN0cy9BUkM4NEJyaWRnZS5hbGdvLnRzOjEyMgoJLy8gdGhpcy5hc2FUb0FyYzg0TWFwKGFzYSkudmFsdWUgPSBhcmM4NAoJYnl0ZWMgMSAvLyAgImFzYSIKCWZyYW1lX2RpZyA1IC8vIGFzYTogdWludDY0CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAzIC8vIGFyYzg0OiBBcmM4NElkCglib3hfcHV0CgoqaWYxX2VuZDoKCS8vIGNvbnRyYWN0cy9BUkM4NEJyaWRnZS5hbGdvLnRzOjEyNQoJLy8gYXNhID0gdGhpcy5hcmM4NFRvQXNhTWFwKGFyYzg0KS52YWx1ZQoJYnl0ZWMgMiAvLyAgImFwcCIKCWZyYW1lX2RpZyAzIC8vIGFyYzg0OiBBcmM4NElkCgljb25jYXQKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuYXJjODRUb0FzYU1hcChhcmM4NCkudmFsdWUKCWFzc2VydAoJYnRvaQoJZnJhbWVfYnVyeSA2IC8vIGFzYTogdWludDY0CgoJLy8gKmlmMl9jb25kaXRpb24KCS8vIGNvbnRyYWN0cy9BUkM4NEJyaWRnZS5hbGdvLnRzOjEyNwoJLy8gIXJlY2VpdmVyLmlzT3B0ZWRJblRvQXNzZXQoYXNhKQoJZnJhbWVfZGlnIC0zIC8vIHJlY2VpdmVyOiBBZGRyZXNzCglmcmFtZV9kaWcgNiAvLyBhc2E6IHVpbnQ2NAoJYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCglzd2FwCglwb3AKCSEKCWJ6ICppZjJfZWxzZQoKCS8vICppZjJfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL0FSQzg0QnJpZGdlLmFsZ28udHM6MTI4CgkvLyBrZXk6IEFzYUFuZEFkZHIgPSB7IGFzYTogYXNhLCBhZGRyZXNzOiByZWNlaXZlciB9CglmcmFtZV9kaWcgNiAvLyBhc2E6IHVpbnQ2NAoJaXRvYgoJZnJhbWVfZGlnIC0zIC8vIHJlY2VpdmVyOiBBZGRyZXNzCgljb25jYXQKCWZyYW1lX2J1cnkgNyAvLyBrZXk6IEFzYUFuZEFkZHIKCgkvLyAqaWYzX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL0FSQzg0QnJpZGdlLmFsZ28udHM6MTI5CgkvLyAhdGhpcy53aXRoZHJhd0Ftb3VudHMoa2V5KS5leGlzdHMKCWZyYW1lX2RpZyA3IC8vIGtleTogQXNhQW5kQWRkcgoJYm94X2xlbgoJc3dhcAoJcG9wCgkhCglieiAqaWYzX2VuZAoKCS8vICppZjNfY29uc2VxdWVudAoJLy8gY29udHJhY3RzL0FSQzg0QnJpZGdlLmFsZ28udHM6MTI5CgkvLyB0aGlzLndpdGhkcmF3QW1vdW50cyhrZXkpLmNyZWF0ZSgpCglmcmFtZV9kaWcgNyAvLyBrZXk6IEFzYUFuZEFkZHIKCWludGMgMiAvLyA4Cglib3hfY3JlYXRlCglwb3AKCippZjNfZW5kOgoJLy8gY29udHJhY3RzL0FSQzg0QnJpZGdlLmFsZ28udHM6MTMxCgkvLyB0aGlzLndpdGhkcmF3QW1vdW50cyhrZXkpLnZhbHVlICs9IHhmZXIuYW1vdW50CglmcmFtZV9kaWcgNyAvLyBrZXk6IEFzYUFuZEFkZHIKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMud2l0aGRyYXdBbW91bnRzKGtleSkudmFsdWUKCWFzc2VydAoJYnRvaQoJZnJhbWVfZGlnIDAgLy8geGZlcnM6IFRyYW5zZmVyW10KCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5CglpbnRjIDAgLy8gIGluaXRpYWwgb2Zmc2V0CglmcmFtZV9kaWcgMSAvLyBzYXZlZCBhY2Nlc3NvcjogYWNjZXNzb3IvLzAvL3hmZXIKCWludGMgNCAvLyA4MAoJKiAvLyBhY2MgKiB0eXBlTGVuZ3RoCgkrCglpbnRjIDcgLy8gIGhlYWRPZmZzZXQKCSsKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCXN3YXAKCWludGMgMiAvLyA4CglleHRyYWN0MwoJYnRvaQoJKwoJZnJhbWVfZGlnIDcgLy8ga2V5OiBBc2FBbmRBZGRyCglzd2FwCglpdG9iCglib3hfcHV0CgliICppZjJfZW5kCgoqaWYyX2Vsc2U6CgkvLyBjb250cmFjdHMvQVJDODRCcmlkZ2UuYWxnby50czoxMzMKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsgeGZlckFzc2V0OiBhc2EsIGFzc2V0UmVjZWl2ZXI6IHJlY2VpdmVyLCBhc3NldEFtb3VudDogeGZlci5hbW91bnQgfSkKCWl0eG5fYmVnaW4KCWludGMgNSAvLyAgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvQVJDODRCcmlkZ2UuYWxnby50czoxMzMKCS8vIHhmZXJBc3NldDogYXNhCglmcmFtZV9kaWcgNiAvLyBhc2E6IHVpbnQ2NAoJaXR4bl9maWVsZCBYZmVyQXNzZXQKCgkvLyBjb250cmFjdHMvQVJDODRCcmlkZ2UuYWxnby50czoxMzMKCS8vIGFzc2V0UmVjZWl2ZXI6IHJlY2VpdmVyCglmcmFtZV9kaWcgLTMgLy8gcmVjZWl2ZXI6IEFkZHJlc3MKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIGNvbnRyYWN0cy9BUkM4NEJyaWRnZS5hbGdvLnRzOjEzMwoJLy8gYXNzZXRBbW91bnQ6IHhmZXIuYW1vdW50CglmcmFtZV9kaWcgMCAvLyB4ZmVyczogVHJhbnNmZXJbXQoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWludGMgMCAvLyAgaW5pdGlhbCBvZmZzZXQKCWZyYW1lX2RpZyAxIC8vIHNhdmVkIGFjY2Vzc29yOiBhY2Nlc3Nvci8vMC8veGZlcgoJaW50YyA0IC8vIDgwCgkqIC8vIGFjYyAqIHR5cGVMZW5ndGgKCSsKCWludGMgNyAvLyAgaGVhZE9mZnNldAoJKwoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJc3dhcAoJaW50YyAyIC8vIDgKCWV4dHJhY3QzCglidG9pCglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKKmlmMl9lbmQ6CgkvLyBjb250cmFjdHMvQVJDODRCcmlkZ2UuYWxnby50czoxMzYKCS8vIHJldHVybiBhc2E7CglmcmFtZV9kaWcgNiAvLyBhc2E6IHVpbnQ2NAoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDcKCXJldHN1YgoKLy8gd2l0aGRyYXdBc2EodWludDY0LGFkZHJlc3Mpdm9pZAoqYWJpX3JvdXRlX3dpdGhkcmF3QXNhOgoJLy8gd2l0aGRyYXdhbEZvcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludGMgNiAvLyAzMgoJPT0KCgkvLyBhcmd1bWVudCAwICh3aXRoZHJhd2FsRm9yKSBmb3Igd2l0aGRyYXdBc2EgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIGFzYTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSB3aXRoZHJhd0FzYSh1aW50NjQsYWRkcmVzcyl2b2lkCgljYWxsc3ViIHdpdGhkcmF3QXNhCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyB3aXRoZHJhd0FzYShhc2E6IEFzc2V0SUQsIHdpdGhkcmF3YWxGb3I6IEFkZHJlc3MpOiB2b2lkCndpdGhkcmF3QXNhOgoJcHJvdG8gMiAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGVjIDAgLy8gMHgKCgkvLyBjb250cmFjdHMvQVJDODRCcmlkZ2UuYWxnby50czoxNDAKCS8vIGtleTogQXNhQW5kQWRkciA9IHsgYXNhOiBhc2EsIGFkZHJlc3M6IHdpdGhkcmF3YWxGb3IgfQoJZnJhbWVfZGlnIC0xIC8vIGFzYTogQXNzZXRJRAoJaXRvYgoJZnJhbWVfZGlnIC0yIC8vIHdpdGhkcmF3YWxGb3I6IEFkZHJlc3MKCWNvbmNhdAoJZnJhbWVfYnVyeSAwIC8vIGtleTogQXNhQW5kQWRkcgoKCS8vIGNvbnRyYWN0cy9BUkM4NEJyaWRnZS5hbGdvLnRzOjE0MQoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoeyB4ZmVyQXNzZXQ6IGFzYSwgYXNzZXRSZWNlaXZlcjogd2l0aGRyYXdhbEZvciwgYXNzZXRBbW91bnQ6IHRoaXMud2l0aGRyYXdBbW91bnRzKGtleSkudmFsdWUgfSkKCWl0eG5fYmVnaW4KCWludGMgNSAvLyAgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvQVJDODRCcmlkZ2UuYWxnby50czoxNDEKCS8vIHhmZXJBc3NldDogYXNhCglmcmFtZV9kaWcgLTEgLy8gYXNhOiBBc3NldElECglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIGNvbnRyYWN0cy9BUkM4NEJyaWRnZS5hbGdvLnRzOjE0MQoJLy8gYXNzZXRSZWNlaXZlcjogd2l0aGRyYXdhbEZvcgoJZnJhbWVfZGlnIC0yIC8vIHdpdGhkcmF3YWxGb3I6IEFkZHJlc3MKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIGNvbnRyYWN0cy9BUkM4NEJyaWRnZS5hbGdvLnRzOjE0MQoJLy8gYXNzZXRBbW91bnQ6IHRoaXMud2l0aGRyYXdBbW91bnRzKGtleSkudmFsdWUKCWZyYW1lX2RpZyAwIC8vIGtleTogQXNhQW5kQWRkcgoJYm94X2dldAoKCS8vIGJveCB2YWx1ZSBkb2VzIG5vdCBleGlzdDogdGhpcy53aXRoZHJhd0Ftb3VudHMoa2V5KS52YWx1ZQoJYXNzZXJ0CglidG9pCglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAwIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0cy9BUkM4NEJyaWRnZS5hbGdvLnRzOjE0MgoJLy8gdGhpcy53aXRoZHJhd0Ftb3VudHMoa2V5KS5kZWxldGUoKQoJZnJhbWVfZGlnIDAgLy8ga2V5OiBBc2FBbmRBZGRyCglib3hfZGVsCglyZXRzdWIKCipjcmVhdGVfTm9PcDoKCXB1c2hieXRlcyAweDk3M2I2MTZmIC8vIG1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24odWludDY0KXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNyZWF0ZSBOb09wCgllcnIKCipjYWxsX05vT3A6CglwdXNoYnl0ZXMgMHhiMjgxYTU2ZCAvLyBtZXRob2QgIm9wdEluVG9Bc2EodWludDY0KXZvaWQiCglwdXNoYnl0ZXMgMHhlNGJjZmMyZiAvLyBtZXRob2QgImFzYVRvQXJjODQoYXhmZXIsYWRkcmVzcykodWludDY0LHVpbnQ2NCkiCglwdXNoYnl0ZXMgMHg0ODBiZmJlZSAvLyBtZXRob2QgImFyYzg0VG9Bc2EoYXBwbCx1aW50NjQsYWRkcmVzcyl1aW50NjQiCglwdXNoYnl0ZXMgMHhmNGE0MTNlMyAvLyBtZXRob2QgIndpdGhkcmF3QXNhKHVpbnQ2NCxhZGRyZXNzKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX29wdEluVG9Bc2EgKmFiaV9yb3V0ZV9hc2FUb0FyYzg0ICphYmlfcm91dGVfYXJjODRUb0FzYSAqYWJpX3JvdXRlX3dpdGhkcmF3QXNhCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgTm9PcAoJZXJy","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiAIAAEIBlAEIEgmCAADYXNhA2FwcAdkYXRhQXBwCmNvbGxlY3Rpb24IAAAAAAAAAAAEFR98dQT3ZBIcMRgUJQsxGQiNDAOQAAAAAAAAAAAAAAOCAAAAAAAAAAAAAAA2GgEXiAACI0OKAQAri/9nJwSxJbIQgAQ4pv5zshqL/7IYMgqyGoAI//////////+yGiKyAbO0OyMJxTpXBAAXZ4k2GgEXiAACI0OKAQCxIQWyEIv/shEishIyCrIUIrIBs4knBjYaAUkVIQYSRDEWIwlJOBAhBRJEiAAEULAjQ4oCAShHBIv/OBQyChJEi/84EYwAKYv/OBEWUL1MSBRBAJqxJbIQgASveEeWshorZLIYJwRkFrIaiwBxBEiAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUElXIAAoqERXACCLAHEDSCcFUElXCAAoqERXAAhQiwBxAEgWUIsAcQFIFlAyClAnBVCyGiKyAbO0OyMJxTpXBAAXjAGLARYrZBZQjAIpiwAWUIsCvyqLAlCLABa/KYsAFlCMA7ElshAnB7IaJCQpiwAWUE4CuheyGCKyAbO0OyMJxTpXBAAXjASxJbIQgAQvc9eNshqLBLIYJCQpiwAWUE4CuhcWshoiJCmLABZQTgK6FxYyClCL/lCL/zgSFlBJFSEEChZXBgJMULIaIrIBs4sDvkSMAEYEiScGNhoCSRUhBhJENhoBFzEWIwlJOBAlEkSIAAUWULAjQ4oDAShHB4v/ORoCVwIAjACL/owBiwA1/yKLASEECwiBKAg0/0whBlgyChJEi/85GgEXjAKL/zgYsSWyECcHshqLArIYIrIBs7Q7IwnFOlcEABcSRIsANf8iiwEhBAsIIgg0/0wkWBcWiwIWUIwDKosDUL1MSBRBAHqxJbIQgAQTF/mTshqLA1cICBeyGIsANf8iiwEhBAsIIgg0/0wkWBcWshoisgGztDsjCcU6VwQAjASxgQOyEIsEVygIF7IiiwRXMAgXsiOLBFcAILImiwRXIAiyJTIKsioisgGztDy0PIwFKosDUIsFFr8piwUWUIsDvyqLA1C+RBeMBov9iwZwAExIFEEAOIsGFov9UIwHiwe9TEgUQQAFiwckuUiLB75EF4sANf8iiwEhBAsIIQcINP9MJFgXCIsHTBa/QgAnsSEFshCLBrIRi/2yFIsANf8iiwEhBAsIIQcINP9MJFgXshIisgGziwaMAEYHiTYaAkkVIQYSRDYaAReIAAIjQ4oCACiL/xaL/lCMALEhBbIQi/+yEYv+shSLAL5EF7ISIrIBs4sAvImABJc7YW82GgCOAfxyAIAEsoGlbYAE5Lz8L4AESAv77oAE9KQT4zYaAI4E/I78r/4E/5MA","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":4,"minor":0,"patch":2,"commitHash":"6b940281"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type Arc84Id = {
  id: bigint,
  dataApp: bigint
}


/**
 * Converts the ABI tuple representation of a Arc84Id to the struct representation
 */
export function Arc84IdFromTuple(abiTuple: [bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.Arc84Id, APP_SPEC.structs) as Arc84Id
}

export type AsaAndAddr = {
  asa: bigint,
  address: string
}


/**
 * Converts the ABI tuple representation of a AsaAndAddr to the struct representation
 */
export function AsaAndAddrFromTuple(abiTuple: [bigint, string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.AsaAndAddr, APP_SPEC.structs) as AsaAndAddr
}

/**
 * The argument types for the Arc84Bridge contract
 */
export type Arc84BridgeArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(uint64)void': {
      dataApp: bigint | number
    }
    'optInToAsa(uint64)void': {
      asa: bigint | number
    }
    'asaToArc84(axfer,address)(uint64,uint64)': {
      axfer: AppMethodCallTransactionArgument
      receiver: string
    }
    'arc84ToAsa(appl,uint64,address)uint64': {
      xferCall: AppMethodCallTransactionArgument
      xferIndex: bigint | number
      receiver: string
    }
    'withdrawAsa(uint64,address)void': {
      asa: bigint | number
      withdrawalFor: string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(uint64)void': [dataApp: bigint | number]
    'optInToAsa(uint64)void': [asa: bigint | number]
    'asaToArc84(axfer,address)(uint64,uint64)': [axfer: AppMethodCallTransactionArgument, receiver: string]
    'arc84ToAsa(appl,uint64,address)uint64': [xferCall: AppMethodCallTransactionArgument, xferIndex: bigint | number, receiver: string]
    'withdrawAsa(uint64,address)void': [asa: bigint | number, withdrawalFor: string]
  }
}

/**
 * The return type for each method
 */
export type Arc84BridgeReturns = {
  'createApplication(uint64)void': void
  'optInToAsa(uint64)void': void
  'asaToArc84(axfer,address)(uint64,uint64)': Arc84Id
  'arc84ToAsa(appl,uint64,address)uint64': bigint
  'withdrawAsa(uint64,address)void': void
}

/**
 * Defines the types of available calls and state of the Arc84Bridge smart contract.
 */
export type Arc84BridgeTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64)void' | 'createApplication', {
      argsObj: Arc84BridgeArgs['obj']['createApplication(uint64)void']
      argsTuple: Arc84BridgeArgs['tuple']['createApplication(uint64)void']
      returns: Arc84BridgeReturns['createApplication(uint64)void']
    }>
    & Record<'optInToAsa(uint64)void' | 'optInToAsa', {
      argsObj: Arc84BridgeArgs['obj']['optInToAsa(uint64)void']
      argsTuple: Arc84BridgeArgs['tuple']['optInToAsa(uint64)void']
      returns: Arc84BridgeReturns['optInToAsa(uint64)void']
    }>
    & Record<'asaToArc84(axfer,address)(uint64,uint64)' | 'asaToArc84', {
      argsObj: Arc84BridgeArgs['obj']['asaToArc84(axfer,address)(uint64,uint64)']
      argsTuple: Arc84BridgeArgs['tuple']['asaToArc84(axfer,address)(uint64,uint64)']
      returns: Arc84BridgeReturns['asaToArc84(axfer,address)(uint64,uint64)']
    }>
    & Record<'arc84ToAsa(appl,uint64,address)uint64' | 'arc84ToAsa', {
      argsObj: Arc84BridgeArgs['obj']['arc84ToAsa(appl,uint64,address)uint64']
      argsTuple: Arc84BridgeArgs['tuple']['arc84ToAsa(appl,uint64,address)uint64']
      returns: Arc84BridgeReturns['arc84ToAsa(appl,uint64,address)uint64']
    }>
    & Record<'withdrawAsa(uint64,address)void' | 'withdrawAsa', {
      argsObj: Arc84BridgeArgs['obj']['withdrawAsa(uint64,address)void']
      argsTuple: Arc84BridgeArgs['tuple']['withdrawAsa(uint64,address)void']
      returns: Arc84BridgeReturns['withdrawAsa(uint64,address)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        dataApp: bigint
        collection: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        asaToArc84Map: Map<bigint | number, Arc84Id>
        arc84ToAsaMap: Map<Arc84Id, bigint>
        withdrawAmounts: Map<AsaAndAddr, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type Arc84BridgeSignatures = keyof Arc84BridgeTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type Arc84BridgeNonVoidMethodSignatures = keyof Arc84BridgeTypes['methods'] extends infer T ? T extends keyof Arc84BridgeTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Arc84Bridge smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends Arc84BridgeSignatures> = Arc84BridgeTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Arc84Bridge smart contract to the method's return type
 */
export type MethodReturn<TSignature extends Arc84BridgeSignatures> = Arc84BridgeTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = Arc84BridgeTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = Arc84BridgeTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type Arc84BridgeCreateCallParams =
  | Expand<CallParams<Arc84BridgeArgs['obj']['createApplication(uint64)void'] | Arc84BridgeArgs['tuple']['createApplication(uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<Arc84BridgeArgs['obj']['createApplication(uint64)void'] | Arc84BridgeArgs['tuple']['createApplication(uint64)void']> & {method: 'createApplication(uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type Arc84BridgeDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: Arc84BridgeCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Arc84Bridge smart contract
 */
export abstract class Arc84BridgeParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends Arc84BridgeCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(uint64)void':
            return Arc84BridgeParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the ARC84Bridge smart contract using the createApplication(uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<Arc84BridgeArgs['obj']['createApplication(uint64)void'] | Arc84BridgeArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.dataApp],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the optInToAsa(uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToAsa(params: CallParams<Arc84BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc84BridgeArgs['tuple']['optInToAsa(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optInToAsa(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asa],
    }
  }
  /**
   * Constructs a no op call for the asaToArc84(axfer,address)(uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static asaToArc84(params: CallParams<Arc84BridgeArgs['obj']['asaToArc84(axfer,address)(uint64,uint64)'] | Arc84BridgeArgs['tuple']['asaToArc84(axfer,address)(uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'asaToArc84(axfer,address)(uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.axfer, params.args.receiver],
    }
  }
  /**
   * Constructs a no op call for the arc84ToAsa(appl,uint64,address)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static arc84ToAsa(params: CallParams<Arc84BridgeArgs['obj']['arc84ToAsa(appl,uint64,address)uint64'] | Arc84BridgeArgs['tuple']['arc84ToAsa(appl,uint64,address)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'arc84ToAsa(appl,uint64,address)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.xferCall, params.args.xferIndex, params.args.receiver],
    }
  }
  /**
   * Constructs a no op call for the withdrawAsa(uint64,address)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdrawAsa(params: CallParams<Arc84BridgeArgs['obj']['withdrawAsa(uint64,address)void'] | Arc84BridgeArgs['tuple']['withdrawAsa(uint64,address)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdrawAsa(uint64,address)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asa, params.args.withdrawalFor],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ARC84Bridge smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class Arc84BridgeFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `Arc84BridgeFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new Arc84BridgeClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new Arc84BridgeClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ARC84Bridge smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: Arc84BridgeDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? Arc84BridgeParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (Arc84BridgeCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new Arc84BridgeClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC84Bridge smart contract using the createApplication(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<Arc84BridgeArgs['obj']['createApplication(uint64)void'] | Arc84BridgeArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(Arc84BridgeParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC84Bridge smart contract using the createApplication(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<Arc84BridgeArgs['obj']['createApplication(uint64)void'] | Arc84BridgeArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(Arc84BridgeParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ARC84Bridge smart contract using an ABI method call using the createApplication(uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<Arc84BridgeArgs['obj']['createApplication(uint64)void'] | Arc84BridgeArgs['tuple']['createApplication(uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(Arc84BridgeParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | Arc84BridgeReturns['createApplication(uint64)void']) }, appClient: new Arc84BridgeClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ARC84Bridge smart contract
 */
export class Arc84BridgeClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `Arc84BridgeClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Arc84Bridge app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `Arc84BridgeClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends Arc84BridgeNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `Arc84BridgeClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<Arc84BridgeClient> {
    return new Arc84BridgeClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `Arc84BridgeClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<Arc84BridgeClient> {
    return new Arc84BridgeClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ARC84Bridge smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC84Bridge smart contract using the `optInToAsa(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToAsa: (params: CallParams<Arc84BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc84BridgeArgs['tuple']['optInToAsa(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc84BridgeParamsFactory.optInToAsa(params))
    },

    /**
     * Makes a call to the ARC84Bridge smart contract using the `asaToArc84(axfer,address)(uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    asaToArc84: (params: CallParams<Arc84BridgeArgs['obj']['asaToArc84(axfer,address)(uint64,uint64)'] | Arc84BridgeArgs['tuple']['asaToArc84(axfer,address)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc84BridgeParamsFactory.asaToArc84(params))
    },

    /**
     * Makes a call to the ARC84Bridge smart contract using the `arc84ToAsa(appl,uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    arc84ToAsa: (params: CallParams<Arc84BridgeArgs['obj']['arc84ToAsa(appl,uint64,address)uint64'] | Arc84BridgeArgs['tuple']['arc84ToAsa(appl,uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc84BridgeParamsFactory.arc84ToAsa(params))
    },

    /**
     * Makes a call to the ARC84Bridge smart contract using the `withdrawAsa(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdrawAsa: (params: CallParams<Arc84BridgeArgs['obj']['withdrawAsa(uint64,address)void'] | Arc84BridgeArgs['tuple']['withdrawAsa(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(Arc84BridgeParamsFactory.withdrawAsa(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ARC84Bridge smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC84Bridge smart contract using the `optInToAsa(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToAsa: (params: CallParams<Arc84BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc84BridgeArgs['tuple']['optInToAsa(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc84BridgeParamsFactory.optInToAsa(params))
    },

    /**
     * Makes a call to the ARC84Bridge smart contract using the `asaToArc84(axfer,address)(uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    asaToArc84: (params: CallParams<Arc84BridgeArgs['obj']['asaToArc84(axfer,address)(uint64,uint64)'] | Arc84BridgeArgs['tuple']['asaToArc84(axfer,address)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc84BridgeParamsFactory.asaToArc84(params))
    },

    /**
     * Makes a call to the ARC84Bridge smart contract using the `arc84ToAsa(appl,uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    arc84ToAsa: (params: CallParams<Arc84BridgeArgs['obj']['arc84ToAsa(appl,uint64,address)uint64'] | Arc84BridgeArgs['tuple']['arc84ToAsa(appl,uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc84BridgeParamsFactory.arc84ToAsa(params))
    },

    /**
     * Makes a call to the ARC84Bridge smart contract using the `withdrawAsa(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdrawAsa: (params: CallParams<Arc84BridgeArgs['obj']['withdrawAsa(uint64,address)void'] | Arc84BridgeArgs['tuple']['withdrawAsa(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(Arc84BridgeParamsFactory.withdrawAsa(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ARC84Bridge smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ARC84Bridge smart contract using the `optInToAsa(uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToAsa: async (params: CallParams<Arc84BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc84BridgeArgs['tuple']['optInToAsa(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc84BridgeParamsFactory.optInToAsa(params))
      return {...result, return: result.return as unknown as (undefined | Arc84BridgeReturns['optInToAsa(uint64)void'])}
    },

    /**
     * Makes a call to the ARC84Bridge smart contract using the `asaToArc84(axfer,address)(uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    asaToArc84: async (params: CallParams<Arc84BridgeArgs['obj']['asaToArc84(axfer,address)(uint64,uint64)'] | Arc84BridgeArgs['tuple']['asaToArc84(axfer,address)(uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc84BridgeParamsFactory.asaToArc84(params))
      return {...result, return: result.return as unknown as (undefined | Arc84BridgeReturns['asaToArc84(axfer,address)(uint64,uint64)'])}
    },

    /**
     * Makes a call to the ARC84Bridge smart contract using the `arc84ToAsa(appl,uint64,address)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    arc84ToAsa: async (params: CallParams<Arc84BridgeArgs['obj']['arc84ToAsa(appl,uint64,address)uint64'] | Arc84BridgeArgs['tuple']['arc84ToAsa(appl,uint64,address)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc84BridgeParamsFactory.arc84ToAsa(params))
      return {...result, return: result.return as unknown as (undefined | Arc84BridgeReturns['arc84ToAsa(appl,uint64,address)uint64'])}
    },

    /**
     * Makes a call to the ARC84Bridge smart contract using the `withdrawAsa(uint64,address)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdrawAsa: async (params: CallParams<Arc84BridgeArgs['obj']['withdrawAsa(uint64,address)void'] | Arc84BridgeArgs['tuple']['withdrawAsa(uint64,address)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(Arc84BridgeParamsFactory.withdrawAsa(params))
      return {...result, return: result.return as unknown as (undefined | Arc84BridgeReturns['withdrawAsa(uint64,address)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new Arc84BridgeClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current ARC84Bridge app
   */
  state = {
    /**
     * Methods to access global state for the current ARC84Bridge app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          dataApp: result.dataApp,
          collection: result.collection,
        }
      },
      /**
       * Get the current value of the dataApp key in global state
       */
      dataApp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("dataApp")) as bigint | undefined },
      /**
       * Get the current value of the collection key in global state
       */
      collection: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("collection")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current ARC84Bridge app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the asaToArc84Map map in box state
       */
      asaToArc84Map: {
        /**
         * Get all current values of the asaToArc84Map map in box state
         */
        getMap: async (): Promise<Map<bigint, Arc84Id>> => { return (await this.appClient.state.box.getMap("asaToArc84Map")) as Map<bigint, Arc84Id> },
        /**
         * Get a current value of the asaToArc84Map map by key from box state
         */
        value: async (key: bigint | number): Promise<Arc84Id | undefined> => { return await this.appClient.state.box.getMapValue("asaToArc84Map", key) as Arc84Id | undefined },
      },
      /**
       * Get values from the arc84ToAsaMap map in box state
       */
      arc84ToAsaMap: {
        /**
         * Get all current values of the arc84ToAsaMap map in box state
         */
        getMap: async (): Promise<Map<Arc84Id, bigint>> => { return (await this.appClient.state.box.getMap("arc84ToAsaMap")) as Map<Arc84Id, bigint> },
        /**
         * Get a current value of the arc84ToAsaMap map by key from box state
         */
        value: async (key: Arc84Id): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("arc84ToAsaMap", key) as bigint | undefined },
      },
      /**
       * Get values from the withdrawAmounts map in box state
       */
      withdrawAmounts: {
        /**
         * Get all current values of the withdrawAmounts map in box state
         */
        getMap: async (): Promise<Map<AsaAndAddr, bigint>> => { return (await this.appClient.state.box.getMap("withdrawAmounts")) as Map<AsaAndAddr, bigint> },
        /**
         * Get a current value of the withdrawAmounts map by key from box state
         */
        value: async (key: AsaAndAddr): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("withdrawAmounts", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): Arc84BridgeComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a optInToAsa(uint64)void method call against the ARC84Bridge contract
       */
      optInToAsa(params: CallParams<Arc84BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc84BridgeArgs['tuple']['optInToAsa(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToAsa(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a asaToArc84(axfer,address)(uint64,uint64) method call against the ARC84Bridge contract
       */
      asaToArc84(params: CallParams<Arc84BridgeArgs['obj']['asaToArc84(axfer,address)(uint64,uint64)'] | Arc84BridgeArgs['tuple']['asaToArc84(axfer,address)(uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.asaToArc84(params)))
        resultMappers.push((v) => client.decodeReturnValue('asaToArc84(axfer,address)(uint64,uint64)', v))
        return this
      },
      /**
       * Add a arc84ToAsa(appl,uint64,address)uint64 method call against the ARC84Bridge contract
       */
      arc84ToAsa(params: CallParams<Arc84BridgeArgs['obj']['arc84ToAsa(appl,uint64,address)uint64'] | Arc84BridgeArgs['tuple']['arc84ToAsa(appl,uint64,address)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.arc84ToAsa(params)))
        resultMappers.push((v) => client.decodeReturnValue('arc84ToAsa(appl,uint64,address)uint64', v))
        return this
      },
      /**
       * Add a withdrawAsa(uint64,address)void method call against the ARC84Bridge contract
       */
      withdrawAsa(params: CallParams<Arc84BridgeArgs['obj']['withdrawAsa(uint64,address)void'] | Arc84BridgeArgs['tuple']['withdrawAsa(uint64,address)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdrawAsa(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the ARC84Bridge contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as Arc84BridgeComposer
  }
}
export type Arc84BridgeComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the optInToAsa(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsa(params?: CallParams<Arc84BridgeArgs['obj']['optInToAsa(uint64)void'] | Arc84BridgeArgs['tuple']['optInToAsa(uint64)void']>): Arc84BridgeComposer<[...TReturns, Arc84BridgeReturns['optInToAsa(uint64)void'] | undefined]>

  /**
   * Calls the asaToArc84(axfer,address)(uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  asaToArc84(params?: CallParams<Arc84BridgeArgs['obj']['asaToArc84(axfer,address)(uint64,uint64)'] | Arc84BridgeArgs['tuple']['asaToArc84(axfer,address)(uint64,uint64)']>): Arc84BridgeComposer<[...TReturns, Arc84BridgeReturns['asaToArc84(axfer,address)(uint64,uint64)'] | undefined]>

  /**
   * Calls the arc84ToAsa(appl,uint64,address)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  arc84ToAsa(params?: CallParams<Arc84BridgeArgs['obj']['arc84ToAsa(appl,uint64,address)uint64'] | Arc84BridgeArgs['tuple']['arc84ToAsa(appl,uint64,address)uint64']>): Arc84BridgeComposer<[...TReturns, Arc84BridgeReturns['arc84ToAsa(appl,uint64,address)uint64'] | undefined]>

  /**
   * Calls the withdrawAsa(uint64,address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdrawAsa(params?: CallParams<Arc84BridgeArgs['obj']['withdrawAsa(uint64,address)void'] | Arc84BridgeArgs['tuple']['withdrawAsa(uint64,address)void']>): Arc84BridgeComposer<[...TReturns, Arc84BridgeReturns['withdrawAsa(uint64,address)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ARC84Bridge smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): Arc84BridgeComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): Arc84BridgeComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<Arc84BridgeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<Arc84BridgeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<Arc84BridgeComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<Arc84BridgeComposerResults<TReturns>>
}
export type Arc84BridgeComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

